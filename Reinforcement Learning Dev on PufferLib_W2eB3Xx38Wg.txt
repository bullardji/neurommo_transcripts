Kind: captions
Language: en
We are back. Hi. Um, goal finish two
We are back. Hi. Um, goal finish two
Envy factors in the next hour and 40
minutes. It looks like breakout does a
minutes. It looks like breakout does a
thing.
thing.
Cool.
Um, switch
Um, switch
view. Get to work.
I think that what we're going to do in
I think that what we're going to do in
order to have the levels be
order to have the levels be
made. Something like
this. Uh, now these do have to be freed
this. Uh, now these do have to be freed
as well, don't
as well, don't
they? I think these do have to be
they? I think these do have to be
freed. A little awkward.
We're not going to have any way to free
We're not going to have any way to free
these, are
we? Well, we'll just do this for now.
How do I do this
How do I do this
in the original
code? I think I just do
code? I think I just do
like int num.
Okay, so that gives you puzzle
Okay, so that gives you puzzle
state. Don't need to allocate the M's or
state. Don't need to allocate the M's or
the
logs. You knit all the M's and then
what? Intal height max
moves. Why do
you init puzzle state?
the maps. Okay. So this
is this is different from initializing
is this is different from initializing
the end. So we can actually do this. So
the end. So we can actually do this. So
for we
for we
do in goal
do in goal
height
height
rand% 9 +
rand% 9 +
5. No, it's not rand. That's not how it
5. No, it's not rand. That's not how it
works at all. Uh this should be four,
works at all. Uh this should be four,
right? And
I is exclusive I
I is exclusive I
believe. So then this should be fine. So
believe. So then this should be fine. So
this is going to be five, six, seven,
this is going to be five, six, seven,
eight, whatever. Uh min
moves we do in it
level puzzle state level. This is good.
So now we have this
done. We don't need any of
this. And now we have to
this. And now we have to
do by
object levels.
handle it by
handle it by
pack. I could return it as a tpple, but
pack. I could return it as a tpple, but
I think we'll return this as a dict.
And then we
And then we
do turn it. So now we can return a
do turn it. So now we can return a
pointer to this
dictionary. Get rid of all this
crap. And then init still needs to have
this handle object. Oh, I can do it this
this handle object. Oh, I can do it this
way. So, this
way. So, this
is handle
is handle
object bars
object bars
state. We can call this state. Yeah.
level state
puzzles. Let's do
puzzles. Oh, no. It can be state,
puzzles. Oh, no. It can be state,
right? Yeah. Yeah. Yeah. This can be
right? Yeah. Yeah. Yeah. This can be
state.
State levels handle. And then this is
puzzles puzzles
handle. Okay. So now we have the
state and then we have to do
state and then we have to do
[Music]
by the levels
handle and then we have what is it?
handle and then we have what is it?
Level
Level
handle level star
levels.
levels.
Okay. And then we can pretty much just
Okay. And then we can pretty much just
tab this because this is basic.
Let's see if this looks good.
Let's see if this looks good.
So, we unpack
So, we unpack
levels. We unpack it to void
pointer. That should be reasonable
pointer. That should be reasonable
enough. Do end
enough. Do end
levels and
puzzles. Okay.
So this is now your basic
inette.
And I don't see the stream up. Hang
on. Okay, we are live. Good.
logs perf score return length. Perfect.
logs perf score return length. Perfect.
Doesn't have anything that we need to
Doesn't have anything that we need to
worry
worry
about. So, this is everything
about. So, this is everything
here. And now all we need to do is end
here. And now all we need to do is end
puzzles and
levels. So, we'll do like
levels. So, we'll do like
Level star
Level star
level star all
level star all
levels. Puzzle state star all
puzzles.
Okay. And then int num levels like
Okay. And then int num levels like
this. And now I believe on
this. And now I believe on
reset. Yeah, this doesn't get called
anywhere. So what happens is when it's
anywhere. So what happens is when it's
done, they call list, right? And on
done, they call list, right? And on
reset, it's actually pretty
reset, it's actually pretty
similar. So I think what we're going to
similar. So I think what we're going to
do
I'm feeling good actually. Let's let's
I'm feeling good actually. Let's let's
just knock this out right
just knock this out right
now. Okay, so we just call set puzzle.
now. Okay, so we just call set puzzle.
We need the index, right? Int
We need the index, right? Int
index
equals rand
equals rand
percent and num
levels. We'll call it numbum
maps.
maps.
Okay. And then now we will set the
Okay. And then now we will set the
puzzle from the all puzzles
puzzle from the all puzzles
buffer. And now literally all we have to
buffer. And now literally all we have to
do done. We look for
dun. This should be getting set to one
dun. This should be getting set to one
somewhere. Doesn't seem to be getting
somewhere. Doesn't seem to be getting
set to
one.
Huh. Okay.
So where's
So where's
Dun's done equals C step. Ah okay. So
Dun's done equals C step. Ah okay. So
it's the return of
Cstep. I believe this needs to be a
void. So now instead of doing this, this
void. So now instead of doing this, this
is just going to be a C reset.
And then this is a simple
And then this is a simple
return. C
return. C
reset. This is
reset. This is
a
reset.
Boom. And now this should load random
Boom. And now this should load random
levels.
levels.
So the only thing is we have to adjust
So the only thing is we have to adjust
all of this
logging because of the new log
logging because of the new log
format. Delete all that.
Goodbye log log
Goodbye log log
uh log
buffer. I think the end log is actually
buffer. I think the end log is actually
really easy, isn't
it? Don't need to zero the
log. I guess there's episode return,
right? We have
tick. Okay.
But we need to have like a few of
But we need to have like a few of
these variables, I believe.
Right. Where's the ad log? I deleted
Right. Where's the ad log? I deleted
it. Well, no big deal. We'll just add it
it. Well, no big deal. We'll just add it
back. But with uh it's going to be
back. But with uh it's going to be
substantially different anyways.
substantially different anyways.
We'll just
We'll just
do void add
do void add
log and then we'll
log and then we'll
do C tower climb and then this can
take. We can just do
N
N
log
Earth and just do log buffer maybe.
Okay. So now we have our log
buffer. This is
buffer. This is
N buffer. Oops.
N buffer. Oops.
It's actually just end
buffer. Very
clean.
Okay. Add log n.
Perfect. And then we also have was it
Perfect. And then we also have was it
free pre-initialize becomes C close.
Okay. So now we have to make this thing
Okay. So now we have to make this thing
work. Oh wait, we also have the client,
work. Oh wait, we also have the client,
right? Client is not going to be in this
right? Client is not going to be in this
strct. So we
strct. So we
do client star
do client star
client in there. Make
client. Yep.
client. Yep.
We do
if
client new API shenanigans. All
client new API shenanigans. All
right. Uh, we also need the C
right. Uh, we also need the C
file. Hey, look at all that Ford path
file. Hey, look at all that Ford path
shenanigans. Poor Spencer. I made him do
shenanigans. Poor Spencer. I made him do
all this.
n random
n random
level.
level.
Okay.
Um I think you have to reset
Um I think you have to reset
here. All
right, we have some
bugs. This needs to be forward declared.
plant the
plant the
heck.
[Music]
Oh, end of clientity enable animation.
Oh, end of clientity enable animation.
Let's try that.
We'll just do
client. We'll just do it this
client. We'll just do it this
way. Okay. Okay. And now we have C step
done
plus+. This is now incorporated
plus+. This is now incorporated
into the end itself.
This runs a Perf
This runs a Perf
test does get a division by
zero. Grand percent env.h
H. This is random
level. Mitch random level.
This is
allocate. Okay, now this runs a PF
allocate. Okay, now this runs a PF
test. We still have some null null
test. We still have some null null
pointer
pointer
shenanigans because you're intended to
shenanigans because you're intended to
generate
generate
some puzzle states outside. So, we're
some puzzle states outside. So, we're
going to just
try to power our climb. D
This is running demo not perf test.
This is running demo not perf test.
Good. So what we're supposed to
do
do
and
and
okay now we have this and then we do
okay now we have this and then we do
like so
like so
and maps.
Undeclared.
Third. Yo.
Third. Yo.
Okay. I don't know why it takes so long.
That's a good
policy.
Holy. Hey, Weston. This is Spencer's
Holy. Hey, Weston. This is Spencer's
policy loaded on his
end. This actually looks really good.
end. This actually looks really good.
So, I think that there's just some jank
So, I think that there's just some jank
in the Python version.
is there an anti-aliasing
option. I believe we did that in
option. I believe we did that in
Impulse wars,
right? That config
flags. Oh yeah, he already has
flags. Oh yeah, he already has
it.
Fuel. It's choosing left, right, up,
Fuel. It's choosing left, right, up,
push. It's a little more complicated
push. It's a little more complicated
than that. It's uh it's based off of
than that. It's uh it's based off of
like an actual puzzle game, a weird
like an actual puzzle game, a weird
Japanese puzzle game. Um you can pull
Japanese puzzle game. Um you can pull
blocks, you can push balls, you can hang
blocks, you can push balls, you can hang
off of ledges, you can climb blocks,
off of ledges, you can climb blocks,
bunch of
stuff is quite
cool. Now I believe this one
cool. Now I believe this one
[Music]
[Music]
has missing
has missing
semicolons. All
right. So these are all the things that
right. So these are all the things that
uh the init function needs that we have
uh the init function needs that we have
not yet
not yet
set. So this here
M num
maps.
Boom. This does not need a nit grid.
Boom. This does not need a nit grid.
This does need a different in it, I
believe. Nit level. No. Nit puzzle
believe. Nit level. No. Nit puzzle
state. It is what we want. Just want
it. And unpacks everything else. And
it. And unpacks everything else. And
then this needs to be all
then this needs to be all
levels and all
puzzles. We will see if we can get this
puzzles. We will see if we can get this
thing to compile and work.
No member name terminals. We can fix
No member name terminals. We can fix
that. Actually, I think dun this has dun
that. Actually, I think dun this has dun
as well, right? So, we have to do an s
as well, right? So, we have to do an s
slashdun slash
terminals and
then
then
sanations. Try it again.
sanations. Try it again.
The goal is to get uh all the M
The goal is to get uh all the M
supported
today except for Impulse Wars because
today except for Impulse Wars because
that impulse wars is a
that impulse wars is a
nightmare. Uh everything else should be
fine. Be like, "Hey, Captain, I have
fine. Be like, "Hey, Captain, I have
every end of ported but yours. Help.
every end of ported but yours. Help.
Please
port. I will help you do it.
But train
uh probably sweep. This has got to be
uh probably sweep. This has got to be
sweep. And it's like metric equals
this. I didn't see that in the log.
I don't see levels completed anywhere
I don't see levels completed anywhere
either. Probably just score,
right? Okay. So, this thing
right? Okay. So, this thing
runs. It takes quite a while to gen
runs. It takes quite a while to gen
those levels.
those levels.
a little suspicious of that.
Okay, that is
PF. That is uh 80
something%. And it does seem to now be
something%. And it does seem to now be
crashing back
down. Possibly this thing needs some uh
down. Possibly this thing needs some uh
custom
custom
params.
params.
Possibly defaults are bad, but this does
Possibly defaults are bad, but this does
run. And at least initially it was
run. And at least initially it was
training.
Yeah. So, this is
Yeah. So, this is
definitely Oh, yeah. There we go. It's
definitely Oh, yeah. There we go. It's
just a little unstable. So, we'll have
just a little unstable. So, we'll have
to retune a little bit, but like 90%
instantly. I'm confident that's
correct. Going through and understanding
correct. Going through and understanding
how N binding. H works. Glad you made
how N binding. H works. Glad you made
it. So no more Syon. I am trying. It is
hard.
Of course, we're here to fix
RL. Took me about an hour total. So, we
RL. Took me about an hour total. So, we
got an hour 10 to do
got an hour 10 to do
MOA, which may be a little ambitious,
MOA, which may be a little ambitious,
but at least it's my own code, so
but at least it's my own code, so
hopefully I know how it works.
So this is Moa for anyone who hasn't
So this is Moa for anyone who hasn't
seen it. It is a miniature
version. It is a miniature version of
version. It is a miniature version of
like OpenAI 5
like OpenAI 5
Dota Dota inspired at least.
There we
go. You have
go. You have
skills. You have minions. You have
skills. You have minions. You have
creeps. You've got towers, which are
creeps. You've got towers, which are
stars. Got all sorts of things.
know if the uh the AoE is not rendering
know if the uh the AoE is not rendering
or
what. The AoE does not seem to be
what. The AoE does not seem to be
working, which is a little
working, which is a little
odd for that like one specific thing to
odd for that like one specific thing to
not
not
work. But hey, that's okay. We will port
this last thing in the extensions path.
this last thing in the extensions path.
Once this goes away, Syon is done. I
Once this goes away, Syon is done. I
guess technically we have like one or
guess technically we have like one or
two all small other tests that use Syon,
two all small other tests that use Syon,
but getting rid of it very quickly.
There's so much freaking
There's so much freaking
code and so much code. Now, I believe
code and so much code. Now, I believe
the one thing that's tough here is the
the one thing that's tough here is the
shared map
shared map
initialization. Um, I believe that's a
initialization. Um, I believe that's a
little tough.
Yeah. So, right
here, this is the only thing that's
hard. And actually, I think that we kind
hard. And actually, I think that we kind
of just do this pretty easily.
We kind of just do this pretty damn
We kind of just do this pretty damn
easily,
huh? Like this doesn't even need any
huh? Like this doesn't even need any
args. It's literally
just Oh, well crap. It's a numpy file.
just Oh, well crap. It's a numpy file.
Um, we have to write that f. We have to
Um, we have to write that f. We have to
read from that file I guess
right. Do I have any any like loading
right. Do I have any any like loading
example code in
example code in
C? I could have sworn I had
some. Wait, we have it literally
here. We literally have it here.
here. We literally have it here.
Huh? Look at
that. Lovely. Boom.
Look at that. Now all we have to
Look at that. Now all we have to
do is put these into a pie duct, I
do is put these into a pie duct, I
guess.
So I object
So I object
star app buffer
handle binding stuff is basically copy
handle binding stuff is basically copy
paste and name the varss. Well, this is
paste and name the varss. Well, this is
a bit more complicated because I'm doing
a bit more complicated because I'm doing
fancy shared and netit
fancy shared and netit
stuff, right? So, this is specifically
stuff, right? So, this is specifically
this this thing is like 200 something
this this thing is like 200 something
megabytes. So, if I give each instance
megabytes. So, if I give each instance
of the environment one of these, you'll
of the environment one of these, you'll
out of memory your computer. So, what we
out of memory your computer. So, what we
do instead is we um we share this object
do instead is we um we share this object
across all instances of the N. So, that
across all instances of the N. So, that
requires a little bit of custom logic.
requires a little bit of custom logic.
That's all I'm doing. And I just I had
That's all I'm doing. And I just I had
like you needed to do this anyways for
like you needed to do this anyways for
the C demo. So it's very similar logic.
Okay, so this is literally it
Okay, so this is literally it
uh
return passing bars for your end.
return passing bars for your end.
Yes, it's very easy for your end.
Yes, it's very easy for your end.
We get into some shenanigans
We get into some shenanigans
here because the Python C API is kind of
ass. Yeah. Come on. Get your Sudoku in
ass. Yeah. Come on. Get your Sudoku in
chop. We got a release to go. Come
chop. We got a release to go. Come
on. Million step per second training
on. Million step per second training
minimum. Call it 2
minimum. Call it 2
million. Hurry up or it's going to be 3
million. Hurry up or it's going to be 3
million.
Yeah.
Oh, you need the game map, don't
Oh, you need the game map, don't
you? Okay. Well, that's not that
bad. You need the game map.
This gives you handle
This gives you handle
object and then pi
object and then pi
object game handle.
And
then just auto complete and don't screw
then just auto complete and don't screw
it up for once. It's so basic. It's just
it up for once. It's so basic. It's just
so annoying. AI path buffer AI
so annoying. AI path buffer AI
path. Yeah, that should be
path. Yeah, that should be
it. Okay, so we do this AI path
loading and then we do init
moa game.
I'm inputting to the AI is the current
I'm inputting to the AI is the current
grid. Then I and then the starting
grid. Then I and then the starting
grid. Make second grid rather than
grid. Make second grid rather than
contain the
array. Wait, should
array. Wait, should
I make the second grid rather than
I make the second grid rather than
contain the array and make all
contain the array and make all
numbers
01? No. So, what you should do is you
01? No. So, what you should do is you
should
should
pass you should pass a 2D. You should
pass you should pass a 2D. You should
pass
pass
a Okay, look. This is what you should
a Okay, look. This is what you should
pass. You're going to get a quick lesson
pass. You're going to get a quick lesson
on OBS encoding.
on OBS encoding.
Right. So what you want to do is you
Right. So what you want to do is you
want to
want to
pass a 3D block of
numbers. Okay. And then this dimension
numbers. Okay. And then this dimension
here, this is the two channels. Okay. So
here, this is the two channels. Okay. So
like if you cut it like this, it has
like if you cut it like this, it has
two. And then
this whatever this is like nine and this
this whatever this is like nine and this
is nine.
is nine.
Okay, so you have your initial board
Okay, so you have your initial board
here and then you have your
here and then you have your
uh final board and then what you do is
uh final board and then what you do is
before you pass into the neural network
before you pass into the neural network
not in the end you do one
hot nine or actually it's 10 because
hot nine or actually it's 10 because
there are 10
there are 10
possibilities. I think it's it's zero
possibilities. I think it's it's zero
through nine, right? So there you go.
through nine, right? So there you go.
You don't want to hot encode it in the
You don't want to hot encode it in the
end. You want to hot encode it in uh the
end. You want to hot encode it in uh the
network because it improves uh data
network because it improves uh data
bandwidth. Um and that is only
bandwidth. Um and that is only
transmitting uh you also do it in char
transmitting uh you also do it in char
by the way like you can make this thing
by the way like you can make this thing
a char and then this is
a char and then this is
literally 162 bytes right 9 by9 by2 it's
literally 162 bytes right 9 by9 by2 it's
bytes which is the ob size and with that
bytes which is the ob size and with that
you should be able to hit um while coms
you should be able to hit um while coms
are kind of slow so I guess it depends
are kind of slow so I guess it depends
on the data format you end up using you
on the data format you end up using you
should be able to at least hit one or
should be able to at least hit one or
two million steps per second.
How many inputs? You would have total of
How many inputs? You would have total of
inputs if you're using a flat network.
inputs if you're using a flat network.
And then it's 161 but structured with a
comp 9 by 9 * 9 *
2 talks do not contain any technical
2 talks do not contain any technical
content. So I would hope it is some
content. So I would hope it is some
somewhat more useful than
that. Oh jeez. Yeah. Okay. Okay, this is
that. Oh jeez. Yeah. Okay. Okay, this is
going to
suck. Yeah, I forgot I had to do all
suck. Yeah, I forgot I had to do all
this
crap. Well, it's just the logging for
crap. Well, it's just the logging for
this kind of sucks. There's a lot of it.
Fine.
that. Okay. So, I think I can keep I can
that. Okay. So, I think I can keep I can
keep the player log structure.
Yeah, I can keep the player structure
Yeah, I can keep the player structure
and then all
this. So, this is going to all get moved
this. So, this is going to all get moved
to add log. This is add log.
Wait, hang
Wait, hang
on.
on.
Yes. And then
this this goes here.
Just take mobile star N.
Okay. So, these this part is chill. All
Okay. So, these this part is chill. All
right. This part is uh pretty chill.
So, in order to get all these damn
So, in order to get all these damn
metrics, the only way I can do
it like 200 lines of logs, isn't it?
Yeah, it's just going to be 200 lines of
Yeah, it's just going to be 200 lines of
logs.
I mean, I can just do one of them as an
example. This is not neural MMO.
example. This is not neural MMO.
Neuralarm MMO is
Neuralarm MMO is
easy, but do start the repo. It helps me
easy, but do start the repo. It helps me
out a lot.
Google fish.
Yes. I'm just going to do this first.
I'm just going to do like the first
agent cuz then after that I can
Mike. Okay. So, this is what needs to
Mike. Okay. So, this is what needs to
happen here.
So we delete all this
So we delete all this
garbage and this add log thing.
Then we have to
Then we have to
do
log.radiant. I misspelled radiant,
log.radiant. I misspelled radiant,
didn't I? Isn't it with an e?
It totally is,
right? Oh,
right? Oh,
no. Wait,
no. Wait,
what? Why were there a whole bunch of
what? Why were there a whole bunch of
results spelled with
results spelled with
E? Okay, I don't know why it looked the
E? Okay, I don't know why it looked the
word looked wrong to
word looked wrong to
me. Not spelled right.
So that's what I was hoping it would
So that's what I was hoping it would
just autocomplete all That's
Okay. So, that is the
Okay. So, that is the
initial. This actually gets rid of all
initial. This actually gets rid of all
this. So, uh there is going to end up
this. So, uh there is going to end up
being a ton of boiler plate on
being a ton of boiler plate on
this and this.
this and this.
But let's see if we can actually make
But let's see if we can actually make
this
this
thing. Ah, Wait, we have it has to
thing. Ah, Wait, we have it has to
go into the binding file as well because
go into the binding file as well because
of course it has to go into the freaking
of course it has to go into the freaking
binding file. Oh
binding file. Oh
left.
Whatever. Let's see if it
works. No, this was the only the special
works. No, this was the only the special
function we needed for mobile was just
function we needed for mobile was just
this little thing here.
this little thing here.
And like unpacking that was a pain, but
And like unpacking that was a pain, but
it's not that
This probably has to go
This probably has to go
below below mobile,
right? Is the speed of
right? Is the speed of
function using uh you don't need to
function using uh you don't need to
inline everything. That's kind of
dumb. You only need to inline
dumb. You only need to inline
like you should only be inlining stuff
like you should only be inlining stuff
if you like if you have a function that
if you like if you have a function that
you're calling that you know you're
you're calling that you know you're
calling a bajillion times in a loop.
Yeah, bet learns a thing
today. I'm surprised you actually know
today. I'm surprised you actually know
about that question. Usually people
about that question. Usually people
don't learn low-level stuff for a while.
Yeah, this one This is a pain to port.
long. Yep. Okay,
long. Yep. Okay,
good. We are
happy. You want me to ignore action
masking? Uh I thought Are we not
masking? Uh I thought Are we not
respawning cars, Spencer?
Oh, action. Wait, action
masking. Yeah. No, just Oh, for the new
masking. Yeah. No, just Oh, for the new
M. Yeah, just ignore the hell out of
M. Yeah, just ignore the hell out of
that and give it a small negative reward
that and give it a small negative reward
that you can
sweep. We'll crush SP3 even without ASP
sweep. We'll crush SP3 even without ASP
uh without action masking. Screw that.
uh without action masking. Screw that.
Action masking is a total pain in the
Action masking is a total pain in the
ass to implement efficiently as well.
ass to implement efficiently as well.
Like computing the action mask generally
Like computing the action mask generally
is really a slow operation. Like nah,
is really a slow operation. Like nah,
we're not doing
we're not doing
that. New M should be called digger.
that. New M should be called digger.
That is a terrible idea.
That is a terrible idea.
Bet. I think we'll call it terraform.
It's a bad idea for the same reason that
It's a bad idea for the same reason that
uh the Zigg programmers are very stupid
uh the Zigg programmers are very stupid
for calling themselves ziggers with a Z.
It's very easy to have a slip of the
It's very easy to have a slip of the
tongue with
that. Look, I told the Zig guys, all
that. Look, I told the Zig guys, all
right, they should call themselves
[Laughter]
Zigzagons because they write Zigg and
Zigzagons because they write Zigg and
they're a bunch of goons.
Circum
Circum
what? What was that? Circumloatory.
No, I know what the big word means. I
No, I know what the big word means. I
just Do you? Cuz I like you keep using
just Do you? Cuz I like you keep using
that word. I don't think you know what
that word. I don't think you know what
it means.
Go look up the word and see if you think
Go look up the word and see if you think
you used it correctly. If you're going
you used it correctly. If you're going
to be like, "Oh, big word hard, Josh.
Yes, exactly. Which has nothing to do
Yes, exactly. Which has nothing to do
with what I was saying
with what I was saying
originally. Did we move puffer yet? Yes,
originally. Did we move puffer yet? Yes,
it's in extensions. And uh
it's in extensions. And uh
I I probably didn't push the fix that
I I probably didn't push the fix that
moves that fixes the local build script.
moves that fixes the local build script.
Huh. I will do that because I fixed it
Huh. I will do that because I fixed it
in the build script as well. I just
in the build script as well. I just
think I forgot to push it.
The word you're looking for is
The word you're looking for is
malipropism.
that. Okay.
How did you predict my
How did you predict my
problem? I've been doing things a while.
problem? I've been doing things a while.
All
All
right. I know all. I see all. And I tell
right. I know all. I see all. And I tell
all for a price.
All right. Now, this runs locally
All right. Now, this runs locally
again. I don't know why this thing
again. I don't know why this thing
doesn't seem to like to use its Q. There
doesn't seem to like to use its Q. There
seems to be something screw with the
queue. I don't know what the heck
queue. I don't know what the heck
happened with uh with this thing's
queue. Now it works. Weird.
queue. Now it works. Weird.
Well, we'll leave this alone for
Well, we'll leave this alone for
now. Um, can we get it to
build? How user
build? How user
control user control
control user control
code? What do you mean user control
code? What do you mean user control
code?
user controlling. Oh yeah, any of the
user controlling. Oh yeah, any of the
M's literally they just all have like a
M's literally they just all have like a
hold shift. Like all the M's have like a
hold shift. Like all the M's have like a
hold shift. I think neural MMO is is
hold shift. I think neural MMO is is
just tap control. But yeah, in neural
just tap control. But yeah, in neural
MMO it's more complicated because I
MMO it's more complicated because I
wanted to give you a toggle instead of a
wanted to give you a toggle instead of a
clutch.
clutch.
But everything else is while you're
But everything else is while you're
holding shift your actions go instead of
holding shift your actions go instead of
the neural
net like all the M's on the website they
net like all the M's on the website they
say under them if you just hold shift
Well, there is logic required in the
Well, there is logic required in the
renderer, right? It doesn't really
renderer, right? It doesn't really
matter where you put it. You can put it
matter where you put it. You can put it
in the end or you can put it in the C
in the end or you can put it in the C
file, but you need to put like user
file, but you need to put like user
input controls, right?
Oh jeez, this entity DT type
garbage. Do I still use this? Please say
garbage. Do I still use this? Please say
I
I
don't. Okay, thank god I don't actually
don't. Okay, thank god I don't actually
use
it. I do not want to deal with that
it. I do not want to deal with that
right now.
Okay.
I bother you
enviously. I want this bloody M reported
enviously. I want this bloody M reported
today so I can be
today so I can be
done. The
goal is user control only
goal is user control only
possible. I think it's weird when you
possible. I think it's weird when you
run it through torch. I haven't messed
run it through torch. I haven't messed
with it much. it I it probably depends
with it much. it I it probably depends
where you put the code. If you put the
where you put the code. If you put the
code in the uh theh file and then I mess
code in the uh theh file and then I mess
with a couple of things, you can
with a couple of things, you can
probably have it
probably have it
be you can probably have it be done
locally. I haven't bothered making sure
locally. I haven't bothered making sure
it works, but you can probably do it.
It would be good in your case probably
It would be good in your case probably
to have something where like if you hold
to have something where like if you hold
shift they try to follow the mouse or
shift they try to follow the mouse or
something. That would be cool.
This is this
This is this
boom boom
boom agents be discretized for war
boom agents be discretized for war
death.
for Yes.
We're have to do the C close
thing. Is it render map?
That's probably this function render
game. This is going to be C
game. This is going to be C
render.
render.
Okay. And
Okay. And
then game
then game
renderer. This has to have in frame.
Okay. So we do like this
Okay. So we do like this
mobile
if is there a thing in Nick game. Oh,
if is there a thing in Nick game. Oh,
this is actually a
this is actually a
thing. Okay, so we
do 32 41 20
Probably this.
Frame is 12.
on it.
Great.
Damn.
We got to do the thing.
So, this is going to hopefully give us a
So, this is going to hopefully give us a
full stack tray. So, we'll just be able
full stack tray. So, we'll just be able
to
to
see exactly where it is egg faulting and
see exactly where it is egg faulting and
we'll be able to fix it and move
we'll be able to fix it and move
on. I like to fix this before
on. I like to fix this before
6 so I can just go get dinner call
6 so I can just go get dinner call
today. Get
rest. Go again tomorrow.
Do I not call this
function? I probably don't call this
state.
game
map. It's seaults on game map.
Really? Read file.
No, this is cal. This should be
allowed. This should be totally allowed.
game map handle.
bars game
map. When the heck would this
map. When the heck would this
be? Is this really correct? This is This
be? Is this really correct? This is This
is what we're
doing. I
guess no, this is here. This is fine.
guess no, this is here. This is fine.
The C code uses the same file. this uh
The C code uses the same file. this uh
same
same
function. Okay, so this erroring
function. Okay, so this erroring
in erroring in
in erroring in
ninet hang on it's erroring
inet is an ninet of
41 item string game map handle. Oh, you
41 item string game map handle. Oh, you
dummy.
I dictate
item. Let's go
grab Oh. Uh I don't Yeah, this tower
grab Oh. Uh I don't Yeah, this tower
climb thing is not right at
climb thing is not right at
all. It literally can't
all. It literally can't
be. Now I have to fix that as
well. But what we can do is
Let's see if this does it.
How do you unpack a dictionary?
Oh, wait. So, pi dict get
Oh, wait. So, pi dict get
item. So,
quarks. So, then this should be correct.
quarks. So, then this should be correct.
So, it should be get item
here. All
right. Well, I got to go get dinner.
right. Well, I got to go get dinner.
Um, I will be back probably after this
Um, I will be back probably after this
to finish this. So follow uh this on
to finish this. So follow uh this on
well start the repo to help me out

Kind: captions
Language: en
We are back. Hi. Um, goal finish two
We are back. Hi. Um, goal finish two
Envy factors in the next hour and 40
minutes. It looks like breakout does a
minutes. It looks like breakout does a
thing.
thing.
Cool.
Um, switch
Um, switch
view. Get to work.
I think that what we're going to do in
I think that what we're going to do in
order to have the levels be
order to have the levels be
made. Something like
this. Uh, now these do have to be freed
this. Uh, now these do have to be freed
as well, don't
as well, don't
they? I think these do have to be
they? I think these do have to be
freed. A little awkward.
We're not going to have any way to free
We're not going to have any way to free
these, are
we? Well, we'll just do this for now.
How do I do this
How do I do this
in the original
code? I think I just do
code? I think I just do
like int num.
Okay, so that gives you puzzle
Okay, so that gives you puzzle
state. Don't need to allocate the M's or
state. Don't need to allocate the M's or
the
logs. You knit all the M's and then
what? Intal height max
moves. Why do
you init puzzle state?
the maps. Okay. So this
is this is different from initializing
is this is different from initializing
the end. So we can actually do this. So
the end. So we can actually do this. So
for we
for we
do in goal
do in goal
height
height
rand% 9 +
rand% 9 +
5. No, it's not rand. That's not how it
5. No, it's not rand. That's not how it
works at all. Uh this should be four,
works at all. Uh this should be four,
right? And
I is exclusive I
I is exclusive I
believe. So then this should be fine. So
believe. So then this should be fine. So
this is going to be five, six, seven,
this is going to be five, six, seven,
eight, whatever. Uh min
moves we do in it
level puzzle state level. This is good.
So now we have this
done. We don't need any of
this. And now we have to
this. And now we have to
do by
object levels.
handle it by
handle it by
pack. I could return it as a tpple, but
pack. I could return it as a tpple, but
I think we'll return this as a dict.
And then we
And then we
do turn it. So now we can return a
do turn it. So now we can return a
pointer to this
dictionary. Get rid of all this
crap. And then init still needs to have
this handle object. Oh, I can do it this
this handle object. Oh, I can do it this
way. So, this
way. So, this
is handle
is handle
object bars
object bars
state. We can call this state. Yeah.
level state
puzzles. Let's do
puzzles. Oh, no. It can be state,
puzzles. Oh, no. It can be state,
right? Yeah. Yeah. Yeah. This can be
right? Yeah. Yeah. Yeah. This can be
state.
State levels handle. And then this is
puzzles puzzles
handle. Okay. So now we have the
state and then we have to do
state and then we have to do
[Music]
by the levels
handle and then we have what is it?
handle and then we have what is it?
Level
Level
handle level star
levels.
levels.
Okay. And then we can pretty much just
Okay. And then we can pretty much just
tab this because this is basic.
Let's see if this looks good.
Let's see if this looks good.
So, we unpack
So, we unpack
levels. We unpack it to void
pointer. That should be reasonable
pointer. That should be reasonable
enough. Do end
enough. Do end
levels and
puzzles. Okay.
So this is now your basic
inette.
And I don't see the stream up. Hang
on. Okay, we are live. Good.
logs perf score return length. Perfect.
logs perf score return length. Perfect.
Doesn't have anything that we need to
Doesn't have anything that we need to
worry
worry
about. So, this is everything
about. So, this is everything
here. And now all we need to do is end
here. And now all we need to do is end
puzzles and
levels. So, we'll do like
levels. So, we'll do like
Level star
Level star
level star all
level star all
levels. Puzzle state star all
puzzles.
Okay. And then int num levels like
Okay. And then int num levels like
this. And now I believe on
this. And now I believe on
reset. Yeah, this doesn't get called
anywhere. So what happens is when it's
anywhere. So what happens is when it's
done, they call list, right? And on
done, they call list, right? And on
reset, it's actually pretty
reset, it's actually pretty
similar. So I think what we're going to
similar. So I think what we're going to
do
I'm feeling good actually. Let's let's
I'm feeling good actually. Let's let's
just knock this out right
just knock this out right
now. Okay, so we just call set puzzle.
now. Okay, so we just call set puzzle.
We need the index, right? Int
We need the index, right? Int
index
equals rand
equals rand
percent and num
levels. We'll call it numbum
maps.
maps.
Okay. And then now we will set the
Okay. And then now we will set the
puzzle from the all puzzles
puzzle from the all puzzles
buffer. And now literally all we have to
buffer. And now literally all we have to
do done. We look for
dun. This should be getting set to one
dun. This should be getting set to one
somewhere. Doesn't seem to be getting
somewhere. Doesn't seem to be getting
set to
one.
Huh. Okay.
So where's
So where's
Dun's done equals C step. Ah okay. So
Dun's done equals C step. Ah okay. So
it's the return of
Cstep. I believe this needs to be a
void. So now instead of doing this, this
void. So now instead of doing this, this
is just going to be a C reset.
And then this is a simple
And then this is a simple
return. C
return. C
reset. This is
reset. This is
a
reset.
Boom. And now this should load random
Boom. And now this should load random
levels.
levels.
So the only thing is we have to adjust
So the only thing is we have to adjust
all of this
logging because of the new log
logging because of the new log
format. Delete all that.
Goodbye log log
Goodbye log log
uh log
buffer. I think the end log is actually
buffer. I think the end log is actually
really easy, isn't
it? Don't need to zero the
log. I guess there's episode return,
right? We have
tick. Okay.
But we need to have like a few of
But we need to have like a few of
these variables, I believe.
Right. Where's the ad log? I deleted
Right. Where's the ad log? I deleted
it. Well, no big deal. We'll just add it
it. Well, no big deal. We'll just add it
back. But with uh it's going to be
back. But with uh it's going to be
substantially different anyways.
substantially different anyways.
We'll just
We'll just
do void add
do void add
log and then we'll
log and then we'll
do C tower climb and then this can
take. We can just do
N
N
log
Earth and just do log buffer maybe.
Okay. So now we have our log
buffer. This is
buffer. This is
N buffer. Oops.
N buffer. Oops.
It's actually just end
buffer. Very
clean.
Okay. Add log n.
Perfect. And then we also have was it
Perfect. And then we also have was it
free pre-initialize becomes C close.
Okay. So now we have to make this thing
Okay. So now we have to make this thing
work. Oh wait, we also have the client,
work. Oh wait, we also have the client,
right? Client is not going to be in this
right? Client is not going to be in this
strct. So we
strct. So we
do client star
do client star
client in there. Make
client. Yep.
client. Yep.
We do
if
client new API shenanigans. All
client new API shenanigans. All
right. Uh, we also need the C
right. Uh, we also need the C
file. Hey, look at all that Ford path
file. Hey, look at all that Ford path
shenanigans. Poor Spencer. I made him do
shenanigans. Poor Spencer. I made him do
all this.
n random
n random
level.
level.
Okay.
Um I think you have to reset
Um I think you have to reset
here. All
right, we have some
bugs. This needs to be forward declared.
plant the
plant the
heck.
[Music]
Oh, end of clientity enable animation.
Oh, end of clientity enable animation.
Let's try that.
We'll just do
client. We'll just do it this
client. We'll just do it this
way. Okay. Okay. And now we have C step
done
plus+. This is now incorporated
plus+. This is now incorporated
into the end itself.
This runs a Perf
This runs a Perf
test does get a division by
zero. Grand percent env.h
H. This is random
level. Mitch random level.
This is
allocate. Okay, now this runs a PF
allocate. Okay, now this runs a PF
test. We still have some null null
test. We still have some null null
pointer
pointer
shenanigans because you're intended to
shenanigans because you're intended to
generate
generate
some puzzle states outside. So, we're
some puzzle states outside. So, we're
going to just
try to power our climb. D
This is running demo not perf test.
This is running demo not perf test.
Good. So what we're supposed to
do
do
and
and
okay now we have this and then we do
okay now we have this and then we do
like so
like so
and maps.
Undeclared.
Third. Yo.
Third. Yo.
Okay. I don't know why it takes so long.
That's a good
policy.
Holy. Hey, Weston. This is Spencer's
Holy. Hey, Weston. This is Spencer's
policy loaded on his
end. This actually looks really good.
end. This actually looks really good.
So, I think that there's just some jank
So, I think that there's just some jank
in the Python version.
is there an anti-aliasing
option. I believe we did that in
option. I believe we did that in
Impulse wars,
right? That config
flags. Oh yeah, he already has
flags. Oh yeah, he already has
it.
Fuel. It's choosing left, right, up,
Fuel. It's choosing left, right, up,
push. It's a little more complicated
push. It's a little more complicated
than that. It's uh it's based off of
than that. It's uh it's based off of
like an actual puzzle game, a weird
like an actual puzzle game, a weird
Japanese puzzle game. Um you can pull
Japanese puzzle game. Um you can pull
blocks, you can push balls, you can hang
blocks, you can push balls, you can hang
off of ledges, you can climb blocks,
off of ledges, you can climb blocks,
bunch of
stuff is quite
cool. Now I believe this one
cool. Now I believe this one
[Music]
[Music]
has missing
has missing
semicolons. All
right. So these are all the things that
right. So these are all the things that
uh the init function needs that we have
uh the init function needs that we have
not yet
not yet
set. So this here
M num
maps.
Boom. This does not need a nit grid.
Boom. This does not need a nit grid.
This does need a different in it, I
believe. Nit level. No. Nit puzzle
believe. Nit level. No. Nit puzzle
state. It is what we want. Just want
it. And unpacks everything else. And
it. And unpacks everything else. And
then this needs to be all
then this needs to be all
levels and all
puzzles. We will see if we can get this
puzzles. We will see if we can get this
thing to compile and work.
No member name terminals. We can fix
No member name terminals. We can fix
that. Actually, I think dun this has dun
that. Actually, I think dun this has dun
as well, right? So, we have to do an s
as well, right? So, we have to do an s
slashdun slash
terminals and
then
then
sanations. Try it again.
sanations. Try it again.
The goal is to get uh all the M
The goal is to get uh all the M
supported
today except for Impulse Wars because
today except for Impulse Wars because
that impulse wars is a
that impulse wars is a
nightmare. Uh everything else should be
fine. Be like, "Hey, Captain, I have
fine. Be like, "Hey, Captain, I have
every end of ported but yours. Help.
every end of ported but yours. Help.
Please
port. I will help you do it.
But train
uh probably sweep. This has got to be
uh probably sweep. This has got to be
sweep. And it's like metric equals
this. I didn't see that in the log.
I don't see levels completed anywhere
I don't see levels completed anywhere
either. Probably just score,
right? Okay. So, this thing
right? Okay. So, this thing
runs. It takes quite a while to gen
runs. It takes quite a while to gen
those levels.
those levels.
a little suspicious of that.
Okay, that is
PF. That is uh 80
something%. And it does seem to now be
something%. And it does seem to now be
crashing back
down. Possibly this thing needs some uh
down. Possibly this thing needs some uh
custom
custom
params.
params.
Possibly defaults are bad, but this does
Possibly defaults are bad, but this does
run. And at least initially it was
run. And at least initially it was
training.
Yeah. So, this is
Yeah. So, this is
definitely Oh, yeah. There we go. It's
definitely Oh, yeah. There we go. It's
just a little unstable. So, we'll have
just a little unstable. So, we'll have
to retune a little bit, but like 90%
instantly. I'm confident that's
correct. Going through and understanding
correct. Going through and understanding
how N binding. H works. Glad you made
how N binding. H works. Glad you made
it. So no more Syon. I am trying. It is
hard.
Of course, we're here to fix
RL. Took me about an hour total. So, we
RL. Took me about an hour total. So, we
got an hour 10 to do
got an hour 10 to do
MOA, which may be a little ambitious,
MOA, which may be a little ambitious,
but at least it's my own code, so
but at least it's my own code, so
hopefully I know how it works.
So this is Moa for anyone who hasn't
So this is Moa for anyone who hasn't
seen it. It is a miniature
version. It is a miniature version of
version. It is a miniature version of
like OpenAI 5
like OpenAI 5
Dota Dota inspired at least.
There we
go. You have
go. You have
skills. You have minions. You have
skills. You have minions. You have
creeps. You've got towers, which are
creeps. You've got towers, which are
stars. Got all sorts of things.
know if the uh the AoE is not rendering
know if the uh the AoE is not rendering
or
what. The AoE does not seem to be
what. The AoE does not seem to be
working, which is a little
working, which is a little
odd for that like one specific thing to
odd for that like one specific thing to
not
not
work. But hey, that's okay. We will port
this last thing in the extensions path.
this last thing in the extensions path.
Once this goes away, Syon is done. I
Once this goes away, Syon is done. I
guess technically we have like one or
guess technically we have like one or
two all small other tests that use Syon,
two all small other tests that use Syon,
but getting rid of it very quickly.
There's so much freaking
There's so much freaking
code and so much code. Now, I believe
code and so much code. Now, I believe
the one thing that's tough here is the
the one thing that's tough here is the
shared map
shared map
initialization. Um, I believe that's a
initialization. Um, I believe that's a
little tough.
Yeah. So, right
here, this is the only thing that's
hard. And actually, I think that we kind
hard. And actually, I think that we kind
of just do this pretty easily.
We kind of just do this pretty damn
We kind of just do this pretty damn
easily,
huh? Like this doesn't even need any
huh? Like this doesn't even need any
args. It's literally
just Oh, well crap. It's a numpy file.
just Oh, well crap. It's a numpy file.
Um, we have to write that f. We have to
Um, we have to write that f. We have to
read from that file I guess
right. Do I have any any like loading
right. Do I have any any like loading
example code in
example code in
C? I could have sworn I had
some. Wait, we have it literally
here. We literally have it here.
here. We literally have it here.
Huh? Look at
that. Lovely. Boom.
Look at that. Now all we have to
Look at that. Now all we have to
do is put these into a pie duct, I
do is put these into a pie duct, I
guess.
So I object
So I object
star app buffer
handle binding stuff is basically copy
handle binding stuff is basically copy
paste and name the varss. Well, this is
paste and name the varss. Well, this is
a bit more complicated because I'm doing
a bit more complicated because I'm doing
fancy shared and netit
fancy shared and netit
stuff, right? So, this is specifically
stuff, right? So, this is specifically
this this thing is like 200 something
this this thing is like 200 something
megabytes. So, if I give each instance
megabytes. So, if I give each instance
of the environment one of these, you'll
of the environment one of these, you'll
out of memory your computer. So, what we
out of memory your computer. So, what we
do instead is we um we share this object
do instead is we um we share this object
across all instances of the N. So, that
across all instances of the N. So, that
requires a little bit of custom logic.
requires a little bit of custom logic.
That's all I'm doing. And I just I had
That's all I'm doing. And I just I had
like you needed to do this anyways for
like you needed to do this anyways for
the C demo. So it's very similar logic.
Okay, so this is literally it
Okay, so this is literally it
uh
return passing bars for your end.
return passing bars for your end.
Yes, it's very easy for your end.
Yes, it's very easy for your end.
We get into some shenanigans
We get into some shenanigans
here because the Python C API is kind of
ass. Yeah. Come on. Get your Sudoku in
ass. Yeah. Come on. Get your Sudoku in
chop. We got a release to go. Come
chop. We got a release to go. Come
on. Million step per second training
on. Million step per second training
minimum. Call it 2
minimum. Call it 2
million. Hurry up or it's going to be 3
million. Hurry up or it's going to be 3
million.
Yeah.
Oh, you need the game map, don't
Oh, you need the game map, don't
you? Okay. Well, that's not that
bad. You need the game map.
This gives you handle
This gives you handle
object and then pi
object and then pi
object game handle.
And
then just auto complete and don't screw
then just auto complete and don't screw
it up for once. It's so basic. It's just
it up for once. It's so basic. It's just
so annoying. AI path buffer AI
so annoying. AI path buffer AI
path. Yeah, that should be
path. Yeah, that should be
it. Okay, so we do this AI path
loading and then we do init
moa game.
I'm inputting to the AI is the current
I'm inputting to the AI is the current
grid. Then I and then the starting
grid. Then I and then the starting
grid. Make second grid rather than
grid. Make second grid rather than
contain the
array. Wait, should
array. Wait, should
I make the second grid rather than
I make the second grid rather than
contain the array and make all
contain the array and make all
numbers
01? No. So, what you should do is you
01? No. So, what you should do is you
should
should
pass you should pass a 2D. You should
pass you should pass a 2D. You should
pass
pass
a Okay, look. This is what you should
a Okay, look. This is what you should
pass. You're going to get a quick lesson
pass. You're going to get a quick lesson
on OBS encoding.
on OBS encoding.
Right. So what you want to do is you
Right. So what you want to do is you
want to
want to
pass a 3D block of
numbers. Okay. And then this dimension
numbers. Okay. And then this dimension
here, this is the two channels. Okay. So
here, this is the two channels. Okay. So
like if you cut it like this, it has
like if you cut it like this, it has
two. And then
this whatever this is like nine and this
this whatever this is like nine and this
is nine.
is nine.
Okay, so you have your initial board
Okay, so you have your initial board
here and then you have your
here and then you have your
uh final board and then what you do is
uh final board and then what you do is
before you pass into the neural network
before you pass into the neural network
not in the end you do one
hot nine or actually it's 10 because
hot nine or actually it's 10 because
there are 10
there are 10
possibilities. I think it's it's zero
possibilities. I think it's it's zero
through nine, right? So there you go.
through nine, right? So there you go.
You don't want to hot encode it in the
You don't want to hot encode it in the
end. You want to hot encode it in uh the
end. You want to hot encode it in uh the
network because it improves uh data
network because it improves uh data
bandwidth. Um and that is only
bandwidth. Um and that is only
transmitting uh you also do it in char
transmitting uh you also do it in char
by the way like you can make this thing
by the way like you can make this thing
a char and then this is
a char and then this is
literally 162 bytes right 9 by9 by2 it's
literally 162 bytes right 9 by9 by2 it's
bytes which is the ob size and with that
bytes which is the ob size and with that
you should be able to hit um while coms
you should be able to hit um while coms
are kind of slow so I guess it depends
are kind of slow so I guess it depends
on the data format you end up using you
on the data format you end up using you
should be able to at least hit one or
should be able to at least hit one or
two million steps per second.
How many inputs? You would have total of
How many inputs? You would have total of
inputs if you're using a flat network.
inputs if you're using a flat network.
And then it's 161 but structured with a
comp 9 by 9 * 9 *
2 talks do not contain any technical
2 talks do not contain any technical
content. So I would hope it is some
content. So I would hope it is some
somewhat more useful than
that. Oh jeez. Yeah. Okay. Okay, this is
that. Oh jeez. Yeah. Okay. Okay, this is
going to
suck. Yeah, I forgot I had to do all
suck. Yeah, I forgot I had to do all
this
crap. Well, it's just the logging for
crap. Well, it's just the logging for
this kind of sucks. There's a lot of it.
Fine.
that. Okay. So, I think I can keep I can
that. Okay. So, I think I can keep I can
keep the player log structure.
Yeah, I can keep the player structure
Yeah, I can keep the player structure
and then all
this. So, this is going to all get moved
this. So, this is going to all get moved
to add log. This is add log.
Wait, hang
Wait, hang
on.
on.
Yes. And then
this this goes here.
Just take mobile star N.
Okay. So, these this part is chill. All
Okay. So, these this part is chill. All
right. This part is uh pretty chill.
So, in order to get all these damn
So, in order to get all these damn
metrics, the only way I can do
it like 200 lines of logs, isn't it?
Yeah, it's just going to be 200 lines of
Yeah, it's just going to be 200 lines of
logs.
I mean, I can just do one of them as an
example. This is not neural MMO.
example. This is not neural MMO.
Neuralarm MMO is
Neuralarm MMO is
easy, but do start the repo. It helps me
easy, but do start the repo. It helps me
out a lot.
Google fish.
Yes. I'm just going to do this first.
I'm just going to do like the first
agent cuz then after that I can
Mike. Okay. So, this is what needs to
Mike. Okay. So, this is what needs to
happen here.
So we delete all this
So we delete all this
garbage and this add log thing.
Then we have to
Then we have to
do
log.radiant. I misspelled radiant,
log.radiant. I misspelled radiant,
didn't I? Isn't it with an e?
It totally is,
right? Oh,
right? Oh,
no. Wait,
no. Wait,
what? Why were there a whole bunch of
what? Why were there a whole bunch of
results spelled with
results spelled with
E? Okay, I don't know why it looked the
E? Okay, I don't know why it looked the
word looked wrong to
word looked wrong to
me. Not spelled right.
So that's what I was hoping it would
So that's what I was hoping it would
just autocomplete all That's
Okay. So, that is the
Okay. So, that is the
initial. This actually gets rid of all
initial. This actually gets rid of all
this. So, uh there is going to end up
this. So, uh there is going to end up
being a ton of boiler plate on
being a ton of boiler plate on
this and this.
this and this.
But let's see if we can actually make
But let's see if we can actually make
this
this
thing. Ah, Wait, we have it has to
thing. Ah, Wait, we have it has to
go into the binding file as well because
go into the binding file as well because
of course it has to go into the freaking
of course it has to go into the freaking
binding file. Oh
binding file. Oh
left.
Whatever. Let's see if it
works. No, this was the only the special
works. No, this was the only the special
function we needed for mobile was just
function we needed for mobile was just
this little thing here.
this little thing here.
And like unpacking that was a pain, but
And like unpacking that was a pain, but
it's not that
This probably has to go
This probably has to go
below below mobile,
right? Is the speed of
right? Is the speed of
function using uh you don't need to
function using uh you don't need to
inline everything. That's kind of
dumb. You only need to inline
dumb. You only need to inline
like you should only be inlining stuff
like you should only be inlining stuff
if you like if you have a function that
if you like if you have a function that
you're calling that you know you're
you're calling that you know you're
calling a bajillion times in a loop.
Yeah, bet learns a thing
today. I'm surprised you actually know
today. I'm surprised you actually know
about that question. Usually people
about that question. Usually people
don't learn low-level stuff for a while.
Yeah, this one This is a pain to port.
long. Yep. Okay,
long. Yep. Okay,
good. We are
happy. You want me to ignore action
masking? Uh I thought Are we not
masking? Uh I thought Are we not
respawning cars, Spencer?
Oh, action. Wait, action
masking. Yeah. No, just Oh, for the new
masking. Yeah. No, just Oh, for the new
M. Yeah, just ignore the hell out of
M. Yeah, just ignore the hell out of
that and give it a small negative reward
that and give it a small negative reward
that you can
sweep. We'll crush SP3 even without ASP
sweep. We'll crush SP3 even without ASP
uh without action masking. Screw that.
uh without action masking. Screw that.
Action masking is a total pain in the
Action masking is a total pain in the
ass to implement efficiently as well.
ass to implement efficiently as well.
Like computing the action mask generally
Like computing the action mask generally
is really a slow operation. Like nah,
is really a slow operation. Like nah,
we're not doing
we're not doing
that. New M should be called digger.
that. New M should be called digger.
That is a terrible idea.
That is a terrible idea.
Bet. I think we'll call it terraform.
It's a bad idea for the same reason that
It's a bad idea for the same reason that
uh the Zigg programmers are very stupid
uh the Zigg programmers are very stupid
for calling themselves ziggers with a Z.
It's very easy to have a slip of the
It's very easy to have a slip of the
tongue with
that. Look, I told the Zig guys, all
that. Look, I told the Zig guys, all
right, they should call themselves
[Laughter]
Zigzagons because they write Zigg and
Zigzagons because they write Zigg and
they're a bunch of goons.
Circum
Circum
what? What was that? Circumloatory.
No, I know what the big word means. I
No, I know what the big word means. I
just Do you? Cuz I like you keep using
just Do you? Cuz I like you keep using
that word. I don't think you know what
that word. I don't think you know what
it means.
Go look up the word and see if you think
Go look up the word and see if you think
you used it correctly. If you're going
you used it correctly. If you're going
to be like, "Oh, big word hard, Josh.
Yes, exactly. Which has nothing to do
Yes, exactly. Which has nothing to do
with what I was saying
with what I was saying
originally. Did we move puffer yet? Yes,
originally. Did we move puffer yet? Yes,
it's in extensions. And uh
it's in extensions. And uh
I I probably didn't push the fix that
I I probably didn't push the fix that
moves that fixes the local build script.
moves that fixes the local build script.
Huh. I will do that because I fixed it
Huh. I will do that because I fixed it
in the build script as well. I just
in the build script as well. I just
think I forgot to push it.
The word you're looking for is
The word you're looking for is
malipropism.
that. Okay.
How did you predict my
How did you predict my
problem? I've been doing things a while.
problem? I've been doing things a while.
All
All
right. I know all. I see all. And I tell
right. I know all. I see all. And I tell
all for a price.
All right. Now, this runs locally
All right. Now, this runs locally
again. I don't know why this thing
again. I don't know why this thing
doesn't seem to like to use its Q. There
doesn't seem to like to use its Q. There
seems to be something screw with the
queue. I don't know what the heck
queue. I don't know what the heck
happened with uh with this thing's
queue. Now it works. Weird.
queue. Now it works. Weird.
Well, we'll leave this alone for
Well, we'll leave this alone for
now. Um, can we get it to
build? How user
build? How user
control user control
control user control
code? What do you mean user control
code? What do you mean user control
code?
user controlling. Oh yeah, any of the
user controlling. Oh yeah, any of the
M's literally they just all have like a
M's literally they just all have like a
hold shift. Like all the M's have like a
hold shift. Like all the M's have like a
hold shift. I think neural MMO is is
hold shift. I think neural MMO is is
just tap control. But yeah, in neural
just tap control. But yeah, in neural
MMO it's more complicated because I
MMO it's more complicated because I
wanted to give you a toggle instead of a
wanted to give you a toggle instead of a
clutch.
clutch.
But everything else is while you're
But everything else is while you're
holding shift your actions go instead of
holding shift your actions go instead of
the neural
net like all the M's on the website they
net like all the M's on the website they
say under them if you just hold shift
Well, there is logic required in the
Well, there is logic required in the
renderer, right? It doesn't really
renderer, right? It doesn't really
matter where you put it. You can put it
matter where you put it. You can put it
in the end or you can put it in the C
in the end or you can put it in the C
file, but you need to put like user
file, but you need to put like user
input controls, right?
Oh jeez, this entity DT type
garbage. Do I still use this? Please say
garbage. Do I still use this? Please say
I
I
don't. Okay, thank god I don't actually
don't. Okay, thank god I don't actually
use
it. I do not want to deal with that
it. I do not want to deal with that
right now.
Okay.
I bother you
enviously. I want this bloody M reported
enviously. I want this bloody M reported
today so I can be
today so I can be
done. The
goal is user control only
goal is user control only
possible. I think it's weird when you
possible. I think it's weird when you
run it through torch. I haven't messed
run it through torch. I haven't messed
with it much. it I it probably depends
with it much. it I it probably depends
where you put the code. If you put the
where you put the code. If you put the
code in the uh theh file and then I mess
code in the uh theh file and then I mess
with a couple of things, you can
with a couple of things, you can
probably have it
probably have it
be you can probably have it be done
locally. I haven't bothered making sure
locally. I haven't bothered making sure
it works, but you can probably do it.
It would be good in your case probably
It would be good in your case probably
to have something where like if you hold
to have something where like if you hold
shift they try to follow the mouse or
shift they try to follow the mouse or
something. That would be cool.
This is this
This is this
boom boom
boom agents be discretized for war
boom agents be discretized for war
death.
for Yes.
We're have to do the C close
thing. Is it render map?
That's probably this function render
game. This is going to be C
game. This is going to be C
render.
render.
Okay. And
Okay. And
then game
then game
renderer. This has to have in frame.
Okay. So we do like this
Okay. So we do like this
mobile
if is there a thing in Nick game. Oh,
if is there a thing in Nick game. Oh,
this is actually a
this is actually a
thing. Okay, so we
do 32 41 20
Probably this.
Frame is 12.
on it.
Great.
Damn.
We got to do the thing.
So, this is going to hopefully give us a
So, this is going to hopefully give us a
full stack tray. So, we'll just be able
full stack tray. So, we'll just be able
to
to
see exactly where it is egg faulting and
see exactly where it is egg faulting and
we'll be able to fix it and move
we'll be able to fix it and move
on. I like to fix this before
on. I like to fix this before
6 so I can just go get dinner call
6 so I can just go get dinner call
today. Get
rest. Go again tomorrow.
Do I not call this
function? I probably don't call this
state.
game
map. It's seaults on game map.
Really? Read file.
No, this is cal. This should be
allowed. This should be totally allowed.
game map handle.
bars game
map. When the heck would this
map. When the heck would this
be? Is this really correct? This is This
be? Is this really correct? This is This
is what we're
doing. I
guess no, this is here. This is fine.
guess no, this is here. This is fine.
The C code uses the same file. this uh
The C code uses the same file. this uh
same
same
function. Okay, so this erroring
function. Okay, so this erroring
in erroring in
in erroring in
ninet hang on it's erroring
inet is an ninet of
41 item string game map handle. Oh, you
41 item string game map handle. Oh, you
dummy.
I dictate
item. Let's go
grab Oh. Uh I don't Yeah, this tower
grab Oh. Uh I don't Yeah, this tower
climb thing is not right at
climb thing is not right at
all. It literally can't
all. It literally can't
be. Now I have to fix that as
well. But what we can do is
Let's see if this does it.
How do you unpack a dictionary?
Oh, wait. So, pi dict get
Oh, wait. So, pi dict get
item. So,
quarks. So, then this should be correct.
quarks. So, then this should be correct.
So, it should be get item
here. All
right. Well, I got to go get dinner.
right. Well, I got to go get dinner.
Um, I will be back probably after this
Um, I will be back probably after this
to finish this. So follow uh this on
to finish this. So follow uh this on
well start the repo to help me out
