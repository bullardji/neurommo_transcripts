Kind: captions
Language: en
back
here time to finish
here time to finish
this going to do another couple hours on
this going to do another couple hours on
this at the moment I think is what we're
this at the moment I think is what we're
going to do and try to finish
it
yeah I have it running hold on let
yeah I have it running hold on let
me this
why is the
mic okay we're
good this is very weird how this is
good this is very weird how this is
happening
happening
here s and receive
problem is that I don't know if the
problem is that I don't know if the
environment is good or
not well this year isn't passing the
not well this year isn't passing the
buffers
correctly this looks like it should
correctly this looks like it should
be let meum
yeah CU this just returns
M's
for e
this is wrong
this is wrong
here right
is this
is this
wrong hold
on actually might be
right
right
[Music]
[Music]
mhm yeah because we get Bel
here
okay for
what's in the observations here
zero
really okay now we have data
why was this getting called before
um 119
[Music]
no
rewards but that could just be
sparcity or hypers
it looks
reasonable this numm is
concerning
right let me see if this gets passed
yeah we get 5 12 MS
I do this
I'm good
stuck I'm not making any
progress
oh hold on maybe
okay appears to have some correct
okay appears to have some correct
data yeah look at that it
learns okay so if this works then um
this is very simple now
right few improvements for sure but this
right few improvements for sure but this
is very
simple
for e
this is a little Jank here
this is a little Jank here
well if I do multiprocessing it'll be
well if I do multiprocessing it'll be
different
right or Ray for that
matter yeah you see this cereal
pretty
awkward I'm take some work
I mean for now we can check
I mean for now we can check
um we can check the init
um we can check the init
here if we're committed to having this
all right
yeah so we can tell from
yeah so we can tell from
this slightly
obnoxious oops hold
obnoxious oops hold
[Music]
on
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e e
I realized I didn't unmute the darn
I realized I didn't unmute the darn
mic when I came back
before
before
jeez it's been a little bit chaotic
jeez it's been a little bit chaotic
today I've got like uh people here at
today I've got like uh people here at
installing the mini split they just
installing the mini split they just
finished finally so that's nice to have
finished finally so that's nice to have
uh it's currently it's
uh it's currently it's
400m I'm trying to think what I want to
400m I'm trying to think what I want to
do about this
the situation here is a little bit
tricky there are kind of some delicate
tricky there are kind of some delicate
things that I need to work
things that I need to work
out this just going to take a little
out this just going to take a little
longer hold on background
longer hold on background
noise
noise
um I just I have a few things that I got
um I just I have a few things that I got
to work out here and they're just going
to work out here and they're just going
to take a while
like I can at least talk through what
like I can at least talk through what
what I'm trying to do here
what I'm trying to do here
so the way puffer lib works you have
so the way puffer lib works you have
this giant blocka shared memory that
this giant blocka shared memory that
gets allocated and then it gets sliced
gets allocated and then it gets sliced
up and given to all the individual
up and given to all the individual
environments right that's what puffer
environments right that's what puffer
lib does but the thing is the way that
lib does but the thing is the way that
it actually distributes those slices is
it actually distributes those slices is
a little bit
a little bit
Jank um
Jank um
and it's going to require like fixing
and it's going to require like fixing
that is going to
that is going to
require possibly adding something
require possibly adding something
to the environment API itself I
think it's a little
think it's a little
tricky but basically I've got to get
tricky but basically I've got to get
this right because this is like this is
this right because this is like this is
kind of like the one thing of everything
kind of like the one thing of everything
in puffer this is like the one thing
in puffer this is like the one thing
that is very exposed to user and it's
that is very exposed to user and it's
going to be this like copied across all
going to be this like copied across all
the different environments this is like
the different environments this is like
the one thing that actually has to be
the one thing that actually has to be
done pretty darn
done pretty darn
correctly
correctly
um I mean there's not even like a ton of
um I mean there's not even like a ton of
stuff to code here it's the amount of
stuff to code here it's the amount of
code is going to be relatively small
code is going to be relatively small
it's a lot more just thinking on how to
it's a lot more just thinking on how to
do
this I guess I what I can do here cuz
this I guess I what I can do here cuz
here it's 400 p.m. um and I have other
here it's 400 p.m. um and I have other
stuff to do today as well um I think
stuff to do today as well um I think
what I'm going to do is I'm going to
what I'm going to do is I'm going to
just spend a little bit of time right
just spend a little bit of time right
now trying to think through and see if I
now trying to think through and see if I
can figure out the last remaining
can figure out the last remaining
questions and then I'll end stream I'll
questions and then I'll end stream I'll
go do all the other stuff I'll probably
go do all the other stuff I'll probably
Dev a little bit through the evening
Dev a little bit through the evening
here try to get some progress on this I
here try to get some progress on this I
got a bunch of stuff to do tomorrow and
got a bunch of stuff to do tomorrow and
I'll basically I'll be seeing what I can
I'll basically I'll be seeing what I can
broadcast live but the thing is I'm
broadcast live but the thing is I'm
pretty happy in the last couple of days
pretty happy in the last couple of days
we've gotten so so much progress uh in a
we've gotten so so much progress uh in a
relatively short amount of time on
relatively short amount of time on
cleaning up this whole thing it's just
cleaning up this whole thing it's just
the it's really at this point we're just
the it's really at this point we're just
cleaning up Loose Ends a couple last
cleaning up Loose Ends a couple last
good decisions and some loose
good decisions and some loose
ends and that requires a little bit of
ends and that requires a little bit of
care but this is going to make it very
care but this is going to make it very
very nice to do RL this is the thing
very nice to do RL this is the thing
that I wanted to really do with
that I wanted to really do with
puffer so
puffer so
let's look at that
let's look at that
um the main thing that's difficult is I
um the main thing that's difficult is I
think every n has to
think every n has to
have an optional buffer argument or
have an optional buffer argument or
something that's really awkward
something that's really awkward
though maybe it
doesn't the thing is I don't want to
doesn't the thing is I don't want to
have to add
okay here's the thing that's bothering
okay here's the thing that's bothering
me right let's let's outline this
me right let's let's outline this
because this is a good software design
talk this buffer is essentially an
talk this buffer is essentially an
internal detail
internal detail
right the internal detail is
right the internal detail is
that when the environment is going to
that when the environment is going to
write stuff for observations rewards
write stuff for observations rewards
actions when it's going to write data
actions when it's going to write data
there
there
into these
buffers those buffers have to be able to
buffers those buffers have to be able to
come from multiple places and you have
come from multiple places and you have
to be able to set those buffers to
to be able to set those buffers to
whatever you want
whatever you want
okay that's what you have to be able to
okay that's what you have to be able to
do um so right now I have this like
do um so right now I have this like
underscore assign buffers method which
underscore assign buffers method which
is an internal thing that we use which
is an internal thing that we use which
is the correct way to do it if you think
is the correct way to do it if you think
about it
about it
this works totally fine
this works totally fine
for standard puffer lib
for standard puffer lib
API buffers are internal they show up in
API buffers are internal they show up in
the internal code base users do not need
the internal code base users do not need
to know or care about them they just
to know or care about them they just
magically make everything fast no
magically make everything fast no
breaking API stuff
breaking API stuff
right uh the problem comes
when well the problem comes when we try
when well the problem comes when we try
to do this stuff for
native environments so native
native environments so native
environments are custom environments
environments are custom environments
that are meant to be ultra fast and
that are meant to be ultra fast and
strip away a lot of the
strip away a lot of the
Redundant elements the things that are
Redundant elements the things that are
meant to handle environments that aren't
meant to handle environments that aren't
built as
nicely so when that happens right the
nicely so when that happens right the
environments
environments
themselves they need to know about the
themselves they need to know about the
buffers on creation
or do
or do
they wait a
they wait a
moment maybe they
moment maybe they
don't maybe they
don't
don't
H hold on a second
technically
technically it's observations actions
technically it's observations actions
rewards
rewards
DS there is no reason that you should
DS there is no reason that you should
ever need any of these
ever need any of these
things on the creation of an
things on the creation of an
environment you only ever need these
environment you only ever need these
things
before you
reset so technically I can create the
environment and then I can assign the
buffers right
so you have a method assign
buffers the method can be
part of puffer m
I'm trying to think what it looks
like you have this init function
like you have this init function
right it's another method is the
right it's another method is the
annoying
annoying
thing like yet another method
well
maybe sign buffers
maybe this is better
split stuff up a little
bit register buffers or assign buffers
bit register buffers or assign buffers
or
something it's actually kind of cool
something it's actually kind of cool
because I can check if the method is
because I can check if the method is
called correctly and
called correctly and
such it makes it way harder to silently
such it makes it way harder to silently
screw up
keeps the API
consistent I kind of like
that I'm going to have to think through
that I'm going to have to think through
the details
but I think that that's the
but I think that that's the
solution so the architecture
overall you have puffer lib
overall you have puffer lib
vectorization vectorization can plug
vectorization vectorization can plug
into any existing environment via the
into any existing environment via the
emulation
emulation
layers but if you want to go really fast
layers but if you want to go really fast
then you write your environment native
then you write your environment native
which it doesn't have to go through
which it doesn't have to go through
emulation
emulation
this allows you to do additional memory
this allows you to do additional memory
optimizations because the data buffers
optimizations because the data buffers
get propagated all the way down through
get propagated all the way down through
the environment so you're writing
the environment so you're writing
directly into shared
directly into shared
memory the way that that works is that
memory the way that that works is that
after you create your environments just
after you create your environments just
the same as in puffer you assign buffers
the same as in puffer you assign buffers
but instead of assigning buffers to the
but instead of assigning buffers to the
emulation layer you assign buffers
emulation layer you assign buffers
directly to the environment which means
directly to the environment which means
that if your environment is lower level
that if your environment is lower level
if it's in scyon or C you simply have to
if it's in scyon or C you simply have to
have
have
one additional assigned buffers method
one additional assigned buffers method
or
or
similar and the structure of that is
similar and the structure of that is
flexible it can vary based on how you're
flexible it can vary based on how you're
designing your environment you're always
designing your environment you're always
going to have to have some little bit of
going to have to have some little bit of
boiler plate
boiler plate
there um
there um
but the only boiler plate would be in
but the only boiler plate would be in
scyon and it would literally just be a
scyon and it would literally just be a
method that's
like well actually it doesn't even have
like well actually it doesn't even have
to have any boiler you can just declare
to have any boiler you can just declare
uh observations and such as some
uh observations and such as some
variables can you do that wait hold
on uh no you still have to have one
on uh no you still have to have one
function you have to have one function
function you have to have one function
but it's a very simple function you just
but it's a very simple function you just
have to have like a register buffers
have to have like a register buffers
method that
method that
assigns uh that just passes the pointer
assigns uh that just passes the pointer
to your data basically from python to C
to your data basically from python to C
I think that's
I think that's
it I think I figured it out
it I think I figured it out
that is clean that invokes zero user API
that is clean that invokes zero user API
changes absolutely zero user API
changes absolutely zero user API
changes so it's
changes so it's
non-breaking um the native actually it
non-breaking um the native actually it
makes the native API easier it gives you
makes the native API easier it gives you
a formal API for
a formal API for
Native I do not like that you have to
Native I do not like that you have to
subass
subass
it but the thing is you have to subass
it but the thing is you have to subass
something anyways normally right you're
something anyways normally right you're
subclassing like gym environment or
subclassing like gym environment or
petting zoo
environment I mean
technically I don't think I should feel
technically I don't think I should feel
that bad about this
that bad about this
because well hold on should I
oh wait wait wait wait maybe there's I
oh wait wait wait wait maybe there's I
think I have a solution
I think I'm I think I got
one yeah we got
it we 100% have
it here's the trick
the reason that we have to have this
the reason that we have to have this
super call
super call
here the only reason that we had to do
here the only reason that we had to do
this was because these
this was because these
buffers need to be assigned by here
buffers need to be assigned by here
right you need to have the buffers
right you need to have the buffers
assigned so you need to have some sort
assigned so you need to have some sort
of function that gets called on
of function that gets called on
initialization and the easiest function
initialization and the easiest function
to call on initialization when you're
to call on initialization when you're
already forced to use a class anyways is
already forced to use a class anyways is
super so you're forced into inheritance
but if I don't need those buffers right
but if I don't need those buffers right
what I do is I do like you know
defa like assign
defa like assign
buffers
right and then I can just
right and then I can just
do I mean it'll be more than this right
do I mean it'll be more than this right
it'll be like
it'll be like
uh
uh
or it'll be like this or something right
or it'll be like this or something right
and then the super call goes
and then the super call goes
away this buffer leaves this buffer is
away this buffer leaves this buffer is
not needed in these uh the argument
anymore and then this is
anymore and then this is
self. buff
dot observations
dot observations
I like this
in mind you if you handle the
in mind you if you handle the
vectorization internally in C then this
vectorization internally in C then this
gets even
easier you still have to write this
easier you still have to write this
stupid function though
it's
obnoxious does this make sense let me
obnoxious does this make sense let me
think
I might a trolled a little bit
well it's a little bit better
actually yeah it's a little bit better
actually yeah it's a little bit better
because what I can
because what I can
do is I can make this a base
do is I can make this a base
method of sorts Maybe
you still have to call something and
you still have to call something and
scon though in order to assign these
scon though in order to assign these
don't you
it's still better though it's still
it's still better though it's still
better this way
better this way
because you no longer have to deal with
because you no longer have to deal with
it manually at all in the python layer
it manually at all in the python layer
so the python layer is very
easy e
still not 100%
still not 100%
satisfied let may think
not 100%
satisfied reason being that I don't
satisfied reason being that I don't
think there's a way generally to
think there's a way generally to
uh should be a way to know how to assign
uh should be a way to know how to assign
these buffers
these buffers
no maybe
no maybe
not well the tricky thing is you want to
not well the tricky thing is you want to
be able to do the thing I have here
be able to do the thing I have here
right is I have the individual M's in C
right is I have the individual M's in C
and the loops in Python but you'd also
and the loops in Python but you'd also
want to be able to have uh the loops and
want to be able to have uh the loops and
just
see it's only two
see it's only two
cases it's basically all you would ever
cases it's basically all you would ever
want to do
I actually think I can just write that
method and if I put enough guards on
method and if I put enough guards on
it uh if I put enough guards on it then
it uh if I put enough guards on it then
it will just
work and I won't need self. buff either
work and I won't need self. buff either
it'll just be self. observations
you know this will be
perfect this should be perfect
what's the difference between pix and
what's the difference between pix and
piid you can ignore piid that's like a
piid you can ignore piid that's like a
scyon header uh we're not we're probably
scyon header uh we're not we're probably
not going to use those unless we can
not going to use those unless we can
automatically generate
them like the stuff at the top of my pix
them like the stuff at the top of my pix
is essentially a piid like the from
is essentially a piid like the from
exter import like all those Imports
exter import like all those Imports
those like functions that's basically
those like functions that's basically
what a piid does
also damn it
also damn it
linky took me half an hour to figure out
linky took me half an hour to figure out
while I was at the gym to like guess
while I was at the gym to like guess
that it was probably that PR that broke
stuff it's okay it didn't take long to
stuff it's okay it didn't take long to
fix once I sat down
I'm trying to think if there's anything
I'm trying to think if there's anything
I've overlooked
here well the only thing is that a
here well the only thing is that a
little like the code is going to look
little like the code is going to look
like magically simple isn't
it working with a C+ plus
it working with a C+ plus
Dev and bindings with his game are in a
piid yeah cuz that's like a scyon header
piid yeah cuz that's like a scyon header
file it's kind of
file it's kind of
awkward like in theory you should be
awkward like in theory you should be
able to automatically generate them and
able to automatically generate them and
it works for small projects but when I
it works for small projects but when I
run it on RB it doesn't work
run it on RB it doesn't work
nicely so it's a little obnoxious
it's okay we don't need it
okay the one thing I'm not sure about is
okay the one thing I'm not sure about is
this actions
this actions
buffer e
the reason we do this
differently is so you can pass in
differently is so you can pass in
actions right without having to load
actions right without having to load
them separately from a different source
that Mak sense you
think it's kind of awkward if you think
think it's kind of awkward if you think
about it because internally we always
about it because internally we always
have it in this format already
I guess it's okay to do it like this
it is kind of
magic e
it's not bad
though you'll end up saving a little bit
though you'll end up saving a little bit
of this
code things will be cleaner cu the buff
code things will be cleaner cu the buff
will be gone it'll just
will be gone it'll just
be yeah it'll be cleaner
okay I think we figured it
okay I think we figured it
out I think we figured it
out I think we figured it
out um yeah it's
out um yeah it's
4:38 now hold on we got poer lib stuff
4:38 now hold on we got poer lib stuff
in
in
Discord going on here
what
uh this is amusing I'll
uh this is amusing I'll
bite what is this
okay this is funny this is like a
okay this is funny this is like a
little game
there's not really
uh that's amusing
I'll tell them real quick to
do it's multi-agent it looks like
yeah yeah
we'll give him the easy
version
for e
there we
go I mean I guess I can technically go
go I mean I guess I can technically go
just start doing a little bit of this
just start doing a little bit of this
right
now let's
see I mean maybe it's not that bad right
see I mean maybe it's not that bad right
for
sign
buffers how's this work again we
buffers how's this work again we
do like
do like
this Creer and
this Creer and
bars num MS
for
something is still confused
here something is still confused
I think it still makes sense to have
I think it still makes sense to have
this damn thing as a base class
this damn thing as a base class
unfortunately doesn't it
it's kind of tricky to be honest
am I doing something wrong here by uh
am I doing something wrong here by uh
trying to avoid
trying to avoid
cereal I might be doing some I might not
cereal I might be doing some I might not
be doing the right thing here trying to
be doing the right thing here trying to
avoid cereal
I think I'm really going to need to sit
I think I'm really going to need to sit
on this for a while I honestly I think I
on this for a while I honestly I think I
will I think I should just go get some
will I think I should just go get some
exercise get some food do all the other
exercise get some food do all the other
things I got to do today and then um
things I got to do today and then um
maybe I I'll get some time in the
maybe I I'll get some time in the
evening once I'm uh
evening once I'm uh
back in order to do some of this stuff
back in order to do some of this stuff
cuz like this is hard this is actually
cuz like this is hard this is actually
like legitimately
like legitimately
hard cuz this is like designing I mean
hard cuz this is like designing I mean
this is more design than anything
this is more design than anything
like software
architecture software architecture
I know I'm
I know I'm
pensive definitely pensive with
this they're like at like they're kind
this they're like at like they're kind
of too many
of too many
layers you know
I'm not getting anything done if I'm
I'm not getting anything done if I'm
just sitting here staring at this this
just sitting here staring at this this
is honestly like you know take a shower
is honestly like you know take a shower
and think about it type of material or
and think about it type of material or
something or know sit in a hot tub and
something or know sit in a hot tub and
think about it material this is like
think about it material this is like
this needs to be done
correctly basically there are like
correctly basically there are like
there's too there are too many layers in
there's too there are too many layers in
the stack and I don't want to add
the stack and I don't want to add
another one but I I have to be a little
another one but I I have to be a little
careful with how I go about it so I'm
careful with how I go about it so I'm
going to go just I'm just going to end
going to go just I'm just going to end
stream for now um I think even though
stream for now um I think even though
not much code was done today uh I think
not much code was done today uh I think
there has been substantial like design
there has been substantial like design
progress on this
progress on this
and I mean ultimately that's very
and I mean ultimately that's very
important like the system architecture
important like the system architecture
of puffer is very very
of puffer is very very
important I always say keep it simple
important I always say keep it simple
right and I try to keep it simple keep
right and I try to keep it simple keep
it simple so I'm trying not to add stuff
it simple so I'm trying not to add stuff
to it but it's very hard to make stuff
to it but it's very hard to make stuff
simple right it's very easy to build
simple right it's very easy to build
something complicated that works but
something complicated that works but
it's
it's
crap um so yeah anyways thanks folks I
crap um so yeah anyways thanks folks I
will be uh I got a bit next a busy
will be uh I got a bit next a busy
couple of days coming up but there will
couple of days coming up but there will
be more streams I'm hoping that I can
be more streams I'm hoping that I can
just like sit down for a couple evenings
just like sit down for a couple evenings
and get through writing all of this on
and get through writing all of this on
my own and then we'll be back like
my own and then we'll be back like
building cool M's and stuff but for now
building cool M's and stuff but for now
now I will see you around bye

Kind: captions
Language: en
back
here time to finish
here time to finish
this going to do another couple hours on
this going to do another couple hours on
this at the moment I think is what we're
this at the moment I think is what we're
going to do and try to finish
it
yeah I have it running hold on let
yeah I have it running hold on let
me this
why is the
mic okay we're
good this is very weird how this is
good this is very weird how this is
happening
happening
here s and receive
problem is that I don't know if the
problem is that I don't know if the
environment is good or
not well this year isn't passing the
not well this year isn't passing the
buffers
correctly this looks like it should
correctly this looks like it should
be let meum
yeah CU this just returns
M's
for e
this is wrong
this is wrong
here right
is this
is this
wrong hold
on actually might be
right
right
[Music]
[Music]
mhm yeah because we get Bel
here
okay for
what's in the observations here
zero
really okay now we have data
why was this getting called before
um 119
[Music]
no
rewards but that could just be
sparcity or hypers
it looks
reasonable this numm is
concerning
right let me see if this gets passed
yeah we get 5 12 MS
I do this
I'm good
stuck I'm not making any
progress
oh hold on maybe
okay appears to have some correct
okay appears to have some correct
data yeah look at that it
learns okay so if this works then um
this is very simple now
right few improvements for sure but this
right few improvements for sure but this
is very
simple
for e
this is a little Jank here
this is a little Jank here
well if I do multiprocessing it'll be
well if I do multiprocessing it'll be
different
right or Ray for that
matter yeah you see this cereal
pretty
awkward I'm take some work
I mean for now we can check
I mean for now we can check
um we can check the init
um we can check the init
here if we're committed to having this
all right
yeah so we can tell from
yeah so we can tell from
this slightly
obnoxious oops hold
obnoxious oops hold
[Music]
on
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e
e e
I realized I didn't unmute the darn
I realized I didn't unmute the darn
mic when I came back
before
before
jeez it's been a little bit chaotic
jeez it's been a little bit chaotic
today I've got like uh people here at
today I've got like uh people here at
installing the mini split they just
installing the mini split they just
finished finally so that's nice to have
finished finally so that's nice to have
uh it's currently it's
uh it's currently it's
400m I'm trying to think what I want to
400m I'm trying to think what I want to
do about this
the situation here is a little bit
tricky there are kind of some delicate
tricky there are kind of some delicate
things that I need to work
things that I need to work
out this just going to take a little
out this just going to take a little
longer hold on background
longer hold on background
noise
noise
um I just I have a few things that I got
um I just I have a few things that I got
to work out here and they're just going
to work out here and they're just going
to take a while
like I can at least talk through what
like I can at least talk through what
what I'm trying to do here
what I'm trying to do here
so the way puffer lib works you have
so the way puffer lib works you have
this giant blocka shared memory that
this giant blocka shared memory that
gets allocated and then it gets sliced
gets allocated and then it gets sliced
up and given to all the individual
up and given to all the individual
environments right that's what puffer
environments right that's what puffer
lib does but the thing is the way that
lib does but the thing is the way that
it actually distributes those slices is
it actually distributes those slices is
a little bit
a little bit
Jank um
Jank um
and it's going to require like fixing
and it's going to require like fixing
that is going to
that is going to
require possibly adding something
require possibly adding something
to the environment API itself I
think it's a little
think it's a little
tricky but basically I've got to get
tricky but basically I've got to get
this right because this is like this is
this right because this is like this is
kind of like the one thing of everything
kind of like the one thing of everything
in puffer this is like the one thing
in puffer this is like the one thing
that is very exposed to user and it's
that is very exposed to user and it's
going to be this like copied across all
going to be this like copied across all
the different environments this is like
the different environments this is like
the one thing that actually has to be
the one thing that actually has to be
done pretty darn
done pretty darn
correctly
correctly
um I mean there's not even like a ton of
um I mean there's not even like a ton of
stuff to code here it's the amount of
stuff to code here it's the amount of
code is going to be relatively small
code is going to be relatively small
it's a lot more just thinking on how to
it's a lot more just thinking on how to
do
this I guess I what I can do here cuz
this I guess I what I can do here cuz
here it's 400 p.m. um and I have other
here it's 400 p.m. um and I have other
stuff to do today as well um I think
stuff to do today as well um I think
what I'm going to do is I'm going to
what I'm going to do is I'm going to
just spend a little bit of time right
just spend a little bit of time right
now trying to think through and see if I
now trying to think through and see if I
can figure out the last remaining
can figure out the last remaining
questions and then I'll end stream I'll
questions and then I'll end stream I'll
go do all the other stuff I'll probably
go do all the other stuff I'll probably
Dev a little bit through the evening
Dev a little bit through the evening
here try to get some progress on this I
here try to get some progress on this I
got a bunch of stuff to do tomorrow and
got a bunch of stuff to do tomorrow and
I'll basically I'll be seeing what I can
I'll basically I'll be seeing what I can
broadcast live but the thing is I'm
broadcast live but the thing is I'm
pretty happy in the last couple of days
pretty happy in the last couple of days
we've gotten so so much progress uh in a
we've gotten so so much progress uh in a
relatively short amount of time on
relatively short amount of time on
cleaning up this whole thing it's just
cleaning up this whole thing it's just
the it's really at this point we're just
the it's really at this point we're just
cleaning up Loose Ends a couple last
cleaning up Loose Ends a couple last
good decisions and some loose
good decisions and some loose
ends and that requires a little bit of
ends and that requires a little bit of
care but this is going to make it very
care but this is going to make it very
very nice to do RL this is the thing
very nice to do RL this is the thing
that I wanted to really do with
that I wanted to really do with
puffer so
puffer so
let's look at that
let's look at that
um the main thing that's difficult is I
um the main thing that's difficult is I
think every n has to
think every n has to
have an optional buffer argument or
have an optional buffer argument or
something that's really awkward
something that's really awkward
though maybe it
doesn't the thing is I don't want to
doesn't the thing is I don't want to
have to add
okay here's the thing that's bothering
okay here's the thing that's bothering
me right let's let's outline this
me right let's let's outline this
because this is a good software design
talk this buffer is essentially an
talk this buffer is essentially an
internal detail
internal detail
right the internal detail is
right the internal detail is
that when the environment is going to
that when the environment is going to
write stuff for observations rewards
write stuff for observations rewards
actions when it's going to write data
actions when it's going to write data
there
there
into these
buffers those buffers have to be able to
buffers those buffers have to be able to
come from multiple places and you have
come from multiple places and you have
to be able to set those buffers to
to be able to set those buffers to
whatever you want
whatever you want
okay that's what you have to be able to
okay that's what you have to be able to
do um so right now I have this like
do um so right now I have this like
underscore assign buffers method which
underscore assign buffers method which
is an internal thing that we use which
is an internal thing that we use which
is the correct way to do it if you think
is the correct way to do it if you think
about it
about it
this works totally fine
this works totally fine
for standard puffer lib
for standard puffer lib
API buffers are internal they show up in
API buffers are internal they show up in
the internal code base users do not need
the internal code base users do not need
to know or care about them they just
to know or care about them they just
magically make everything fast no
magically make everything fast no
breaking API stuff
breaking API stuff
right uh the problem comes
when well the problem comes when we try
when well the problem comes when we try
to do this stuff for
native environments so native
native environments so native
environments are custom environments
environments are custom environments
that are meant to be ultra fast and
that are meant to be ultra fast and
strip away a lot of the
strip away a lot of the
Redundant elements the things that are
Redundant elements the things that are
meant to handle environments that aren't
meant to handle environments that aren't
built as
nicely so when that happens right the
nicely so when that happens right the
environments
environments
themselves they need to know about the
themselves they need to know about the
buffers on creation
or do
or do
they wait a
they wait a
moment maybe they
moment maybe they
don't maybe they
don't
don't
H hold on a second
technically
technically it's observations actions
technically it's observations actions
rewards
rewards
DS there is no reason that you should
DS there is no reason that you should
ever need any of these
ever need any of these
things on the creation of an
things on the creation of an
environment you only ever need these
environment you only ever need these
things
before you
reset so technically I can create the
environment and then I can assign the
buffers right
so you have a method assign
buffers the method can be
part of puffer m
I'm trying to think what it looks
like you have this init function
like you have this init function
right it's another method is the
right it's another method is the
annoying
annoying
thing like yet another method
well
maybe sign buffers
maybe this is better
split stuff up a little
bit register buffers or assign buffers
bit register buffers or assign buffers
or
something it's actually kind of cool
something it's actually kind of cool
because I can check if the method is
because I can check if the method is
called correctly and
called correctly and
such it makes it way harder to silently
such it makes it way harder to silently
screw up
keeps the API
consistent I kind of like
that I'm going to have to think through
that I'm going to have to think through
the details
but I think that that's the
but I think that that's the
solution so the architecture
overall you have puffer lib
overall you have puffer lib
vectorization vectorization can plug
vectorization vectorization can plug
into any existing environment via the
into any existing environment via the
emulation
emulation
layers but if you want to go really fast
layers but if you want to go really fast
then you write your environment native
then you write your environment native
which it doesn't have to go through
which it doesn't have to go through
emulation
emulation
this allows you to do additional memory
this allows you to do additional memory
optimizations because the data buffers
optimizations because the data buffers
get propagated all the way down through
get propagated all the way down through
the environment so you're writing
the environment so you're writing
directly into shared
directly into shared
memory the way that that works is that
memory the way that that works is that
after you create your environments just
after you create your environments just
the same as in puffer you assign buffers
the same as in puffer you assign buffers
but instead of assigning buffers to the
but instead of assigning buffers to the
emulation layer you assign buffers
emulation layer you assign buffers
directly to the environment which means
directly to the environment which means
that if your environment is lower level
that if your environment is lower level
if it's in scyon or C you simply have to
if it's in scyon or C you simply have to
have
have
one additional assigned buffers method
one additional assigned buffers method
or
or
similar and the structure of that is
similar and the structure of that is
flexible it can vary based on how you're
flexible it can vary based on how you're
designing your environment you're always
designing your environment you're always
going to have to have some little bit of
going to have to have some little bit of
boiler plate
boiler plate
there um
there um
but the only boiler plate would be in
but the only boiler plate would be in
scyon and it would literally just be a
scyon and it would literally just be a
method that's
like well actually it doesn't even have
like well actually it doesn't even have
to have any boiler you can just declare
to have any boiler you can just declare
uh observations and such as some
uh observations and such as some
variables can you do that wait hold
on uh no you still have to have one
on uh no you still have to have one
function you have to have one function
function you have to have one function
but it's a very simple function you just
but it's a very simple function you just
have to have like a register buffers
have to have like a register buffers
method that
method that
assigns uh that just passes the pointer
assigns uh that just passes the pointer
to your data basically from python to C
to your data basically from python to C
I think that's
I think that's
it I think I figured it out
it I think I figured it out
that is clean that invokes zero user API
that is clean that invokes zero user API
changes absolutely zero user API
changes absolutely zero user API
changes so it's
changes so it's
non-breaking um the native actually it
non-breaking um the native actually it
makes the native API easier it gives you
makes the native API easier it gives you
a formal API for
a formal API for
Native I do not like that you have to
Native I do not like that you have to
subass
subass
it but the thing is you have to subass
it but the thing is you have to subass
something anyways normally right you're
something anyways normally right you're
subclassing like gym environment or
subclassing like gym environment or
petting zoo
environment I mean
technically I don't think I should feel
technically I don't think I should feel
that bad about this
that bad about this
because well hold on should I
oh wait wait wait wait maybe there's I
oh wait wait wait wait maybe there's I
think I have a solution
I think I'm I think I got
one yeah we got
it we 100% have
it here's the trick
the reason that we have to have this
the reason that we have to have this
super call
super call
here the only reason that we had to do
here the only reason that we had to do
this was because these
this was because these
buffers need to be assigned by here
buffers need to be assigned by here
right you need to have the buffers
right you need to have the buffers
assigned so you need to have some sort
assigned so you need to have some sort
of function that gets called on
of function that gets called on
initialization and the easiest function
initialization and the easiest function
to call on initialization when you're
to call on initialization when you're
already forced to use a class anyways is
already forced to use a class anyways is
super so you're forced into inheritance
but if I don't need those buffers right
but if I don't need those buffers right
what I do is I do like you know
defa like assign
defa like assign
buffers
right and then I can just
right and then I can just
do I mean it'll be more than this right
do I mean it'll be more than this right
it'll be like
it'll be like
uh
uh
or it'll be like this or something right
or it'll be like this or something right
and then the super call goes
and then the super call goes
away this buffer leaves this buffer is
away this buffer leaves this buffer is
not needed in these uh the argument
anymore and then this is
anymore and then this is
self. buff
dot observations
dot observations
I like this
in mind you if you handle the
in mind you if you handle the
vectorization internally in C then this
vectorization internally in C then this
gets even
easier you still have to write this
easier you still have to write this
stupid function though
it's
obnoxious does this make sense let me
obnoxious does this make sense let me
think
I might a trolled a little bit
well it's a little bit better
actually yeah it's a little bit better
actually yeah it's a little bit better
because what I can
because what I can
do is I can make this a base
do is I can make this a base
method of sorts Maybe
you still have to call something and
you still have to call something and
scon though in order to assign these
scon though in order to assign these
don't you
it's still better though it's still
it's still better though it's still
better this way
better this way
because you no longer have to deal with
because you no longer have to deal with
it manually at all in the python layer
it manually at all in the python layer
so the python layer is very
easy e
still not 100%
still not 100%
satisfied let may think
not 100%
satisfied reason being that I don't
satisfied reason being that I don't
think there's a way generally to
think there's a way generally to
uh should be a way to know how to assign
uh should be a way to know how to assign
these buffers
these buffers
no maybe
no maybe
not well the tricky thing is you want to
not well the tricky thing is you want to
be able to do the thing I have here
be able to do the thing I have here
right is I have the individual M's in C
right is I have the individual M's in C
and the loops in Python but you'd also
and the loops in Python but you'd also
want to be able to have uh the loops and
want to be able to have uh the loops and
just
see it's only two
see it's only two
cases it's basically all you would ever
cases it's basically all you would ever
want to do
I actually think I can just write that
method and if I put enough guards on
method and if I put enough guards on
it uh if I put enough guards on it then
it uh if I put enough guards on it then
it will just
work and I won't need self. buff either
work and I won't need self. buff either
it'll just be self. observations
you know this will be
perfect this should be perfect
what's the difference between pix and
what's the difference between pix and
piid you can ignore piid that's like a
piid you can ignore piid that's like a
scyon header uh we're not we're probably
scyon header uh we're not we're probably
not going to use those unless we can
not going to use those unless we can
automatically generate
them like the stuff at the top of my pix
them like the stuff at the top of my pix
is essentially a piid like the from
is essentially a piid like the from
exter import like all those Imports
exter import like all those Imports
those like functions that's basically
those like functions that's basically
what a piid does
also damn it
also damn it
linky took me half an hour to figure out
linky took me half an hour to figure out
while I was at the gym to like guess
while I was at the gym to like guess
that it was probably that PR that broke
stuff it's okay it didn't take long to
stuff it's okay it didn't take long to
fix once I sat down
I'm trying to think if there's anything
I'm trying to think if there's anything
I've overlooked
here well the only thing is that a
here well the only thing is that a
little like the code is going to look
little like the code is going to look
like magically simple isn't
it working with a C+ plus
it working with a C+ plus
Dev and bindings with his game are in a
piid yeah cuz that's like a scyon header
piid yeah cuz that's like a scyon header
file it's kind of
file it's kind of
awkward like in theory you should be
awkward like in theory you should be
able to automatically generate them and
able to automatically generate them and
it works for small projects but when I
it works for small projects but when I
run it on RB it doesn't work
run it on RB it doesn't work
nicely so it's a little obnoxious
it's okay we don't need it
okay the one thing I'm not sure about is
okay the one thing I'm not sure about is
this actions
this actions
buffer e
the reason we do this
differently is so you can pass in
differently is so you can pass in
actions right without having to load
actions right without having to load
them separately from a different source
that Mak sense you
think it's kind of awkward if you think
think it's kind of awkward if you think
about it because internally we always
about it because internally we always
have it in this format already
I guess it's okay to do it like this
it is kind of
magic e
it's not bad
though you'll end up saving a little bit
though you'll end up saving a little bit
of this
code things will be cleaner cu the buff
code things will be cleaner cu the buff
will be gone it'll just
will be gone it'll just
be yeah it'll be cleaner
okay I think we figured it
okay I think we figured it
out I think we figured it
out I think we figured it
out um yeah it's
out um yeah it's
4:38 now hold on we got poer lib stuff
4:38 now hold on we got poer lib stuff
in
in
Discord going on here
what
uh this is amusing I'll
uh this is amusing I'll
bite what is this
okay this is funny this is like a
okay this is funny this is like a
little game
there's not really
uh that's amusing
I'll tell them real quick to
do it's multi-agent it looks like
yeah yeah
we'll give him the easy
version
for e
there we
go I mean I guess I can technically go
go I mean I guess I can technically go
just start doing a little bit of this
just start doing a little bit of this
right
now let's
see I mean maybe it's not that bad right
see I mean maybe it's not that bad right
for
sign
buffers how's this work again we
buffers how's this work again we
do like
do like
this Creer and
this Creer and
bars num MS
for
something is still confused
here something is still confused
I think it still makes sense to have
I think it still makes sense to have
this damn thing as a base class
this damn thing as a base class
unfortunately doesn't it
it's kind of tricky to be honest
am I doing something wrong here by uh
am I doing something wrong here by uh
trying to avoid
trying to avoid
cereal I might be doing some I might not
cereal I might be doing some I might not
be doing the right thing here trying to
be doing the right thing here trying to
avoid cereal
I think I'm really going to need to sit
I think I'm really going to need to sit
on this for a while I honestly I think I
on this for a while I honestly I think I
will I think I should just go get some
will I think I should just go get some
exercise get some food do all the other
exercise get some food do all the other
things I got to do today and then um
things I got to do today and then um
maybe I I'll get some time in the
maybe I I'll get some time in the
evening once I'm uh
evening once I'm uh
back in order to do some of this stuff
back in order to do some of this stuff
cuz like this is hard this is actually
cuz like this is hard this is actually
like legitimately
like legitimately
hard cuz this is like designing I mean
hard cuz this is like designing I mean
this is more design than anything
this is more design than anything
like software
architecture software architecture
I know I'm
I know I'm
pensive definitely pensive with
this they're like at like they're kind
this they're like at like they're kind
of too many
of too many
layers you know
I'm not getting anything done if I'm
I'm not getting anything done if I'm
just sitting here staring at this this
just sitting here staring at this this
is honestly like you know take a shower
is honestly like you know take a shower
and think about it type of material or
and think about it type of material or
something or know sit in a hot tub and
something or know sit in a hot tub and
think about it material this is like
think about it material this is like
this needs to be done
correctly basically there are like
correctly basically there are like
there's too there are too many layers in
there's too there are too many layers in
the stack and I don't want to add
the stack and I don't want to add
another one but I I have to be a little
another one but I I have to be a little
careful with how I go about it so I'm
careful with how I go about it so I'm
going to go just I'm just going to end
going to go just I'm just going to end
stream for now um I think even though
stream for now um I think even though
not much code was done today uh I think
not much code was done today uh I think
there has been substantial like design
there has been substantial like design
progress on this
progress on this
and I mean ultimately that's very
and I mean ultimately that's very
important like the system architecture
important like the system architecture
of puffer is very very
of puffer is very very
important I always say keep it simple
important I always say keep it simple
right and I try to keep it simple keep
right and I try to keep it simple keep
it simple so I'm trying not to add stuff
it simple so I'm trying not to add stuff
to it but it's very hard to make stuff
to it but it's very hard to make stuff
simple right it's very easy to build
simple right it's very easy to build
something complicated that works but
something complicated that works but
it's
it's
crap um so yeah anyways thanks folks I
crap um so yeah anyways thanks folks I
will be uh I got a bit next a busy
will be uh I got a bit next a busy
couple of days coming up but there will
couple of days coming up but there will
be more streams I'm hoping that I can
be more streams I'm hoping that I can
just like sit down for a couple evenings
just like sit down for a couple evenings
and get through writing all of this on
and get through writing all of this on
my own and then we'll be back like
my own and then we'll be back like
building cool M's and stuff but for now
building cool M's and stuff but for now
now I will see you around bye
