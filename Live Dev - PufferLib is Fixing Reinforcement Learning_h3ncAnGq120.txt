Kind: captions
Language: en
Okay, we're back
Okay, we're back
live. I've totally messed up this
camera. That's decent.
Okay. So, what happened
Okay. So, what happened
yesterday? Um,
yesterday? Um,
I thought it was going to take me like
I thought it was going to take me like
15 minutes to set up that machine, which
15 minutes to set up that machine, which
really it should have taken me 15
really it should have taken me 15
minutes to set up that new machine. Uh,
minutes to set up that new machine. Uh,
but turns out they shipped it to me with
but turns out they shipped it to me with
the wrong operating system, wrong BIOS
the wrong operating system, wrong BIOS
settings, and no drivers.
settings, and no drivers.
So, uh, yeah, I had to spend like six
So, uh, yeah, I had to spend like six
hours fixing all
hours fixing all
that. Of course, I didn't know that was
that. Of course, I didn't know that was
the issue.
the issue.
So, but
anyways, now we can do
this. This should
work.
Boom. What OS it came with? 22.04, 04
Boom. What OS it came with? 22.04, 04
which doesn't have driver support for
which doesn't have driver support for
590s. It
590s. It
seems need is
seems need is
24.04. Bio settings were totally screwed
24.04. Bio settings were totally screwed
up. Literally wouldn't even boot with
up. Literally wouldn't even boot with
the drivers once I put them on. And uh
the drivers once I put them on. And uh
yeah, it's it was a whole mess. Oh, also
yeah, it's it was a whole mess. Oh, also
another fun thing is I had the machine
another fun thing is I had the machine
bricked for like three hours because I
bricked for like three hours because I
installed the 570 drivers, which Nvidia
installed the 570 drivers, which Nvidia
says they're compatible, but then when
says they're compatible, but then when
you actually install them, you get uh a
you actually install them, you get uh a
like startup time crash error uh before
like startup time crash error uh before
you even get into the OS, which is
you even get into the OS, which is
actually you need the 570 open
actually you need the 570 open
drivers. So, totally
drivers. So, totally
stupid. Anyways, there's your 5090.
Um, and we can now run stuff with this,
Um, and we can now run stuff with this,
which is
cool. See for comparison.
Oh, actually that's better than I
Oh, actually that's better than I
thought. Why is it only
thought. Why is it only
480k here, though? I thought it was
480k here, though? I thought it was
faster on
uh I thought the Neptune runs I had were
faster. My screen just went completely
faster. My screen just went completely
black.
the
heck.
heck.
Um, is the stream still up? Yeah. Why
Um, is the stream still up? Yeah. Why
did my display just totally shut off?
did my display just totally shut off?
Let me go fiddle with that.
Got to love loose
cables. Did it kill my other
cables. Did it kill my other
terminal? Wait,
terminal? Wait,
what? It killed my other terminal.
Unless I was stupid and closed it
Unless I was stupid and closed it
somehow. Oh, put it. Hang
on. It put it on the other screen for
on. It put it on the other screen for
some
some
reason. There we
go. If this is the uh the speed up, then
go. If this is the uh the speed up, then
I'll be happy with it because that's
I'll be happy with it because that's
like a good 20 30%. That's like actually
like a good 20 30%. That's like actually
decent.
decent.
But I don't know if this is the Yes.
So this thing crashed
So this thing crashed
apparently. This thing got
apparently. This thing got
um got soda but then
crashed. And this thing doesn't do much.
Let me I just want to see the steps per
Let me I just want to see the steps per
second and such that we were getting out
second and such that we were getting out
of
of
this. This one should be fine for
this. This one should be fine for
uh this one or this one.
Okay. So, we have a little bit of
Okay. So, we have a little bit of
uh we've got some disparities here.
uh we've got some disparities here.
looks
like I think cuz one of the machines
like I think cuz one of the machines
like faster than the other or
something. So these ones get up to 570
something. So these ones get up to 570
590 or
590 or
whatever. But then this one here
whatever. But then this one here
is only 500k.
Wait. Mu on baseline
Wait. Mu on baseline
3 512. Oh, it's because of the the model
3 512. Oh, it's because of the the model
size. Okay. So, this is 512 model dim
size. Okay. So, this is 512 model dim
runs
runs
500K. So, I probably am not doing that
500K. So, I probably am not doing that
here. Let's see.
Yeah, see this is too small.
So, we'll seeuh how the 5090 does with
So, we'll seeuh how the 5090 does with
the corrected model
size and we'll get an accurate
size and we'll get an accurate
benchmark. This one's at 480.
benchmark. This one's at 480.
with uh my stuff on my desktop running.
with uh my stuff on my desktop running.
It seems like it's supposed to be at
It seems like it's supposed to be at
about Oh, it goes up a little bit, but
about Oh, it goes up a little bit, but
that's about
that's about
right.
550. It's only like a 10% speed
550. It's only like a 10% speed
improvement.
That's really not great.
Interestingly, it looks like there's
Interestingly, it looks like there's
like somewhat lower copy
like somewhat lower copy
overhead. Memory bandwidth maybe has
overhead. Memory bandwidth maybe has
improved a bit.
literally 10%.
Okay. I think the uh they
Okay. I think the uh they
changed in
changed in
PyTorch they changed
um Hang on.
Where the hell did they move the Dtypes
Where the hell did they move the Dtypes
to?
Oh no, they're right
there. So, what the heck was wrong?
there. So, what the heck was wrong?
I just break
something. Welcome YouTube folks.
something. Welcome YouTube folks.
Plan for today is to do a little bit of
Plan for today is to do a little bit of
work uh benchmarking this new
work uh benchmarking this new
and after that we'll queue up some
and after that we'll queue up some
experiments and then we'll probably do
experiments and then we'll probably do
some
some
infra do some infradev on puffer.
Okay, so this is somehow screwed up.
Oh, maybe this needs to go. Yeah, this
Oh, maybe this needs to go. Yeah, this
needs to go here.
Uh, this should definitely get
Uh, this should definitely get
defined unless I have this whole thing
defined unless I have this whole thing
bugged somehow.
Ah, I uh I see.
Ah, I uh I see.
Yeah, that's a little
Yeah, that's a little
awkward.
awkward.
Uh, I guess we just indent this whole
thing. Indent the whole thing, too,
actually. Well, that's that's going to
actually. Well, that's that's going to
screw up the profiling, though.
So, we have to repeat this
check. That's the only way I can do
it. I plan on going through this whole
it. I plan on going through this whole
file and cleaning stuff up a whole bunch
file and cleaning stuff up a whole bunch
before we get to uh release. Anyways,
So, this doesn't seem any faster at all
So, this doesn't seem any faster at all
than before,
right? So, am I doing something
wrong or is it just genuinely not
wrong or is it just genuinely not
faster?
It's also possible I'm doing like a dot
It's also possible I'm doing like a dot
float or something in here.
Ah, right
here. So if I do
this. Okay, now we actually get some
this. Okay, now we actually get some
speed.
700k, but I think B float is slower,
700k, but I think B float is slower,
isn't
it? Yeah. So, now we're back to the
it? Yeah. So, now we're back to the
original speed.
I don't think it should be
Oh, wait. This is right
Oh, wait. This is right
here. This is probably messing it up
here. This is probably messing it up
here, right? So, let let me make sure
here, right? So, let let me make sure
then that I'm doing the uh the whole
then that I'm doing the uh the whole
thing in float 16 first to really get a
thing in float 16 first to really get a
benchmark.
There you
Okay. So, this is
700K. And uh is this whole
700K. And uh is this whole
thing like is the type correct on all
this? Doesn't look like it.
So maybe it's just that you got to be
So maybe it's just that you got to be
careful with your cast.
So this embedding layer
returns this embedding layer is
returns this embedding layer is
returning
returning
um not float 16.
with
torchautocast linear layers
torchautocast linear layers
autocast. So do I have this autocast? I
autocast. So do I have this autocast? I
should, right?
Yeah, I have the autocast context here.
Okay, maybe
Okay, maybe
um maybe this is supposed to do
um maybe this is supposed to do
something. Let's
see. Okay, so this does work, right?
see. Okay, so this does work, right?
So it it autocast the output of this
So it it autocast the output of this
linear
layer and the LSTM
layer and the LSTM
outputs load 16. So this is
outputs load 16. So this is
correct. The embeddings output float 32
correct. The embeddings output float 32
or whatever.
So this doesn't
matter. This is the only thing this
matter. This is the only thing this
buffer that does matter is this float
buffer that does matter is this float
16.
Okay, so this gets us 700K. Okay.
That's
obnoxious. I'm sure this one still
obnoxious. I'm sure this one still
breaks, right?
But I can't compile with the current
But I can't compile with the current
version. That
sucks. What if I do it this way?
Okay. So, compile doesn't work since I
Okay. So, compile doesn't work since I
did the state change stuff. So, that'll
did the state change stuff. So, that'll
be part of the uh the refactor. We'll be
be part of the uh the refactor. We'll be
then making that thing
then making that thing
work. Um,
work. Um,
uh, for now though, we're able to get
uh, for now though, we're able to get
650k without screwing
with. We're able to get like 650k
with. We're able to get like 650k
without screwing with
without screwing with
precision and 700k with screwing with
precision and 700k with screwing with
precision.
The thing is, Captain, I had compile
The thing is, Captain, I had compile
working and then I had somebody ask me
working and then I had somebody ask me
for a feature to help clean up the uh
for a feature to help clean up the uh
the code and it completely [ __ ]
the code and it completely [ __ ]
compile. I didn't
realize. This is still pretty
realize. This is still pretty
disappointing though anyway you cut it.
disappointing though anyway you cut it.
only getting like 10% speed improvement.
And like actually the thing that's weird
And like actually the thing that's weird
about this as well is copy overhead is
about this as well is copy overhead is
lower than
lower than
before. So it looks like the speed
before. So it looks like the speed
improvement is
uh maybe it's about the same. So maybe
uh maybe it's about the same. So maybe
it is just a flat
10%. More speed increase model size and
10%. More speed increase model size and
depth. I don't know.
Maybe. But like I don't I shouldn't have
Maybe. But like I don't I shouldn't have
a ton of overhead on it
anyways. It might actually be the thing
anyways. It might actually be the thing
that I really have to get compile
that I really have to get compile
working and maybe um cudigraphs and
working and maybe um cudigraphs and
stuff to really get the most out of
it. Maybe that's what we have to
it. Maybe that's what we have to
do. Okay.
So, a lot of things on my mind now with
So, a lot of things on my mind now with
this
um things to do,
right? I think that
Okay, I want to queue up a couple
Okay, I want to queue up a couple
experiments on neural
experiments on neural
MMO. Just look at my current
MMO. Just look at my current
experiments. Queue up a couple
more. We can do it on this box. It'll be
more. We can do it on this box. It'll be
10% faster.
10% faster.
Whoopdedoo. Actually, I think this one
Whoopdedoo. Actually, I think this one
will be a good one to play with.
will be a good one to play with.
Um, maybe I'll leave
Um, maybe I'll leave
What I'll do is I'll leave
What I'll do is I'll leave
automatic mix precision on this
one so we can test if that's actually
one so we can test if that's actually
stable.
So that's an easy run.
Um, also Abuntu 24 kind of sucks because
Um, also Abuntu 24 kind of sucks because
you have to do this everywhere. I I have
you have to do this everywhere. I I have
a potential workaround for it, but I'm
a potential workaround for it, but I'm
going to have to go do it at the
going to have to go do it at the
container level.
I don't know whose dumbass idea it was
I don't know whose dumbass idea it was
to decide that you shouldn't be able to
to decide that you shouldn't be able to
install Python packages outside of a
install Python packages outside of a
virtual environment. Like they should
virtual environment. Like they should
probably stop writing
software. It's like the dumbest I like I
software. It's like the dumbest I like I
honestly I honestly don't know what is
honestly I honestly don't know what is
wrong with Python that they adopt that
wrong with Python that they adopt that
thing. Like how stupid do you have to
thing. Like how stupid do you have to
be? Oh yeah, our packages should not be
be? Oh yeah, our packages should not be
installed outside of a virtual
installed outside of a virtual
environment. Like come on, be a real
environment. Like come on, be a real
programming language.
Okay. Forgot to
remove this
remove this
flag. This one doesn't work
flag. This one doesn't work
yet. Then we should be good.
Ah, wait. There's one other thing I
Ah, wait. There's one other thing I
forgot.
Okay, good. Now this should give us
Okay, good. Now this should give us
pretty clean training
curves and we'll see whether float 16 is
curves and we'll see whether float 16 is
stable.
Volt 700k
train. We will leave this
alone. That is one experiment I wanted
alone. That is one experiment I wanted
to run.
to run.
Second
experiment. Um, are my boxes down or
experiment. Um, are my boxes down or
some [ __ ]
Is that what's going
on? Everything's down.
Um, that's
Um, that's
bizarre. Let me go see if there's
like Let me go check on what the hell
like Let me go check on what the hell
just
just
happened. I see like one of them just
happened. I see like one of them just
came back up. A couple of them are
came back up. A couple of them are
coming back up. Let me go check what the
coming back up. Let me go check what the
hell's going on, though. That's bizarre.
Well, that's fun to find out. They're
Well, that's fun to find out. They're
just [ __ ] wired wrong. Um, and
just [ __ ] wired wrong. Um, and
actually, I just saw one of the boxes go
actually, I just saw one of the boxes go
back
back
off. Seven is back online.
Yeah.
Okay. I'm going to go boot all the
Okay. I'm going to go boot all the
boxes, I guess. I'll be right back.
Jeez. You
Jeez. You
know, one of these days once I finish
know, one of these days once I finish
fixing all the reinforcement learning
fixing all the reinforcement learning
software, I'm going to have to go put
software, I'm going to have to go put
everyone in infrastructure out of a job
everyone in infrastructure out of a job
because nobody can build anything that
because nobody can build anything that
[ __ ]
works. Oh my god.
works. Oh my god.
is
crazy. Not even power problems, just the
crazy. Not even power problems, just the
[ __ ] internet cables somehow being
[ __ ] internet cables somehow being
screwed. And like some of the boxes come
screwed. And like some of the boxes come
back up and some of them don't. How that
back up and some of them don't. How that
makes any sense, don't ask me.
I can't afford to lose a second day in a
I can't afford to lose a second day in a
row dealing with [ __ ] info, though.
So, none of my boxes are back. I'm just
So, none of my boxes are back. I'm just
going to leave that experiment uh that I
going to leave that experiment uh that I
just set up running for
now.
Actually, if I only get one experiment
Actually, if I only get one experiment
right now, that's not the experiment I
right now, that's not the experiment I
want to
want to
run. See how far this
is.
Actually, that tells me everything that
Actually, that tells me everything that
I needed to know right there. That
I needed to know right there. That
shit's not
shit's not
stable. Unless it's Is this the good
stable. Unless it's Is this the good
one? Cap.
I Yeah. Okay. That tells me everything I
I Yeah. Okay. That tells me everything I
need to know actually about that one
need to know actually about that one
already. Um, float 16 doesn't work out
already. Um, float 16 doesn't work out
of the box. It's not really expected
of the box. It's not really expected
to, so I guess no massive surprise
to, so I guess no massive surprise
there.
there.
Let's just check our losses real
Let's just check our losses real
quick. It just drives me
quick. It just drives me
nuts. All the infrastructure I got to
nuts. All the infrastructure I got to
deal
with. You can't even see it.
with. You can't even see it.
Maybe it's not totally messed
up. I mean, now that looks pretty messed
up. I mean, now that looks pretty messed
up. At least it's not the same
up. At least it's not the same
curve, right?
curve, right?
Definitely not the same
curve. Let's uh let me try a couple
curve. Let's uh let me try a couple
things here.
things here.
So
I want to try this. So, you set the seed
um like this. Now, I
um like this. Now, I
don't I don't know if this does
anything
really
really
because you're still all on the same
because you're still all on the same
process. Hang on. Let's not be totally
process. Hang on. Let's not be totally
stupid here. If you're all on the same
stupid here. If you're all on the same
process, if there's no randomness
process, if there's no randomness
involved, they're all going to be the
involved, they're all going to be the
same anyways.
same anyways.
If they have a seating function, then
If they have a seating function, then
it'll get
used. Yeah. I don't know why I was
used. Yeah. I don't know why I was
thinking this was a good idea. This
thinking this was a good idea. This
doesn't make any bloody sense.
The only thing that this
does, well, you do want some sort of
does, well, you do want some sort of
randomness actually because when you
randomness actually because when you
multiprocess, right, you don't want them
multiprocess, right, you don't want them
all to be the same seed across
processes. Let me see how I can do that.
Is there a default? Let me
see. Oh, no. Stack overflows offline.
I actually don't know how the default
I actually don't know how the default
seating works in uh in C. You know,
seating works in uh in C. You know,
there are a few different ways it could
there are a few different ways it could
be implemented.
Okay. So, if you don't seat
Okay. So, if you don't seat
it, then it acts as if it's
it, then it acts as if it's
seated with
one. Okay. You do want to seat
it. I'm trying to think what uh what I
it. I'm trying to think what uh what I
would want to seat it with.
I think I know the answer and I'm not
I think I know the answer and I'm not
going to like
it. See, I don't really like this.
Okay. So, we're going to leave that
Okay. So, we're going to leave that
experiment up for now until I figure out
experiment up for now until I figure out
this heating thing.
this heating thing.
Um, it probably does make sense to
Um, it probably does make sense to
I think. Does it make
sense? Yeah, because you want this to
sense? Yeah, because you want this to
work across different processes as
well. What I was doing originally was
probably probably running on the same
probably probably running on the same
map
everywhere.
everywhere.
Yeah. So if we want these things to be
consistent, we can probably do
consistent, we can probably do
um ve level
seating. Let me figure out I need to I'm
seating. Let me figure out I need to I'm
I got too many ideas in my head right
I got too many ideas in my head right
now of things that need to be done on
now of things that need to be done on
the infra.
So back
So back
level
feeding. Next we will need to
do movements.
I also wanted to do
I also wanted to do
uh
checking. Is there anything
else? I think that's it.
else? I think that's it.
And then there's baselines to there are
And then there's baselines to there are
baselines to run. Okay.
baselines to run. Okay.
So I've kind of got two separate
So I've kind of got two separate
important projects to fiddle with. I
important projects to fiddle with. I
think I want to really make sure that
think I want to really make sure that
the end finding stuff is good because
the end finding stuff is good because
we're actively doing that. So I'll start
we're actively doing that. So I'll start
with
with
this. Uh we'll fix
this. Uh we'll fix
seating arg type checking. I think there
seating arg type checking. I think there
should be a reasonable way to do that.
should be a reasonable way to do that.
We will see.
We will see.
I don't know if we can improve the
I don't know if we can improve the
logging type stuff at all. We'll have to
logging type stuff at all. We'll have to
look at that. But it's it's not that
look at that. But it's it's not that
this is not important. Uh it it's not
this is not important. Uh it it's not
important, but it's urgent, I think,
important, but it's urgent, I think,
because uh we're actively porting all
because uh we're actively porting all
the M's and we'd prefer to only have to
the M's and we'd prefer to only have to
do it
do it
once. Okay, scattered start to my day.
once. Okay, scattered start to my day.
Um but let's just really start one thing
Um but let's just really start one thing
at a time here.
at a time here.
throws me off when like stuff goes wrong
throws me off when like stuff goes wrong
like that with the uh the machines
like that with the uh the machines
because, you know, I had a plan with
because, you know, I had a plan with
what I wanted to do today and it kind of
what I wanted to do today and it kind of
threw everything
off. Oh, and also build caching. Where'd
off. Oh, and also build caching. Where'd
that file go?
I should even do this one first because
I should even do this one first because
it's annoying as hell.
that's going to try to rebuild freaking
that's going to try to rebuild freaking
everything
though. These dependencies change but
though. These dependencies change but
aren't tracked.
Okay. So this is why
That's going to trigger a lot of
That's going to trigger a lot of
rebuild. I think we will
rebuild. I think we will
see. Or it's not going to work at
all. So if I just do this
copying. So it doesn't detect
anything. Well, that's not it because
Yeah, that doesn't trigger
Yeah, that doesn't trigger
it. You would think it would.
Okay, there's no quick easy fix to that.
Okay, there's no quick easy fix to that.
It'll work with a clean build, but
It'll work with a clean build, but
there's no quick easy fix to
that. Force does it.
Syon takes a
while. No, the quick hack was
while. No, the quick hack was
actually decent on this.
Oh
jeez. That doesn't even
work. If the file is there, it copies
work. If the file is there, it copies
it. It doesn't check to see if it does
it. It doesn't check to see if it does
if there's anything in
if there's anything in
it. That's hilarious. Okay. Don't use
it. That's hilarious. Okay. Don't use
gro is
dumb, I guess.
Do you want to pass the seed on reset or
Do you want to pass the seed on reset or
on
in or on
both? Maybe on
both? Maybe on
both cuz you have no idea where they're
both cuz you have no idea where they're
going to use RNG, right?
going to use RNG, right?
So I think you want it passed on both.
Okay, now all we have to do is unpack
Okay, now all we have to do is unpack
the
AR. Now we have a way of passing seeds.
AR. Now we have a way of passing seeds.
I'm working on
I'm working on
it. That's what I'm going to do automat.
it. That's what I'm going to do automat.
I'm going to just do it automatically,
Captain. Well,
semi-automatically. It's slightly
semi-automatically. It's slightly
obnoxious because you need
obnoxious because you need
um you still need to know like the Nvid
um you still need to know like the Nvid
or
or
whatever for
multipprocessing. But I did actually
multipprocessing. But I did actually
notice like a big difference in the
notice like a big difference in the
training curve with the neural MMO. So
training curve with the neural MMO. So
now I'm working on it.
Isn't this going to be kind of hard
Isn't this going to be kind of hard
because we have to take a keyword out,
because we have to take a keyword out,
don't
we? Or maybe not. Maybe we can just call
we? Or maybe not. Maybe we can just call
it twice. You
think HM process?
Yeah, it's the only Yeah, the thing is
Yeah, it's the only Yeah, the thing is
that the the uh multipprocessing back
that the the uh multipprocessing back
has to give you like one, two, three,
has to give you like one, two, three,
four or whatever and then you can assign
four or whatever and then you can assign
the seats.
I think that'll work.
The hell did I just
do? Yeah. So, this is fine.
So
So
assuming things each process
There we go. So, this should seed now.
There we go. So, this should seed now.
And then all we have to do is
And then all we have to do is
pass this arg
in. And then it'll be like the same
in. And then it'll be like the same
thing on on a knit, I believe.
Yeah. So, it'll be the same thing on a
Yeah. So, it'll be the same thing on a
net
This is kind of errorprone in the sense
This is kind of errorprone in the sense
that if you forget
that if you forget
to you can forget to seed your end.
Not that bad
Not that bad
though. Not that bad.
So this is chill.
I can probably make it like a required
I can probably make it like a required
keyword. Oh yeah, it is a required
keyword. Oh yeah, it is a required
keyword as
keyword as
is. I just need a good error message for
is. I just need a good error message for
it and I'm good.
Yeah, because this can technically call
Yeah, because this can technically call
custom
logic and you now have to do the same
logic and you now have to do the same
thing in envet, don't
thing in envet, don't
you? So, there's a little bit of
you? So, there's a little bit of
repeated code. Quite a bit of repeated
repeated code. Quite a bit of repeated
code even.
And because this has to go
And because this has to go
here. Yeah. Now this has to go here.
And now this is literally just uh this
And now this is literally just uh this
is just seed. You just pass them
is just seed. You just pass them
directly for this
directly for this
one. Okay, this is not terrible.
This is
null. Okay, so that
null. Okay, so that
runs. Now I have to get it into
runs. Now I have to get it into
vectorization.
This does actually pass the
seed. I think it needs to pass it here
seed. I think it needs to pass it here
as well.
Okay.
Not sure I really like the way this is.
See, I know how to do this in the C.
See, I know how to do this in the C.
It's once again the shitty annoying
It's once again the shitty annoying
Python.
I guess with the VEC interface, you
I guess with the VEC interface, you
don't expect to pass a big ass list of
don't expect to pass a big ass list of
seeds, right?
Yeah, because that would require you
Yeah, because that would require you
messing with the seed in the algorithm
layer. Is that something that you want
layer. Is that something that you want
to be messing with?
So gross to have to do
So gross to have to do
that. I mean, I can totally punt on that
that. I mean, I can totally punt on that
for now
for now
because like the thing is that's going
because like the thing is that's going
to get
easier. Like eventually we're probably
easier. Like eventually we're probably
going to just have a C
going to just have a C
vecle or
vecle or
whatever. Well, no. Shoot because we
whatever. Well, no. Shoot because we
need the same code to work for the non C
need the same code to work for the non C
environments. That's
If I can just get each of
these, these serial
these, these serial
M its own ascending
seed. I think that's going to be
seed. I think that's going to be
it. If I can just get each of these its
it. If I can just get each of these its
own ascending seed.
So because this has no MS,
right? So you target this worker
right? So you target this worker
process.
Let's numb M's here
though. Workers. Oh, M's per
though. Workers. Oh, M's per
worker. So, it does get M's per
worker. So, it does get M's per
worker. Then
I Okay.
I Okay.
I can probably just make this
I can probably just make this
work because if I do it this way, right?
work because if I do it this way, right?
So, I'm going to have
seed. This is num
m. This only needs one
m. This only needs one
seed and it's going to be equal to
Yeah, because serial containing all the
Yeah, because serial containing all the
M's. So C times num M should give you
M's. So C times num M should give you
what you
what you
want. And then it also needs does it
want. And then it also needs does it
need to know it on reset? It does,
need to know it on reset? It does,
right?
Oh, gross though
Oh, gross though
because reset comes through
pipe. Yeah, cuz this back end's auto
pipe. Yeah, cuz this back end's auto
reset. So, this isn't going to do
reset. So, this isn't going to do
anything for you.
So, I think it's just going to
So, I think it's just going to
be you take this
be you take this
out because there's no sense in
out because there's no sense in
providing a seed on reset, is there?
Hang on. You also don't want to seat it
Hang on. You also don't want to seat it
on
on
reset. That's like
bad. You'd like to keep whatever RNG
bad. You'd like to keep whatever RNG
state is currently
state is currently
there.
there.
Okay. So, we take this param out.
Oh, wait. No, it does make sense. I'm
Oh, wait. No, it does make sense. I'm
wrong. Hold
on. Because you only ever call it once,
on. Because you only ever call it once,
right?
So this should be
So this should be
seed and then seed is equal to seed.
Because this one runs one serial end,
right? Yes.
Yeah. Now you can do C equals
none. It's none.
It's
fine. Okay. So now you actually have
fine. Okay. So now you actually have
this thing seated
this thing seated
reasonably. You have to do the same
reasonably. You have to do the same
thing.
thing.
The same thing here.
Okay, now this this is actually
good. Seed not
seeds. And then how's this look in
seeds. And then how's this look in
multiprock? So from multiprock
This thing also can take a seed,
right? I think actually both of
right? I think actually both of
these these both should be seated by
these these both should be seated by
default. It's better to have them seated
default. It's better to have them seated
by
by
default. Yeah.
default. Yeah.
So, we'll seat it to 42 by default.
Okay. And now this
Okay. And now this
does C plus I
Okay. So, now you're going to get like
Okay. So, now you're going to get like
42, 43, yada
42, 43, yada
yada. I actually don't like
yada. I actually don't like
um 42 as a default seed because that
um 42 as a default seed because that
gets multiplied kind of
gets multiplied kind of
weirdly. There's nothing wrong with seed
weirdly. There's nothing wrong with seed
zero,
zero,
right? I don't think there should be.
Yeah.
So, let's like do this on breakout or
So, let's like do this on breakout or
something first.
to unpack
seed. Okay, it gets to here now.
still failed to unpack seed.
So this one
So this one
is back in it failed to unpack seed and
is back in it failed to unpack seed and
this one's back
reset. So I don't know which one it is.
reset. So I don't know which one it is.
It looks like it should be a net.
So it's taking it to impact so you don't
um well I am passing
it. This is embinet here.
Wrong file completely.
Maybe this is being passed as
none. So this is the driver
end. You plan to get rid of Syon? What's
end. You plan to get rid of Syon? What's
the replacement for? Yeah. So let me
the replacement for? Yeah. So let me
show you. This is new. It's in dev.
show you. This is new. It's in dev.
Um, I'm gonna like put this out to users
Um, I'm gonna like put this out to users
first, but I think that people will
first, but I think that people will
dramatically prefer this because it
dramatically prefer this because it
makes everything a lot easier. So, right
makes everything a lot easier. So, right
now, every time you implement a new
now, every time you implement a new
environment for Puffer Lib, you have to
environment for Puffer Lib, you have to
do
do
this. So, this is 115 lines worth of
this. So, this is 115 lines worth of
Python that you have to get right. Also,
Python that you have to get right. Also,
Syon breaks all debugging from Python to
Syon breaks all debugging from Python to
C. It's very difficult to debug, takes
C. It's very difficult to debug, takes
quite a while to compile, and uh the
quite a while to compile, and uh the
compiler error messages kind of suck as
compiler error messages kind of suck as
well. So, what the goal is to replace
well. So, what the goal is to replace
this with this file right here. So, this
this with this file right here. So, this
is one file for all the MS. Um, and then
is one file for all the MS. Um, and then
what you'll be able to do with this is
what you'll be able to do with this is
this essentially does what Syon
this essentially does what Syon
currently does, but it just does it for
currently does, but it just does it for
you.
So this is what it looks like now. The
So this is what it looks like now. The
Python looks almost identical to before
Python looks almost identical to before
except you're using, you know, this
except you're using, you know, this
binding vectorzed in it. You just give
binding vectorzed in it. You just give
it all the tensors like you did before.
it all the tensors like you did before.
You give it all your keyword args and it
You give it all your keyword args and it
will just make vectorized M's for
will just make vectorized M's for
you. So this is the original Syon. It
you. So this is the original Syon. It
looks almost the same except it has the
looks almost the same except it has the
Syon
Syon
binding. But now you don't have to write
binding. But now you don't have to write
a Syon binding. All you do have to write
is this tiny little binding file where
is this tiny little binding file where
you just specify all the args and then
you just specify all the args and then
you unpack
you unpack
them. So you know this 30
them. So you know this 30
lines instead of the original
lines instead of the original
120. So much much shorter
120. So much much shorter
bindings. Um this also lets me improve
bindings. Um this also lets me improve
logging a little bit. Logging gets
logging a little bit. Logging gets
easier as well. We handle logging quite
easier as well. We handle logging quite
nicely now too. So hopefully this should
nicely now too. So hopefully this should
generally be better for people and you
generally be better for people and you
can debug through it. So if anything
can debug through it. So if anything
goes wrong in your C now you can just
goes wrong in your C now you can just
run Python through GDB and you will get
run Python through GDB and you will get
a break point right wherever something
a break point right wherever something
breaks in your C.
welcome YouTube
folks. What I'm doing currently with
folks. What I'm doing currently with
this is I'm trying is this piine? No,
this is I'm trying is this piine? No,
this is this is the cool thing. No
this is this is the cool thing. No
external dependencies. It's just the
external dependencies. It's just the
Python C API. That's it.
Python C API. That's it.
And um what I'm trying to do right now
And um what I'm trying to do right now
is also make it support nice seating so
is also make it support nice seating so
that you never have stuff screwed up
that you never have stuff screwed up
because of bad seating and make it like
because of bad seating and make it like
really really obvious how to do that and
really really obvious how to do that and
really hard to screw up. That's what I'm
really hard to screw up. That's what I'm
doing at the moment. And then I've got
doing at the moment. And then I've got
the whole agenda. Um I want to make it
the whole agenda. Um I want to make it
harder to screw up argument passing to
harder to screw up argument passing to
these M's. Give you really nice error
these M's. Give you really nice error
messages for if you screw up your
messages for if you screw up your
arguments. And then maybe some
arguments. And then maybe some
improvements to logging. And that's all
improvements to logging. And that's all
that I need to do with end of finding to
that I need to do with end of finding to
make this like really solid. And after
make this like really solid. And after
that, we'll move on to training side
that, we'll move on to training side
improvements. Well, probably I'm going
improvements. Well, probably I'm going
to get through this and then uh go take
to get through this and then uh go take
a break, get some exercise, and do the
a break, get some exercise, and do the
rest in the evening. We'll
see. So, this gives you seed
see. So, this gives you seed
zero. Uh but somehow it does not
zero. Uh but somehow it does not
like does not like this unpacking
like does not like this unpacking
message.
I wonder if um if I actually shot myself
I wonder if um if I actually shot myself
in the
foot. Yeah, I probably shot myself in
foot. Yeah, I probably shot myself in
the foot here. Huh? Because this
the foot here. Huh? Because this
probably gives you a good error message
probably gives you a good error message
that I
overwrote. Okay. See, so right
here function takes at most one
here function takes at most one
argument 21 given the
help. My function
takes when will the new binding version
takes when will the new binding version
be shipped? Um, we currently have
be shipped? Um, we currently have
experimental stuff on Pong Breakout and
experimental stuff on Pong Breakout and
Neural MMO 3 in the dev branch. And then
Neural MMO 3 in the dev branch. And then
as with everything else in Puffer Lib,
as with everything else in Puffer Lib,
it only goes to main when we ship a new
it only goes to main when we ship a new
major
major
version. We have a pretty long dev cycle
version. We have a pretty long dev cycle
for uh for major versions. I usually
for uh for major versions. I usually
only ship, you know, two or three majors
only ship, you know, two or three majors
a year because the next one will
a year because the next one will
probably be like 2.5 or
probably be like 2.5 or
something, you know.
What do you
What do you
want? Oh, I see the
problem. How do you
Bar
O optional pi object.
So this is the behavior that I expected
So this is the behavior that I expected
but this is not what I'm
seeing
right because it fails right
failed to unpack
seed. So I forgot to
Oh, is it because of args? Yeah, it's
Oh, is it because of args? Yeah, it's
because of this args, isn't it?
So this just needs to be empty
arcs. 15 given
Okay, so this is done
Okay, so this is done
here
and still doesn't like this.
optional
seed. Oh, maybe it's that I need to do
seed. Oh, maybe it's that I need to do
this.
No, it still is not working.
Is this no longer where it's crashing?
Is this no longer where it's crashing?
Come
on. No, it's still crashing here.
this. I think Grock is just [ __ ]
this. I think Grock is just [ __ ]
wrong with how this
works. The problem is the docs for this
works. The problem is the docs for this
in Python also kind of suck. was the
in Python also kind of suck. was the
only reason I was using it.
Empty names denote positional only
Empty names denote positional only
parameters.
Do I have to like extract a single
Do I have to like extract a single
keyword?
I mean, I could pretty easily just make
I mean, I could pretty easily just make
this
thing. Hang on. I I know what I can do
thing. Hang on. I I know what I can do
for now at least if I don't want to
for now at least if I don't want to
fight this cuz this is also going to
fight this cuz this is also going to
make it more annoying for user. I
think though it does give them access to
think though it does give them access to
the seed if they need
the seed if they need
it. I don't know if they need access to
it. I don't know if they need access to
the seed
though. They can always set it
themselves. And I think we can do it
themselves. And I think we can do it
this way for now.
See how we do
See how we do
this? So, I had to do this before.
I think we do
I think we do
this. So this is going to be
this. So this is going to be
seed get ar
five yards can go back
down
here. Yeah. So, we can just do
here. Yeah. So, we can just do
this and then all we have to do is
this and then all we have to do is
modify this to
modify this to
take is it six back six arcs?
Oh yeah, six. Uh, so this goes to
seven and this goes to
six. You can actually just put this up
top. Same thing here.
This is r
zero. Oh, in that case you can kind of
zero. Oh, in that case you can kind of
just unpack
um yeah, you don't need all these
um yeah, you don't need all these
arcs. So we can simplify it a little
arcs. So we can simplify it a little
bit.
What is that? One.
Uh yes, it is at
Uh yes, it is at
one. Okay, it takes two arguments then
one. Okay, it takes two arguments then
because uh you're
unpacking. Yes, it takes two arguments.
unpacking. Yes, it takes two arguments.
So this is now arc
one. This
is this
Got
this. You are making the seed required
this. You are making the seed required
by doing
by doing
this. I think that's okay for
this. I think that's okay for
now. Think that's okay for now.
until I figure out the API a little
until I figure out the API a little
better.
double get item
double get item
five. That's
five. That's
fine. Get rid of this.
just increase this to
six. Seems like this
runs. Okay, back in. It
runs. Okay, back in. It
requires six arguments.
Are we
stuck? Looks like we're spinning our
stuck? Looks like we're spinning our
wheels and nothing's
happening. That's not good. I don't
happening. That's not good. I don't
think I introduced anything that could
think I introduced anything that could
cause a loop.
There was an error
There was an error
there. Unrecognized
there. Unrecognized
arguments binding back reset.
Yeah, this just needs meth bars, not
Yeah, this just needs meth bars, not
meth
meth
keywords. And
step, what does step need keywords
for? Yeah, it's
not. So, this just needs R. Doesn't need
not. So, this just needs R. Doesn't need
keywords.
doesn't need. This does need
keywords.
Undeclared. This is leftover.
Still we got
unrecognized. Oh, because this is
unrecognized. Oh, because this is
partle.
We get unrecognized
We get unrecognized
arguments. That seems like this just
arguments. That seems like this just
didn't get
recompiled. Oh, no. We're still getting
recompiled. Oh, no. We're still getting
just
unrecognized. Must be here. Oh, same
unrecognized. Must be here. Oh, same
problem. Nope.
problem. Nope.
Same exact
problem. Let's
see. See, it must be an integer.
Connect
it. It's not failing on this
one. Must be this one.
Oh, this is probably passing none,
right? Yeah, I know what to do to fix
this. I got to do a couple quick things.
this. I got to do a couple quick things.
I'll be back in a
I'll be back in a
few. And uh then soon as I'm back, we
few. And uh then soon as I'm back, we
will finish this. Plan will be to get
will finish this. Plan will be to get
seating working, get a couple other
seating working, get a couple other
things working.
things working.
Um probably this and then the checks was
Um probably this and then the checks was
what we'll get done this morning. Be
what we'll get done this morning. Be
back soon.
All
right. Almost done with this seed
stuff. This is probably done, right?
Ah, the list. Okay, that's why
seed times no
mounts back seed
seed. Okay, so this is beck seed zero,
seed. Okay, so this is beck seed zero,
vex seed one. This is correct. So it's
vex seed one. This is correct. So it's
good going into
good going into
this and
this and
then reset
then reset
takes
seed. Okay, so this is correctly an
integer. It's correctly passed
integer. It's correctly passed
here.
See? Uh, okay. So, this doesn't even get
See? Uh, okay. So, this doesn't even get
used
because Yeah. So, this doesn't even seem
because Yeah. So, this doesn't even seem
to get used because I guess we're not
to get used because I guess we're not
going through serial in this case, which
going through serial in this case, which
I guess we like we normally shouldn't be
I guess we like we normally shouldn't be
going through serial in most of our M's
anyways. So, it's getting screwed up
anyways. So, it's getting screwed up
here. Oh, I see. I see it. the reset
seed. Yeah. So, this doesn't need to be
seed. Yeah. So, this doesn't need to be
uh this doesn't need to be make
seed. This just needs to be seed plus I,
seed. This just needs to be seed plus I,
right?
or hang on. Yeah. C plus
or hang on. Yeah. C plus
I. And then internally it's up
I. And then internally it's up
to the worker to use this
seed. Multiply by num adaps.
Okay, so we get past
Okay, so we get past
that argument must be an integer
handle on
Um, well, yeah, that's not going to
Um, well, yeah, that's not going to
freaking work,
freaking work,
right? Is this how I had it
right? Is this how I had it
before? Think you just I long check the
before? Think you just I long check the
R.
Unpack end and then
stop.
stop.
Wait, how the hell does this make any
Wait, how the hell does this make any
sense?
end. Don't we have an unpack function
end. Don't we have an unpack function
for
this? Why am I not using it
here? I should be using it, right?
Okay.
Runs. Does it still fully train?
Yep. That's perfect.
Yep. That's perfect.
Now all we got to do, so this gives you
Now all we got to do, so this gives you
seed one and seed two it looks like.
up here. What do we
get? Zero and then 01. So, this is just
get? Zero and then 01. So, this is just
the um the default end. That that one
the um the default end. That that one
doesn't matter at
doesn't matter at
all. We get seed zero and seed one. So,
all. We get seed zero and seed one. So,
why did we get seed one and seed two on
why did we get seed one and seed two on
the uh the other ones? I see that
right. Yeah. So, you get seeds one and
two. Okay. So here
um let's get
Mark
Mark
seed. That's fine.
Yeah, that's totally
fine. Are boxes down because you're
fine. Are boxes down because you're
swapping to 5090s? No, boxes are down
swapping to 5090s? No, boxes are down
because the internet is ass. And I don't
because the internet is ass. And I don't
know if something's wrong with the cable
know if something's wrong with the cable
or whatever. I've got to go deal with
or whatever. I've got to go deal with
it. But I can't have two days in a row
it. But I can't have two days in a row
of just dealing with infrastructure
of just dealing with infrastructure
horseshit. So I got to go figure that
horseshit. So I got to go figure that
out after I at least make a little bit
out after I at least make a little bit
of progress
here. Let's see the 5090
here. Let's see the 5090
run. Like it's literally impossible for
run. Like it's literally impossible for
me to broken anything with the 5090.
me to broken anything with the 5090.
It's like in a different room on a
It's like in a different room on a
different
network. All
right. So, this is going to do whatever
right. So, this is going to do whatever
it's going to
do. I think some of the boxes are back
do. I think some of the boxes are back
as well. It's It's bizarro, but I think
as well. It's It's bizarro, but I think
that they have like dial up internet
that they have like dial up internet
speed right now for some dumb reason.
Okay. Well, this is this is correct so
Okay. Well, this is this is correct so
far.
far.
Um, this now should give you unique
seeds. I'm going to test it for neural
seeds. I'm going to test it for neural
MMO.
Okay, there we go. Sure that still runs.
That's still
trans. Now here you actually have to do
trans. Now here you actually have to do
the seed manually.
So this is going to be seed
um times numbum m plus i
um times numbum m plus i
plus
this and then this is going to be
seed zero or
whatever and requires five arguments.
This just is a compile error. Doesn't
This just is a compile error. Doesn't
seem to be
compiled. And okay, builds.
compiled. And okay, builds.
Can we
train? Yes. Yes, we can train. No
train? Yes. Yes, we can train. No
errors, same training speed. And I guess
errors, same training speed. And I guess
we will see whether there are any uh any
we will see whether there are any uh any
differences.
I'd like to remove this stupid flashing
I'd like to remove this stupid flashing
problem at some
problem at some
point. I'll put that on the to-do
list. I think I know how to do it now.
list. I think I know how to do it now.
I'm looking at it. I'm fine. Um, that
I'm looking at it. I'm fine. Um, that
runs. That's good.
I want to make sure that the seeds
I want to make sure that the seeds
though are are
good. I want to definitely make sure
good. I want to definitely make sure
that the seeds are
good. So, I should
have unique
have unique
seeds.
Right.
Seed.
Seed.
Okay. So, this is the the um driver M.
Okay. So, this is the the um driver M.
This one doesn't
This one doesn't
matter. One, two, three, zero.
One, two, three, four, five, six,
One, two, three, four, five, six,
seven. Oh, this is the whole driver
seven. Oh, this is the whole driver
because it's going to make Yeah. And
because it's going to make Yeah. And
then it goes 0 1 2 3 and four, five,
then it goes 0 1 2 3 and four, five,
six, seven.
six, seven.
Perfect. So, we have unique seeds for
Perfect. So, we have unique seeds for
each environment.
each environment.
Now, that should be consistent as well.
that might actually substantially change
that might actually substantially change
the training based on some uh
the training based on some uh
preliminary results. So, we will have to
preliminary results. So, we will have to
run
run
this. But, this is going to be a good
this. But, this is going to be a good
change
change
overall. Let's just uh let's do breakout
overall. Let's just uh let's do breakout
real quick just so we have like a little
real quick just so we have like a little
bit more
bit more
confidence in this result.
See, I don't know why this has so many
See, I don't know why this has so many
bloody arguments. It's kind of
bloody arguments. It's kind of
ridiculous.
Probably should fix all
that
rewards.
rewards.
See, and because this is Beckinet,
See, and because this is Beckinet,
that's all we have to do with it.
Rebuild
Rebuild
breakout. Whatever the hell that did
breakout. Whatever the hell that did
here
here
is deal. Wrong
one. And
one. And
actually print seed here as
well. Seed.
Then it's also we changed it to ve in
Then it's also we changed it to ve in
it instead of it
back. Yep. So 0 and one plus the default
back. Yep. So 0 and one plus the default
zero 1.6 million steps per second. We'll
zero 1.6 million steps per second. We'll
make sure that this still trains nicely.
Good. Okay. So, that is
Good. Okay. So, that is
seating. I'm going to say that's seating
seating. I'm going to say that's seating
complete.
Okay, that full
solves. I'm actually tempted to
solves. I'm actually tempted to
normalize the score for all the M's. 0
normalize the score for all the M's. 0
to
one. We'll think about that later
one. We'll think about that later
though. Okay, so this now runs.
though. Okay, so this now runs.
Um, I think it's going to be worth just
Um, I think it's going to be worth just
doing this on neural MMO because I don't
doing this on neural MMO because I don't
know what's going to happen.
know what's going to happen.
So I think what we do is we take a look
So I think what we do is we take a look
at the current neural MMO
at the current neural MMO
experiment. We see whether that result
experiment. We see whether that result
is
is
reasonable and then we launch this one
instead without the precision
on. Yeah, cuz this is running with weird
on. Yeah, cuz this is running with weird
RNG.
Let's just take a quick look at the
Let's just take a quick look at the
losses to see if there's anything
weird. Yeah. Okay. There is definitely
weird. Yeah. Okay. There is definitely
something weird here. This clip frack is
something weird here. This clip frack is
really
low. Entropy is really weird. Okay. So,
low. Entropy is really weird. Okay. So,
yeah, the float 16 is definitely
yeah, the float 16 is definitely
screwing with training somehow.
It does seem to be learning, but there's
It does seem to be learning, but there's
definitely weirdness going
definitely weirdness going
on. I mean, yeah, we're not intending to
on. I mean, yeah, we're not intending to
train in float 16 anyways. The really
train in float 16 anyways. The really
the goal would be to get BF16 to be
the goal would be to get BF16 to be
fast, then train in
fast, then train in
BF-16. Um, here, let's commit all this
BF-16. Um, here, let's commit all this
up and then go run this on the 1590.
Don't need these configs.
Here's our 5090 box.
If you are looking at these new cards
If you are looking at these new cards
for RL, I will say that the results so
for RL, I will say that the results so
far have been pretty disappointing. It's
far have been pretty disappointing. It's
only like 10 15% faster in the tests
only like 10 15% faster in the tests
I've run thus
far. Let's take care of Muai real quick.
Okay. So now we have nice
Okay. So now we have nice
clean version to run this
experiment. Yeah, honestly the cards are
experiment. Yeah, honestly the cards are
really disappointing thus far. They do
really disappointing thus far. They do
have 32 gigs of memory on them, but like
have 32 gigs of memory on them, but like
I don't know what we do with that,
right? Like what are we even using right
right? Like what are we even using right
now? Yeah, we're literally using 4 gigs
now? Yeah, we're literally using 4 gigs
of RAM with like the biggest model that
of RAM with like the biggest model that
we run.
we run.
So, what's the
point? Uh, I will say that we did screw
point? Uh, I will say that we did screw
up. So, this should be
up. So, this should be
increased. Hang on. Let me just increase
increased. Hang on. Let me just increase
the model size. So, it actually will use
the model size. So, it actually will use
a little bit more RAM than I than 4
a little bit more RAM than I than 4
gigs. Maybe quadruple. Maybe use a
16. Did I miss anything?
No, cuz uh we did get better results
No, cuz uh we did get better results
with
fivefold premp compute more things for
fivefold premp compute more things for
Tokyo Puff. Not really though, cuz it's
Tokyo Puff. Not really though, cuz it's
in uh it's in GPU. It's more GPU memory,
in uh it's in GPU. It's more GPU memory,
right? Tokyo Puff might be a really RAM
right? Tokyo Puff might be a really RAM
heavy
heavy
M. But the thing is, I intentionally
M. But the thing is, I intentionally
spec our machines with high RAM
spec our machines with high RAM
specifically so we can do stuff like
specifically so we can do stuff like
Tokyo Puff anyways. Like
Tokyo Puff anyways. Like
look, these things
look, these things
have well, okay, it's not on top or
have well, okay, it's not on top or
whatever, but these things have 128 gigs
whatever, but these things have 128 gigs
of RAM on
of RAM on
them. Should be plenty for a one card
them. Should be plenty for a one card
run, right? You'd hope. I don't know,
run, right? You'd hope. I don't know,
maybe giant giant map could be
maybe giant giant map could be
challenging, but
Okay, kill
this. We get up to 700K with uh
this. We get up to 700K with uh
blo. I just pulled the fix that got rid
blo. I just pulled the fix that got rid
of that.
I forgot to add it.
So, we'll see how much RAM this
uses and then
uses and then
uh we'll keep thinking about the other
uh we'll keep thinking about the other
infra
stuff. Environment requires five
stuff. Environment requires five
arguments. Didn't recompile.
Okay. So this is now this is a 3.1
Okay. So this is now this is a 3.1
million parameter
million parameter
model. Um trains at
model. Um trains at
[Music]
[Music]
560k steps per second. 550 560k.
You can see that we don't really have
You can see that we don't really have
any wasted time in MISK. Very little in
any wasted time in MISK. Very little in
copy for a large amount of data at
copy for a large amount of data at
least. So what's this take
up? Nothing. Takes up nothing.
It's actually kind of weird that you can
It's actually kind of weird that you can
increase the model size that much and um
increase the model size that much and um
still not have it take up any
still not have it take up any
memory. I guess it's just the obs buffer
memory. I guess it's just the obs buffer
is taking up everything, right? And then
is taking up everything, right? And then
the actual batch of data that you have
the actual batch of data that you have
on GPU is not really doing
on GPU is not really doing
much. And this is decent util as well,
much. And this is decent util as well,
right?
We can probably make the thing run like
We can probably make the thing run like
20% faster if you're looking at just
20% faster if you're looking at just
util. Is there a way in the end we can
util. Is there a way in the end we can
separate various tasks for
separate various tasks for
GPU like complex physics sims to utilize
GPU like complex physics sims to utilize
GPU more? Nope. Yeah, at that point
GPU more? Nope. Yeah, at that point
Spence, you got to do the whole end GPU
Spence, you got to do the whole end GPU
because you don't want to be doing back
because you don't want to be doing back
and forth device transfer in the end.
and forth device transfer in the end.
I actually do have a plan though for um
I actually do have a plan though for um
making it very easy to do uh GPU
making it very easy to do uh GPU
accelerated puffer amps. So if that
accelerated puffer amps. So if that
becomes a problem in GPU drive, I will
becomes a problem in GPU drive, I will
let's say I will uh work on making those
let's say I will uh work on making those
additions faster. But there is actually
additions faster. But there is actually
a plan for GPU enabled um puffer
a plan for GPU enabled um puffer
environments without having to do like
environments without having to do like
terrible terrible jacks or pietorrch
terrible terrible jacks or pietorrch
array [ __ ] In fact, I think it'll
array [ __ ] In fact, I think it'll
work with mostly the exact same code you
work with mostly the exact same code you
have now. So, there's plan for that.
have now. So, there's plan for that.
It's got a really fun logo attached to
It's got a really fun logo attached to
it, too. But, uh, more about that when I
it, too. But, uh, more about that when I
actually get a spare few days to
dev. And I got to fire uh I got to if it
dev. And I got to fire uh I got to if it
works, I'll have to find an artist for
works, I'll have to find an artist for
the logo as well.
Add another fish to the
collection. Actually, I know exactly the
collection. Actually, I know exactly the
artist I would use.
artist I would use.
Um, yeah, I can do I had two artists
Um, yeah, I can do I had two artists
work on this puffer, so I can just go
work on this puffer, so I can just go
get the same artist to do uh a new
get the same artist to do uh a new
model. The the one who like really
model. The the one who like really
cleaned it up
nicely. He did a great job with the
nicely. He did a great job with the
animations on this guy.
Okay, next thing.
Okay, next thing.
Um, the only thing we have left to do on
Um, the only thing we have left to do on
the initial version of the end binding
the initial version of the end binding
is just seeing if we can improve a
is just seeing if we can improve a
little bit of the
little bit of the
usability because right now
This binding is really easy to mess
This binding is really easy to mess
up. If you mess up any of the D types
up. If you mess up any of the D types
here, it just corrupts all the
here, it just corrupts all the
data. Would puff would GPU puff be
data. Would puff would GPU puff be
faster for certain types of MS? Yeah,
faster for certain types of MS? Yeah,
for certain types of MS, of course.
The only thing in GPU drive I can think
The only thing in GPU drive I can think
about by the way where like you might
about by the way where like you might
want to do it kind of the collision
want to do it kind of the collision
checks but you kind of make it harder to
checks but you kind of make it harder to
use better algorithms if you do that. So
use better algorithms if you do that. So
I think like the only thing I can think
I think like the only thing I can think
about is if you were going to do like
about is if you were going to do like
lidar, right? If you were going to do
lidar, right? If you were going to do
lidar then you probably want GPU
Excel. But the thing is then you have to
Excel. But the thing is then you have to
make the whole M GPU Excel which is not
make the whole M GPU Excel which is not
going to be that hard codewise. But I
going to be that hard codewise. But I
don't know if it's going to be
don't know if it's going to be
slow. A lot of the times people try to
slow. A lot of the times people try to
write stuff on the GPU to make it fast
write stuff on the GPU to make it fast
and they just end up making it slow
and they just end up making it slow
because GPUs are not just dropping
because GPUs are not just dropping
replacements for CPUs. They don't work
replacements for CPUs. They don't work
that
way. Would be cool if they
way. Would be cool if they
did. We just like make basically a
did. We just like make basically a
thousand core
thousand core
CPU. That'd be
nice. Does it help for robotics? Yeah,
nice. Does it help for robotics? Yeah,
of course it helps for robotics, right?
of course it helps for robotics, right?
if you wanted to actually So, if I
if you wanted to actually So, if I
wanted to go deep into robotics and
wanted to go deep into robotics and
really make a sim platform for that,
really make a sim platform for that,
right? I mean, you're kind of doing what
right? I mean, you're kind of doing what
Isaac uh Isaac Sim or whatever does at
Isaac uh Isaac Sim or whatever does at
that point, but like let's say that I
that point, but like let's say that I
thought that I could do a better job
thought that I could do a better job
than Isaac Sim, then yeah, I would
than Isaac Sim, then yeah, I would
probably go off of Nvidia Physics and
probably go off of Nvidia Physics and
like write my own custom thing with
like write my own custom thing with
PhysX and CUDA.
But that's like a that's a big ordeal.
But that's like a that's a big ordeal.
That's like a big ordeal.
So you can manually type check which is
So you can manually type check which is
annoying.
[Music]
[Music]
ish. Okay. So, it's basically it's
ish. Okay. So, it's basically it's
between
I wonder if I could just go
through pi float check punch. I wonder
through pi float check punch. I wonder
if I could just write some like unpack
if I could just write some like unpack
args function that just does all the
args function that just does all the
dype checks, right? I mean, you're just
dype checks, right? I mean, you're just
going to want like floats and
going to want like floats and
ins. So I can just do those checks for
ins. So I can just do those checks for
you.
It's definitely worth
It's definitely worth
trying. And then you wouldn't need to
trying. And then you wouldn't need to
deal with these types either. So you
deal with these types either. So you
wouldn't have to provide this
So we just do unpack
quarks. Okay.
This is pretty much the last thing I
This is pretty much the last thing I
think that I could do that would be like
think that I could do that would be like
a legitimately a legitimate improvement.
a legitimately a legitimate improvement.
After that, anything more starts to get
After that, anything more starts to get
like overbuilding it.
Unpack. Holy hell. What? Super Maven,
Unpack. Holy hell. What? Super Maven,
chill
out. Have you seen any research on
out. Have you seen any research on
maximum steps?
maximum steps?
PPO can solve an M with a only a reward
PPO can solve an M with a only a reward
at the end of an episode for Gigaspar's
at the end of an episode for Gigaspar's
problems.
Um, so there is something I've been
Um, so there is something I've been
thinking about like where there's a
thinking about like where there's a
legitimate point to improve PO on that
legitimate point to improve PO on that
specifically, but in general it's
not you need it like it it's not so much
not you need it like it it's not so much
just how many steps it's delayed, right?
just how many steps it's delayed, right?
Like that's not the only thing that
Like that's not the only thing that
matters. The thing that matters is the
matters. The thing that matters is the
path that you take to get it. So, like
path that you take to get it. So, like
if I run a random
if I run a random
policy, right? If I run a random policy
policy, right? If I run a random policy
on the M, uh, how long does it take me
on the M, uh, how long does it take me
to get the
to get the
reward? If you never get the reward,
reward? If you never get the reward,
then you're not going to be able to
then you're not going to be able to
learn anything
regardless, right?
You do have to do keywords.
credit assignment becomes the issue then
credit assignment becomes the issue then
right like huge sequence but did get
right like huge sequence but did get
yeah so PO is not going to work if you
yeah so PO is not going to work if you
only get the reward once in theory right
only get the reward once in theory right
there are environments for which you
there are environments for which you
should be able to learn only by getting
should be able to learn only by getting
the reward once um you know if you have
the reward once um you know if you have
a fully deterministic end where it's all
a fully deterministic end where it's all
you need to do is repeat the same
you need to do is repeat the same
sequence of actions then you probably
sequence of actions then you probably
should be able to get back to that
should be able to get back to that
reward uh these are kind of like
reward uh these are kind of like
pathologies, right? These are like weird
pathologies, right? These are like weird
edge cases where current algorithms
edge cases where current algorithms
fail. Um, I actually been thinking about
fail. Um, I actually been thinking about
that one because this is where it starts
that one because this is where it starts
to make sense to consider off policy
to make sense to consider off policy
stuff because if you get that trajectory
stuff because if you get that trajectory
into an experience buffer and then you
into an experience buffer and then you
just keep training on it because there's
just keep training on it because there's
nothing else to train on, you will solve
nothing else to train on, you will solve
the problem because you'll just overfit
the problem because you'll just overfit
the solve trajectory. Uh, however, off
the solve trajectory. Uh, however, off
policy in general is a total mess. So
policy in general is a total mess. So
while the idea of off policy of having
while the idea of off policy of having
like this buffer is a good one, the
like this buffer is a good one, the
actual implementation and practice of
actual implementation and practice of
these things kind of suck. Like PO is a
these things kind of suck. Like PO is a
really simple algorithm and then if you
really simple algorithm and then if you
look at all the off policy ones that try
look at all the off policy ones that try
to match POFF, they're a mess.
to match POFF, they're a mess.
So yeah, it's definitely a valid
So yeah, it's definitely a valid
research direction and something we'd
research direction and something we'd
like to look at, but uh it would have to
like to look at, but uh it would have to
be done in a way that doesn't produce
be done in a way that doesn't produce
the amount of mess that is currently in
the amount of mess that is currently in
off policy.
What did this just
What did this just
autofill? Hi, Unicode from string. God,
autofill? Hi, Unicode from string. God,
that is totally
that is totally
awful. I have no idea what the heck it
awful. I have no idea what the heck it
just tried to fill in there.
Thanks for chat. Was reading alpha chip
Thanks for chat. Was reading alpha chip
paper and thought it was wild they only
paper and thought it was wild they only
had one joint reward
had one joint reward
given at the end of episode. I haven't
given at the end of episode. I haven't
actually looked at the chip design
actually looked at the chip design
stuff.
stuff.
Um they also this is very large scale as
Um they also this is very large scale as
well, right?
well, right?
though. Actually, I don't know. Maybe
though. Actually, I don't know. Maybe
their sim is
slow. You can kind of force
slow. You can kind of force
reinforcement learning to work on a ton
reinforcement learning to work on a ton
of problems. It's really just a matter
of problems. It's really just a matter
of like, does it work immediately? Does
of like, does it work immediately? Does
it work after playing with it for a
it work after playing with it for a
couple hours? Do do you need a team of
couple hours? Do do you need a team of
20 in two years?
I don't know if there's there isn't a
I don't know if there's there isn't a
length built in,
right? Yeah. So, it
is fix. So, this actually does work
is fix. So, this actually does work
because
Yeah, this is the size of the char star.
Yeah, this is the size of the char star.
So, we're good. So, this has to
So, we're good. So, this has to
be
static. You just have to know how to
static. You just have to know how to
model the problem for RL, then build
model the problem for RL, then build
fast. Pretty
fast. Pretty
much. Pretty much.
So, we need to be able to unpack
this. Unpack a single keyword R.
I broke
it. Is there a way to like get a
it. Is there a way to like get a
single a single
arg? I don't want to have to deal with
arg? I don't want to have to deal with
this format shenanigans.
Pi object keyword
arcs picked
arcs picked
get item
get item
string. Is this a real function? Get
string. Is this a real function? Get
item
string or did it make that [ __ ]
up? Looks like it exists.
Oops.
I dict get item string.
Okay. So now you got to go
Okay. So now you got to go
check the different types
here. What in the hell?
Oh, I
see. Yeah, that's kind of
gross. But that does work.
So this is the idea right is that all
So this is the idea right is that all
supported key uh keyword types we get
supported key uh keyword types we get
the type it is in
Python now I think this is
still this is still sketchy though isn't
still this is still sketchy though isn't
Yeah, this is still
sketchy because if you pass an
sketchy because if you pass an
inch to a float, it'll still break,
inch to a float, it'll still break,
won't
it? Let me try something.
Oh, wait. No. Does it not? Does it
Oh, wait. No. Does it not? Does it
break? No, it doesn't break. I'm wrong.
break? No, it doesn't break. I'm wrong.
Hang on. I think I have it because now
Hang on. I think I have it because now
Yeah. Yeah. Yeah. We're good. We are
Yeah. Yeah. Yeah. We're good. We are
good. Okay. I was being stupid. So this
good. Okay. I was being stupid. So this
is this is actually correct. And the
is this is actually correct. And the
reason is that before um it was trying
reason is that before um it was trying
to like do some weird thing where it was
to like do some weird thing where it was
casting the Python object into the wrong
casting the Python object into the wrong
D type or whatever, but now it's going
D type or whatever, but now it's going
to match the type of
to match the type of
the Yeah, it's going to match the
the Yeah, it's going to match the
type that you bring into it. It still
type that you bring into it. It still
needs to get cast
needs to get cast
though. Yeah. Okay. Okay, it still needs
though. Yeah. Okay. Okay, it still needs
to get cast. So, this cast doesn't work.
This is a lot
closer. Now, you don't need a [ __ ]
closer. Now, you don't need a [ __ ]
metadata type system. Screw that.
What on earth is
this? Handles both floats and
this? Handles both floats and
ins. This doesn't work though, right?
Yeah, this is the meta
[ __ ] Hang on though.
If the user writes this line
If the user writes this line
themsself, the casting will be
correct. Right.
Yes, the casting will be correct.
So, all I really need to do is give them
So, all I really need to do is give them
a
a
um an unpack
um an unpack
function that returns a
function that returns a
float. Is there anything else you really
float. Is there anything else you really
need to pass to
need to pass to
MS through the C
MS through the C
API? It's always going to be a float or
API? It's always going to be a float or
an in, right?
I don't really want to cast
I think you can technically screw this
I think you can technically screw this
up, right? Cuz the float precision won't
work. Yes, you can. Yes.
work. Yes, you can. Yes.
Right. I mean, obviously. I don't even
Right. I mean, obviously. I don't even
know why I
asked. Terrible
news. Another Danager
article. This is Dreamer V3. This isn't
article. This is Dreamer V3. This isn't
even anything new, right?
This is just they got their scammed like
This is just they got their scammed like
their [ __ ] paper into
nature. Yeah.
nature. Yeah.
Look, whole page of uh totally wrong
stuff. That's fine. They can get
stuff. That's fine. They can get
[ __ ] published all they
want. I thought you were going to tell
want. I thought you were going to tell
me that there's a Dreamer V4 that's even
me that there's a Dreamer V4 that's even
more [ __ ] and now we have to run
more [ __ ] and now we have to run
another 10 hours worth of exper uh
another 10 hours worth of exper uh
10,000 GPU hours worth of experiments.
10,000 GPU hours worth of experiments.
Then I'd be mad.
Now we're fixing stuff over here, man.
Now we're fixing stuff over here, man.
We're fixing
We're fixing
stuff. First 5090 is in as
stuff. First 5090 is in as
well. We're running a neural MMO on it
well. We're running a neural MMO on it
right
right
now. Now we're going to hear even more
now. Now we're going to hear even more
about it. Yeah. But you know what
about it. Yeah. But you know what
happens? Every time like a client or you
happens? Every time like a client or you
know, whoever asks me about it, I say
know, whoever asks me about it, I say
yes, we evaluated it. We did 10,000 GPU
yes, we evaluated it. We did 10,000 GPU
hours worth of experiments on all the
hours worth of experiments on all the
tricks they claimed. None of them
tricks they claimed. None of them
worked. We have the results published at
Nerups.
Right. No, no, no. I like the world
Right. No, no, no. I like the world
model stuff probably works, but it's
model stuff probably works, but it's
just god-awful science to the point that
just god-awful science to the point that
it's like borderline scientific fraud.
it's like borderline scientific fraud.
Especially when you consider that the
Especially when you consider that the
author should have known better, right?
author should have known better, right?
This is like if this were some random
This is like if this were some random
undergrad or even some random grad
undergrad or even some random grad
student at some random lab, right? I'd
student at some random lab, right? I'd
just say like, "Ah, okay, whatever. They
just say like, "Ah, okay, whatever. They
they made some mistakes, whatever." But
they made some mistakes, whatever." But
no, like these people should know
no, like these people should know
better,
right? It's like, what in the
hell? Chat's two minutes
delayed. Are you sure?
delayed. Are you sure?
I I didn't change anything. It shouldn't
I I didn't change anything. It shouldn't
be. Twitch is usually the fast
one. Must be
reream. I don't have it set to de I
reream. I don't have it set to de I
don't have a delay set or anything
don't have a delay set or anything
weird.
Cool. Might be
Cool. Might be
me. That's like 30 seconds, not 2
minutes. Twitch just gave me two minute
minutes. Twitch just gave me two minute
delay for no
delay for no
reason. Yeah, there you go.
Sometimes it like scrolls back in the
Sometimes it like scrolls back in the
live broadcast or
whatever.
Okay. Oh, I got a new thing. I don't
Okay. Oh, I got a new thing. I don't
know if you saw this, Ryan. I've been uh
know if you saw this, Ryan. I've been uh
replacing Syon. We found a really nice
replacing Syon. We found a really nice
way to replace Syon, and I'm just kind
way to replace Syon, and I'm just kind
of polishing it up right now.
of polishing it up right now.
So, we're going to have one 500 some odd
So, we're going to have one 500 some odd
line file instead of like 3,000 lines
line file instead of like 3,000 lines
worth of Syon
worth of Syon
bindings. Dreamer does actually work,
bindings. Dreamer does actually work,
but their science sucks. Well, yeah, but
but their science sucks. Well, yeah, but
the thing is their science sucks so bad
the thing is their science sucks so bad
that it's like it's almost not a
that it's like it's almost not a
youthful result
youthful result
anymore, you know?
They also use these like stupid ass slow
They also use these like stupid ass slow
environments where it's really hard to
environments where it's really hard to
even get a good baseline for comparison
even get a good baseline for comparison
because you can't even ask like okay you
because you can't even ask like okay you
know how like can you solve this
know how like can you solve this
environment easily with more samples you
environment easily with more samples you
can't even ask like does the stupid
can't even ask like does the stupid
baseline just solve this easily right is
baseline just solve this easily right is
it just a sample thing like even for
it just a sample thing like even for
stuff where you want to do sample
stuff where you want to do sample
efficiency research like you'd want it
efficiency research like you'd want it
on fast end
working algorithms always I mean you
working algorithms always I mean you
read the code for that
read the code for that
thing I don't think it's a working
algorithm but that's
okay we will do more algo side stuff
okay we will do more algo side stuff
going
going
forward I want to
forward I want to
fix the plan at the moment is fix
fix the plan at the moment is fix
bindings take another path with the
bindings take another path with the
trainer. See if we can really get some
trainer. See if we can really get some
train purf uh going on that. And then we
train purf uh going on that. And then we
go back to more
go back to more
algorithms. So it's infra. So I just did
algorithms. So it's infra. So I just did
an algorithm block and then it's going
an algorithm block and then it's going
to be infra. And then it's going to be
to be infra. And then it's going to be
PF and then it's going to be back to
algorithms. Also, I'm visiting the um
algorithms. Also, I'm visiting the um
the new facility. Um it's not done yet.
the new facility. Um it's not done yet.
And I'm visiting the new facility over
And I'm visiting the new facility over
the weekend. Uh so I'll get to see that
the weekend. Uh so I'll get to see that
which will be
which will be
cool. Yeah. But this thing is awesome.
cool. Yeah. But this thing is awesome.
Like here and I think it's going to get
Like here and I think it's going to get
even easier than
even easier than
this.
this.
But this is your binding for neural MMO.
But this is your binding for neural MMO.
Now this is the entire binding you have
Now this is the entire binding you have
to write for neural MMO. The gym and
to write for neural MMO. The gym and
data center. Yeah.
data center. Yeah.
visiting that. It's not quite done yet.
visiting that. It's not quite done yet.
It'll be done in a few weeks, but
It'll be done in a few weeks, but
visiting
visiting
it. Probably visiting it. We'll
it. Probably visiting it. We'll
see. So, yeah, this is all you have to
see. So, yeah, this is all you have to
write for neural
write for neural
MMO. What the [ __ ] is that
MMO. What the [ __ ] is that
string? Yeah. So, this is what I'm
string? Yeah. So, this is what I'm
trying to remove right now. This this
trying to remove right now. This this
dtype string sucks. So, I'm trying to
dtype string sucks. So, I'm trying to
figure out how to remove this right now.
figure out how to remove this right now.
And I think I'm going to have it just so
And I think I'm going to have it just so
you just write one line per param
you just write one line per param
instead of having this [ __ ] because
instead of having this [ __ ] because
this can actually screw you because this
this can actually screw you because this
can do bad
can do bad
tasks. Like this can actually cause you
tasks. Like this can actually cause you
to do wrong
tasks. But I mean to be fair, right?
Wrong
Wrong
tasks of wrong casts. WC wrong
casts. This is what we had for neural
casts. This is what we had for neural
like this replaces 270 lines of Python
like this replaces 270 lines of Python
binding though. That one little
binding though. That one little
thing. Wrong. In what way? You try to
thing. Wrong. In what way? You try to
write uh the bits of a float to an int
write uh the bits of a float to an int
and then you break the values. It's
and then you break the values. It's
really gross. So, we're trying to fix
really gross. So, we're trying to fix
that right
now. What if I just give you an unpack
now. What if I just give you an unpack
int and an unpack float function?
int and an unpack float function?
That just does it, doesn't
it? I haven't gotten on the sea train
it? I haven't gotten on the sea train
yet. You're missing out. You're really
yet. You're missing out. You're really
missing out, buddy.
It's actually so the C is really chill
It's actually so the C is really chill
and it gets even better uh as time goes
and it gets even better uh as time goes
on because more and more people are just
on because more and more people are just
jumping on the like I don't know
jumping on the like I don't know
anything. I just ask LLM's everything
anything. I just ask LLM's everything
train. So it's even more funny to see
train. So it's even more funny to see
like how hilariously better you can make
like how hilariously better you can make
stuff just by knowing a little bit of
stuff just by knowing a little bit of
low-level dev because like people are
low-level dev because like people are
now just writing [ __ ] that's like you
now just writing [ __ ] that's like you
know a thousand times too slow, 10,000
know a thousand times too slow, 10,000
times too slow. I've seen 20,000 times
times too slow. I've seen 20,000 times
too slow at this All right.
might take a stab at writing syllabus in
might take a stab at writing syllabus in
written
written
C. Oh, don't try to directly translate
C. Oh, don't try to directly translate
it with an LLM. You will be
it with an LLM. You will be
sad. You'll be very
sad. You'll be very
sad. But uh we are getting nice puffer
sad. But uh we are getting nice puffer
and vin. So, you know, you'll be able to
and vin. So, you know, you'll be able to
hop with hop on some of this. In fact,
hop with hop on some of this. In fact,
we're probably going to do
we're probably going to do
multipprocessing backends at some point
multipprocessing backends at some point
relatively soonish with this as well,
relatively soonish with this as well,
just because I'm sick of dealing with
just because I'm sick of dealing with
the Python. I think it'll literally be
the Python. I think it'll literally be
shorter and simpler in uh in C than in
shorter and simpler in uh in C than in
Python. Isn't that
Python. Isn't that
funny? Near MMO 3 looks really cool. Oh
funny? Near MMO 3 looks really cool. Oh
yeah. And we have it now training. It's
yeah. And we have it now training. It's
at on the 5090. We're up to 650,000
at on the 5090. We're up to 650,000
steps per second training. Uh, it goes
steps per second training. Uh, it goes
up to 700,000 if I do it in float 16. I
up to 700,000 if I do it in float 16. I
haven't gotten that stable yet. I
haven't gotten that stable yet. I
haven't gotten compiled on that yet. So,
haven't gotten compiled on that yet. So,
I think we're going to get up to like
I think we're going to get up to like
eight or 900,000 steps per second
eight or 900,000 steps per second
training on neural MMO 3. That's with a
training on neural MMO 3. That's with a
3 million parameter network as
well. Buffer very fast. Buffer very
well. Buffer very fast. Buffer very
fast.
It's a totally different
It's a totally different
game. Lost the task system
game. Lost the task system
though.
though.
Yeah. I mean, that doesn't mean it's
Yeah. I mean, that doesn't mean it's
gone forever. It's just for this version
gone forever. It's just for this version
of it. It's not. This is not the final
of it. It's not. This is not the final
version of
Neuralarmmo. The coolest open source
Neuralarmmo. The coolest open source
task. Yeah, I agree.
task. Yeah, I agree.
But it's okay, right? Here, like the
But it's okay, right? Here, like the
thing is like make the [ __ ] RL work,
thing is like make the [ __ ] RL work,
right? Let's solve neural MMO 3 and then
right? Let's solve neural MMO 3 and then
we'll like figure out how to make a good
we'll like figure out how to make a good
task system for neural MMO
4. Yeah, the baseline the old baseline's
4. Yeah, the baseline the old baseline's
a pain. So, the new it was a tenth uh it
a pain. So, the new it was a tenth uh it
we were only at like level two and a
we were only at like level two and a
half or whatever before. I think the
half or whatever before. I think the
best baseline got two and a half level
best baseline got two and a half level
average.
average.
So the new one we're up to this one is
So the new one we're up to this one is
at 4.5 in like 60 billion
steps is the new best. So if I run this
steps is the new best. So if I run this
for 100 bill again this will be like
for 100 bill again this will be like
five. So essentially five out of 20 max
five. So essentially five out of 20 max
levels 20.
That curve keeps going up like perfect
That curve keeps going up like perfect
log linear over a 100red billion steps
log linear over a 100red billion steps
too which is pretty
cool curriculum learning you know you
cool curriculum learning you know you
might it's kind of tricky though if
might it's kind of tricky though if
you're not doing it over task
you're not doing it over task
space we're only training on eight total
space we're only training on eight total
maps the maps are really
maps the maps are really
big
big
so You could potentially like randomize
so You could potentially like randomize
and have like an easy, medium, and hard
and have like an easy, medium, and hard
map or something in
map or something in
there like you can do that. And
there like you can do that. And
actually, neural MMO 3 is set up so that
actually, neural MMO 3 is set up so that
you can do that very very easily.
you can do that very very easily.
Um, oh here, let me show you the new
Um, oh here, let me show you the new
endbinding stuff as well. You can write
endbinding stuff as well. You can write
you get to write your envy now. It's
you get to write your envy now. It's
pretty nice.
So this is how you do your envy. All
So this is how you do your envy. All
that was just arch check. Look at this.
that was just arch check. Look at this.
You just call envenit and you just make
You just call envenit and you just make
whatever end you want with whatever
whatever end you want with whatever
arguments you want and then you just
arguments you want and then you just
call
call
vectorize. That's
it. And even after you vectorize, you
it. And even after you vectorize, you
can still call step and reset on
can still call step and reset on
individual M's if you want.
individual M's if you want.
This is the new
This is the new
infra. So when you're initializing
infra. So when you're initializing
neural MMO
neural MMO
3, you can initialize different
3, you can initialize different
instances with like whatever args you
instances with like whatever args you
want and then you can call vectorize and
want and then you can call vectorize and
then you can do the step over all the
then you can do the step over all the
different M's in pure
different M's in pure
C which is pretty nice.
So, this actually is built to make it
So, this actually is built to make it
really easy to do curriculum learning
really easy to do curriculum learning
type stuff. Can you change the tasks?
type stuff. Can you change the tasks?
There are no tasks. Remember, there are
There are no tasks. Remember, there are
no tasks. Um, you can reset individual
no tasks. Um, you can reset individual
ends. You can probably technically do a
ends. You can probably technically do a
few other things with them as
few other things with them as
well, but there's no task system in this
well, but there's no task system in this
yet, right? This is just
yet, right? This is just
uh you can change the math though
uh you can change the math though
like two reward functions. Oh yeah. No,
like two reward functions. Oh yeah. No,
you can do that. That type of stuff
you can do that. That type of stuff
isn't that hard to
isn't that hard to
make. Yeah, that's not that's not hard
make. Yeah, that's not that's not hard
to
to
do. I mean ultimately like this binding
do. I mean ultimately like this binding
is specific to neural MMO as well. So
is specific to neural MMO as well. So
you can just write arbitrary C in there.
you change that and
you change that and
reset. Uh you could probably get it to
reset. Uh you could probably get it to
add an argan to reset or something if
add an argan to reset or something if
you
you
wanted. I don't know. I would probably
wanted. I don't know. I would probably
just say add a different function would
just say add a different function would
be easier, right? Just like expose and
be easier, right? Just like expose and
like have like a binding set state or
like have like a binding set state or
whatever and then just call
that. But still this is already like way
that. But still this is already like way
easier because at least here the thing
easier because at least here the thing
that you can do with this that you could
that you can do with this that you could
not do before you can step and reset
not do before you can step and reset
individual M's with this because this M
individual M's with this because this M
byD here if you just store this as a
byD here if you just store this as a
list right like you can step individual
list right like you can step individual
ones of these M's and reset individual
ones of these M's and reset individual
M's but you also don't lose the
M's but you also don't lose the
vectorzed functionality so it's pretty
nice this whole thing. It's like 500
nice this whole thing. It's like 500
lines of Python API C
lines of Python API C
shenanigans. What you're looking at as
shenanigans. What you're looking at as
well, this is not considered like easy
well, this is not considered like easy
to read like clean C. The M's are easy
to read like clean C. The M's are easy
to read clean C. This is garbage Python
to read clean C. This is garbage Python
API stuff. So most of the code in Puffer
API stuff. So most of the code in Puffer
is way better than this, but like the
is way better than this, but like the
Python API is what it is. So you have
Python API is what it is. So you have
all of these like pi object, pi dict, pi
float, assert
false. So there's still more to be done
false. So there's still more to be done
here, but I'm very happy to cut down the
here, but I'm very happy to cut down the
amount of total binding code from like 2
amount of total binding code from like 2
to 3,000 lines down to 500 because it's
to 3,000 lines down to 500 because it's
so much easier to do stuff now.
well tested. It's not really that it's
well tested. It's not really that it's
an like a total ugly mess. It's just it
an like a total ugly mess. It's just it
has to use the Python API which is kind
has to use the Python API which is kind
of verbose, right? So there's like a
of verbose, right? So there's like a
bunch of annoying checks. You always
bunch of annoying checks. You always
have to check every operation because
have to check every operation because
like anytime you're doing something on a
like anytime you're doing something on a
Python object like you don't know what
Python object like you don't know what
the type of the Python object is, you
the type of the Python object is, you
have to check it otherwise you are sad.
No one doing research should need to
No one doing research should need to
read this. Well, I mean folks in Puffer
read this. Well, I mean folks in Puffer
will, right? Because we're closer to the
infra. The goal, my goal here is no
infra. The goal, my goal here is no
longer just to provide like a convenient
longer just to provide like a convenient
highle interface for researchers, right?
highle interface for researchers, right?
My goal is to solve RL
Oh, that's actually really shitty. Hang
Oh, that's actually really shitty. Hang
on. You don't have access to this
on. You don't have access to this
function yet, do you?
function yet, do you?
Crap. I can just put it in a separate
Crap. I can just put it in a separate
header file.
Oh, I can just prototype here. I can
Oh, I can just prototype here. I can
just prototype it. It's fine. I just I
just prototype it. It's fine. I just I
just exposed the
uh No [ __ ] I can't do that
either, man. I don't want you to have to
either, man. I don't want you to have to
include two files.
writing thesis and now defense
writing thesis and now defense
presentation and job apps. Yeah, it's
presentation and job apps. Yeah, it's
rough. It's no
rough. It's no
fun. Defending Monday almost out. Hey,
fun. Defending Monday almost out. Hey,
congrats,
man.
Congrats. I forget. I don't know if I'm
Congrats. I forget. I don't know if I'm
flying on on um Sunday, Monday, or
flying on on um Sunday, Monday, or
Tuesday, but if I'm not fly in the air
Tuesday, but if I'm not fly in the air
and you send me a link, I will gladly be
there. And I promise not to ask you any
there. And I promise not to ask you any
[ __ ]
questions. Doctor, philosopher, too.
philosophy
doctor. No pressure. Hey, if I'm not
doctor. No pressure. Hey, if I'm not
flying, I'll be there.
I'm trying to think if this is actually
worth. Good luck. Thank you. Okay, back
worth. Good luck. Thank you. Okay, back
to infra. So, here's the HP, right? This
to infra. So, here's the HP, right? This
file gets included second. So, you can't
file gets included second. So, you can't
use anything from this file right now.
I really would like to have this thing
available. What if we what if we just
available. What if we what if we just
prototype it for now just to see if it's
prototype it for now just to see if it's
even
even
useful? Like
Okay. So, what if we do
this? Now we have access to this stupid
this? Now we have access to this stupid
thing.
Um, and
Um, and
then let's comment this
Okay. And then we do this is
unpack
int. So this is float float
int. So this is float float
float and end in int.
float and end in int.
float. Yeah. And everything else is
fine. Now, the only thing I can think
fine. Now, the only thing I can think
right is if you use the int function on
right is if you use the int function on
a float, you're going to round
a float, you're going to round
it. But I this is way better than having
it. But I this is way better than having
to match a freaking string.
This ends up not really being any longer
This ends up not really being any longer
either because you don't have to declare
either because you don't have to declare
this annoying thing anymore or do all of
this annoying thing anymore or do all of
this. Okay.
expected storage
class. Okay, this doesn't have to be
class. Okay, this doesn't have to be
static. I don't know why I'm starting to
static. I don't know why I'm starting to
use stupid keywords that I don't need.
Redefinition of
my
key redefinition.
redefin static
int. I'm confused because it
like where the hell else does it think
like where the hell else does it think
this is uh
binding
C.
C.
Oh,
h
for Oh, I just pasted this here and I
for Oh, I just pasted this here and I
forgot about it.
forgot about it.
Okay,
stupid keyword list
undeclared
69. This is just
key
bars. Uh, this is no longer used.
returned a result with an exception set.
Invalid type for keyword
uh pi error set
uh pi error set
string. You actually do need to do
string. You actually do need to do
format string. C doesn't have any like
format string. C doesn't have any like
nice format string, right?
That doesn't work, does it?
This is PHP. Why am I reading this?
This is a buffer overflow right there
This is a buffer overflow right there
I'm making. Let's not add a buffer
I'm making. Let's not add a buffer
overflow in the buffer for no freaking
overflow in the buffer for no freaking
reason.
size of buffer.
There we
go. That's better.
Right. Invalid types. The keyword reward
Right. Invalid types. The keyword reward
market.
reward market as
reward market as
float.
float.
Okay. Um why did it fail?
so it gets all the way down to to there.
Ah,
So for
now, Should fix it for
now. So, what do we think about
now. So, what do we think about
uh about this? So definitely this quarks
uh about this? So definitely this quarks
unpack thing doesn't
unpack thing doesn't
work because you lose the type of the
original. Top versus bottom here.
Top's way better,
right? You'll actually get an error
message. It should be an easy to
message. It should be an easy to
understand error message. It's a little
understand error message. It's a little
fiddly on what type you have to provide
fiddly on what type you have to provide
at the moment. Technically, uh, what I
at the moment. Technically, uh, what I
could do is I could make
could do is I could make
it I could probably make it like try to
it I could probably make it like try to
cast. So try to if you unpack it as an
cast. So try to if you unpack it as an
int and it's a float, right? It'll try
int and it's a float, right? It'll try
to unpack it and it'll check if the
to unpack it and it'll check if the
values are the same. I could do
that. Yeah, but this is totally fine
that. Yeah, but this is totally fine
right now.
Oh, I didn't realize that uh I didn't
Oh, I didn't realize that uh I didn't
have the model size correct on my
have the model size correct on my
machine. So, actually, it looks like the
machine. So, actually, it looks like the
uh
uh
the 5090 is a little better than I'd
the 5090 is a little better than I'd
originally thought.
originally thought.
Okay, that's not
Okay, that's not
terrible. I like this.
Now, the only thing we got to figure out
Now, the only thing we got to figure out
is this [ __ ] right here,
is this [ __ ] right here,
right? Because we need these functions.
right? Because we need these functions.
Um, but the way this is set up, you have
Um, but the way this is set up, you have
to have endbinding defined after you're
to have endbinding defined after you're
in it.
Oh, duh. Hang
on. We just
on. We just
define Mayanet up here, right?
Get rid of
these. Boom.
Way
cleaner. Way way cleaner.
If we're going to call all of these
If we're going to call all of these
binding as
well then I can even remove this line
right or can I
That's even
better. And now, hang on. You no longer
better. And now, hang on. You no longer
need to include
need to include
python.h. And you can include it in the
python.h. And you can include it in the
correct spot where like a sane person
correct spot where like a sane person
would.
Uhoh. Implicit definition of memset.
Why did we suddenly get a whole bunch of
Why did we suddenly get a whole bunch of
bears?
That just somehow got unincluded, but
That just somehow got unincluded, but
actually it works perfectly
fine. Do we use end module name anywhere
fine. Do we use end module name anywhere
anymore?
macro for module
name, but it's just binding
Okay. And now for
uh all the marbles. I
uh all the marbles. I
guess C step
guess C step
reset. We no longer need these.
That's pretty damn
That's pretty damn
good. What do you think? Easy enough to
good. What do you think? Easy enough to
bind your
ends. That's literally it.
classic code screenshot.
My Discord needs update. Hang on.
Why do I have ads in my
Why do I have ads in my
Discord? They literally have a didn't
Discord? They literally have a didn't
ask
ask
button. All right, you're forgiven.
Well, I'm happy with
Well, I'm happy with
this. This is kind of the best possible
this. This is kind of the best possible
outcome. You
know, there's basically nothing you can
know, there's basically nothing you can
do to make this simpler, right?
Can I make it a
Can I make it a
void? A void
type. It would be safe.
Voidar
Voidar
can't inherently convey type
information. Yeah, that's Yeah, that's
information. Yeah, that's Yeah, that's
true. Because it needs to actually know
true. Because it needs to actually know
how to do the cast.
You know this is
dumb. What's this freaking macro?
That's
stupid value
unpack. That's dumb.
value.
value.
Return. Now, I don't want a value like
Return. Now, I don't want a value like
that. That's bizaro.
Yeah. Now that's
gross. Is this a union type use
case? I don't like those.
I think this is worse than just having
I think this is worse than just having
separate functions though. I think it's
separate functions though. I think it's
just
worse versus unpack float unpack int.
Okay, that's
dumb. Yeah, it would still have to be a
dumb. Yeah, it would still have to be a
void star.
Yeah. So, it doesn't make sense
because yeah, the only thing you'd be
because yeah, the only thing you'd be
able to do is cast to an int and then
able to do is cast to an int and then
you
you
risk rounding being screwy,
risk rounding being screwy,
right? You don't want to store it as a
right? You don't want to store it as a
float.
There's no other type I can store it as,
There's no other type I can store it as,
right?
Oh,
Oh,
wait. I didn't realize
wait. I didn't realize
this. I didn't realize that double can
this. I didn't realize that double can
actually store all 32-bit ins. So,
actually store all 32-bit ins. So,
that's
perfect. Is that actually true?
Oh, it is totally true, right? Because
Oh, it is totally true, right? Because
of the number of bits exponent mintisa,
of the number of bits exponent mintisa,
right? So bits.
Yeah, because it
Yeah, because it
has
53. Okay, so I'm stupid. It should just
53. Okay, so I'm stupid. It should just
be a double and we're
be a double and we're
done.
done.
Okay, this is why knowing low-level
Okay, this is why knowing low-level
stuff is important, right? Because
stuff is important, right? Because
literally the the error that I made here
literally the the error that I made here
is I assume that you would lose
is I assume that you would lose
precision on the double way before uh
precision on the double way before uh
max int. But you
don't. So I can literally just Now this
don't. So I can literally just Now this
is beautiful, right?
So I can just do Yes.
Oh, this is going to be so
Oh, this is going to be so
nice. Look at this.
Can you do pi along as double or
something? Just
Oh, I think it'll just
Oh, I think it'll just
work as
work as
double and
this. That's it. That's your unpack
now. And you don't even need to
now. And you don't even need to
cast. You don't even need to cast
cast. You don't even need to cast
anymore because it'll auto cast from
anymore because it'll auto cast from
double. So this is basically
perfect. So like why something like this
perfect. So like why something like this
isn't built in, I have no idea.
isn't built in, I have no idea.
So this is actually
So this is actually
perfect and this handles I'll no longer
perfect and this handles I'll no longer
need to do the thing where
need to do the thing where
um I like had to define the floats as
um I like had to define the floats as
floats and the instance inside. This
floats and the instance inside. This
will just work. This will just freaking
work. That's the unused function. We're
work. That's the unused function. We're
going to delete that in a second
going to delete that in a second
anyways.
Even better. I actually made it
Even better. I actually made it
better. I didn't think that was going to
better. I didn't think that was going to
work before. I didn't think I'd be able
work before. I didn't think I'd be able
to do that. So now this
to do that. So now this
is the only time this is unsafe is uh if
is the only time this is unsafe is uh if
you go outside of the range of max int,
you go outside of the range of max int,
which at that point, screw
which at that point, screw
you. We're good.
you. We're good.
We're
We're
absolutely good
here. Oh, and I can actually wait. PI
here. Oh, and I can actually wait. PI
long
check pie long as long. Oh, I can even
check pie long as long. Oh, I can even
do
He is uh defined already.
Perfect. So now we don't have any any
Perfect. So now we don't have any any
possible
possible
errors. Now this is a perfectly safe
errors. Now this is a perfectly safe
unpack function.
better. That's beautiful.
Perfect. I'm very very proud of that.
Perfect. I'm very very proud of that.
You know, it's like these very small
You know, it's like these very small
things where it's you have to actually
things where it's you have to actually
spend a few hours to get these really
spend a few hours to get these really
really right. But now look at this. I
really right. But now look at this. I
mean, look at the result of
mean, look at the result of
this. This is how easy it is to bind
this. This is how easy it is to bind
environments. Now, this is how easy it
is. Let's do this now for uh for Pong
is. Let's do this now for uh for Pong
and for Breakout and um yeah, we'll go
and for Breakout and um yeah, we'll go
from there.
Look at this. This is what we had for
Look at this. This is what we had for
Paul.
Paul.
Disgusting by comparison.
Width, height, paddle width, paddle
Width, height, paddle width, paddle
height, ball width, ball height, speed,
height, ball width, ball height, speed,
initial
initial
speeds, X,
Y, skip, and continuous.
Perfect. Was there a
Perfect. Was there a
function. There is an init function on
function. There is an init function on
Pong,
Pong,
right? So, we just do that.
This is
This is
like I'm very very proud of
this comparison between pointer and
this comparison between pointer and
integer. That is bad.
But uh yeah this that is very bad. So we
But uh yeah this that is very bad. So we
will fix
that. Pi long as long
This is supposed to be long.
Let's see if it's still
trans. Look at
this. That's all we have for the
binding. That is solid.
Honestly, in my mind, this makes puffer
Honestly, in my mind, this makes puffer
lib so much
lib so much
better. This is just like effortless C
better. This is just like effortless C
to Python for all your
to Python for all your
M's, right?
There's no in it on this. Yes, there is
There's no in it on this. Yes, there is
no on
this
this
height paddle with paddle height ball
height paddle with paddle height ball
with width ball height brick width kite
with width ball height brick width kite
rows columns and continuous That's
rows columns and continuous That's
perfect.
And you'll actually even if you screw
And you'll actually even if you screw
up, you'll still get pretty much
up, you'll still get pretty much
anything that you could conceivably
anything that you could conceivably
screw up
screw up
here. You will get a a reasonable error
here. You will get a a reasonable error
message. Good at the very least. And
message. Good at the very least. And
this is bet, so we don't worry about
this is bet, so we don't worry about
that.
One line
per this
per this
is huge
is huge
success. Huge success.
Yeah, that's
solid. That's very solid.
I'm feeling pretty good. I want to keep
I'm feeling pretty good. I want to keep
going on stuff. I think we take on
going on stuff. I think we take on
um Let's see. So, ah, wait. We didn't do
um Let's see. So, ah, wait. We didn't do
we didn't think about struck blogging at
all. To be fair, that one I don't know
all. To be fair, that one I don't know
if we have any way
around. Okay, I'll think what I'll do
around. Okay, I'll think what I'll do
here is I'll think about this for a few
here is I'll think about this for a few
minutes. Then I'll take a few minute
minutes. Then I'll take a few minute
break and then I'll come back and we'll
break and then I'll come back and we'll
do um infra other infra. I don't know
do um infra other infra. I don't know
about this logging stuff
though
though
like this is how simple we have logging
like this is how simple we have logging
right now. You just define your log keys
right now. You just define your log keys
and you define an enum with your values
and you define an enum with your values
and uh everything else is handled for
and uh everything else is handled for
you.
Oh, you know what? There is a way to do
Oh, you know what? There is a way to do
it,
right? There is totally a way to do it.
It'll be a little more work.
Okay, I think I know how we're going to
Okay, I think I know how we're going to
do this. It's actually we're going to
do this. It's actually we're going to
write something that looks very very
write something that looks very very
similar to what we just
wrote because basically all this does
wrote because basically all this does
it's the same problem that I just solved
it's the same problem that I just solved
right all we basically need is we need a
right all we basically need is we need a
way to map um it's it's the inverse of
way to map um it's it's the inverse of
the problem though right so we just need
the problem though right so we just need
a way to grab an element from a a crruct
a way to grab an element from a a crruct
and then assign the result of that uh
and then assign the result of that uh
to a Python dict. So all we'll do is
to a Python dict. So all we'll do is
we'll just make like a my logger or
we'll just make like a my logger or
whatever and then you won't have to do
whatever and then you won't have to do
this in this file. Yeah. Okay, that'll
this in this file. Yeah. Okay, that'll
be perfect. That will be actually
be perfect. That will be actually
perfect. But that is going to take me a
perfect. But that is going to take me a
little bit of work. And I need to I've
little bit of work. And I need to I've
been deving for a few hours. I need to
been deving for a few hours. I need to
go grab a drink. I need to walk around
go grab a drink. I need to walk around
for a couple minutes and then we'll be
for a couple minutes and then we'll be
back. The binding file will get slightly
back. The binding file will get slightly
longer. Um, but there's going to be a
longer. Um, but there's going to be a
trade-off, right? And the trade-off will
trade-off, right? And the trade-off will
be that the logging becomes exactly what
be that the logging becomes exactly what
you want it to be. So essentially, you
you want it to be. So essentially, you
will have the binding file still as easy
will have the binding file still as easy
as possible, no added complexity, just
as possible, no added complexity, just
you know, you write out this stuff
you know, you write out this stuff
there, zero added complexity to your
there, zero added complexity to your
actual end implementation, which is
actual end implementation, which is
crucial. Uh, and no like perf loss
crucial. Uh, and no like perf loss
either. So I'll be right back and then
either. So I'll be right back and then
we will do that. Give me a few
Okay, here's the
Okay, here's the
plan. I got a little over two
plan. I got a little over two
hours to totally fix the
hours to totally fix the
logging and have this clean end binding
logging and have this clean end binding
stuff set and done and done.
Then I can let Bet handle updating the
Then I can let Bet handle updating the
rest of the MS with it. This should make
rest of the MS with it. This should make
it very, very easy
though. Got a little bit of food real
though. Got a little bit of food real
quick. Now I am good for
quick. Now I am good for
uh good to get this done.
Okay. So, first
Okay. So, first
things
um let's go find the old login because
um let's go find the old login because
we need that
strruct. That's all it has in it.
episode length, episode
episode length, episode
return, score, and it
return, score, and it
has end. We can just make end float
has end. We can just make end float
because why
because why
not? Delete. Delete. Delete.
Bog
log. It's cleaner, right? So, we don't
log. It's cleaner, right? So, we don't
have to even do this weird thing that I
have to even do this weird thing that I
was planning on adding. I don't know why
was planning on adding. I don't know why
I thought that was a good idea. I was
I thought that was a good idea. I was
being stupid, I guess, because I didn't
being stupid, I guess, because I didn't
see the way to do it with uh this new
see the way to do it with uh this new
thing. Uh, and that should actually be
thing. Uh, and that should actually be
it for this end.
it for this end.
So, we add the log
strct and then everything else is just
strct and then everything else is just
gone. Right now, what we need to do
my
log.
log.
Okay, so this is going to get called
somewhere. Let me just see how I do the
somewhere. Let me just see how I do the
aggregation right
now. Yeah, that log, right?
I float from
double.
Convert set item string.
Um, okay. There is a slight issue here,
Um, okay. There is a slight issue here,
right? Iterating over the
keys. [ __ ] Did I not think this
keys. [ __ ] Did I not think this
through?
I forgot there's a second part to this,
I forgot there's a second part to this,
right? So for part
right? So for part
one, you have to uh average all the
one, you have to uh average all the
dictionaries or average all the
dictionaries or average all the
strs and then part
strs and then part
two is that you have to add them to a
two is that you have to add them to a
dictionary.
dictionary.
We don't want to go through the pi dict
We don't want to go through the pi dict
API and then average. That'll be
slower. Yeah. So having those keys
slower. Yeah. So having those keys
defined before, what did that do for me?
Oh
jeez. I know a really stupid way to do
it. I do know a really stupid way to do
it. I do know a really stupid way to do
it.
Well, we don't have to do it
Well, we don't have to do it
here.
here.
Nice. But we do have to
Nice. But we do have to
do we do have to do it here.
I think this is actually right.
There's no other way to iterate through
There's no other way to iterate through
the keys of a str
I know how to do this a little more
I know how to do this a little more
safely.
This should be float
n pi float from double.
Okay. And now this is where you actually
Okay. And now this is where you actually
need your custom logic, right?
There's no way around custom logic here
There's no way around custom logic here
because you need to know the
keys. But you actually don't need to do
keys. But you actually don't need to do
this gross thing anymore.
So here you can do what is it? My
logic aggregate
And then you do have to go over
And then you do have to go over
the the uh the keys. You have to do this
the the uh the keys. You have to do this
[ __ ] one more
[ __ ] one more
time in order to do the
division. Uh you don't need to do this
division. Uh you don't need to do this
part though. You only need this
part. Key
is there. That's
it. And then this is
user
user
picked and then all you need to do is
picked and then all you need to do is
this function, right?
idict under the
idict under the
log, right? And then you just
do Okay, that is actually kind of
do Okay, that is actually kind of
annoying that you need to do this task.
annoying that you need to do this task.
So what we'll do
is we'll do something like
this. We'll just do
Yeah. So this is
Yeah. So this is
it. So you have some like assigned to
it. So you have some like assigned to
dict
function. I actually want it the other
function. I actually want it the other
way.
they do key and then
value. Yeah, I guess that makes sense.
And then I can do the
assignment. I can do this
assignment. I can do this
assignment. This is no longer
assignment. This is no longer
needed. There's this
needed. There's this
average. This is no longer needed.
Is there anything we can
Is there anything we can
do about this aggregate
do about this aggregate
differently? You know, I think you just
differently? You know, I think you just
need a required key, right?
need a required key, right?
It doesn't have to be in any specific
It doesn't have to be in any specific
order, but I think you do need to have a
order, but I think you do need to have a
required key in their end
somewhere. Technically, you can do it
somewhere. Technically, you can do it
right here, though.
Right. You can literally just do
this. No, you can't do that, right?
No, because you need the total
No, because you need the total
n. Yeah. So, you do need to do it the
n. Yeah. So, you do need to do it the
way I had it. Okay. This is still nice
way I had it. Okay. This is still nice
and
and
clean. This is still nice and clean.
Let's see if it
works and then we will uh we'll consider
works and then we will uh we'll consider
whether this is the best it could
whether this is the best it could
possibly
be. Request for
be. Request for
member N.
does have an
does have an
N implicit
declaration my log.
We have to for
declare incompatible pointer
type PI object
dict and then aggregate as a log
star object.
pi dict
pi dict
object. Is pi dict object a
thing? Let me go look how I have this on
thing? Let me go look how I have this on
dev right now.
because something happened with the
because something happened with the
types. I like I must have messed
types. I like I must have messed
something
up. Okay. So, where do you do this
up. Okay. So, where do you do this
logging right now?
logging right now?
Here. Pi dict
new. Yeah. Okay. So, this I don't know
new. Yeah. Okay. So, this I don't know
what this pi dict object thing is. I
what this pi dict object thing is. I
don't know if this even exists, but uh
don't know if this even exists, but uh
whatever it is, you don't need
whatever it is, you don't need
it. So, this is just a pi object star.
Incompatible pointer type pi
object. Oh, I know what it is. Support
object. Oh, I know what it is. Support
declaration's
declaration's
wrong. My
bad. Pi object and log.
So now we have assigned to
dict. This one's easy. This is just this
dict. This one's easy. This is just this
needs to go up one
function. Pi dict
object incompatible pointer
object incompatible pointer
type. This is supposed to
type. This is supposed to
be wait expected pi object but is pi
be wait expected pi object but is pi
dict
object pi dict set item. Oh, because
object pi dict set item. Oh, because
this is
this is
again the Python API is kind of
again the Python API is kind of
weird. Like it seems like it's not just
weird. Like it seems like it's not just
Python rubbing up against C and having
Python rubbing up against C and having
friction. It seems like just the API
friction. It seems like just the API
wasn't like it could be better.
Okay. Now request for a member and not
Okay. Now request for a member and not
instruct or
union. Um it should be there though
union. Um it should be there though
because
because
This log exists,
right? This log
exists originally defined. Yeah, it's
exists originally defined. Yeah, it's
getting the right
getting the right
log. Oh, wait.
Redefinition in
Redefinition in
binding
C.
Oh, request for member and in something
Oh, request for member and in something
not a structure or union.
I probably just screwed up the type
I probably just screwed up the type
somewhere, right? Because it used to be
somewhere, right? Because it used to be
a
float. Oh, is it just straight up not
float. Oh, is it just straight up not
anywhere?
Yeah, this is just supposed to
Yeah, this is just supposed to
be aggregate
n. Yeah.
n. Yeah.
Invalid type argument of
log assigned to
dict. This is
dot. And
dot. And
now you just have to fiddle with
now you just have to fiddle with
this cast.
Unknown type
Unknown type
log and
binding.h. It should be known.
unknown type name
unknown type name
log mbfinding.h But I already included
log mbfinding.h But I already included
pong which exports this
log, right? I have this log right here.
Yeah, this should definitely be
Yeah, this should definitely be
available.
It's not because of the type depth,
It's not because of the type depth,
right? No, that doesn't make any
right? No, that doesn't make any
sense because I have
N. I mean, that shouldn't do anything.
Good. Is there like some name conflict
Good. Is there like some name conflict
or
or
something? But then it wouldn't be
um it wouldn't
um it wouldn't
be Yeah, it wouldn't be here.
This is going to be something really
This is going to be something really
dumb, isn't
it? I'm using N
here. Pong's included at the
here. Pong's included at the
top. Is this like some bizarro caching
top. Is this like some bizarro caching
thing?
Doesn't look like
Doesn't look like
it. Unknown type
name. What if I go like redefine it?
What happens if I do
What happens if I do
this redefinition of str
block? Oh, you know what it is.
Uh, what's the type syntax?
Probably this
right
unknown. I figured it would be the log
unknown. I figured it would be the log
being weird.
Yeah, that's not it.
patient rock because I'm probably just
patient rock because I'm probably just
being that Stupid.
This is already defined.
It still
It still
happens.
Um, this is
Um, this is
weird. This is really weird.
includes pong which has the log
includes pong which has the log
death and like if I try to do
death and like if I try to do
str log
Oh, unknown type.
How is this possibly unknown type name?
Okay. So now it shuts up at
Okay. So now it shuts up at
least. Do we think that like Python or
least. Do we think that like Python or
NumPy have a log in
them? Is that what's going on?
But that's not what we're
getting. Right. We're not getting that.
It says unknown type
name. If I just change this to
It's not going to compile for other
It's not going to compile for other
reasons,
reasons,
right? No, we get the same
right? No, we get the same
error. We get the exact same
error. We get the exact same
error. Not a name conflict.
I'm staring at this thing and Pong gets
I'm staring at this thing and Pong gets
included before the end binding.
What are you
What are you
defining? M to um because it needs it's
defining? M to um because it needs it's
just an
just an
alias. Otherwise, you would have to name
alias. Otherwise, you would have to name
all of your environment strcts.
M. I have this
M. I have this
like I don't know why the hell it can't
like I don't know why the hell it can't
find this truck. This is driving me
nuts. Log is defined in pong.h And it
nuts. Log is defined in pong.h And it
gets used here.
So if I do it here, it's still not
there. If I put it
there. If I put it
here, still not
here, still not
there. If I put it here, still not
there. If I put it here, still not
there.
So if I put it in this
So if I put it in this
file now, I no longer get the error at
file now, I no longer get the error at
the
top. It's literally a matter of what
top. It's literally a matter of what
file I I put it
file I I put it
in. That's not how C works. Like what
in. That's not how C works. Like what
the
[ __ ] Yeah. Now you get the error again.
Is there a way I can get it to output
Is there a way I can get it to output
the pre-process code? Uh, wait, that's
the pre-process code? Uh, wait, that's
going to be gigantic. Are you just
going to be gigantic. Are you just
compiling Pong and finding not having
compiling Pong and finding not having
guards and being included in Pong and
Breakout? They're being built as
Breakout? They're being built as
separate extensions. So, that would be
separate extensions. So, that would be
really [ __ ]
really [ __ ]
But I will go look at
that. Oh, for [ __ ] sake.
Oh, I'm dumb. Oh, I'm just really dumb.
Oh, I'm dumb. Oh, I'm just really dumb.
Okay, that wasn't it. No, you got you
Okay, that wasn't it. No, you got you
gave me the answer, but that wasn't
it. So,
it. So,
um yeah, this is it's fine. It's not the
um yeah, this is it's fine. It's not the
prog. It's
prog. It's
I was misreading the error message. I
I was misreading the error message. I
didn't see that it's in breakout. I
didn't see that it's in breakout. I
thought that it was in
thought that it was in
palm. Okay, it's fine.
Yeah, 31 should not happen. So, there's
Yeah, 31 should not happen. So, there's
a
bug. Yeah, there's a big bug with
this. It's funny. It does
this. It's funny. It does
actually. What in the
actually. What in the
hell? All right, let's figure out what
hell? All right, let's figure out what
the heck that is.
It's got to be this thing here,
right? Structures defined just fine.
How did this get so messed
up? There's some crazy negative
Is it because you populate your
Is it because you populate your
dictionary before
dictionary before
averaging? Well, I populate it and then
averaging? Well, I populate it and then
I average
here. Yes. Yes, it
here. Yes. Yes, it
is. Though I don't know why that makes
is. Though I don't know why that makes
it able to go negative.
Welcome,
Spencer. This is very, very close to
Spencer. This is very, very close to
just being awesome. Awesome. Solid
intro. Oh, it can go negative because
intro. Oh, it can go negative because
the score function goes negative. Duh.
So the only thing is that uh n should
So the only thing is that uh n should
not be
not be
this. We need n to be
this. We need n to be
correct. Go to
correct. Go to
n. We just assign n like
this. We don't want to average our
this. We don't want to average our
averaging variable.
Okay. Why is N still one? Oh, there we
go. Now it's just because the games are
go. Now it's just because the games are
kind of long.
kind of long.
Cool. This works. This works.
It's supposed to get 20 score though.
It's supposed to get 20 score though.
Maybe that was just a little
Maybe that was just a little
unlucky. Let's run it
unlucky. Let's run it
again. So,
again. So,
um I I want to make sure that this
um I I want to make sure that this
actually works. But let me show off what
actually works. But let me show off what
what we've just done
here.
here.
Okay, here's your binding function.
Okay, here's your binding function.
You write your init, you write your
You write your init, you write your
log. Pretty much you just need to map
log. Pretty much you just need to map
the
keys. Yeah. Okay. Perfect. So this does
keys. Yeah. Okay. Perfect. So this does
work.
So this is your whole binding and
So this is your whole binding and
actually the logging gets to be even
actually the logging gets to be even
better. So the logging now can use a
better. So the logging now can use a
strruct again. You can use a strruct for
strruct again. You can use a strruct for
the log. You don't have any of those
the log. You don't have any of those
additional
additional
functions. You just write to the log as
functions. You just write to the log as
normal. So this is even better than
normal. So this is even better than
before. You just have to write that
before. You just have to write that
extra log
extra log
function which in exchange you no longer
function which in exchange you no longer
have to define all the log keys.
So 30 line file. This is your entire
So 30 line file. This is your entire
binding. We are very happy.
Let's fix
breakout. So you get your log, you get
breakout. So you get your log, you get
rid of these keys that you had to
rid of these keys that you had to
define. You no longer have this. You
define. You no longer have this. You
just have log log.
And then end of episode lengths
And then end of episode lengths
for there you go. That's it.
almost works. We just need to define the
almost works. We just need to define the
log thing obviously.
We could technically have a default
We could technically have a default
implementation as well. I don't know if
implementation as well. I don't know if
that's worth
that's worth
doing. We could technically leave a
doing. We could technically leave a
default implementation in if we wanted
default implementation in if we wanted
to. So like this could be the default
to. So like this could be the default
implementation, right?
because this is the same function here.
Okay.
Okay.
Perfect. Now, neural MMO I kind of
Perfect. Now, neural MMO I kind of
messed up a whole bunch.
We have this giant
log. Yeah. So, we have to actually go
log. Yeah. So, we have to actually go
get this thing back now.
I don't know. I personally I think I'd
I don't know. I personally I think I'd
rather have this thing in here than all
rather have this thing in here than all
this
this
mess. You still need was episode return,
mess. You still need was episode return,
episode
episode
length,
score, and end.
The order no longer matters.
not
not
mandatory, but um I would like all our
mandatory, but um I would like all our
MS to have these because like when you
MS to have these because like when you
go to actually compare experiments in
go to actually compare experiments in
your dashboard, it's really convenient
your dashboard, it's really convenient
to have them under the same key. In
to have them under the same key. In
fact, you know, the most useful thing
fact, you know, the most useful thing
would be is if we had episode return be
would be is if we had episode return be
the return, which is the sum of the
the return, which is the sum of the
score. Episode length is length just the
score. Episode length is length just the
trajectory length but then score instead
trajectory length but then score instead
of having score just equal episode
of having score just equal episode
return most of the time or whatever.
return most of the time or whatever.
Ideally we have score be normalized zero
Ideally we have score be normalized zero
to one something like that so that we
to one something like that so that we
can actually put a whole bunch of M's on
can actually put a whole bunch of M's on
one graph and we can get like an average
one graph and we can get like an average
score across M's. That would be the
score across M's. That would be the
best.
Then we could return like one number for
Then we could return like one number for
evals.
also still multi m training media with
also still multi m training media with
one
one
policy. Uh so that's a little harder
policy. Uh so that's a little harder
because you have varying observation
because you have varying observation
spaces. You would actually it's not
spaces. You would actually it's not
realistic to have all the M's have one
realistic to have all the M's have one
observation space. So you would probably
observation space. So you would probably
need some sort of like weird tokenizer
need some sort of like weird tokenizer
thing. That's the tough
thing. That's the tough
part with that.
And that's surprisingly all the logging.
use but never defined. All right, now we
use but never defined. All right, now we
just have to define our
binding. Look how clean this is going to
be. Right now we have this. All we got
be. Right now we have this. All we got
to do is we add our log in
to do is we add our log in
here. We just go get our log
keys which are just defined by the SC,
right? You don't need to do N. It's done
right? You don't need to do N. It's done
for you. You can do it. It won't hurt
for you. You can do it. It won't hurt
anything, but you don't need
to. And uh this is so easy even even
to. And uh this is so easy even even
Grock can fill it in. Or not even Grock,
Grock can fill it in. Or not even Grock,
Super Maven can even fill this in.
Super Maven can even fill this in.
That's it. That's your whole end
That's it. That's your whole end
binding. So, 44
binding. So, 44
lines and it's really just a name
lines and it's really just a name
mapping. Okay.
log has no
member.
member.
Oh, [ __ ] You did it in the wrong
file there.
Boom. Pretty cool.
Pretty cool.
This is
This is
solid. Okay. And squared just because
solid. Okay. And squared just because
squared should be super quick.
So this doesn't do anything,
right? So you can just do return
zero. Oh, no wait. It does do something.
zero. Oh, no wait. It does do something.
It sets the end size.
doesn't have an init function
doesn't have an init function
though. And then
though. And then
log is going to be return length and
log is going to be return length and
score probably or does it not have any
logging? I think square doesn't actually
logging? I think square doesn't actually
have logging.
Oh no, it
does. Why did it just give me an int
does. Why did it just give me an int
there?
No idea. Must have been auto
No idea. Must have been auto
complete cuz that would screw you over
complete cuz that would screw you over
pretty
There you
go. That's how it was before, right?
go. That's how it was before, right?
Yeah. Exactly how it was
before. All right. So now this goes
before. All right. So now this goes
unpack does this
unpack does this
default and all this stuff can go.
Then the only thing is I need to change
Then the only thing is I need to change
some names.
Just have to take this out of the
siphon.
Beautiful. This one has bad hypers on
Beautiful. This one has bad hypers on
it, but it should still
run. This is back in it.
What did I miss?
What did I miss?
Seed. Seed.
Oh,
runs. Great. So, we now have uh all this
runs. Great. So, we now have uh all this
all set
all set
up. Easy as that.
So that actually should take a lot more
So that actually should take a lot more
than like two or three thousand lines
than like two or three thousand lines
out of the codebase. Now with the
out of the codebase. Now with the
logging changes, that's going to take
logging changes, that's going to take
like four or 5,000 lines out of the
like four or 5,000 lines out of the
codebase. That's great.
Not
really. You would save
um you would save very little by doing
um you would save very little by doing
that.
That's pretty solid.
You can even name them whatever you want
You can even name them whatever you want
like this as well. They don't have the
like this as well. They don't have the
same name. You can have like you can
same name. You can have like you can
name these differently if you want.
name these differently if you want.
You could probably even put like slash
You could probably even put like slash
and stuff in if you want to have like
and stuff in if you want to have like
extended paths for logging. You can
extended paths for logging. You can
probably just do
probably just do
that. This is nice. I'm
that. This is nice. I'm
happy. And at the very least, you know,
happy. And at the very least, you know,
we really won't have to change anything
we really won't have to change anything
now. Like with the main M now that it
now. Like with the main M now that it
works like
works like
this, pretty pretty solid.
I'll like I'll at least consider the
I'll like I'll at least consider the
macro thing for a
macro thing for a
second, but it seems like it's probably
second, but it seems like it's probably
pretty stupid, right?
Like what you would do like some unpack
Like what you would do like some unpack
all with all the
keys. That's kind of sketchy magic
keys. That's kind of sketchy magic
though, right?
though, right?
because then you would like you'd
because then you would like you'd
basically be doing a string replacement
basically be doing a string replacement
on this where you're like assigning each
attribute. That seems sketchy to
me. I kind of like the way I have it now
me. I kind of like the way I have it now
where provided you're not counting like
where provided you're not counting like
this alias, there aren't any macros at
this alias, there aren't any macros at
all in here.
This is this is the one I think this is
This is this is the one I think this is
still really easy. This code is so brain
still really easy. This code is so brain
dead it'll like autocomplete itself for
dead it'll like autocomplete itself for
you, right?
And if you actually go look at this,
And if you actually go look at this,
like the source of this doesn't have any
like the source of this doesn't have any
stupid ridiculous magic
either. So I think that we
either. So I think that we
uh you know we allow you to have to have
uh you know we allow you to have to have
a line per one line per uh variable and
a line per one line per uh variable and
in exchange it stays very very
in exchange it stays very very
simple. This is the entire dict
simple. This is the entire dict
assignment thing. It's just, you know,
assignment thing. It's just, you know,
convenience. And then the entire um
convenience. And then the entire um
where is it?
Unpack. Is it
in there? It is. There's the entire
in there? It is. There's the entire
unpack. I think we are happy with
unpack. I think we are happy with
this. Yeah, this is good.
I will let Bet work on the rest of
I will let Bet work on the rest of
these.
Did they really lie in the tweet
Did they really lie in the tweet
announcement for this? Are you kidding
announcement for this? Are you kidding
me?
How much [ __ ] do I want to start?
This is way before Dreamer, isn't it?
I guess they assume without the task
curriculum it is fair to say that it
curriculum it is fair to say that it
like without the task
like without the task
curriculum but it's not without human I
curriculum but it's not without human I
mean it depends if you consider Consider
mean it depends if you consider Consider
tasks as human data.
Yeah, these techniques didn't work at
all. It's
crazy. Man, I don't
know. It sucks cuz it's like this guy
know. It sucks cuz it's like this guy
put out a whole bunch of work and I
put out a whole bunch of work and I
really wanted to like the work, but when
really wanted to like the work, but when
you dig into it, it just it's all fake.
you dig into it, it just it's all fake.
It's like all [ __ ] Like crafter was
It's like all [ __ ] Like crafter was
originally put together as like this
originally put together as like this
multitask cool environment that's like
multitask cool environment that's like
fast and useful. It's unusably slow.
fast and useful. It's unusably slow.
Done more damage to the field than it's
Done more damage to the field than it's
like done help just because of people
like done help just because of people
training on slow ass environments.
training on slow ass environments.
Ridiculous. Yes.
Okay, on to things that
matter. It's
matter. It's
4:30. I've got maybe a good hour to
4:30. I've got maybe a good hour to
start on some training improvements.
It seems like we should be able to get
It seems like we should be able to get
some like some PF out of
some like some PF out of
compile and
AM. Let me go look at the Lenar
AM. Let me go look at the Lenar
Cudigraph thing again.
How been out of the loop for a bit? What
How been out of the loop for a bit? What
are you all doing currently? Well, we've
are you all doing currently? Well, we've
just cleaned up our binding system a
just cleaned up our binding system a
whole bunch. This is now all it takes to
whole bunch. This is now all it takes to
bind neural MMO 3 to Puffer Live. No
bind neural MMO 3 to Puffer Live. No
Syon. Little bit higher PF transparent
Syon. Little bit higher PF transparent
debugging. It's very
debugging. It's very
nice. So, this is going to cut like
nice. So, this is going to cut like
4,000 lines of boiler plate out of the
4,000 lines of boiler plate out of the
repository.
repository.
We got the 5090 up and running and now
We got the 5090 up and running and now
I'm probably going to look at a little
I'm probably going to look at a little
bit of port compile stuff and see if I
bit of port compile stuff and see if I
can get some perf
improvements. Welcome as well.
So you have to like
replay you have to like trace it
replay you have to like trace it
essentially.
Did they do LSTM or
Did they do LSTM or
not? I don't think they even did LSTMs
not? I don't think they even did LSTMs
with this, did
they? No, they
they? No, they
didn't. Okay, so that's a big
didn't. Okay, so that's a big
limitation.
Let me see there.
Benchmark compile plus cudigraph.
You know, it's
You know, it's
like this probably does actually make a
like this probably does actually make a
decent
difference. They're using a tiny tiny
difference. They're using a tiny tiny
batch size though,
batch size though,
right? But
still, well, they get
still, well, they get
6.8% 6.8x 8x speed
up compile and
photographs is slower.
So I mean I can get
um Zbuff equals
function. I probably can get this to
function. I probably can get this to
work. What did they do? They like they
work. What did they do? They like they
made their own weird way to do this.
Yeah, they did like some weird rapper
Yeah, they did like some weird rapper
thing for
this. X buffer, Y buffer.
Okay, this seems reasonable. So, we just
Okay, this seems reasonable. So, we just
have to fix uh we have to fix compile
have to fix uh we have to fix compile
mode and then we will start on this a
mode and then we will start on this a
little bit and then we will continue
little bit and then we will continue
this probably
tomorrow. That'll be the plan.
How does this
run? Oh, maybe this is a torch version
run? Oh, maybe this is a torch version
thing, right? Because this does
compile. Yeah, this has an RN on it.
compile. Yeah, this has an RN on it.
Okay. Yeah. So then the reason this
Okay. Yeah. So then the reason this
wasn't working in the other on the other
wasn't working in the other on the other
machine, it must just be a torch version
machine, it must just be a torch version
thing. So I don't even have to fix
thing. So I don't even have to fix
compile. Compile just
works. And then uh pseudographs might be
works. And then uh pseudographs might be
the tough one.
Right.
can you explain what you did to get rid
can you explain what you did to get rid
of the boiler plate so
simply? So, we have this file. It's 500
simply? So, we have this file. It's 500
line file, but this is all that's needed
line file, but this is all that's needed
for all environments.
for all environments.
And you can add as many as you want
And you can add as many as you want
without changing this. And there's some
without changing this. And there's some
redundancy. This can probably go down to
redundancy. This can probably go down to
350 lines if I clean some stuff up. Um,
350 lines if I clean some stuff up. Um,
so what this file does, this just uses
so what this file does, this just uses
the Python C
the Python C
API. And it essentially does what the
API. And it essentially does what the
Syon file does, but it just does it in C
Syon file does, but it just does it in C
with the Python API. So like instantiate
with the Python API. So like instantiate
all your M's, right? Using a slice of
all your M's, right? Using a slice of
the observations, it does that. Step all
the observations, it does that. Step all
your M's running the loop in C. It does
your M's running the loop in C. It does
that.
And then the other file that you saw was
And then the other file that you saw was
just it leads you placeholders for where
just it leads you placeholders for where
you need to do your MS specific
you need to do your MS specific
initialization like passing arguments to
initialization like passing arguments to
C and then your MS specific logging
C and then your MS specific logging
passing the logs back out as a
passing the logs back out as a
dictionary. So this file is in dev. You
dictionary. So this file is in dev. You
can see a lot of it is just this error
can see a lot of it is just this error
checking and then the actual logic of it
checking and then the actual logic of it
is stuff like this. you know,
is stuff like this. you know,
vectorized reset, vectorzed step, so on
vectorized reset, vectorzed step, so on
and so forth. And then the logging is
and so forth. And then the logging is
what I was working on
what I was working on
here. So, Python C API is kind of gross,
here. So, Python C API is kind of gross,
but I made it as simple as I could. And
but I made it as simple as I could. And
it can probably get even a little bit
it can probably get even a little bit
shorter than this.
is Syon dead for Puffer's use. I mean,
is Syon dead for Puffer's use. I mean,
if you want to use it, you still can,
if you want to use it, you still can,
but I think this is better.
So like the 40 lines that we wrote for
So like the 40 lines that we wrote for
neural MMO replaces 300 lines.
some DMs answering.
Um, I'm trying to think what's the
Um, I'm trying to think what's the
easiest way to integrate photographs
easiest way to integrate photographs
with this thing.
This one actually would be a decent test
This one actually would be a decent test
because it's 42% in forward pass.
replay you
replay you
play. The problem is the OBS is not like
play. The problem is the OBS is not like
the same buffer, right?
So, I kind of have to restructure a few
So, I kind of have to restructure a few
things.
And then you actually need to use like
And then you actually need to use like
the
the
exact Scott
OBS. And these things all have to be
OBS. And these things all have to be
CUDA tensors, don't they?
I wonder if I can do this.
Can you even pass it
arcs? No, you can't pass it arcs.
This is kind of stupid the way this is,
This is kind of stupid the way this is,
isn't it?
Let's do it for now so we can at least
Let's do it for now so we can at least
see if it's worth it.
Could not be batch size though.
All right. So, here we
All right. So, here we
do we'll just do this, right?
Yeah, I have no idea if this works.
Yeah, I have no idea if this works.
We'll have to
see. Existing
size. The hell's wrong with this thing?
Oh, I'm done. Okay.
I thought, oh, this is the single one.
Actually, what we can just do is we can
Actually, what we can just do is we can
keep this as
keep this as
is. It probably only gets used there,
is. It probably only gets used there,
right?
right?
Yeah. So, I can just make this
Yeah. So, I can just make this
observation space
shape. All right. I can just do this.
And then I can do is
it. So this is now literally
it. So this is now literally
just super
just super
easy. Uh, bath agents equals OB shape
zero. This
zero. This
is agent.
[Music]
accessing
tensor output of
cudigraph that has been overwritten by a
cudigraph that has been overwritten by a
subsequent
clone the tensor before each model
clone the tensor before each model
invocation.
sing that is overwritten by a subsequent
run. That doesn't make any sense. You're
run. That doesn't make any sense. You're
accessing something that you're going to
accessing something that you're going to
overwrite in the future.
I mean, I can like here. Let's just like
I mean, I can like here. Let's just like
really
really
see what we can do
see what we can do
here. Let's see if I can at least get it
here. Let's see if I can at least get it
to work and then we'll think about
to work and then we'll think about
making it fast.
or was it saying that you're not allowed
or was it saying that you're not allowed
to write back to the
to write back to the
same the same variable? Is that it?
Is this
it? Oh, probably steak gets overwritten,
it? Oh, probably steak gets overwritten,
right?
Cannot
Cannot
call current
call current
seed the
hell. Okay.
This is so freaking
weird. It doesn't even get to the
weird. It doesn't even get to the
It doesn't even get
here. It's in the trace.
That looks
wrong. Oh, it's not. Oh.
Cool blast status not
Cool blast status not
initialized. The heck?
running out of
memory. Shouldn't be
You need to have compile
on. Unsupported generator.
I think I'm really going to need to
I think I'm really going to need to
like fix this
like fix this
thing, you know?
this whole mess.
LV O and state Okay.
The hell's wrong with this
thing? Oh.
Damn it.
cannot call CUDA generator impul.
Why the hell is it calling
random the torch? Like the torch
random the torch? Like the torch
internals kind of suck.
Are you supposed to be able to use this
Are you supposed to be able to use this
without torch
compile? Yeah. So you are supposed to
compile? Yeah. So you are supposed to
use it with compile I
guess. So then this is the real error.
We don't have freaking dropout.
Maybe it's the LSTM
No.
Nope. Same freaking error.
This has not been changed, right? Like
This has not been changed, right? Like
you can't just enable
this. So confused.
Oh, yep.
2.5 CUDA graph or compile but not both.
So, I should be able to do it like this.
freaking thing.
You have to do
this and maybe I was not
this and maybe I was not
um given the full story here.
I guess it's
this. This is 5:30.
I'm probably going to have to go like
I'm probably going to have to go like
test this stuff in isolation if I really
test this stuff in isolation if I really
want this to get working. So, this is
want this to get working. So, this is
probably going to be a tomorrow
probably going to be a tomorrow
problem. We got really good progress on
problem. We got really good progress on
the binding stuff
the binding stuff
today. Maybe I'll start it later tonight
today. Maybe I'll start it later tonight
even. Um, yeah, I think that
even. Um, yeah, I think that
like the CUDA craft stuff is quite quite
like the CUDA craft stuff is quite quite
complicated.
I believe that this is like a possible
I believe that this is like a possible
big perf improvement
though. So, we will try
though. So, we will try
that. Yeah, it'll it'll be worth
that. Yeah, it'll it'll be worth
spending some time.
spending some time.
It's hard for me to say because
It's hard for me to say because
like you can do kind of anything with
like you can do kind of anything with
really shitty code and make it faster or
really shitty code and make it faster or
really poorly optimized code I should
really poorly optimized code I should
say. Clean R is awesome. It's just slow.
Um so yeah, it's
Um so yeah, it's
probably probably still worth doing.
Let me just at least start writing a
Let me just at least start writing a
little little tiny test for this,
little little tiny test for this,
right? Because it shouldn't be that that
right? Because it shouldn't be that that
hard.
this. So, some weird [ __ ] happening with
this. So, some weird [ __ ] happening with
compile. Ignore this.
[ __ ]
two devices.
Okay, so this is still
failing. See the grass.
warm up the
workload. This is insane, but okay.
Now it
Now it
works. Okay.
Does this mess it up?
Oh, I
Oh, I
see. So, you got to do this, right?
Okay, that's a very large
difference. Is a very large
difference. Is a very large
difference. And this should be like
difference. And this should be like
decent batch as well, right?
No, it's not very decent batch size. Why
No, it's not very decent batch size. Why
the hell is the batch that small?
Oh, you dummy.
Oh, and of
course I should redo that. That's like
course I should redo that. That's like
obnoxious.
If I can't figure out my own API, what
If I can't figure out my own API, what
the [ __ ] am I doing?
What in the
hell? Yeah, this is actually just me
hell? Yeah, this is actually just me
getting
tired there.
Still a big difference
though. That's
interesting. That's very
interesting. That's very
interesting. It's still almost 3x. What
interesting. It's still almost 3x. What
if I do like neural MMO?
out of memory.
Okay, that's a reasonable ops, right?
Oh, you know what this is? You didn't do
Oh, you know what this is? You didn't do
No, Brad.
Ah, now the advantage goes
Ah, now the advantage goes
away with the bigger
model. It
model. It
seems if you do like one
end, still goes away.
Okay, let's go back to the other one.
Okay. So the
Okay. So the
uh advantage has gone away
uh advantage has gone away
without without no
without without no
grad. I mean with uh with with no grad
grad. I mean with uh with with no grad
the advantage is mostly gone
the advantage is mostly gone
away unless you do
um yeah then you see the advantage
right now now you see the advantage
Yeah. So this is the one you cannot
do. So you get uh you only really get
do. So you get uh you only really get
this performance boost if you have
this performance boost if you have
stupid stupid dimensions.
You don't really get much even with the
You don't really get much even with the
smallest network once you have a
smallest network once you have a
reasonable batch
size. I mean I guess like sometimes you
size. I mean I guess like sometimes you
end up with stuff like this,
end up with stuff like this,
right? So that's still like something.
What about with
compile? Is there a way to get it to
compile? Is there a way to get it to
work with
work with
compile? Let's see if there was
Okay, so this just says use new torch or
Okay, so this just says use new torch or
whatever.
The hell? How is it that
slow? It's not the warm up, right?
Yeah, the compiled is just [ __ ] slow.
and it's slower than all of them.
How the hell is this possible that it's
How the hell is this possible that it's
just like
garbage? The only really does anything.
garbage? The only really does anything.
It's photographs.
Okay, we can try it on neural MMO.
I'm not doing something incredibly
I'm not doing something incredibly
stupid here,
right? Doesn't look like it.
Oh, maybe it's
this. I think it doesn't compile
this. I think it doesn't compile
anything but the forward function by
anything but the forward function by
default.
Nope. Still
[ __ ] Same as
before. Torch. Compile policy.
stupid lightning.
heck. We'll try it.
Nope. That looks way
Nope. That looks way
slower. Yep. Way slower.
Unless it's this. Hang on. Maybe I
Unless it's this. Hang on. Maybe I
screwed this
up. Possibly counts these as different
up. Possibly counts these as different
ops.
No, still
no slight difference.
[ __ ] compile,
[ __ ] compile,
man. Ridiculous.
was absolutely
ridiculous due to frequent
ridiculous due to frequent
recompiles. Well, why is it recompiling
recompiles. Well, why is it recompiling
then? Is it just
then? Is it just
trash?
trash?
Because like no combination of settings
Because like no combination of settings
does
anything. I set full
graph. No graph
breaks. Compile full graph. Yep.
Where is it?
I don't see how to fix this anywhere.
So you actually were getting compile
So you actually were getting compile
speed ups on impulse wars Four.
No graph breaks.
I'm surprised you got it to work. For
I'm surprised you got it to work. For
me, torch compile has never done
me, torch compile has never done
anything.
Try it with the smaller
model. Oh, lovely. Broke my
model. Oh, lovely. Broke my
driver. Good job, Torch.
Yeah, still slower.
Still
slower. Sameish speed actually.
Literally never gotten this thing to do
anything. Let me go update the model
anything. Let me go update the model
before I forget to and I'm
before I forget to and I'm
sad. So, as far as I can tell, compile
sad. So, as far as I can tell, compile
doesn't do
anything. Like, I've tried this on a
anything. Like, I've tried this on a
different networks and it just sucks.
different networks and it just sucks.
as far as I have seen.
All
All
right, I posted that on the Discord, so
right, I posted that on the Discord, so
you can try that. Um, I'm going to go
you can try that. Um, I'm going to go
get some exercise and get food. I'll see
get some exercise and get food. I'll see
if I can be back after. But, uh, yeah,
if I can be back after. But, uh, yeah,
compile doesn't freaking work.
compile doesn't freaking work.
Cudigraphs. Uh, it seems like it's not
Cudigraphs. Uh, it seems like it's not
really going to even do anything for us
really going to even do anything for us
is the thing because like I guess for
is the thing because like I guess for
very small batches I it could be nice.
very small batches I it could be nice.
Like it could let us do a few things.
Like it could let us do a few things.
It's really a pain in the ass to
It's really a pain in the ass to
implement though.
implement though.
And yeah, I think
And yeah, I think
1024 copies of the of an N with our
1024 copies of the of an N with our
smallest possible network uh is where it
smallest possible network uh is where it
has to be for that to make any
has to be for that to make any
sense. If I go to
2048, it's already less than a 10%
2048, it's already less than a 10%
difference. Oh, actually the compiled
difference. Oh, actually the compiled
SPS goes up then.
SPS goes up then.
That's
funny. Yay. The compile SPS goes
funny. Yay. The compile SPS goes
up. Ridiculous, man. It's ridiculous.
Now I've got to actually go check it.
Now I've got to actually go check it.
Stupid
thing. Is there like some off?
Are there any other nets I can
use? I could use snake moa.
I mean, it does actually do something on
I mean, it does actually do something on
the stupid pong
the stupid pong
network, right?
Barely. And you can't use both of them
Barely. And you can't use both of them
together for some reason.
Is this a version issue that I can't do
Is this a version issue that I can't do
this
on? I can't do this compiled.
This is a pretty new version of torch as
This is a pretty new version of torch as
well. It's not like super
old. But I got to do this later. I
old. But I got to do this later. I
really need to go get some exercise. So,
really need to go get some exercise. So,
we will call it there for the day.
we will call it there for the day.
Um, thanks for tuning in
Um, thanks for tuning in
folks. If you're interested in following
folks. If you're interested in following
my stuff, puffer.ai start the GitHub to
my stuff, puffer.ai start the GitHub to
help us out really helps. Join the
help us out really helps. Join the
Discord to get involved with dev and
Discord to get involved with dev and
follow me on X for more RL content. I'll

Kind: captions
Language: en
Okay, we're back
Okay, we're back
live. I've totally messed up this
camera. That's decent.
Okay. So, what happened
Okay. So, what happened
yesterday? Um,
yesterday? Um,
I thought it was going to take me like
I thought it was going to take me like
15 minutes to set up that machine, which
15 minutes to set up that machine, which
really it should have taken me 15
really it should have taken me 15
minutes to set up that new machine. Uh,
minutes to set up that new machine. Uh,
but turns out they shipped it to me with
but turns out they shipped it to me with
the wrong operating system, wrong BIOS
the wrong operating system, wrong BIOS
settings, and no drivers.
settings, and no drivers.
So, uh, yeah, I had to spend like six
So, uh, yeah, I had to spend like six
hours fixing all
hours fixing all
that. Of course, I didn't know that was
that. Of course, I didn't know that was
the issue.
the issue.
So, but
anyways, now we can do
this. This should
work.
Boom. What OS it came with? 22.04, 04
Boom. What OS it came with? 22.04, 04
which doesn't have driver support for
which doesn't have driver support for
590s. It
590s. It
seems need is
seems need is
24.04. Bio settings were totally screwed
24.04. Bio settings were totally screwed
up. Literally wouldn't even boot with
up. Literally wouldn't even boot with
the drivers once I put them on. And uh
the drivers once I put them on. And uh
yeah, it's it was a whole mess. Oh, also
yeah, it's it was a whole mess. Oh, also
another fun thing is I had the machine
another fun thing is I had the machine
bricked for like three hours because I
bricked for like three hours because I
installed the 570 drivers, which Nvidia
installed the 570 drivers, which Nvidia
says they're compatible, but then when
says they're compatible, but then when
you actually install them, you get uh a
you actually install them, you get uh a
like startup time crash error uh before
like startup time crash error uh before
you even get into the OS, which is
you even get into the OS, which is
actually you need the 570 open
actually you need the 570 open
drivers. So, totally
drivers. So, totally
stupid. Anyways, there's your 5090.
Um, and we can now run stuff with this,
Um, and we can now run stuff with this,
which is
cool. See for comparison.
Oh, actually that's better than I
Oh, actually that's better than I
thought. Why is it only
thought. Why is it only
480k here, though? I thought it was
480k here, though? I thought it was
faster on
uh I thought the Neptune runs I had were
faster. My screen just went completely
faster. My screen just went completely
black.
the
heck.
heck.
Um, is the stream still up? Yeah. Why
Um, is the stream still up? Yeah. Why
did my display just totally shut off?
did my display just totally shut off?
Let me go fiddle with that.
Got to love loose
cables. Did it kill my other
cables. Did it kill my other
terminal? Wait,
terminal? Wait,
what? It killed my other terminal.
Unless I was stupid and closed it
Unless I was stupid and closed it
somehow. Oh, put it. Hang
on. It put it on the other screen for
on. It put it on the other screen for
some
some
reason. There we
go. If this is the uh the speed up, then
go. If this is the uh the speed up, then
I'll be happy with it because that's
I'll be happy with it because that's
like a good 20 30%. That's like actually
like a good 20 30%. That's like actually
decent.
decent.
But I don't know if this is the Yes.
So this thing crashed
So this thing crashed
apparently. This thing got
apparently. This thing got
um got soda but then
crashed. And this thing doesn't do much.
Let me I just want to see the steps per
Let me I just want to see the steps per
second and such that we were getting out
second and such that we were getting out
of
of
this. This one should be fine for
this. This one should be fine for
uh this one or this one.
Okay. So, we have a little bit of
Okay. So, we have a little bit of
uh we've got some disparities here.
uh we've got some disparities here.
looks
like I think cuz one of the machines
like I think cuz one of the machines
like faster than the other or
something. So these ones get up to 570
something. So these ones get up to 570
590 or
590 or
whatever. But then this one here
whatever. But then this one here
is only 500k.
Wait. Mu on baseline
Wait. Mu on baseline
3 512. Oh, it's because of the the model
3 512. Oh, it's because of the the model
size. Okay. So, this is 512 model dim
size. Okay. So, this is 512 model dim
runs
runs
500K. So, I probably am not doing that
500K. So, I probably am not doing that
here. Let's see.
Yeah, see this is too small.
So, we'll seeuh how the 5090 does with
So, we'll seeuh how the 5090 does with
the corrected model
size and we'll get an accurate
size and we'll get an accurate
benchmark. This one's at 480.
benchmark. This one's at 480.
with uh my stuff on my desktop running.
with uh my stuff on my desktop running.
It seems like it's supposed to be at
It seems like it's supposed to be at
about Oh, it goes up a little bit, but
about Oh, it goes up a little bit, but
that's about
that's about
right.
550. It's only like a 10% speed
550. It's only like a 10% speed
improvement.
That's really not great.
Interestingly, it looks like there's
Interestingly, it looks like there's
like somewhat lower copy
like somewhat lower copy
overhead. Memory bandwidth maybe has
overhead. Memory bandwidth maybe has
improved a bit.
literally 10%.
Okay. I think the uh they
Okay. I think the uh they
changed in
changed in
PyTorch they changed
um Hang on.
Where the hell did they move the Dtypes
Where the hell did they move the Dtypes
to?
Oh no, they're right
there. So, what the heck was wrong?
there. So, what the heck was wrong?
I just break
something. Welcome YouTube folks.
something. Welcome YouTube folks.
Plan for today is to do a little bit of
Plan for today is to do a little bit of
work uh benchmarking this new
work uh benchmarking this new
and after that we'll queue up some
and after that we'll queue up some
experiments and then we'll probably do
experiments and then we'll probably do
some
some
infra do some infradev on puffer.
Okay, so this is somehow screwed up.
Oh, maybe this needs to go. Yeah, this
Oh, maybe this needs to go. Yeah, this
needs to go here.
Uh, this should definitely get
Uh, this should definitely get
defined unless I have this whole thing
defined unless I have this whole thing
bugged somehow.
Ah, I uh I see.
Ah, I uh I see.
Yeah, that's a little
Yeah, that's a little
awkward.
awkward.
Uh, I guess we just indent this whole
thing. Indent the whole thing, too,
actually. Well, that's that's going to
actually. Well, that's that's going to
screw up the profiling, though.
So, we have to repeat this
check. That's the only way I can do
it. I plan on going through this whole
it. I plan on going through this whole
file and cleaning stuff up a whole bunch
file and cleaning stuff up a whole bunch
before we get to uh release. Anyways,
So, this doesn't seem any faster at all
So, this doesn't seem any faster at all
than before,
right? So, am I doing something
wrong or is it just genuinely not
wrong or is it just genuinely not
faster?
It's also possible I'm doing like a dot
It's also possible I'm doing like a dot
float or something in here.
Ah, right
here. So if I do
this. Okay, now we actually get some
this. Okay, now we actually get some
speed.
700k, but I think B float is slower,
700k, but I think B float is slower,
isn't
it? Yeah. So, now we're back to the
it? Yeah. So, now we're back to the
original speed.
I don't think it should be
Oh, wait. This is right
Oh, wait. This is right
here. This is probably messing it up
here. This is probably messing it up
here, right? So, let let me make sure
here, right? So, let let me make sure
then that I'm doing the uh the whole
then that I'm doing the uh the whole
thing in float 16 first to really get a
thing in float 16 first to really get a
benchmark.
There you
Okay. So, this is
700K. And uh is this whole
700K. And uh is this whole
thing like is the type correct on all
this? Doesn't look like it.
So maybe it's just that you got to be
So maybe it's just that you got to be
careful with your cast.
So this embedding layer
returns this embedding layer is
returns this embedding layer is
returning
returning
um not float 16.
with
torchautocast linear layers
torchautocast linear layers
autocast. So do I have this autocast? I
autocast. So do I have this autocast? I
should, right?
Yeah, I have the autocast context here.
Okay, maybe
Okay, maybe
um maybe this is supposed to do
um maybe this is supposed to do
something. Let's
see. Okay, so this does work, right?
see. Okay, so this does work, right?
So it it autocast the output of this
So it it autocast the output of this
linear
layer and the LSTM
layer and the LSTM
outputs load 16. So this is
outputs load 16. So this is
correct. The embeddings output float 32
correct. The embeddings output float 32
or whatever.
So this doesn't
matter. This is the only thing this
matter. This is the only thing this
buffer that does matter is this float
buffer that does matter is this float
16.
Okay, so this gets us 700K. Okay.
That's
obnoxious. I'm sure this one still
obnoxious. I'm sure this one still
breaks, right?
But I can't compile with the current
But I can't compile with the current
version. That
sucks. What if I do it this way?
Okay. So, compile doesn't work since I
Okay. So, compile doesn't work since I
did the state change stuff. So, that'll
did the state change stuff. So, that'll
be part of the uh the refactor. We'll be
be part of the uh the refactor. We'll be
then making that thing
then making that thing
work. Um,
work. Um,
uh, for now though, we're able to get
uh, for now though, we're able to get
650k without screwing
with. We're able to get like 650k
with. We're able to get like 650k
without screwing with
without screwing with
precision and 700k with screwing with
precision and 700k with screwing with
precision.
The thing is, Captain, I had compile
The thing is, Captain, I had compile
working and then I had somebody ask me
working and then I had somebody ask me
for a feature to help clean up the uh
for a feature to help clean up the uh
the code and it completely [ __ ]
the code and it completely [ __ ]
compile. I didn't
realize. This is still pretty
realize. This is still pretty
disappointing though anyway you cut it.
disappointing though anyway you cut it.
only getting like 10% speed improvement.
And like actually the thing that's weird
And like actually the thing that's weird
about this as well is copy overhead is
about this as well is copy overhead is
lower than
lower than
before. So it looks like the speed
before. So it looks like the speed
improvement is
uh maybe it's about the same. So maybe
uh maybe it's about the same. So maybe
it is just a flat
10%. More speed increase model size and
10%. More speed increase model size and
depth. I don't know.
Maybe. But like I don't I shouldn't have
Maybe. But like I don't I shouldn't have
a ton of overhead on it
anyways. It might actually be the thing
anyways. It might actually be the thing
that I really have to get compile
that I really have to get compile
working and maybe um cudigraphs and
working and maybe um cudigraphs and
stuff to really get the most out of
it. Maybe that's what we have to
it. Maybe that's what we have to
do. Okay.
So, a lot of things on my mind now with
So, a lot of things on my mind now with
this
um things to do,
right? I think that
Okay, I want to queue up a couple
Okay, I want to queue up a couple
experiments on neural
experiments on neural
MMO. Just look at my current
MMO. Just look at my current
experiments. Queue up a couple
more. We can do it on this box. It'll be
more. We can do it on this box. It'll be
10% faster.
10% faster.
Whoopdedoo. Actually, I think this one
Whoopdedoo. Actually, I think this one
will be a good one to play with.
will be a good one to play with.
Um, maybe I'll leave
Um, maybe I'll leave
What I'll do is I'll leave
What I'll do is I'll leave
automatic mix precision on this
one so we can test if that's actually
one so we can test if that's actually
stable.
So that's an easy run.
Um, also Abuntu 24 kind of sucks because
Um, also Abuntu 24 kind of sucks because
you have to do this everywhere. I I have
you have to do this everywhere. I I have
a potential workaround for it, but I'm
a potential workaround for it, but I'm
going to have to go do it at the
going to have to go do it at the
container level.
I don't know whose dumbass idea it was
I don't know whose dumbass idea it was
to decide that you shouldn't be able to
to decide that you shouldn't be able to
install Python packages outside of a
install Python packages outside of a
virtual environment. Like they should
virtual environment. Like they should
probably stop writing
software. It's like the dumbest I like I
software. It's like the dumbest I like I
honestly I honestly don't know what is
honestly I honestly don't know what is
wrong with Python that they adopt that
wrong with Python that they adopt that
thing. Like how stupid do you have to
thing. Like how stupid do you have to
be? Oh yeah, our packages should not be
be? Oh yeah, our packages should not be
installed outside of a virtual
installed outside of a virtual
environment. Like come on, be a real
environment. Like come on, be a real
programming language.
Okay. Forgot to
remove this
remove this
flag. This one doesn't work
flag. This one doesn't work
yet. Then we should be good.
Ah, wait. There's one other thing I
Ah, wait. There's one other thing I
forgot.
Okay, good. Now this should give us
Okay, good. Now this should give us
pretty clean training
curves and we'll see whether float 16 is
curves and we'll see whether float 16 is
stable.
Volt 700k
train. We will leave this
alone. That is one experiment I wanted
alone. That is one experiment I wanted
to run.
to run.
Second
experiment. Um, are my boxes down or
experiment. Um, are my boxes down or
some [ __ ]
Is that what's going
on? Everything's down.
Um, that's
Um, that's
bizarre. Let me go see if there's
like Let me go check on what the hell
like Let me go check on what the hell
just
just
happened. I see like one of them just
happened. I see like one of them just
came back up. A couple of them are
came back up. A couple of them are
coming back up. Let me go check what the
coming back up. Let me go check what the
hell's going on, though. That's bizarre.
Well, that's fun to find out. They're
Well, that's fun to find out. They're
just [ __ ] wired wrong. Um, and
just [ __ ] wired wrong. Um, and
actually, I just saw one of the boxes go
actually, I just saw one of the boxes go
back
back
off. Seven is back online.
Yeah.
Okay. I'm going to go boot all the
Okay. I'm going to go boot all the
boxes, I guess. I'll be right back.
Jeez. You
Jeez. You
know, one of these days once I finish
know, one of these days once I finish
fixing all the reinforcement learning
fixing all the reinforcement learning
software, I'm going to have to go put
software, I'm going to have to go put
everyone in infrastructure out of a job
everyone in infrastructure out of a job
because nobody can build anything that
because nobody can build anything that
[ __ ]
works. Oh my god.
works. Oh my god.
is
crazy. Not even power problems, just the
crazy. Not even power problems, just the
[ __ ] internet cables somehow being
[ __ ] internet cables somehow being
screwed. And like some of the boxes come
screwed. And like some of the boxes come
back up and some of them don't. How that
back up and some of them don't. How that
makes any sense, don't ask me.
I can't afford to lose a second day in a
I can't afford to lose a second day in a
row dealing with [ __ ] info, though.
So, none of my boxes are back. I'm just
So, none of my boxes are back. I'm just
going to leave that experiment uh that I
going to leave that experiment uh that I
just set up running for
now.
Actually, if I only get one experiment
Actually, if I only get one experiment
right now, that's not the experiment I
right now, that's not the experiment I
want to
want to
run. See how far this
is.
Actually, that tells me everything that
Actually, that tells me everything that
I needed to know right there. That
I needed to know right there. That
shit's not
shit's not
stable. Unless it's Is this the good
stable. Unless it's Is this the good
one? Cap.
I Yeah. Okay. That tells me everything I
I Yeah. Okay. That tells me everything I
need to know actually about that one
need to know actually about that one
already. Um, float 16 doesn't work out
already. Um, float 16 doesn't work out
of the box. It's not really expected
of the box. It's not really expected
to, so I guess no massive surprise
to, so I guess no massive surprise
there.
there.
Let's just check our losses real
Let's just check our losses real
quick. It just drives me
quick. It just drives me
nuts. All the infrastructure I got to
nuts. All the infrastructure I got to
deal
with. You can't even see it.
with. You can't even see it.
Maybe it's not totally messed
up. I mean, now that looks pretty messed
up. I mean, now that looks pretty messed
up. At least it's not the same
up. At least it's not the same
curve, right?
curve, right?
Definitely not the same
curve. Let's uh let me try a couple
curve. Let's uh let me try a couple
things here.
things here.
So
I want to try this. So, you set the seed
um like this. Now, I
um like this. Now, I
don't I don't know if this does
anything
really
really
because you're still all on the same
because you're still all on the same
process. Hang on. Let's not be totally
process. Hang on. Let's not be totally
stupid here. If you're all on the same
stupid here. If you're all on the same
process, if there's no randomness
process, if there's no randomness
involved, they're all going to be the
involved, they're all going to be the
same anyways.
same anyways.
If they have a seating function, then
If they have a seating function, then
it'll get
used. Yeah. I don't know why I was
used. Yeah. I don't know why I was
thinking this was a good idea. This
thinking this was a good idea. This
doesn't make any bloody sense.
The only thing that this
does, well, you do want some sort of
does, well, you do want some sort of
randomness actually because when you
randomness actually because when you
multiprocess, right, you don't want them
multiprocess, right, you don't want them
all to be the same seed across
processes. Let me see how I can do that.
Is there a default? Let me
see. Oh, no. Stack overflows offline.
I actually don't know how the default
I actually don't know how the default
seating works in uh in C. You know,
seating works in uh in C. You know,
there are a few different ways it could
there are a few different ways it could
be implemented.
Okay. So, if you don't seat
Okay. So, if you don't seat
it, then it acts as if it's
it, then it acts as if it's
seated with
one. Okay. You do want to seat
it. I'm trying to think what uh what I
it. I'm trying to think what uh what I
would want to seat it with.
I think I know the answer and I'm not
I think I know the answer and I'm not
going to like
it. See, I don't really like this.
Okay. So, we're going to leave that
Okay. So, we're going to leave that
experiment up for now until I figure out
experiment up for now until I figure out
this heating thing.
this heating thing.
Um, it probably does make sense to
Um, it probably does make sense to
I think. Does it make
sense? Yeah, because you want this to
sense? Yeah, because you want this to
work across different processes as
well. What I was doing originally was
probably probably running on the same
probably probably running on the same
map
everywhere.
everywhere.
Yeah. So if we want these things to be
consistent, we can probably do
consistent, we can probably do
um ve level
seating. Let me figure out I need to I'm
seating. Let me figure out I need to I'm
I got too many ideas in my head right
I got too many ideas in my head right
now of things that need to be done on
now of things that need to be done on
the infra.
So back
So back
level
feeding. Next we will need to
do movements.
I also wanted to do
I also wanted to do
uh
checking. Is there anything
else? I think that's it.
else? I think that's it.
And then there's baselines to there are
And then there's baselines to there are
baselines to run. Okay.
baselines to run. Okay.
So I've kind of got two separate
So I've kind of got two separate
important projects to fiddle with. I
important projects to fiddle with. I
think I want to really make sure that
think I want to really make sure that
the end finding stuff is good because
the end finding stuff is good because
we're actively doing that. So I'll start
we're actively doing that. So I'll start
with
with
this. Uh we'll fix
this. Uh we'll fix
seating arg type checking. I think there
seating arg type checking. I think there
should be a reasonable way to do that.
should be a reasonable way to do that.
We will see.
We will see.
I don't know if we can improve the
I don't know if we can improve the
logging type stuff at all. We'll have to
logging type stuff at all. We'll have to
look at that. But it's it's not that
look at that. But it's it's not that
this is not important. Uh it it's not
this is not important. Uh it it's not
important, but it's urgent, I think,
important, but it's urgent, I think,
because uh we're actively porting all
because uh we're actively porting all
the M's and we'd prefer to only have to
the M's and we'd prefer to only have to
do it
do it
once. Okay, scattered start to my day.
once. Okay, scattered start to my day.
Um but let's just really start one thing
Um but let's just really start one thing
at a time here.
at a time here.
throws me off when like stuff goes wrong
throws me off when like stuff goes wrong
like that with the uh the machines
like that with the uh the machines
because, you know, I had a plan with
because, you know, I had a plan with
what I wanted to do today and it kind of
what I wanted to do today and it kind of
threw everything
off. Oh, and also build caching. Where'd
off. Oh, and also build caching. Where'd
that file go?
I should even do this one first because
I should even do this one first because
it's annoying as hell.
that's going to try to rebuild freaking
that's going to try to rebuild freaking
everything
though. These dependencies change but
though. These dependencies change but
aren't tracked.
Okay. So this is why
That's going to trigger a lot of
That's going to trigger a lot of
rebuild. I think we will
rebuild. I think we will
see. Or it's not going to work at
all. So if I just do this
copying. So it doesn't detect
anything. Well, that's not it because
Yeah, that doesn't trigger
Yeah, that doesn't trigger
it. You would think it would.
Okay, there's no quick easy fix to that.
Okay, there's no quick easy fix to that.
It'll work with a clean build, but
It'll work with a clean build, but
there's no quick easy fix to
that. Force does it.
Syon takes a
while. No, the quick hack was
while. No, the quick hack was
actually decent on this.
Oh
jeez. That doesn't even
work. If the file is there, it copies
work. If the file is there, it copies
it. It doesn't check to see if it does
it. It doesn't check to see if it does
if there's anything in
if there's anything in
it. That's hilarious. Okay. Don't use
it. That's hilarious. Okay. Don't use
gro is
dumb, I guess.
Do you want to pass the seed on reset or
Do you want to pass the seed on reset or
on
in or on
both? Maybe on
both? Maybe on
both cuz you have no idea where they're
both cuz you have no idea where they're
going to use RNG, right?
going to use RNG, right?
So I think you want it passed on both.
Okay, now all we have to do is unpack
Okay, now all we have to do is unpack
the
AR. Now we have a way of passing seeds.
AR. Now we have a way of passing seeds.
I'm working on
I'm working on
it. That's what I'm going to do automat.
it. That's what I'm going to do automat.
I'm going to just do it automatically,
Captain. Well,
semi-automatically. It's slightly
semi-automatically. It's slightly
obnoxious because you need
obnoxious because you need
um you still need to know like the Nvid
um you still need to know like the Nvid
or
or
whatever for
multipprocessing. But I did actually
multipprocessing. But I did actually
notice like a big difference in the
notice like a big difference in the
training curve with the neural MMO. So
training curve with the neural MMO. So
now I'm working on it.
Isn't this going to be kind of hard
Isn't this going to be kind of hard
because we have to take a keyword out,
because we have to take a keyword out,
don't
we? Or maybe not. Maybe we can just call
we? Or maybe not. Maybe we can just call
it twice. You
think HM process?
Yeah, it's the only Yeah, the thing is
Yeah, it's the only Yeah, the thing is
that the the uh multipprocessing back
that the the uh multipprocessing back
has to give you like one, two, three,
has to give you like one, two, three,
four or whatever and then you can assign
four or whatever and then you can assign
the seats.
I think that'll work.
The hell did I just
do? Yeah. So, this is fine.
So
So
assuming things each process
There we go. So, this should seed now.
There we go. So, this should seed now.
And then all we have to do is
And then all we have to do is
pass this arg
in. And then it'll be like the same
in. And then it'll be like the same
thing on on a knit, I believe.
Yeah. So, it'll be the same thing on a
Yeah. So, it'll be the same thing on a
net
This is kind of errorprone in the sense
This is kind of errorprone in the sense
that if you forget
that if you forget
to you can forget to seed your end.
Not that bad
Not that bad
though. Not that bad.
So this is chill.
I can probably make it like a required
I can probably make it like a required
keyword. Oh yeah, it is a required
keyword. Oh yeah, it is a required
keyword as
keyword as
is. I just need a good error message for
is. I just need a good error message for
it and I'm good.
Yeah, because this can technically call
Yeah, because this can technically call
custom
logic and you now have to do the same
logic and you now have to do the same
thing in envet, don't
thing in envet, don't
you? So, there's a little bit of
you? So, there's a little bit of
repeated code. Quite a bit of repeated
repeated code. Quite a bit of repeated
code even.
And because this has to go
And because this has to go
here. Yeah. Now this has to go here.
And now this is literally just uh this
And now this is literally just uh this
is just seed. You just pass them
is just seed. You just pass them
directly for this
directly for this
one. Okay, this is not terrible.
This is
null. Okay, so that
null. Okay, so that
runs. Now I have to get it into
runs. Now I have to get it into
vectorization.
This does actually pass the
seed. I think it needs to pass it here
seed. I think it needs to pass it here
as well.
Okay.
Not sure I really like the way this is.
See, I know how to do this in the C.
See, I know how to do this in the C.
It's once again the shitty annoying
It's once again the shitty annoying
Python.
I guess with the VEC interface, you
I guess with the VEC interface, you
don't expect to pass a big ass list of
don't expect to pass a big ass list of
seeds, right?
Yeah, because that would require you
Yeah, because that would require you
messing with the seed in the algorithm
layer. Is that something that you want
layer. Is that something that you want
to be messing with?
So gross to have to do
So gross to have to do
that. I mean, I can totally punt on that
that. I mean, I can totally punt on that
for now
for now
because like the thing is that's going
because like the thing is that's going
to get
easier. Like eventually we're probably
easier. Like eventually we're probably
going to just have a C
going to just have a C
vecle or
vecle or
whatever. Well, no. Shoot because we
whatever. Well, no. Shoot because we
need the same code to work for the non C
need the same code to work for the non C
environments. That's
If I can just get each of
these, these serial
these, these serial
M its own ascending
seed. I think that's going to be
seed. I think that's going to be
it. If I can just get each of these its
it. If I can just get each of these its
own ascending seed.
So because this has no MS,
right? So you target this worker
right? So you target this worker
process.
Let's numb M's here
though. Workers. Oh, M's per
though. Workers. Oh, M's per
worker. So, it does get M's per
worker. So, it does get M's per
worker. Then
I Okay.
I Okay.
I can probably just make this
I can probably just make this
work because if I do it this way, right?
work because if I do it this way, right?
So, I'm going to have
seed. This is num
m. This only needs one
m. This only needs one
seed and it's going to be equal to
Yeah, because serial containing all the
Yeah, because serial containing all the
M's. So C times num M should give you
M's. So C times num M should give you
what you
what you
want. And then it also needs does it
want. And then it also needs does it
need to know it on reset? It does,
need to know it on reset? It does,
right?
Oh, gross though
Oh, gross though
because reset comes through
pipe. Yeah, cuz this back end's auto
pipe. Yeah, cuz this back end's auto
reset. So, this isn't going to do
reset. So, this isn't going to do
anything for you.
So, I think it's just going to
So, I think it's just going to
be you take this
be you take this
out because there's no sense in
out because there's no sense in
providing a seed on reset, is there?
Hang on. You also don't want to seat it
Hang on. You also don't want to seat it
on
on
reset. That's like
bad. You'd like to keep whatever RNG
bad. You'd like to keep whatever RNG
state is currently
state is currently
there.
there.
Okay. So, we take this param out.
Oh, wait. No, it does make sense. I'm
Oh, wait. No, it does make sense. I'm
wrong. Hold
on. Because you only ever call it once,
on. Because you only ever call it once,
right?
So this should be
So this should be
seed and then seed is equal to seed.
Because this one runs one serial end,
right? Yes.
Yeah. Now you can do C equals
none. It's none.
It's
fine. Okay. So now you actually have
fine. Okay. So now you actually have
this thing seated
this thing seated
reasonably. You have to do the same
reasonably. You have to do the same
thing.
thing.
The same thing here.
Okay, now this this is actually
good. Seed not
seeds. And then how's this look in
seeds. And then how's this look in
multiprock? So from multiprock
This thing also can take a seed,
right? I think actually both of
right? I think actually both of
these these both should be seated by
these these both should be seated by
default. It's better to have them seated
default. It's better to have them seated
by
by
default. Yeah.
default. Yeah.
So, we'll seat it to 42 by default.
Okay. And now this
Okay. And now this
does C plus I
Okay. So, now you're going to get like
Okay. So, now you're going to get like
42, 43, yada
42, 43, yada
yada. I actually don't like
yada. I actually don't like
um 42 as a default seed because that
um 42 as a default seed because that
gets multiplied kind of
gets multiplied kind of
weirdly. There's nothing wrong with seed
weirdly. There's nothing wrong with seed
zero,
zero,
right? I don't think there should be.
Yeah.
So, let's like do this on breakout or
So, let's like do this on breakout or
something first.
to unpack
seed. Okay, it gets to here now.
still failed to unpack seed.
So this one
So this one
is back in it failed to unpack seed and
is back in it failed to unpack seed and
this one's back
reset. So I don't know which one it is.
reset. So I don't know which one it is.
It looks like it should be a net.
So it's taking it to impact so you don't
um well I am passing
it. This is embinet here.
Wrong file completely.
Maybe this is being passed as
none. So this is the driver
end. You plan to get rid of Syon? What's
end. You plan to get rid of Syon? What's
the replacement for? Yeah. So let me
the replacement for? Yeah. So let me
show you. This is new. It's in dev.
show you. This is new. It's in dev.
Um, I'm gonna like put this out to users
Um, I'm gonna like put this out to users
first, but I think that people will
first, but I think that people will
dramatically prefer this because it
dramatically prefer this because it
makes everything a lot easier. So, right
makes everything a lot easier. So, right
now, every time you implement a new
now, every time you implement a new
environment for Puffer Lib, you have to
environment for Puffer Lib, you have to
do
do
this. So, this is 115 lines worth of
this. So, this is 115 lines worth of
Python that you have to get right. Also,
Python that you have to get right. Also,
Syon breaks all debugging from Python to
Syon breaks all debugging from Python to
C. It's very difficult to debug, takes
C. It's very difficult to debug, takes
quite a while to compile, and uh the
quite a while to compile, and uh the
compiler error messages kind of suck as
compiler error messages kind of suck as
well. So, what the goal is to replace
well. So, what the goal is to replace
this with this file right here. So, this
this with this file right here. So, this
is one file for all the MS. Um, and then
is one file for all the MS. Um, and then
what you'll be able to do with this is
what you'll be able to do with this is
this essentially does what Syon
this essentially does what Syon
currently does, but it just does it for
currently does, but it just does it for
you.
So this is what it looks like now. The
So this is what it looks like now. The
Python looks almost identical to before
Python looks almost identical to before
except you're using, you know, this
except you're using, you know, this
binding vectorzed in it. You just give
binding vectorzed in it. You just give
it all the tensors like you did before.
it all the tensors like you did before.
You give it all your keyword args and it
You give it all your keyword args and it
will just make vectorized M's for
will just make vectorized M's for
you. So this is the original Syon. It
you. So this is the original Syon. It
looks almost the same except it has the
looks almost the same except it has the
Syon
Syon
binding. But now you don't have to write
binding. But now you don't have to write
a Syon binding. All you do have to write
is this tiny little binding file where
is this tiny little binding file where
you just specify all the args and then
you just specify all the args and then
you unpack
you unpack
them. So you know this 30
them. So you know this 30
lines instead of the original
lines instead of the original
120. So much much shorter
120. So much much shorter
bindings. Um this also lets me improve
bindings. Um this also lets me improve
logging a little bit. Logging gets
logging a little bit. Logging gets
easier as well. We handle logging quite
easier as well. We handle logging quite
nicely now too. So hopefully this should
nicely now too. So hopefully this should
generally be better for people and you
generally be better for people and you
can debug through it. So if anything
can debug through it. So if anything
goes wrong in your C now you can just
goes wrong in your C now you can just
run Python through GDB and you will get
run Python through GDB and you will get
a break point right wherever something
a break point right wherever something
breaks in your C.
welcome YouTube
folks. What I'm doing currently with
folks. What I'm doing currently with
this is I'm trying is this piine? No,
this is I'm trying is this piine? No,
this is this is the cool thing. No
this is this is the cool thing. No
external dependencies. It's just the
external dependencies. It's just the
Python C API. That's it.
Python C API. That's it.
And um what I'm trying to do right now
And um what I'm trying to do right now
is also make it support nice seating so
is also make it support nice seating so
that you never have stuff screwed up
that you never have stuff screwed up
because of bad seating and make it like
because of bad seating and make it like
really really obvious how to do that and
really really obvious how to do that and
really hard to screw up. That's what I'm
really hard to screw up. That's what I'm
doing at the moment. And then I've got
doing at the moment. And then I've got
the whole agenda. Um I want to make it
the whole agenda. Um I want to make it
harder to screw up argument passing to
harder to screw up argument passing to
these M's. Give you really nice error
these M's. Give you really nice error
messages for if you screw up your
messages for if you screw up your
arguments. And then maybe some
arguments. And then maybe some
improvements to logging. And that's all
improvements to logging. And that's all
that I need to do with end of finding to
that I need to do with end of finding to
make this like really solid. And after
make this like really solid. And after
that, we'll move on to training side
that, we'll move on to training side
improvements. Well, probably I'm going
improvements. Well, probably I'm going
to get through this and then uh go take
to get through this and then uh go take
a break, get some exercise, and do the
a break, get some exercise, and do the
rest in the evening. We'll
see. So, this gives you seed
see. So, this gives you seed
zero. Uh but somehow it does not
zero. Uh but somehow it does not
like does not like this unpacking
like does not like this unpacking
message.
I wonder if um if I actually shot myself
I wonder if um if I actually shot myself
in the
foot. Yeah, I probably shot myself in
foot. Yeah, I probably shot myself in
the foot here. Huh? Because this
the foot here. Huh? Because this
probably gives you a good error message
probably gives you a good error message
that I
overwrote. Okay. See, so right
here function takes at most one
here function takes at most one
argument 21 given the
help. My function
takes when will the new binding version
takes when will the new binding version
be shipped? Um, we currently have
be shipped? Um, we currently have
experimental stuff on Pong Breakout and
experimental stuff on Pong Breakout and
Neural MMO 3 in the dev branch. And then
Neural MMO 3 in the dev branch. And then
as with everything else in Puffer Lib,
as with everything else in Puffer Lib,
it only goes to main when we ship a new
it only goes to main when we ship a new
major
major
version. We have a pretty long dev cycle
version. We have a pretty long dev cycle
for uh for major versions. I usually
for uh for major versions. I usually
only ship, you know, two or three majors
only ship, you know, two or three majors
a year because the next one will
a year because the next one will
probably be like 2.5 or
probably be like 2.5 or
something, you know.
What do you
What do you
want? Oh, I see the
problem. How do you
Bar
O optional pi object.
So this is the behavior that I expected
So this is the behavior that I expected
but this is not what I'm
seeing
right because it fails right
failed to unpack
seed. So I forgot to
Oh, is it because of args? Yeah, it's
Oh, is it because of args? Yeah, it's
because of this args, isn't it?
So this just needs to be empty
arcs. 15 given
Okay, so this is done
Okay, so this is done
here
and still doesn't like this.
optional
seed. Oh, maybe it's that I need to do
seed. Oh, maybe it's that I need to do
this.
No, it still is not working.
Is this no longer where it's crashing?
Is this no longer where it's crashing?
Come
on. No, it's still crashing here.
this. I think Grock is just [ __ ]
this. I think Grock is just [ __ ]
wrong with how this
works. The problem is the docs for this
works. The problem is the docs for this
in Python also kind of suck. was the
in Python also kind of suck. was the
only reason I was using it.
Empty names denote positional only
Empty names denote positional only
parameters.
Do I have to like extract a single
Do I have to like extract a single
keyword?
I mean, I could pretty easily just make
I mean, I could pretty easily just make
this
thing. Hang on. I I know what I can do
thing. Hang on. I I know what I can do
for now at least if I don't want to
for now at least if I don't want to
fight this cuz this is also going to
fight this cuz this is also going to
make it more annoying for user. I
think though it does give them access to
think though it does give them access to
the seed if they need
the seed if they need
it. I don't know if they need access to
it. I don't know if they need access to
the seed
though. They can always set it
themselves. And I think we can do it
themselves. And I think we can do it
this way for now.
See how we do
See how we do
this? So, I had to do this before.
I think we do
I think we do
this. So this is going to be
this. So this is going to be
seed get ar
five yards can go back
down
here. Yeah. So, we can just do
here. Yeah. So, we can just do
this and then all we have to do is
this and then all we have to do is
modify this to
modify this to
take is it six back six arcs?
Oh yeah, six. Uh, so this goes to
seven and this goes to
six. You can actually just put this up
top. Same thing here.
This is r
zero. Oh, in that case you can kind of
zero. Oh, in that case you can kind of
just unpack
um yeah, you don't need all these
um yeah, you don't need all these
arcs. So we can simplify it a little
arcs. So we can simplify it a little
bit.
What is that? One.
Uh yes, it is at
Uh yes, it is at
one. Okay, it takes two arguments then
one. Okay, it takes two arguments then
because uh you're
unpacking. Yes, it takes two arguments.
unpacking. Yes, it takes two arguments.
So this is now arc
one. This
is this
Got
this. You are making the seed required
this. You are making the seed required
by doing
by doing
this. I think that's okay for
this. I think that's okay for
now. Think that's okay for now.
until I figure out the API a little
until I figure out the API a little
better.
double get item
double get item
five. That's
five. That's
fine. Get rid of this.
just increase this to
six. Seems like this
runs. Okay, back in. It
runs. Okay, back in. It
requires six arguments.
Are we
stuck? Looks like we're spinning our
stuck? Looks like we're spinning our
wheels and nothing's
happening. That's not good. I don't
happening. That's not good. I don't
think I introduced anything that could
think I introduced anything that could
cause a loop.
There was an error
There was an error
there. Unrecognized
there. Unrecognized
arguments binding back reset.
Yeah, this just needs meth bars, not
Yeah, this just needs meth bars, not
meth
meth
keywords. And
step, what does step need keywords
for? Yeah, it's
not. So, this just needs R. Doesn't need
not. So, this just needs R. Doesn't need
keywords.
doesn't need. This does need
keywords.
Undeclared. This is leftover.
Still we got
unrecognized. Oh, because this is
unrecognized. Oh, because this is
partle.
We get unrecognized
We get unrecognized
arguments. That seems like this just
arguments. That seems like this just
didn't get
recompiled. Oh, no. We're still getting
recompiled. Oh, no. We're still getting
just
unrecognized. Must be here. Oh, same
unrecognized. Must be here. Oh, same
problem. Nope.
problem. Nope.
Same exact
problem. Let's
see. See, it must be an integer.
Connect
it. It's not failing on this
one. Must be this one.
Oh, this is probably passing none,
right? Yeah, I know what to do to fix
this. I got to do a couple quick things.
this. I got to do a couple quick things.
I'll be back in a
I'll be back in a
few. And uh then soon as I'm back, we
few. And uh then soon as I'm back, we
will finish this. Plan will be to get
will finish this. Plan will be to get
seating working, get a couple other
seating working, get a couple other
things working.
things working.
Um probably this and then the checks was
Um probably this and then the checks was
what we'll get done this morning. Be
what we'll get done this morning. Be
back soon.
All
right. Almost done with this seed
stuff. This is probably done, right?
Ah, the list. Okay, that's why
seed times no
mounts back seed
seed. Okay, so this is beck seed zero,
seed. Okay, so this is beck seed zero,
vex seed one. This is correct. So it's
vex seed one. This is correct. So it's
good going into
good going into
this and
this and
then reset
then reset
takes
seed. Okay, so this is correctly an
integer. It's correctly passed
integer. It's correctly passed
here.
See? Uh, okay. So, this doesn't even get
See? Uh, okay. So, this doesn't even get
used
because Yeah. So, this doesn't even seem
because Yeah. So, this doesn't even seem
to get used because I guess we're not
to get used because I guess we're not
going through serial in this case, which
going through serial in this case, which
I guess we like we normally shouldn't be
I guess we like we normally shouldn't be
going through serial in most of our M's
anyways. So, it's getting screwed up
anyways. So, it's getting screwed up
here. Oh, I see. I see it. the reset
seed. Yeah. So, this doesn't need to be
seed. Yeah. So, this doesn't need to be
uh this doesn't need to be make
seed. This just needs to be seed plus I,
seed. This just needs to be seed plus I,
right?
or hang on. Yeah. C plus
or hang on. Yeah. C plus
I. And then internally it's up
I. And then internally it's up
to the worker to use this
seed. Multiply by num adaps.
Okay, so we get past
Okay, so we get past
that argument must be an integer
handle on
Um, well, yeah, that's not going to
Um, well, yeah, that's not going to
freaking work,
freaking work,
right? Is this how I had it
right? Is this how I had it
before? Think you just I long check the
before? Think you just I long check the
R.
Unpack end and then
stop.
stop.
Wait, how the hell does this make any
Wait, how the hell does this make any
sense?
end. Don't we have an unpack function
end. Don't we have an unpack function
for
this? Why am I not using it
here? I should be using it, right?
Okay.
Runs. Does it still fully train?
Yep. That's perfect.
Yep. That's perfect.
Now all we got to do, so this gives you
Now all we got to do, so this gives you
seed one and seed two it looks like.
up here. What do we
get? Zero and then 01. So, this is just
get? Zero and then 01. So, this is just
the um the default end. That that one
the um the default end. That that one
doesn't matter at
doesn't matter at
all. We get seed zero and seed one. So,
all. We get seed zero and seed one. So,
why did we get seed one and seed two on
why did we get seed one and seed two on
the uh the other ones? I see that
right. Yeah. So, you get seeds one and
two. Okay. So here
um let's get
Mark
Mark
seed. That's fine.
Yeah, that's totally
fine. Are boxes down because you're
fine. Are boxes down because you're
swapping to 5090s? No, boxes are down
swapping to 5090s? No, boxes are down
because the internet is ass. And I don't
because the internet is ass. And I don't
know if something's wrong with the cable
know if something's wrong with the cable
or whatever. I've got to go deal with
or whatever. I've got to go deal with
it. But I can't have two days in a row
it. But I can't have two days in a row
of just dealing with infrastructure
of just dealing with infrastructure
horseshit. So I got to go figure that
horseshit. So I got to go figure that
out after I at least make a little bit
out after I at least make a little bit
of progress
here. Let's see the 5090
here. Let's see the 5090
run. Like it's literally impossible for
run. Like it's literally impossible for
me to broken anything with the 5090.
me to broken anything with the 5090.
It's like in a different room on a
It's like in a different room on a
different
network. All
right. So, this is going to do whatever
right. So, this is going to do whatever
it's going to
do. I think some of the boxes are back
do. I think some of the boxes are back
as well. It's It's bizarro, but I think
as well. It's It's bizarro, but I think
that they have like dial up internet
that they have like dial up internet
speed right now for some dumb reason.
Okay. Well, this is this is correct so
Okay. Well, this is this is correct so
far.
far.
Um, this now should give you unique
seeds. I'm going to test it for neural
seeds. I'm going to test it for neural
MMO.
Okay, there we go. Sure that still runs.
That's still
trans. Now here you actually have to do
trans. Now here you actually have to do
the seed manually.
So this is going to be seed
um times numbum m plus i
um times numbum m plus i
plus
this and then this is going to be
seed zero or
whatever and requires five arguments.
This just is a compile error. Doesn't
This just is a compile error. Doesn't
seem to be
compiled. And okay, builds.
compiled. And okay, builds.
Can we
train? Yes. Yes, we can train. No
train? Yes. Yes, we can train. No
errors, same training speed. And I guess
errors, same training speed. And I guess
we will see whether there are any uh any
we will see whether there are any uh any
differences.
I'd like to remove this stupid flashing
I'd like to remove this stupid flashing
problem at some
problem at some
point. I'll put that on the to-do
list. I think I know how to do it now.
list. I think I know how to do it now.
I'm looking at it. I'm fine. Um, that
I'm looking at it. I'm fine. Um, that
runs. That's good.
I want to make sure that the seeds
I want to make sure that the seeds
though are are
good. I want to definitely make sure
good. I want to definitely make sure
that the seeds are
good. So, I should
have unique
have unique
seeds.
Right.
Seed.
Seed.
Okay. So, this is the the um driver M.
Okay. So, this is the the um driver M.
This one doesn't
This one doesn't
matter. One, two, three, zero.
One, two, three, four, five, six,
One, two, three, four, five, six,
seven. Oh, this is the whole driver
seven. Oh, this is the whole driver
because it's going to make Yeah. And
because it's going to make Yeah. And
then it goes 0 1 2 3 and four, five,
then it goes 0 1 2 3 and four, five,
six, seven.
six, seven.
Perfect. So, we have unique seeds for
Perfect. So, we have unique seeds for
each environment.
each environment.
Now, that should be consistent as well.
that might actually substantially change
that might actually substantially change
the training based on some uh
the training based on some uh
preliminary results. So, we will have to
preliminary results. So, we will have to
run
run
this. But, this is going to be a good
this. But, this is going to be a good
change
change
overall. Let's just uh let's do breakout
overall. Let's just uh let's do breakout
real quick just so we have like a little
real quick just so we have like a little
bit more
bit more
confidence in this result.
See, I don't know why this has so many
See, I don't know why this has so many
bloody arguments. It's kind of
bloody arguments. It's kind of
ridiculous.
Probably should fix all
that
rewards.
rewards.
See, and because this is Beckinet,
See, and because this is Beckinet,
that's all we have to do with it.
Rebuild
Rebuild
breakout. Whatever the hell that did
breakout. Whatever the hell that did
here
here
is deal. Wrong
one. And
one. And
actually print seed here as
well. Seed.
Then it's also we changed it to ve in
Then it's also we changed it to ve in
it instead of it
back. Yep. So 0 and one plus the default
back. Yep. So 0 and one plus the default
zero 1.6 million steps per second. We'll
zero 1.6 million steps per second. We'll
make sure that this still trains nicely.
Good. Okay. So, that is
Good. Okay. So, that is
seating. I'm going to say that's seating
seating. I'm going to say that's seating
complete.
Okay, that full
solves. I'm actually tempted to
solves. I'm actually tempted to
normalize the score for all the M's. 0
normalize the score for all the M's. 0
to
one. We'll think about that later
one. We'll think about that later
though. Okay, so this now runs.
though. Okay, so this now runs.
Um, I think it's going to be worth just
Um, I think it's going to be worth just
doing this on neural MMO because I don't
doing this on neural MMO because I don't
know what's going to happen.
know what's going to happen.
So I think what we do is we take a look
So I think what we do is we take a look
at the current neural MMO
at the current neural MMO
experiment. We see whether that result
experiment. We see whether that result
is
is
reasonable and then we launch this one
instead without the precision
on. Yeah, cuz this is running with weird
on. Yeah, cuz this is running with weird
RNG.
Let's just take a quick look at the
Let's just take a quick look at the
losses to see if there's anything
weird. Yeah. Okay. There is definitely
weird. Yeah. Okay. There is definitely
something weird here. This clip frack is
something weird here. This clip frack is
really
low. Entropy is really weird. Okay. So,
low. Entropy is really weird. Okay. So,
yeah, the float 16 is definitely
yeah, the float 16 is definitely
screwing with training somehow.
It does seem to be learning, but there's
It does seem to be learning, but there's
definitely weirdness going
definitely weirdness going
on. I mean, yeah, we're not intending to
on. I mean, yeah, we're not intending to
train in float 16 anyways. The really
train in float 16 anyways. The really
the goal would be to get BF16 to be
the goal would be to get BF16 to be
fast, then train in
fast, then train in
BF-16. Um, here, let's commit all this
BF-16. Um, here, let's commit all this
up and then go run this on the 1590.
Don't need these configs.
Here's our 5090 box.
If you are looking at these new cards
If you are looking at these new cards
for RL, I will say that the results so
for RL, I will say that the results so
far have been pretty disappointing. It's
far have been pretty disappointing. It's
only like 10 15% faster in the tests
only like 10 15% faster in the tests
I've run thus
far. Let's take care of Muai real quick.
Okay. So now we have nice
Okay. So now we have nice
clean version to run this
experiment. Yeah, honestly the cards are
experiment. Yeah, honestly the cards are
really disappointing thus far. They do
really disappointing thus far. They do
have 32 gigs of memory on them, but like
have 32 gigs of memory on them, but like
I don't know what we do with that,
right? Like what are we even using right
right? Like what are we even using right
now? Yeah, we're literally using 4 gigs
now? Yeah, we're literally using 4 gigs
of RAM with like the biggest model that
of RAM with like the biggest model that
we run.
we run.
So, what's the
point? Uh, I will say that we did screw
point? Uh, I will say that we did screw
up. So, this should be
up. So, this should be
increased. Hang on. Let me just increase
increased. Hang on. Let me just increase
the model size. So, it actually will use
the model size. So, it actually will use
a little bit more RAM than I than 4
a little bit more RAM than I than 4
gigs. Maybe quadruple. Maybe use a
16. Did I miss anything?
No, cuz uh we did get better results
No, cuz uh we did get better results
with
fivefold premp compute more things for
fivefold premp compute more things for
Tokyo Puff. Not really though, cuz it's
Tokyo Puff. Not really though, cuz it's
in uh it's in GPU. It's more GPU memory,
in uh it's in GPU. It's more GPU memory,
right? Tokyo Puff might be a really RAM
right? Tokyo Puff might be a really RAM
heavy
heavy
M. But the thing is, I intentionally
M. But the thing is, I intentionally
spec our machines with high RAM
spec our machines with high RAM
specifically so we can do stuff like
specifically so we can do stuff like
Tokyo Puff anyways. Like
Tokyo Puff anyways. Like
look, these things
look, these things
have well, okay, it's not on top or
have well, okay, it's not on top or
whatever, but these things have 128 gigs
whatever, but these things have 128 gigs
of RAM on
of RAM on
them. Should be plenty for a one card
them. Should be plenty for a one card
run, right? You'd hope. I don't know,
run, right? You'd hope. I don't know,
maybe giant giant map could be
maybe giant giant map could be
challenging, but
Okay, kill
this. We get up to 700K with uh
this. We get up to 700K with uh
blo. I just pulled the fix that got rid
blo. I just pulled the fix that got rid
of that.
I forgot to add it.
So, we'll see how much RAM this
uses and then
uses and then
uh we'll keep thinking about the other
uh we'll keep thinking about the other
infra
stuff. Environment requires five
stuff. Environment requires five
arguments. Didn't recompile.
Okay. So this is now this is a 3.1
Okay. So this is now this is a 3.1
million parameter
million parameter
model. Um trains at
model. Um trains at
[Music]
[Music]
560k steps per second. 550 560k.
You can see that we don't really have
You can see that we don't really have
any wasted time in MISK. Very little in
any wasted time in MISK. Very little in
copy for a large amount of data at
copy for a large amount of data at
least. So what's this take
up? Nothing. Takes up nothing.
It's actually kind of weird that you can
It's actually kind of weird that you can
increase the model size that much and um
increase the model size that much and um
still not have it take up any
still not have it take up any
memory. I guess it's just the obs buffer
memory. I guess it's just the obs buffer
is taking up everything, right? And then
is taking up everything, right? And then
the actual batch of data that you have
the actual batch of data that you have
on GPU is not really doing
on GPU is not really doing
much. And this is decent util as well,
much. And this is decent util as well,
right?
We can probably make the thing run like
We can probably make the thing run like
20% faster if you're looking at just
20% faster if you're looking at just
util. Is there a way in the end we can
util. Is there a way in the end we can
separate various tasks for
separate various tasks for
GPU like complex physics sims to utilize
GPU like complex physics sims to utilize
GPU more? Nope. Yeah, at that point
GPU more? Nope. Yeah, at that point
Spence, you got to do the whole end GPU
Spence, you got to do the whole end GPU
because you don't want to be doing back
because you don't want to be doing back
and forth device transfer in the end.
and forth device transfer in the end.
I actually do have a plan though for um
I actually do have a plan though for um
making it very easy to do uh GPU
making it very easy to do uh GPU
accelerated puffer amps. So if that
accelerated puffer amps. So if that
becomes a problem in GPU drive, I will
becomes a problem in GPU drive, I will
let's say I will uh work on making those
let's say I will uh work on making those
additions faster. But there is actually
additions faster. But there is actually
a plan for GPU enabled um puffer
a plan for GPU enabled um puffer
environments without having to do like
environments without having to do like
terrible terrible jacks or pietorrch
terrible terrible jacks or pietorrch
array [ __ ] In fact, I think it'll
array [ __ ] In fact, I think it'll
work with mostly the exact same code you
work with mostly the exact same code you
have now. So, there's plan for that.
have now. So, there's plan for that.
It's got a really fun logo attached to
It's got a really fun logo attached to
it, too. But, uh, more about that when I
it, too. But, uh, more about that when I
actually get a spare few days to
dev. And I got to fire uh I got to if it
dev. And I got to fire uh I got to if it
works, I'll have to find an artist for
works, I'll have to find an artist for
the logo as well.
Add another fish to the
collection. Actually, I know exactly the
collection. Actually, I know exactly the
artist I would use.
artist I would use.
Um, yeah, I can do I had two artists
Um, yeah, I can do I had two artists
work on this puffer, so I can just go
work on this puffer, so I can just go
get the same artist to do uh a new
get the same artist to do uh a new
model. The the one who like really
model. The the one who like really
cleaned it up
nicely. He did a great job with the
nicely. He did a great job with the
animations on this guy.
Okay, next thing.
Okay, next thing.
Um, the only thing we have left to do on
Um, the only thing we have left to do on
the initial version of the end binding
the initial version of the end binding
is just seeing if we can improve a
is just seeing if we can improve a
little bit of the
little bit of the
usability because right now
This binding is really easy to mess
This binding is really easy to mess
up. If you mess up any of the D types
up. If you mess up any of the D types
here, it just corrupts all the
here, it just corrupts all the
data. Would puff would GPU puff be
data. Would puff would GPU puff be
faster for certain types of MS? Yeah,
faster for certain types of MS? Yeah,
for certain types of MS, of course.
The only thing in GPU drive I can think
The only thing in GPU drive I can think
about by the way where like you might
about by the way where like you might
want to do it kind of the collision
want to do it kind of the collision
checks but you kind of make it harder to
checks but you kind of make it harder to
use better algorithms if you do that. So
use better algorithms if you do that. So
I think like the only thing I can think
I think like the only thing I can think
about is if you were going to do like
about is if you were going to do like
lidar, right? If you were going to do
lidar, right? If you were going to do
lidar then you probably want GPU
Excel. But the thing is then you have to
Excel. But the thing is then you have to
make the whole M GPU Excel which is not
make the whole M GPU Excel which is not
going to be that hard codewise. But I
going to be that hard codewise. But I
don't know if it's going to be
don't know if it's going to be
slow. A lot of the times people try to
slow. A lot of the times people try to
write stuff on the GPU to make it fast
write stuff on the GPU to make it fast
and they just end up making it slow
and they just end up making it slow
because GPUs are not just dropping
because GPUs are not just dropping
replacements for CPUs. They don't work
replacements for CPUs. They don't work
that
way. Would be cool if they
way. Would be cool if they
did. We just like make basically a
did. We just like make basically a
thousand core
thousand core
CPU. That'd be
nice. Does it help for robotics? Yeah,
nice. Does it help for robotics? Yeah,
of course it helps for robotics, right?
of course it helps for robotics, right?
if you wanted to actually So, if I
if you wanted to actually So, if I
wanted to go deep into robotics and
wanted to go deep into robotics and
really make a sim platform for that,
really make a sim platform for that,
right? I mean, you're kind of doing what
right? I mean, you're kind of doing what
Isaac uh Isaac Sim or whatever does at
Isaac uh Isaac Sim or whatever does at
that point, but like let's say that I
that point, but like let's say that I
thought that I could do a better job
thought that I could do a better job
than Isaac Sim, then yeah, I would
than Isaac Sim, then yeah, I would
probably go off of Nvidia Physics and
probably go off of Nvidia Physics and
like write my own custom thing with
like write my own custom thing with
PhysX and CUDA.
But that's like a that's a big ordeal.
But that's like a that's a big ordeal.
That's like a big ordeal.
So you can manually type check which is
So you can manually type check which is
annoying.
[Music]
[Music]
ish. Okay. So, it's basically it's
ish. Okay. So, it's basically it's
between
I wonder if I could just go
through pi float check punch. I wonder
through pi float check punch. I wonder
if I could just write some like unpack
if I could just write some like unpack
args function that just does all the
args function that just does all the
dype checks, right? I mean, you're just
dype checks, right? I mean, you're just
going to want like floats and
going to want like floats and
ins. So I can just do those checks for
ins. So I can just do those checks for
you.
It's definitely worth
It's definitely worth
trying. And then you wouldn't need to
trying. And then you wouldn't need to
deal with these types either. So you
deal with these types either. So you
wouldn't have to provide this
So we just do unpack
quarks. Okay.
This is pretty much the last thing I
This is pretty much the last thing I
think that I could do that would be like
think that I could do that would be like
a legitimately a legitimate improvement.
a legitimately a legitimate improvement.
After that, anything more starts to get
After that, anything more starts to get
like overbuilding it.
Unpack. Holy hell. What? Super Maven,
Unpack. Holy hell. What? Super Maven,
chill
out. Have you seen any research on
out. Have you seen any research on
maximum steps?
maximum steps?
PPO can solve an M with a only a reward
PPO can solve an M with a only a reward
at the end of an episode for Gigaspar's
at the end of an episode for Gigaspar's
problems.
Um, so there is something I've been
Um, so there is something I've been
thinking about like where there's a
thinking about like where there's a
legitimate point to improve PO on that
legitimate point to improve PO on that
specifically, but in general it's
not you need it like it it's not so much
not you need it like it it's not so much
just how many steps it's delayed, right?
just how many steps it's delayed, right?
Like that's not the only thing that
Like that's not the only thing that
matters. The thing that matters is the
matters. The thing that matters is the
path that you take to get it. So, like
path that you take to get it. So, like
if I run a random
if I run a random
policy, right? If I run a random policy
policy, right? If I run a random policy
on the M, uh, how long does it take me
on the M, uh, how long does it take me
to get the
to get the
reward? If you never get the reward,
reward? If you never get the reward,
then you're not going to be able to
then you're not going to be able to
learn anything
regardless, right?
You do have to do keywords.
credit assignment becomes the issue then
credit assignment becomes the issue then
right like huge sequence but did get
right like huge sequence but did get
yeah so PO is not going to work if you
yeah so PO is not going to work if you
only get the reward once in theory right
only get the reward once in theory right
there are environments for which you
there are environments for which you
should be able to learn only by getting
should be able to learn only by getting
the reward once um you know if you have
the reward once um you know if you have
a fully deterministic end where it's all
a fully deterministic end where it's all
you need to do is repeat the same
you need to do is repeat the same
sequence of actions then you probably
sequence of actions then you probably
should be able to get back to that
should be able to get back to that
reward uh these are kind of like
reward uh these are kind of like
pathologies, right? These are like weird
pathologies, right? These are like weird
edge cases where current algorithms
edge cases where current algorithms
fail. Um, I actually been thinking about
fail. Um, I actually been thinking about
that one because this is where it starts
that one because this is where it starts
to make sense to consider off policy
to make sense to consider off policy
stuff because if you get that trajectory
stuff because if you get that trajectory
into an experience buffer and then you
into an experience buffer and then you
just keep training on it because there's
just keep training on it because there's
nothing else to train on, you will solve
nothing else to train on, you will solve
the problem because you'll just overfit
the problem because you'll just overfit
the solve trajectory. Uh, however, off
the solve trajectory. Uh, however, off
policy in general is a total mess. So
policy in general is a total mess. So
while the idea of off policy of having
while the idea of off policy of having
like this buffer is a good one, the
like this buffer is a good one, the
actual implementation and practice of
actual implementation and practice of
these things kind of suck. Like PO is a
these things kind of suck. Like PO is a
really simple algorithm and then if you
really simple algorithm and then if you
look at all the off policy ones that try
look at all the off policy ones that try
to match POFF, they're a mess.
to match POFF, they're a mess.
So yeah, it's definitely a valid
So yeah, it's definitely a valid
research direction and something we'd
research direction and something we'd
like to look at, but uh it would have to
like to look at, but uh it would have to
be done in a way that doesn't produce
be done in a way that doesn't produce
the amount of mess that is currently in
the amount of mess that is currently in
off policy.
What did this just
What did this just
autofill? Hi, Unicode from string. God,
autofill? Hi, Unicode from string. God,
that is totally
that is totally
awful. I have no idea what the heck it
awful. I have no idea what the heck it
just tried to fill in there.
Thanks for chat. Was reading alpha chip
Thanks for chat. Was reading alpha chip
paper and thought it was wild they only
paper and thought it was wild they only
had one joint reward
had one joint reward
given at the end of episode. I haven't
given at the end of episode. I haven't
actually looked at the chip design
actually looked at the chip design
stuff.
stuff.
Um they also this is very large scale as
Um they also this is very large scale as
well, right?
well, right?
though. Actually, I don't know. Maybe
though. Actually, I don't know. Maybe
their sim is
slow. You can kind of force
slow. You can kind of force
reinforcement learning to work on a ton
reinforcement learning to work on a ton
of problems. It's really just a matter
of problems. It's really just a matter
of like, does it work immediately? Does
of like, does it work immediately? Does
it work after playing with it for a
it work after playing with it for a
couple hours? Do do you need a team of
couple hours? Do do you need a team of
20 in two years?
I don't know if there's there isn't a
I don't know if there's there isn't a
length built in,
right? Yeah. So, it
is fix. So, this actually does work
is fix. So, this actually does work
because
Yeah, this is the size of the char star.
Yeah, this is the size of the char star.
So, we're good. So, this has to
So, we're good. So, this has to
be
static. You just have to know how to
static. You just have to know how to
model the problem for RL, then build
model the problem for RL, then build
fast. Pretty
fast. Pretty
much. Pretty much.
So, we need to be able to unpack
this. Unpack a single keyword R.
I broke
it. Is there a way to like get a
it. Is there a way to like get a
single a single
arg? I don't want to have to deal with
arg? I don't want to have to deal with
this format shenanigans.
Pi object keyword
arcs picked
arcs picked
get item
get item
string. Is this a real function? Get
string. Is this a real function? Get
item
string or did it make that [ __ ]
up? Looks like it exists.
Oops.
I dict get item string.
Okay. So now you got to go
Okay. So now you got to go
check the different types
here. What in the hell?
Oh, I
see. Yeah, that's kind of
gross. But that does work.
So this is the idea right is that all
So this is the idea right is that all
supported key uh keyword types we get
supported key uh keyword types we get
the type it is in
Python now I think this is
still this is still sketchy though isn't
still this is still sketchy though isn't
Yeah, this is still
sketchy because if you pass an
sketchy because if you pass an
inch to a float, it'll still break,
inch to a float, it'll still break,
won't
it? Let me try something.
Oh, wait. No. Does it not? Does it
Oh, wait. No. Does it not? Does it
break? No, it doesn't break. I'm wrong.
break? No, it doesn't break. I'm wrong.
Hang on. I think I have it because now
Hang on. I think I have it because now
Yeah. Yeah. Yeah. We're good. We are
Yeah. Yeah. Yeah. We're good. We are
good. Okay. I was being stupid. So this
good. Okay. I was being stupid. So this
is this is actually correct. And the
is this is actually correct. And the
reason is that before um it was trying
reason is that before um it was trying
to like do some weird thing where it was
to like do some weird thing where it was
casting the Python object into the wrong
casting the Python object into the wrong
D type or whatever, but now it's going
D type or whatever, but now it's going
to match the type of
to match the type of
the Yeah, it's going to match the
the Yeah, it's going to match the
type that you bring into it. It still
type that you bring into it. It still
needs to get cast
needs to get cast
though. Yeah. Okay. Okay, it still needs
though. Yeah. Okay. Okay, it still needs
to get cast. So, this cast doesn't work.
This is a lot
closer. Now, you don't need a [ __ ]
closer. Now, you don't need a [ __ ]
metadata type system. Screw that.
What on earth is
this? Handles both floats and
this? Handles both floats and
ins. This doesn't work though, right?
Yeah, this is the meta
[ __ ] Hang on though.
If the user writes this line
If the user writes this line
themsself, the casting will be
correct. Right.
Yes, the casting will be correct.
So, all I really need to do is give them
So, all I really need to do is give them
a
a
um an unpack
um an unpack
function that returns a
function that returns a
float. Is there anything else you really
float. Is there anything else you really
need to pass to
need to pass to
MS through the C
MS through the C
API? It's always going to be a float or
API? It's always going to be a float or
an in, right?
I don't really want to cast
I think you can technically screw this
I think you can technically screw this
up, right? Cuz the float precision won't
work. Yes, you can. Yes.
work. Yes, you can. Yes.
Right. I mean, obviously. I don't even
Right. I mean, obviously. I don't even
know why I
asked. Terrible
news. Another Danager
article. This is Dreamer V3. This isn't
article. This is Dreamer V3. This isn't
even anything new, right?
This is just they got their scammed like
This is just they got their scammed like
their [ __ ] paper into
nature. Yeah.
nature. Yeah.
Look, whole page of uh totally wrong
stuff. That's fine. They can get
stuff. That's fine. They can get
[ __ ] published all they
want. I thought you were going to tell
want. I thought you were going to tell
me that there's a Dreamer V4 that's even
me that there's a Dreamer V4 that's even
more [ __ ] and now we have to run
more [ __ ] and now we have to run
another 10 hours worth of exper uh
another 10 hours worth of exper uh
10,000 GPU hours worth of experiments.
10,000 GPU hours worth of experiments.
Then I'd be mad.
Now we're fixing stuff over here, man.
Now we're fixing stuff over here, man.
We're fixing
We're fixing
stuff. First 5090 is in as
stuff. First 5090 is in as
well. We're running a neural MMO on it
well. We're running a neural MMO on it
right
right
now. Now we're going to hear even more
now. Now we're going to hear even more
about it. Yeah. But you know what
about it. Yeah. But you know what
happens? Every time like a client or you
happens? Every time like a client or you
know, whoever asks me about it, I say
know, whoever asks me about it, I say
yes, we evaluated it. We did 10,000 GPU
yes, we evaluated it. We did 10,000 GPU
hours worth of experiments on all the
hours worth of experiments on all the
tricks they claimed. None of them
tricks they claimed. None of them
worked. We have the results published at
Nerups.
Right. No, no, no. I like the world
Right. No, no, no. I like the world
model stuff probably works, but it's
model stuff probably works, but it's
just god-awful science to the point that
just god-awful science to the point that
it's like borderline scientific fraud.
it's like borderline scientific fraud.
Especially when you consider that the
Especially when you consider that the
author should have known better, right?
author should have known better, right?
This is like if this were some random
This is like if this were some random
undergrad or even some random grad
undergrad or even some random grad
student at some random lab, right? I'd
student at some random lab, right? I'd
just say like, "Ah, okay, whatever. They
just say like, "Ah, okay, whatever. They
they made some mistakes, whatever." But
they made some mistakes, whatever." But
no, like these people should know
no, like these people should know
better,
right? It's like, what in the
hell? Chat's two minutes
delayed. Are you sure?
delayed. Are you sure?
I I didn't change anything. It shouldn't
I I didn't change anything. It shouldn't
be. Twitch is usually the fast
one. Must be
reream. I don't have it set to de I
reream. I don't have it set to de I
don't have a delay set or anything
don't have a delay set or anything
weird.
Cool. Might be
Cool. Might be
me. That's like 30 seconds, not 2
minutes. Twitch just gave me two minute
minutes. Twitch just gave me two minute
delay for no
delay for no
reason. Yeah, there you go.
Sometimes it like scrolls back in the
Sometimes it like scrolls back in the
live broadcast or
whatever.
Okay. Oh, I got a new thing. I don't
Okay. Oh, I got a new thing. I don't
know if you saw this, Ryan. I've been uh
know if you saw this, Ryan. I've been uh
replacing Syon. We found a really nice
replacing Syon. We found a really nice
way to replace Syon, and I'm just kind
way to replace Syon, and I'm just kind
of polishing it up right now.
of polishing it up right now.
So, we're going to have one 500 some odd
So, we're going to have one 500 some odd
line file instead of like 3,000 lines
line file instead of like 3,000 lines
worth of Syon
worth of Syon
bindings. Dreamer does actually work,
bindings. Dreamer does actually work,
but their science sucks. Well, yeah, but
but their science sucks. Well, yeah, but
the thing is their science sucks so bad
the thing is their science sucks so bad
that it's like it's almost not a
that it's like it's almost not a
youthful result
youthful result
anymore, you know?
They also use these like stupid ass slow
They also use these like stupid ass slow
environments where it's really hard to
environments where it's really hard to
even get a good baseline for comparison
even get a good baseline for comparison
because you can't even ask like okay you
because you can't even ask like okay you
know how like can you solve this
know how like can you solve this
environment easily with more samples you
environment easily with more samples you
can't even ask like does the stupid
can't even ask like does the stupid
baseline just solve this easily right is
baseline just solve this easily right is
it just a sample thing like even for
it just a sample thing like even for
stuff where you want to do sample
stuff where you want to do sample
efficiency research like you'd want it
efficiency research like you'd want it
on fast end
working algorithms always I mean you
working algorithms always I mean you
read the code for that
read the code for that
thing I don't think it's a working
algorithm but that's
okay we will do more algo side stuff
okay we will do more algo side stuff
going
going
forward I want to
forward I want to
fix the plan at the moment is fix
fix the plan at the moment is fix
bindings take another path with the
bindings take another path with the
trainer. See if we can really get some
trainer. See if we can really get some
train purf uh going on that. And then we
train purf uh going on that. And then we
go back to more
go back to more
algorithms. So it's infra. So I just did
algorithms. So it's infra. So I just did
an algorithm block and then it's going
an algorithm block and then it's going
to be infra. And then it's going to be
to be infra. And then it's going to be
PF and then it's going to be back to
algorithms. Also, I'm visiting the um
algorithms. Also, I'm visiting the um
the new facility. Um it's not done yet.
the new facility. Um it's not done yet.
And I'm visiting the new facility over
And I'm visiting the new facility over
the weekend. Uh so I'll get to see that
the weekend. Uh so I'll get to see that
which will be
which will be
cool. Yeah. But this thing is awesome.
cool. Yeah. But this thing is awesome.
Like here and I think it's going to get
Like here and I think it's going to get
even easier than
even easier than
this.
this.
But this is your binding for neural MMO.
But this is your binding for neural MMO.
Now this is the entire binding you have
Now this is the entire binding you have
to write for neural MMO. The gym and
to write for neural MMO. The gym and
data center. Yeah.
data center. Yeah.
visiting that. It's not quite done yet.
visiting that. It's not quite done yet.
It'll be done in a few weeks, but
It'll be done in a few weeks, but
visiting
visiting
it. Probably visiting it. We'll
it. Probably visiting it. We'll
see. So, yeah, this is all you have to
see. So, yeah, this is all you have to
write for neural
write for neural
MMO. What the [ __ ] is that
MMO. What the [ __ ] is that
string? Yeah. So, this is what I'm
string? Yeah. So, this is what I'm
trying to remove right now. This this
trying to remove right now. This this
dtype string sucks. So, I'm trying to
dtype string sucks. So, I'm trying to
figure out how to remove this right now.
figure out how to remove this right now.
And I think I'm going to have it just so
And I think I'm going to have it just so
you just write one line per param
you just write one line per param
instead of having this [ __ ] because
instead of having this [ __ ] because
this can actually screw you because this
this can actually screw you because this
can do bad
can do bad
tasks. Like this can actually cause you
tasks. Like this can actually cause you
to do wrong
tasks. But I mean to be fair, right?
Wrong
Wrong
tasks of wrong casts. WC wrong
casts. This is what we had for neural
casts. This is what we had for neural
like this replaces 270 lines of Python
like this replaces 270 lines of Python
binding though. That one little
binding though. That one little
thing. Wrong. In what way? You try to
thing. Wrong. In what way? You try to
write uh the bits of a float to an int
write uh the bits of a float to an int
and then you break the values. It's
and then you break the values. It's
really gross. So, we're trying to fix
really gross. So, we're trying to fix
that right
now. What if I just give you an unpack
now. What if I just give you an unpack
int and an unpack float function?
int and an unpack float function?
That just does it, doesn't
it? I haven't gotten on the sea train
it? I haven't gotten on the sea train
yet. You're missing out. You're really
yet. You're missing out. You're really
missing out, buddy.
It's actually so the C is really chill
It's actually so the C is really chill
and it gets even better uh as time goes
and it gets even better uh as time goes
on because more and more people are just
on because more and more people are just
jumping on the like I don't know
jumping on the like I don't know
anything. I just ask LLM's everything
anything. I just ask LLM's everything
train. So it's even more funny to see
train. So it's even more funny to see
like how hilariously better you can make
like how hilariously better you can make
stuff just by knowing a little bit of
stuff just by knowing a little bit of
low-level dev because like people are
low-level dev because like people are
now just writing [ __ ] that's like you
now just writing [ __ ] that's like you
know a thousand times too slow, 10,000
know a thousand times too slow, 10,000
times too slow. I've seen 20,000 times
times too slow. I've seen 20,000 times
too slow at this All right.
might take a stab at writing syllabus in
might take a stab at writing syllabus in
written
written
C. Oh, don't try to directly translate
C. Oh, don't try to directly translate
it with an LLM. You will be
it with an LLM. You will be
sad. You'll be very
sad. You'll be very
sad. But uh we are getting nice puffer
sad. But uh we are getting nice puffer
and vin. So, you know, you'll be able to
and vin. So, you know, you'll be able to
hop with hop on some of this. In fact,
hop with hop on some of this. In fact,
we're probably going to do
we're probably going to do
multipprocessing backends at some point
multipprocessing backends at some point
relatively soonish with this as well,
relatively soonish with this as well,
just because I'm sick of dealing with
just because I'm sick of dealing with
the Python. I think it'll literally be
the Python. I think it'll literally be
shorter and simpler in uh in C than in
shorter and simpler in uh in C than in
Python. Isn't that
Python. Isn't that
funny? Near MMO 3 looks really cool. Oh
funny? Near MMO 3 looks really cool. Oh
yeah. And we have it now training. It's
yeah. And we have it now training. It's
at on the 5090. We're up to 650,000
at on the 5090. We're up to 650,000
steps per second training. Uh, it goes
steps per second training. Uh, it goes
up to 700,000 if I do it in float 16. I
up to 700,000 if I do it in float 16. I
haven't gotten that stable yet. I
haven't gotten that stable yet. I
haven't gotten compiled on that yet. So,
haven't gotten compiled on that yet. So,
I think we're going to get up to like
I think we're going to get up to like
eight or 900,000 steps per second
eight or 900,000 steps per second
training on neural MMO 3. That's with a
training on neural MMO 3. That's with a
3 million parameter network as
well. Buffer very fast. Buffer very
well. Buffer very fast. Buffer very
fast.
It's a totally different
It's a totally different
game. Lost the task system
game. Lost the task system
though.
though.
Yeah. I mean, that doesn't mean it's
Yeah. I mean, that doesn't mean it's
gone forever. It's just for this version
gone forever. It's just for this version
of it. It's not. This is not the final
of it. It's not. This is not the final
version of
Neuralarmmo. The coolest open source
Neuralarmmo. The coolest open source
task. Yeah, I agree.
task. Yeah, I agree.
But it's okay, right? Here, like the
But it's okay, right? Here, like the
thing is like make the [ __ ] RL work,
thing is like make the [ __ ] RL work,
right? Let's solve neural MMO 3 and then
right? Let's solve neural MMO 3 and then
we'll like figure out how to make a good
we'll like figure out how to make a good
task system for neural MMO
4. Yeah, the baseline the old baseline's
4. Yeah, the baseline the old baseline's
a pain. So, the new it was a tenth uh it
a pain. So, the new it was a tenth uh it
we were only at like level two and a
we were only at like level two and a
half or whatever before. I think the
half or whatever before. I think the
best baseline got two and a half level
best baseline got two and a half level
average.
average.
So the new one we're up to this one is
So the new one we're up to this one is
at 4.5 in like 60 billion
steps is the new best. So if I run this
steps is the new best. So if I run this
for 100 bill again this will be like
for 100 bill again this will be like
five. So essentially five out of 20 max
five. So essentially five out of 20 max
levels 20.
That curve keeps going up like perfect
That curve keeps going up like perfect
log linear over a 100red billion steps
log linear over a 100red billion steps
too which is pretty
cool curriculum learning you know you
cool curriculum learning you know you
might it's kind of tricky though if
might it's kind of tricky though if
you're not doing it over task
you're not doing it over task
space we're only training on eight total
space we're only training on eight total
maps the maps are really
maps the maps are really
big
big
so You could potentially like randomize
so You could potentially like randomize
and have like an easy, medium, and hard
and have like an easy, medium, and hard
map or something in
map or something in
there like you can do that. And
there like you can do that. And
actually, neural MMO 3 is set up so that
actually, neural MMO 3 is set up so that
you can do that very very easily.
you can do that very very easily.
Um, oh here, let me show you the new
Um, oh here, let me show you the new
endbinding stuff as well. You can write
endbinding stuff as well. You can write
you get to write your envy now. It's
you get to write your envy now. It's
pretty nice.
So this is how you do your envy. All
So this is how you do your envy. All
that was just arch check. Look at this.
that was just arch check. Look at this.
You just call envenit and you just make
You just call envenit and you just make
whatever end you want with whatever
whatever end you want with whatever
arguments you want and then you just
arguments you want and then you just
call
call
vectorize. That's
it. And even after you vectorize, you
it. And even after you vectorize, you
can still call step and reset on
can still call step and reset on
individual M's if you want.
individual M's if you want.
This is the new
This is the new
infra. So when you're initializing
infra. So when you're initializing
neural MMO
neural MMO
3, you can initialize different
3, you can initialize different
instances with like whatever args you
instances with like whatever args you
want and then you can call vectorize and
want and then you can call vectorize and
then you can do the step over all the
then you can do the step over all the
different M's in pure
different M's in pure
C which is pretty nice.
So, this actually is built to make it
So, this actually is built to make it
really easy to do curriculum learning
really easy to do curriculum learning
type stuff. Can you change the tasks?
type stuff. Can you change the tasks?
There are no tasks. Remember, there are
There are no tasks. Remember, there are
no tasks. Um, you can reset individual
no tasks. Um, you can reset individual
ends. You can probably technically do a
ends. You can probably technically do a
few other things with them as
few other things with them as
well, but there's no task system in this
well, but there's no task system in this
yet, right? This is just
yet, right? This is just
uh you can change the math though
uh you can change the math though
like two reward functions. Oh yeah. No,
like two reward functions. Oh yeah. No,
you can do that. That type of stuff
you can do that. That type of stuff
isn't that hard to
isn't that hard to
make. Yeah, that's not that's not hard
make. Yeah, that's not that's not hard
to
to
do. I mean ultimately like this binding
do. I mean ultimately like this binding
is specific to neural MMO as well. So
is specific to neural MMO as well. So
you can just write arbitrary C in there.
you change that and
you change that and
reset. Uh you could probably get it to
reset. Uh you could probably get it to
add an argan to reset or something if
add an argan to reset or something if
you
you
wanted. I don't know. I would probably
wanted. I don't know. I would probably
just say add a different function would
just say add a different function would
be easier, right? Just like expose and
be easier, right? Just like expose and
like have like a binding set state or
like have like a binding set state or
whatever and then just call
that. But still this is already like way
that. But still this is already like way
easier because at least here the thing
easier because at least here the thing
that you can do with this that you could
that you can do with this that you could
not do before you can step and reset
not do before you can step and reset
individual M's with this because this M
individual M's with this because this M
byD here if you just store this as a
byD here if you just store this as a
list right like you can step individual
list right like you can step individual
ones of these M's and reset individual
ones of these M's and reset individual
M's but you also don't lose the
M's but you also don't lose the
vectorzed functionality so it's pretty
nice this whole thing. It's like 500
nice this whole thing. It's like 500
lines of Python API C
lines of Python API C
shenanigans. What you're looking at as
shenanigans. What you're looking at as
well, this is not considered like easy
well, this is not considered like easy
to read like clean C. The M's are easy
to read like clean C. The M's are easy
to read clean C. This is garbage Python
to read clean C. This is garbage Python
API stuff. So most of the code in Puffer
API stuff. So most of the code in Puffer
is way better than this, but like the
is way better than this, but like the
Python API is what it is. So you have
Python API is what it is. So you have
all of these like pi object, pi dict, pi
float, assert
false. So there's still more to be done
false. So there's still more to be done
here, but I'm very happy to cut down the
here, but I'm very happy to cut down the
amount of total binding code from like 2
amount of total binding code from like 2
to 3,000 lines down to 500 because it's
to 3,000 lines down to 500 because it's
so much easier to do stuff now.
well tested. It's not really that it's
well tested. It's not really that it's
an like a total ugly mess. It's just it
an like a total ugly mess. It's just it
has to use the Python API which is kind
has to use the Python API which is kind
of verbose, right? So there's like a
of verbose, right? So there's like a
bunch of annoying checks. You always
bunch of annoying checks. You always
have to check every operation because
have to check every operation because
like anytime you're doing something on a
like anytime you're doing something on a
Python object like you don't know what
Python object like you don't know what
the type of the Python object is, you
the type of the Python object is, you
have to check it otherwise you are sad.
No one doing research should need to
No one doing research should need to
read this. Well, I mean folks in Puffer
read this. Well, I mean folks in Puffer
will, right? Because we're closer to the
infra. The goal, my goal here is no
infra. The goal, my goal here is no
longer just to provide like a convenient
longer just to provide like a convenient
highle interface for researchers, right?
highle interface for researchers, right?
My goal is to solve RL
Oh, that's actually really shitty. Hang
Oh, that's actually really shitty. Hang
on. You don't have access to this
on. You don't have access to this
function yet, do you?
function yet, do you?
Crap. I can just put it in a separate
Crap. I can just put it in a separate
header file.
Oh, I can just prototype here. I can
Oh, I can just prototype here. I can
just prototype it. It's fine. I just I
just prototype it. It's fine. I just I
just exposed the
uh No [ __ ] I can't do that
either, man. I don't want you to have to
either, man. I don't want you to have to
include two files.
writing thesis and now defense
writing thesis and now defense
presentation and job apps. Yeah, it's
presentation and job apps. Yeah, it's
rough. It's no
rough. It's no
fun. Defending Monday almost out. Hey,
fun. Defending Monday almost out. Hey,
congrats,
man.
Congrats. I forget. I don't know if I'm
Congrats. I forget. I don't know if I'm
flying on on um Sunday, Monday, or
flying on on um Sunday, Monday, or
Tuesday, but if I'm not fly in the air
Tuesday, but if I'm not fly in the air
and you send me a link, I will gladly be
there. And I promise not to ask you any
there. And I promise not to ask you any
[ __ ]
questions. Doctor, philosopher, too.
philosophy
doctor. No pressure. Hey, if I'm not
doctor. No pressure. Hey, if I'm not
flying, I'll be there.
I'm trying to think if this is actually
worth. Good luck. Thank you. Okay, back
worth. Good luck. Thank you. Okay, back
to infra. So, here's the HP, right? This
to infra. So, here's the HP, right? This
file gets included second. So, you can't
file gets included second. So, you can't
use anything from this file right now.
I really would like to have this thing
available. What if we what if we just
available. What if we what if we just
prototype it for now just to see if it's
prototype it for now just to see if it's
even
even
useful? Like
Okay. So, what if we do
this? Now we have access to this stupid
this? Now we have access to this stupid
thing.
Um, and
Um, and
then let's comment this
Okay. And then we do this is
unpack
int. So this is float float
int. So this is float float
float and end in int.
float and end in int.
float. Yeah. And everything else is
fine. Now, the only thing I can think
fine. Now, the only thing I can think
right is if you use the int function on
right is if you use the int function on
a float, you're going to round
a float, you're going to round
it. But I this is way better than having
it. But I this is way better than having
to match a freaking string.
This ends up not really being any longer
This ends up not really being any longer
either because you don't have to declare
either because you don't have to declare
this annoying thing anymore or do all of
this annoying thing anymore or do all of
this. Okay.
expected storage
class. Okay, this doesn't have to be
class. Okay, this doesn't have to be
static. I don't know why I'm starting to
static. I don't know why I'm starting to
use stupid keywords that I don't need.
Redefinition of
my
key redefinition.
redefin static
int. I'm confused because it
like where the hell else does it think
like where the hell else does it think
this is uh
binding
C.
C.
Oh,
h
for Oh, I just pasted this here and I
for Oh, I just pasted this here and I
forgot about it.
forgot about it.
Okay,
stupid keyword list
undeclared
69. This is just
key
bars. Uh, this is no longer used.
returned a result with an exception set.
Invalid type for keyword
uh pi error set
uh pi error set
string. You actually do need to do
string. You actually do need to do
format string. C doesn't have any like
format string. C doesn't have any like
nice format string, right?
That doesn't work, does it?
This is PHP. Why am I reading this?
This is a buffer overflow right there
This is a buffer overflow right there
I'm making. Let's not add a buffer
I'm making. Let's not add a buffer
overflow in the buffer for no freaking
overflow in the buffer for no freaking
reason.
size of buffer.
There we
go. That's better.
Right. Invalid types. The keyword reward
Right. Invalid types. The keyword reward
market.
reward market as
reward market as
float.
float.
Okay. Um why did it fail?
so it gets all the way down to to there.
Ah,
So for
now, Should fix it for
now. So, what do we think about
now. So, what do we think about
uh about this? So definitely this quarks
uh about this? So definitely this quarks
unpack thing doesn't
unpack thing doesn't
work because you lose the type of the
original. Top versus bottom here.
Top's way better,
right? You'll actually get an error
message. It should be an easy to
message. It should be an easy to
understand error message. It's a little
understand error message. It's a little
fiddly on what type you have to provide
fiddly on what type you have to provide
at the moment. Technically, uh, what I
at the moment. Technically, uh, what I
could do is I could make
could do is I could make
it I could probably make it like try to
it I could probably make it like try to
cast. So try to if you unpack it as an
cast. So try to if you unpack it as an
int and it's a float, right? It'll try
int and it's a float, right? It'll try
to unpack it and it'll check if the
to unpack it and it'll check if the
values are the same. I could do
that. Yeah, but this is totally fine
that. Yeah, but this is totally fine
right now.
Oh, I didn't realize that uh I didn't
Oh, I didn't realize that uh I didn't
have the model size correct on my
have the model size correct on my
machine. So, actually, it looks like the
machine. So, actually, it looks like the
uh
uh
the 5090 is a little better than I'd
the 5090 is a little better than I'd
originally thought.
originally thought.
Okay, that's not
Okay, that's not
terrible. I like this.
Now, the only thing we got to figure out
Now, the only thing we got to figure out
is this [ __ ] right here,
is this [ __ ] right here,
right? Because we need these functions.
right? Because we need these functions.
Um, but the way this is set up, you have
Um, but the way this is set up, you have
to have endbinding defined after you're
to have endbinding defined after you're
in it.
Oh, duh. Hang
on. We just
on. We just
define Mayanet up here, right?
Get rid of
these. Boom.
Way
cleaner. Way way cleaner.
If we're going to call all of these
If we're going to call all of these
binding as
well then I can even remove this line
right or can I
That's even
better. And now, hang on. You no longer
better. And now, hang on. You no longer
need to include
need to include
python.h. And you can include it in the
python.h. And you can include it in the
correct spot where like a sane person
correct spot where like a sane person
would.
Uhoh. Implicit definition of memset.
Why did we suddenly get a whole bunch of
Why did we suddenly get a whole bunch of
bears?
That just somehow got unincluded, but
That just somehow got unincluded, but
actually it works perfectly
fine. Do we use end module name anywhere
fine. Do we use end module name anywhere
anymore?
macro for module
name, but it's just binding
Okay. And now for
uh all the marbles. I
uh all the marbles. I
guess C step
guess C step
reset. We no longer need these.
That's pretty damn
That's pretty damn
good. What do you think? Easy enough to
good. What do you think? Easy enough to
bind your
ends. That's literally it.
classic code screenshot.
My Discord needs update. Hang on.
Why do I have ads in my
Why do I have ads in my
Discord? They literally have a didn't
Discord? They literally have a didn't
ask
ask
button. All right, you're forgiven.
Well, I'm happy with
Well, I'm happy with
this. This is kind of the best possible
this. This is kind of the best possible
outcome. You
know, there's basically nothing you can
know, there's basically nothing you can
do to make this simpler, right?
Can I make it a
Can I make it a
void? A void
type. It would be safe.
Voidar
Voidar
can't inherently convey type
information. Yeah, that's Yeah, that's
information. Yeah, that's Yeah, that's
true. Because it needs to actually know
true. Because it needs to actually know
how to do the cast.
You know this is
dumb. What's this freaking macro?
That's
stupid value
unpack. That's dumb.
value.
value.
Return. Now, I don't want a value like
Return. Now, I don't want a value like
that. That's bizaro.
Yeah. Now that's
gross. Is this a union type use
case? I don't like those.
I think this is worse than just having
I think this is worse than just having
separate functions though. I think it's
separate functions though. I think it's
just
worse versus unpack float unpack int.
Okay, that's
dumb. Yeah, it would still have to be a
dumb. Yeah, it would still have to be a
void star.
Yeah. So, it doesn't make sense
because yeah, the only thing you'd be
because yeah, the only thing you'd be
able to do is cast to an int and then
able to do is cast to an int and then
you
you
risk rounding being screwy,
risk rounding being screwy,
right? You don't want to store it as a
right? You don't want to store it as a
float.
There's no other type I can store it as,
There's no other type I can store it as,
right?
Oh,
Oh,
wait. I didn't realize
wait. I didn't realize
this. I didn't realize that double can
this. I didn't realize that double can
actually store all 32-bit ins. So,
actually store all 32-bit ins. So,
that's
perfect. Is that actually true?
Oh, it is totally true, right? Because
Oh, it is totally true, right? Because
of the number of bits exponent mintisa,
of the number of bits exponent mintisa,
right? So bits.
Yeah, because it
Yeah, because it
has
53. Okay, so I'm stupid. It should just
53. Okay, so I'm stupid. It should just
be a double and we're
be a double and we're
done.
done.
Okay, this is why knowing low-level
Okay, this is why knowing low-level
stuff is important, right? Because
stuff is important, right? Because
literally the the error that I made here
literally the the error that I made here
is I assume that you would lose
is I assume that you would lose
precision on the double way before uh
precision on the double way before uh
max int. But you
don't. So I can literally just Now this
don't. So I can literally just Now this
is beautiful, right?
So I can just do Yes.
Oh, this is going to be so
Oh, this is going to be so
nice. Look at this.
Can you do pi along as double or
something? Just
Oh, I think it'll just
Oh, I think it'll just
work as
work as
double and
this. That's it. That's your unpack
now. And you don't even need to
now. And you don't even need to
cast. You don't even need to cast
cast. You don't even need to cast
anymore because it'll auto cast from
anymore because it'll auto cast from
double. So this is basically
perfect. So like why something like this
perfect. So like why something like this
isn't built in, I have no idea.
isn't built in, I have no idea.
So this is actually
So this is actually
perfect and this handles I'll no longer
perfect and this handles I'll no longer
need to do the thing where
need to do the thing where
um I like had to define the floats as
um I like had to define the floats as
floats and the instance inside. This
floats and the instance inside. This
will just work. This will just freaking
work. That's the unused function. We're
work. That's the unused function. We're
going to delete that in a second
going to delete that in a second
anyways.
Even better. I actually made it
Even better. I actually made it
better. I didn't think that was going to
better. I didn't think that was going to
work before. I didn't think I'd be able
work before. I didn't think I'd be able
to do that. So now this
to do that. So now this
is the only time this is unsafe is uh if
is the only time this is unsafe is uh if
you go outside of the range of max int,
you go outside of the range of max int,
which at that point, screw
which at that point, screw
you. We're good.
you. We're good.
We're
We're
absolutely good
here. Oh, and I can actually wait. PI
here. Oh, and I can actually wait. PI
long
check pie long as long. Oh, I can even
check pie long as long. Oh, I can even
do
He is uh defined already.
Perfect. So now we don't have any any
Perfect. So now we don't have any any
possible
possible
errors. Now this is a perfectly safe
errors. Now this is a perfectly safe
unpack function.
better. That's beautiful.
Perfect. I'm very very proud of that.
Perfect. I'm very very proud of that.
You know, it's like these very small
You know, it's like these very small
things where it's you have to actually
things where it's you have to actually
spend a few hours to get these really
spend a few hours to get these really
really right. But now look at this. I
really right. But now look at this. I
mean, look at the result of
mean, look at the result of
this. This is how easy it is to bind
this. This is how easy it is to bind
environments. Now, this is how easy it
is. Let's do this now for uh for Pong
is. Let's do this now for uh for Pong
and for Breakout and um yeah, we'll go
and for Breakout and um yeah, we'll go
from there.
Look at this. This is what we had for
Look at this. This is what we had for
Paul.
Paul.
Disgusting by comparison.
Width, height, paddle width, paddle
Width, height, paddle width, paddle
height, ball width, ball height, speed,
height, ball width, ball height, speed,
initial
initial
speeds, X,
Y, skip, and continuous.
Perfect. Was there a
Perfect. Was there a
function. There is an init function on
function. There is an init function on
Pong,
Pong,
right? So, we just do that.
This is
This is
like I'm very very proud of
this comparison between pointer and
this comparison between pointer and
integer. That is bad.
But uh yeah this that is very bad. So we
But uh yeah this that is very bad. So we
will fix
that. Pi long as long
This is supposed to be long.
Let's see if it's still
trans. Look at
this. That's all we have for the
binding. That is solid.
Honestly, in my mind, this makes puffer
Honestly, in my mind, this makes puffer
lib so much
lib so much
better. This is just like effortless C
better. This is just like effortless C
to Python for all your
to Python for all your
M's, right?
There's no in it on this. Yes, there is
There's no in it on this. Yes, there is
no on
this
this
height paddle with paddle height ball
height paddle with paddle height ball
with width ball height brick width kite
with width ball height brick width kite
rows columns and continuous That's
rows columns and continuous That's
perfect.
And you'll actually even if you screw
And you'll actually even if you screw
up, you'll still get pretty much
up, you'll still get pretty much
anything that you could conceivably
anything that you could conceivably
screw up
screw up
here. You will get a a reasonable error
here. You will get a a reasonable error
message. Good at the very least. And
message. Good at the very least. And
this is bet, so we don't worry about
this is bet, so we don't worry about
that.
One line
per this
per this
is huge
is huge
success. Huge success.
Yeah, that's
solid. That's very solid.
I'm feeling pretty good. I want to keep
I'm feeling pretty good. I want to keep
going on stuff. I think we take on
going on stuff. I think we take on
um Let's see. So, ah, wait. We didn't do
um Let's see. So, ah, wait. We didn't do
we didn't think about struck blogging at
all. To be fair, that one I don't know
all. To be fair, that one I don't know
if we have any way
around. Okay, I'll think what I'll do
around. Okay, I'll think what I'll do
here is I'll think about this for a few
here is I'll think about this for a few
minutes. Then I'll take a few minute
minutes. Then I'll take a few minute
break and then I'll come back and we'll
break and then I'll come back and we'll
do um infra other infra. I don't know
do um infra other infra. I don't know
about this logging stuff
though
though
like this is how simple we have logging
like this is how simple we have logging
right now. You just define your log keys
right now. You just define your log keys
and you define an enum with your values
and you define an enum with your values
and uh everything else is handled for
and uh everything else is handled for
you.
Oh, you know what? There is a way to do
Oh, you know what? There is a way to do
it,
right? There is totally a way to do it.
It'll be a little more work.
Okay, I think I know how we're going to
Okay, I think I know how we're going to
do this. It's actually we're going to
do this. It's actually we're going to
write something that looks very very
write something that looks very very
similar to what we just
wrote because basically all this does
wrote because basically all this does
it's the same problem that I just solved
it's the same problem that I just solved
right all we basically need is we need a
right all we basically need is we need a
way to map um it's it's the inverse of
way to map um it's it's the inverse of
the problem though right so we just need
the problem though right so we just need
a way to grab an element from a a crruct
a way to grab an element from a a crruct
and then assign the result of that uh
and then assign the result of that uh
to a Python dict. So all we'll do is
to a Python dict. So all we'll do is
we'll just make like a my logger or
we'll just make like a my logger or
whatever and then you won't have to do
whatever and then you won't have to do
this in this file. Yeah. Okay, that'll
this in this file. Yeah. Okay, that'll
be perfect. That will be actually
be perfect. That will be actually
perfect. But that is going to take me a
perfect. But that is going to take me a
little bit of work. And I need to I've
little bit of work. And I need to I've
been deving for a few hours. I need to
been deving for a few hours. I need to
go grab a drink. I need to walk around
go grab a drink. I need to walk around
for a couple minutes and then we'll be
for a couple minutes and then we'll be
back. The binding file will get slightly
back. The binding file will get slightly
longer. Um, but there's going to be a
longer. Um, but there's going to be a
trade-off, right? And the trade-off will
trade-off, right? And the trade-off will
be that the logging becomes exactly what
be that the logging becomes exactly what
you want it to be. So essentially, you
you want it to be. So essentially, you
will have the binding file still as easy
will have the binding file still as easy
as possible, no added complexity, just
as possible, no added complexity, just
you know, you write out this stuff
you know, you write out this stuff
there, zero added complexity to your
there, zero added complexity to your
actual end implementation, which is
actual end implementation, which is
crucial. Uh, and no like perf loss
crucial. Uh, and no like perf loss
either. So I'll be right back and then
either. So I'll be right back and then
we will do that. Give me a few
Okay, here's the
Okay, here's the
plan. I got a little over two
plan. I got a little over two
hours to totally fix the
hours to totally fix the
logging and have this clean end binding
logging and have this clean end binding
stuff set and done and done.
Then I can let Bet handle updating the
Then I can let Bet handle updating the
rest of the MS with it. This should make
rest of the MS with it. This should make
it very, very easy
though. Got a little bit of food real
though. Got a little bit of food real
quick. Now I am good for
quick. Now I am good for
uh good to get this done.
Okay. So, first
Okay. So, first
things
um let's go find the old login because
um let's go find the old login because
we need that
strruct. That's all it has in it.
episode length, episode
episode length, episode
return, score, and it
return, score, and it
has end. We can just make end float
has end. We can just make end float
because why
because why
not? Delete. Delete. Delete.
Bog
log. It's cleaner, right? So, we don't
log. It's cleaner, right? So, we don't
have to even do this weird thing that I
have to even do this weird thing that I
was planning on adding. I don't know why
was planning on adding. I don't know why
I thought that was a good idea. I was
I thought that was a good idea. I was
being stupid, I guess, because I didn't
being stupid, I guess, because I didn't
see the way to do it with uh this new
see the way to do it with uh this new
thing. Uh, and that should actually be
thing. Uh, and that should actually be
it for this end.
it for this end.
So, we add the log
strct and then everything else is just
strct and then everything else is just
gone. Right now, what we need to do
my
log.
log.
Okay, so this is going to get called
somewhere. Let me just see how I do the
somewhere. Let me just see how I do the
aggregation right
now. Yeah, that log, right?
I float from
double.
Convert set item string.
Um, okay. There is a slight issue here,
Um, okay. There is a slight issue here,
right? Iterating over the
keys. [ __ ] Did I not think this
keys. [ __ ] Did I not think this
through?
I forgot there's a second part to this,
I forgot there's a second part to this,
right? So for part
right? So for part
one, you have to uh average all the
one, you have to uh average all the
dictionaries or average all the
dictionaries or average all the
strs and then part
strs and then part
two is that you have to add them to a
two is that you have to add them to a
dictionary.
dictionary.
We don't want to go through the pi dict
We don't want to go through the pi dict
API and then average. That'll be
slower. Yeah. So having those keys
slower. Yeah. So having those keys
defined before, what did that do for me?
Oh
jeez. I know a really stupid way to do
it. I do know a really stupid way to do
it. I do know a really stupid way to do
it.
Well, we don't have to do it
Well, we don't have to do it
here.
here.
Nice. But we do have to
Nice. But we do have to
do we do have to do it here.
I think this is actually right.
There's no other way to iterate through
There's no other way to iterate through
the keys of a str
I know how to do this a little more
I know how to do this a little more
safely.
This should be float
n pi float from double.
Okay. And now this is where you actually
Okay. And now this is where you actually
need your custom logic, right?
There's no way around custom logic here
There's no way around custom logic here
because you need to know the
keys. But you actually don't need to do
keys. But you actually don't need to do
this gross thing anymore.
So here you can do what is it? My
logic aggregate
And then you do have to go over
And then you do have to go over
the the uh the keys. You have to do this
the the uh the keys. You have to do this
[ __ ] one more
[ __ ] one more
time in order to do the
division. Uh you don't need to do this
division. Uh you don't need to do this
part though. You only need this
part. Key
is there. That's
it. And then this is
user
user
picked and then all you need to do is
picked and then all you need to do is
this function, right?
idict under the
idict under the
log, right? And then you just
do Okay, that is actually kind of
do Okay, that is actually kind of
annoying that you need to do this task.
annoying that you need to do this task.
So what we'll do
is we'll do something like
this. We'll just do
Yeah. So this is
Yeah. So this is
it. So you have some like assigned to
it. So you have some like assigned to
dict
function. I actually want it the other
function. I actually want it the other
way.
they do key and then
value. Yeah, I guess that makes sense.
And then I can do the
assignment. I can do this
assignment. I can do this
assignment. This is no longer
assignment. This is no longer
needed. There's this
needed. There's this
average. This is no longer needed.
Is there anything we can
Is there anything we can
do about this aggregate
do about this aggregate
differently? You know, I think you just
differently? You know, I think you just
need a required key, right?
need a required key, right?
It doesn't have to be in any specific
It doesn't have to be in any specific
order, but I think you do need to have a
order, but I think you do need to have a
required key in their end
somewhere. Technically, you can do it
somewhere. Technically, you can do it
right here, though.
Right. You can literally just do
this. No, you can't do that, right?
No, because you need the total
No, because you need the total
n. Yeah. So, you do need to do it the
n. Yeah. So, you do need to do it the
way I had it. Okay. This is still nice
way I had it. Okay. This is still nice
and
and
clean. This is still nice and clean.
Let's see if it
works and then we will uh we'll consider
works and then we will uh we'll consider
whether this is the best it could
whether this is the best it could
possibly
be. Request for
be. Request for
member N.
does have an
does have an
N implicit
declaration my log.
We have to for
declare incompatible pointer
type PI object
dict and then aggregate as a log
star object.
pi dict
pi dict
object. Is pi dict object a
thing? Let me go look how I have this on
thing? Let me go look how I have this on
dev right now.
because something happened with the
because something happened with the
types. I like I must have messed
types. I like I must have messed
something
up. Okay. So, where do you do this
up. Okay. So, where do you do this
logging right now?
logging right now?
Here. Pi dict
new. Yeah. Okay. So, this I don't know
new. Yeah. Okay. So, this I don't know
what this pi dict object thing is. I
what this pi dict object thing is. I
don't know if this even exists, but uh
don't know if this even exists, but uh
whatever it is, you don't need
whatever it is, you don't need
it. So, this is just a pi object star.
Incompatible pointer type pi
object. Oh, I know what it is. Support
object. Oh, I know what it is. Support
declaration's
declaration's
wrong. My
bad. Pi object and log.
So now we have assigned to
dict. This one's easy. This is just this
dict. This one's easy. This is just this
needs to go up one
function. Pi dict
object incompatible pointer
object incompatible pointer
type. This is supposed to
type. This is supposed to
be wait expected pi object but is pi
be wait expected pi object but is pi
dict
object pi dict set item. Oh, because
object pi dict set item. Oh, because
this is
this is
again the Python API is kind of
again the Python API is kind of
weird. Like it seems like it's not just
weird. Like it seems like it's not just
Python rubbing up against C and having
Python rubbing up against C and having
friction. It seems like just the API
friction. It seems like just the API
wasn't like it could be better.
Okay. Now request for a member and not
Okay. Now request for a member and not
instruct or
union. Um it should be there though
union. Um it should be there though
because
because
This log exists,
right? This log
exists originally defined. Yeah, it's
exists originally defined. Yeah, it's
getting the right
getting the right
log. Oh, wait.
Redefinition in
Redefinition in
binding
C.
Oh, request for member and in something
Oh, request for member and in something
not a structure or union.
I probably just screwed up the type
I probably just screwed up the type
somewhere, right? Because it used to be
somewhere, right? Because it used to be
a
float. Oh, is it just straight up not
float. Oh, is it just straight up not
anywhere?
Yeah, this is just supposed to
Yeah, this is just supposed to
be aggregate
n. Yeah.
n. Yeah.
Invalid type argument of
log assigned to
dict. This is
dot. And
dot. And
now you just have to fiddle with
now you just have to fiddle with
this cast.
Unknown type
Unknown type
log and
binding.h. It should be known.
unknown type name
unknown type name
log mbfinding.h But I already included
log mbfinding.h But I already included
pong which exports this
log, right? I have this log right here.
Yeah, this should definitely be
Yeah, this should definitely be
available.
It's not because of the type depth,
It's not because of the type depth,
right? No, that doesn't make any
right? No, that doesn't make any
sense because I have
N. I mean, that shouldn't do anything.
Good. Is there like some name conflict
Good. Is there like some name conflict
or
or
something? But then it wouldn't be
um it wouldn't
um it wouldn't
be Yeah, it wouldn't be here.
This is going to be something really
This is going to be something really
dumb, isn't
it? I'm using N
here. Pong's included at the
here. Pong's included at the
top. Is this like some bizarro caching
top. Is this like some bizarro caching
thing?
Doesn't look like
Doesn't look like
it. Unknown type
name. What if I go like redefine it?
What happens if I do
What happens if I do
this redefinition of str
block? Oh, you know what it is.
Uh, what's the type syntax?
Probably this
right
unknown. I figured it would be the log
unknown. I figured it would be the log
being weird.
Yeah, that's not it.
patient rock because I'm probably just
patient rock because I'm probably just
being that Stupid.
This is already defined.
It still
It still
happens.
Um, this is
Um, this is
weird. This is really weird.
includes pong which has the log
includes pong which has the log
death and like if I try to do
death and like if I try to do
str log
Oh, unknown type.
How is this possibly unknown type name?
Okay. So now it shuts up at
Okay. So now it shuts up at
least. Do we think that like Python or
least. Do we think that like Python or
NumPy have a log in
them? Is that what's going on?
But that's not what we're
getting. Right. We're not getting that.
It says unknown type
name. If I just change this to
It's not going to compile for other
It's not going to compile for other
reasons,
reasons,
right? No, we get the same
right? No, we get the same
error. We get the exact same
error. We get the exact same
error. Not a name conflict.
I'm staring at this thing and Pong gets
I'm staring at this thing and Pong gets
included before the end binding.
What are you
What are you
defining? M to um because it needs it's
defining? M to um because it needs it's
just an
just an
alias. Otherwise, you would have to name
alias. Otherwise, you would have to name
all of your environment strcts.
M. I have this
M. I have this
like I don't know why the hell it can't
like I don't know why the hell it can't
find this truck. This is driving me
nuts. Log is defined in pong.h And it
nuts. Log is defined in pong.h And it
gets used here.
So if I do it here, it's still not
there. If I put it
there. If I put it
here, still not
here, still not
there. If I put it here, still not
there. If I put it here, still not
there.
So if I put it in this
So if I put it in this
file now, I no longer get the error at
file now, I no longer get the error at
the
top. It's literally a matter of what
top. It's literally a matter of what
file I I put it
file I I put it
in. That's not how C works. Like what
in. That's not how C works. Like what
the
[ __ ] Yeah. Now you get the error again.
Is there a way I can get it to output
Is there a way I can get it to output
the pre-process code? Uh, wait, that's
the pre-process code? Uh, wait, that's
going to be gigantic. Are you just
going to be gigantic. Are you just
compiling Pong and finding not having
compiling Pong and finding not having
guards and being included in Pong and
Breakout? They're being built as
Breakout? They're being built as
separate extensions. So, that would be
separate extensions. So, that would be
really [ __ ]
really [ __ ]
But I will go look at
that. Oh, for [ __ ] sake.
Oh, I'm dumb. Oh, I'm just really dumb.
Oh, I'm dumb. Oh, I'm just really dumb.
Okay, that wasn't it. No, you got you
Okay, that wasn't it. No, you got you
gave me the answer, but that wasn't
it. So,
it. So,
um yeah, this is it's fine. It's not the
um yeah, this is it's fine. It's not the
prog. It's
prog. It's
I was misreading the error message. I
I was misreading the error message. I
didn't see that it's in breakout. I
didn't see that it's in breakout. I
thought that it was in
thought that it was in
palm. Okay, it's fine.
Yeah, 31 should not happen. So, there's
Yeah, 31 should not happen. So, there's
a
bug. Yeah, there's a big bug with
this. It's funny. It does
this. It's funny. It does
actually. What in the
actually. What in the
hell? All right, let's figure out what
hell? All right, let's figure out what
the heck that is.
It's got to be this thing here,
right? Structures defined just fine.
How did this get so messed
up? There's some crazy negative
Is it because you populate your
Is it because you populate your
dictionary before
dictionary before
averaging? Well, I populate it and then
averaging? Well, I populate it and then
I average
here. Yes. Yes, it
here. Yes. Yes, it
is. Though I don't know why that makes
is. Though I don't know why that makes
it able to go negative.
Welcome,
Spencer. This is very, very close to
Spencer. This is very, very close to
just being awesome. Awesome. Solid
intro. Oh, it can go negative because
intro. Oh, it can go negative because
the score function goes negative. Duh.
So the only thing is that uh n should
So the only thing is that uh n should
not be
not be
this. We need n to be
this. We need n to be
correct. Go to
correct. Go to
n. We just assign n like
this. We don't want to average our
this. We don't want to average our
averaging variable.
Okay. Why is N still one? Oh, there we
go. Now it's just because the games are
go. Now it's just because the games are
kind of long.
kind of long.
Cool. This works. This works.
It's supposed to get 20 score though.
It's supposed to get 20 score though.
Maybe that was just a little
Maybe that was just a little
unlucky. Let's run it
unlucky. Let's run it
again. So,
again. So,
um I I want to make sure that this
um I I want to make sure that this
actually works. But let me show off what
actually works. But let me show off what
what we've just done
here.
here.
Okay, here's your binding function.
Okay, here's your binding function.
You write your init, you write your
You write your init, you write your
log. Pretty much you just need to map
log. Pretty much you just need to map
the
keys. Yeah. Okay. Perfect. So this does
keys. Yeah. Okay. Perfect. So this does
work.
So this is your whole binding and
So this is your whole binding and
actually the logging gets to be even
actually the logging gets to be even
better. So the logging now can use a
better. So the logging now can use a
strruct again. You can use a strruct for
strruct again. You can use a strruct for
the log. You don't have any of those
the log. You don't have any of those
additional
additional
functions. You just write to the log as
functions. You just write to the log as
normal. So this is even better than
normal. So this is even better than
before. You just have to write that
before. You just have to write that
extra log
extra log
function which in exchange you no longer
function which in exchange you no longer
have to define all the log keys.
So 30 line file. This is your entire
So 30 line file. This is your entire
binding. We are very happy.
Let's fix
breakout. So you get your log, you get
breakout. So you get your log, you get
rid of these keys that you had to
rid of these keys that you had to
define. You no longer have this. You
define. You no longer have this. You
just have log log.
And then end of episode lengths
And then end of episode lengths
for there you go. That's it.
almost works. We just need to define the
almost works. We just need to define the
log thing obviously.
We could technically have a default
We could technically have a default
implementation as well. I don't know if
implementation as well. I don't know if
that's worth
that's worth
doing. We could technically leave a
doing. We could technically leave a
default implementation in if we wanted
default implementation in if we wanted
to. So like this could be the default
to. So like this could be the default
implementation, right?
because this is the same function here.
Okay.
Okay.
Perfect. Now, neural MMO I kind of
Perfect. Now, neural MMO I kind of
messed up a whole bunch.
We have this giant
log. Yeah. So, we have to actually go
log. Yeah. So, we have to actually go
get this thing back now.
I don't know. I personally I think I'd
I don't know. I personally I think I'd
rather have this thing in here than all
rather have this thing in here than all
this
this
mess. You still need was episode return,
mess. You still need was episode return,
episode
episode
length,
score, and end.
The order no longer matters.
not
not
mandatory, but um I would like all our
mandatory, but um I would like all our
MS to have these because like when you
MS to have these because like when you
go to actually compare experiments in
go to actually compare experiments in
your dashboard, it's really convenient
your dashboard, it's really convenient
to have them under the same key. In
to have them under the same key. In
fact, you know, the most useful thing
fact, you know, the most useful thing
would be is if we had episode return be
would be is if we had episode return be
the return, which is the sum of the
the return, which is the sum of the
score. Episode length is length just the
score. Episode length is length just the
trajectory length but then score instead
trajectory length but then score instead
of having score just equal episode
of having score just equal episode
return most of the time or whatever.
return most of the time or whatever.
Ideally we have score be normalized zero
Ideally we have score be normalized zero
to one something like that so that we
to one something like that so that we
can actually put a whole bunch of M's on
can actually put a whole bunch of M's on
one graph and we can get like an average
one graph and we can get like an average
score across M's. That would be the
score across M's. That would be the
best.
Then we could return like one number for
Then we could return like one number for
evals.
also still multi m training media with
also still multi m training media with
one
one
policy. Uh so that's a little harder
policy. Uh so that's a little harder
because you have varying observation
because you have varying observation
spaces. You would actually it's not
spaces. You would actually it's not
realistic to have all the M's have one
realistic to have all the M's have one
observation space. So you would probably
observation space. So you would probably
need some sort of like weird tokenizer
need some sort of like weird tokenizer
thing. That's the tough
thing. That's the tough
part with that.
And that's surprisingly all the logging.
use but never defined. All right, now we
use but never defined. All right, now we
just have to define our
binding. Look how clean this is going to
be. Right now we have this. All we got
be. Right now we have this. All we got
to do is we add our log in
to do is we add our log in
here. We just go get our log
keys which are just defined by the SC,
right? You don't need to do N. It's done
right? You don't need to do N. It's done
for you. You can do it. It won't hurt
for you. You can do it. It won't hurt
anything, but you don't need
to. And uh this is so easy even even
to. And uh this is so easy even even
Grock can fill it in. Or not even Grock,
Grock can fill it in. Or not even Grock,
Super Maven can even fill this in.
Super Maven can even fill this in.
That's it. That's your whole end
That's it. That's your whole end
binding. So, 44
binding. So, 44
lines and it's really just a name
lines and it's really just a name
mapping. Okay.
log has no
member.
member.
Oh, [ __ ] You did it in the wrong
file there.
Boom. Pretty cool.
Pretty cool.
This is
This is
solid. Okay. And squared just because
solid. Okay. And squared just because
squared should be super quick.
So this doesn't do anything,
right? So you can just do return
zero. Oh, no wait. It does do something.
zero. Oh, no wait. It does do something.
It sets the end size.
doesn't have an init function
doesn't have an init function
though. And then
though. And then
log is going to be return length and
log is going to be return length and
score probably or does it not have any
logging? I think square doesn't actually
logging? I think square doesn't actually
have logging.
Oh no, it
does. Why did it just give me an int
does. Why did it just give me an int
there?
No idea. Must have been auto
No idea. Must have been auto
complete cuz that would screw you over
complete cuz that would screw you over
pretty
There you
go. That's how it was before, right?
go. That's how it was before, right?
Yeah. Exactly how it was
before. All right. So now this goes
before. All right. So now this goes
unpack does this
unpack does this
default and all this stuff can go.
Then the only thing is I need to change
Then the only thing is I need to change
some names.
Just have to take this out of the
siphon.
Beautiful. This one has bad hypers on
Beautiful. This one has bad hypers on
it, but it should still
run. This is back in it.
What did I miss?
What did I miss?
Seed. Seed.
Oh,
runs. Great. So, we now have uh all this
runs. Great. So, we now have uh all this
all set
all set
up. Easy as that.
So that actually should take a lot more
So that actually should take a lot more
than like two or three thousand lines
than like two or three thousand lines
out of the codebase. Now with the
out of the codebase. Now with the
logging changes, that's going to take
logging changes, that's going to take
like four or 5,000 lines out of the
like four or 5,000 lines out of the
codebase. That's great.
Not
really. You would save
um you would save very little by doing
um you would save very little by doing
that.
That's pretty solid.
You can even name them whatever you want
You can even name them whatever you want
like this as well. They don't have the
like this as well. They don't have the
same name. You can have like you can
same name. You can have like you can
name these differently if you want.
name these differently if you want.
You could probably even put like slash
You could probably even put like slash
and stuff in if you want to have like
and stuff in if you want to have like
extended paths for logging. You can
extended paths for logging. You can
probably just do
probably just do
that. This is nice. I'm
that. This is nice. I'm
happy. And at the very least, you know,
happy. And at the very least, you know,
we really won't have to change anything
we really won't have to change anything
now. Like with the main M now that it
now. Like with the main M now that it
works like
works like
this, pretty pretty solid.
I'll like I'll at least consider the
I'll like I'll at least consider the
macro thing for a
macro thing for a
second, but it seems like it's probably
second, but it seems like it's probably
pretty stupid, right?
Like what you would do like some unpack
Like what you would do like some unpack
all with all the
keys. That's kind of sketchy magic
keys. That's kind of sketchy magic
though, right?
though, right?
because then you would like you'd
because then you would like you'd
basically be doing a string replacement
basically be doing a string replacement
on this where you're like assigning each
attribute. That seems sketchy to
me. I kind of like the way I have it now
me. I kind of like the way I have it now
where provided you're not counting like
where provided you're not counting like
this alias, there aren't any macros at
this alias, there aren't any macros at
all in here.
This is this is the one I think this is
This is this is the one I think this is
still really easy. This code is so brain
still really easy. This code is so brain
dead it'll like autocomplete itself for
dead it'll like autocomplete itself for
you, right?
And if you actually go look at this,
And if you actually go look at this,
like the source of this doesn't have any
like the source of this doesn't have any
stupid ridiculous magic
either. So I think that we
either. So I think that we
uh you know we allow you to have to have
uh you know we allow you to have to have
a line per one line per uh variable and
a line per one line per uh variable and
in exchange it stays very very
in exchange it stays very very
simple. This is the entire dict
simple. This is the entire dict
assignment thing. It's just, you know,
assignment thing. It's just, you know,
convenience. And then the entire um
convenience. And then the entire um
where is it?
Unpack. Is it
in there? It is. There's the entire
in there? It is. There's the entire
unpack. I think we are happy with
unpack. I think we are happy with
this. Yeah, this is good.
I will let Bet work on the rest of
I will let Bet work on the rest of
these.
Did they really lie in the tweet
Did they really lie in the tweet
announcement for this? Are you kidding
announcement for this? Are you kidding
me?
How much [ __ ] do I want to start?
This is way before Dreamer, isn't it?
I guess they assume without the task
curriculum it is fair to say that it
curriculum it is fair to say that it
like without the task
like without the task
curriculum but it's not without human I
curriculum but it's not without human I
mean it depends if you consider Consider
mean it depends if you consider Consider
tasks as human data.
Yeah, these techniques didn't work at
all. It's
crazy. Man, I don't
know. It sucks cuz it's like this guy
know. It sucks cuz it's like this guy
put out a whole bunch of work and I
put out a whole bunch of work and I
really wanted to like the work, but when
really wanted to like the work, but when
you dig into it, it just it's all fake.
you dig into it, it just it's all fake.
It's like all [ __ ] Like crafter was
It's like all [ __ ] Like crafter was
originally put together as like this
originally put together as like this
multitask cool environment that's like
multitask cool environment that's like
fast and useful. It's unusably slow.
fast and useful. It's unusably slow.
Done more damage to the field than it's
Done more damage to the field than it's
like done help just because of people
like done help just because of people
training on slow ass environments.
training on slow ass environments.
Ridiculous. Yes.
Okay, on to things that
matter. It's
matter. It's
4:30. I've got maybe a good hour to
4:30. I've got maybe a good hour to
start on some training improvements.
It seems like we should be able to get
It seems like we should be able to get
some like some PF out of
some like some PF out of
compile and
AM. Let me go look at the Lenar
AM. Let me go look at the Lenar
Cudigraph thing again.
How been out of the loop for a bit? What
How been out of the loop for a bit? What
are you all doing currently? Well, we've
are you all doing currently? Well, we've
just cleaned up our binding system a
just cleaned up our binding system a
whole bunch. This is now all it takes to
whole bunch. This is now all it takes to
bind neural MMO 3 to Puffer Live. No
bind neural MMO 3 to Puffer Live. No
Syon. Little bit higher PF transparent
Syon. Little bit higher PF transparent
debugging. It's very
debugging. It's very
nice. So, this is going to cut like
nice. So, this is going to cut like
4,000 lines of boiler plate out of the
4,000 lines of boiler plate out of the
repository.
repository.
We got the 5090 up and running and now
We got the 5090 up and running and now
I'm probably going to look at a little
I'm probably going to look at a little
bit of port compile stuff and see if I
bit of port compile stuff and see if I
can get some perf
improvements. Welcome as well.
So you have to like
replay you have to like trace it
replay you have to like trace it
essentially.
Did they do LSTM or
Did they do LSTM or
not? I don't think they even did LSTMs
not? I don't think they even did LSTMs
with this, did
they? No, they
they? No, they
didn't. Okay, so that's a big
didn't. Okay, so that's a big
limitation.
Let me see there.
Benchmark compile plus cudigraph.
You know, it's
You know, it's
like this probably does actually make a
like this probably does actually make a
decent
difference. They're using a tiny tiny
difference. They're using a tiny tiny
batch size though,
batch size though,
right? But
still, well, they get
still, well, they get
6.8% 6.8x 8x speed
up compile and
photographs is slower.
So I mean I can get
um Zbuff equals
function. I probably can get this to
function. I probably can get this to
work. What did they do? They like they
work. What did they do? They like they
made their own weird way to do this.
Yeah, they did like some weird rapper
Yeah, they did like some weird rapper
thing for
this. X buffer, Y buffer.
Okay, this seems reasonable. So, we just
Okay, this seems reasonable. So, we just
have to fix uh we have to fix compile
have to fix uh we have to fix compile
mode and then we will start on this a
mode and then we will start on this a
little bit and then we will continue
little bit and then we will continue
this probably
tomorrow. That'll be the plan.
How does this
run? Oh, maybe this is a torch version
run? Oh, maybe this is a torch version
thing, right? Because this does
compile. Yeah, this has an RN on it.
compile. Yeah, this has an RN on it.
Okay. Yeah. So then the reason this
Okay. Yeah. So then the reason this
wasn't working in the other on the other
wasn't working in the other on the other
machine, it must just be a torch version
machine, it must just be a torch version
thing. So I don't even have to fix
thing. So I don't even have to fix
compile. Compile just
works. And then uh pseudographs might be
works. And then uh pseudographs might be
the tough one.
Right.
can you explain what you did to get rid
can you explain what you did to get rid
of the boiler plate so
simply? So, we have this file. It's 500
simply? So, we have this file. It's 500
line file, but this is all that's needed
line file, but this is all that's needed
for all environments.
for all environments.
And you can add as many as you want
And you can add as many as you want
without changing this. And there's some
without changing this. And there's some
redundancy. This can probably go down to
redundancy. This can probably go down to
350 lines if I clean some stuff up. Um,
350 lines if I clean some stuff up. Um,
so what this file does, this just uses
so what this file does, this just uses
the Python C
the Python C
API. And it essentially does what the
API. And it essentially does what the
Syon file does, but it just does it in C
Syon file does, but it just does it in C
with the Python API. So like instantiate
with the Python API. So like instantiate
all your M's, right? Using a slice of
all your M's, right? Using a slice of
the observations, it does that. Step all
the observations, it does that. Step all
your M's running the loop in C. It does
your M's running the loop in C. It does
that.
And then the other file that you saw was
And then the other file that you saw was
just it leads you placeholders for where
just it leads you placeholders for where
you need to do your MS specific
you need to do your MS specific
initialization like passing arguments to
initialization like passing arguments to
C and then your MS specific logging
C and then your MS specific logging
passing the logs back out as a
passing the logs back out as a
dictionary. So this file is in dev. You
dictionary. So this file is in dev. You
can see a lot of it is just this error
can see a lot of it is just this error
checking and then the actual logic of it
checking and then the actual logic of it
is stuff like this. you know,
is stuff like this. you know,
vectorized reset, vectorzed step, so on
vectorized reset, vectorzed step, so on
and so forth. And then the logging is
and so forth. And then the logging is
what I was working on
what I was working on
here. So, Python C API is kind of gross,
here. So, Python C API is kind of gross,
but I made it as simple as I could. And
but I made it as simple as I could. And
it can probably get even a little bit
it can probably get even a little bit
shorter than this.
is Syon dead for Puffer's use. I mean,
is Syon dead for Puffer's use. I mean,
if you want to use it, you still can,
if you want to use it, you still can,
but I think this is better.
So like the 40 lines that we wrote for
So like the 40 lines that we wrote for
neural MMO replaces 300 lines.
some DMs answering.
Um, I'm trying to think what's the
Um, I'm trying to think what's the
easiest way to integrate photographs
easiest way to integrate photographs
with this thing.
This one actually would be a decent test
This one actually would be a decent test
because it's 42% in forward pass.
replay you
replay you
play. The problem is the OBS is not like
play. The problem is the OBS is not like
the same buffer, right?
So, I kind of have to restructure a few
So, I kind of have to restructure a few
things.
And then you actually need to use like
And then you actually need to use like
the
the
exact Scott
OBS. And these things all have to be
OBS. And these things all have to be
CUDA tensors, don't they?
I wonder if I can do this.
Can you even pass it
arcs? No, you can't pass it arcs.
This is kind of stupid the way this is,
This is kind of stupid the way this is,
isn't it?
Let's do it for now so we can at least
Let's do it for now so we can at least
see if it's worth it.
Could not be batch size though.
All right. So, here we
All right. So, here we
do we'll just do this, right?
Yeah, I have no idea if this works.
Yeah, I have no idea if this works.
We'll have to
see. Existing
size. The hell's wrong with this thing?
Oh, I'm done. Okay.
I thought, oh, this is the single one.
Actually, what we can just do is we can
Actually, what we can just do is we can
keep this as
keep this as
is. It probably only gets used there,
is. It probably only gets used there,
right?
right?
Yeah. So, I can just make this
Yeah. So, I can just make this
observation space
shape. All right. I can just do this.
And then I can do is
it. So this is now literally
it. So this is now literally
just super
just super
easy. Uh, bath agents equals OB shape
zero. This
zero. This
is agent.
[Music]
accessing
tensor output of
cudigraph that has been overwritten by a
cudigraph that has been overwritten by a
subsequent
clone the tensor before each model
clone the tensor before each model
invocation.
sing that is overwritten by a subsequent
run. That doesn't make any sense. You're
run. That doesn't make any sense. You're
accessing something that you're going to
accessing something that you're going to
overwrite in the future.
I mean, I can like here. Let's just like
I mean, I can like here. Let's just like
really
really
see what we can do
see what we can do
here. Let's see if I can at least get it
here. Let's see if I can at least get it
to work and then we'll think about
to work and then we'll think about
making it fast.
or was it saying that you're not allowed
or was it saying that you're not allowed
to write back to the
to write back to the
same the same variable? Is that it?
Is this
it? Oh, probably steak gets overwritten,
it? Oh, probably steak gets overwritten,
right?
Cannot
Cannot
call current
call current
seed the
hell. Okay.
This is so freaking
weird. It doesn't even get to the
weird. It doesn't even get to the
It doesn't even get
here. It's in the trace.
That looks
wrong. Oh, it's not. Oh.
Cool blast status not
Cool blast status not
initialized. The heck?
running out of
memory. Shouldn't be
You need to have compile
on. Unsupported generator.
I think I'm really going to need to
I think I'm really going to need to
like fix this
like fix this
thing, you know?
this whole mess.
LV O and state Okay.
The hell's wrong with this
thing? Oh.
Damn it.
cannot call CUDA generator impul.
Why the hell is it calling
random the torch? Like the torch
random the torch? Like the torch
internals kind of suck.
Are you supposed to be able to use this
Are you supposed to be able to use this
without torch
compile? Yeah. So you are supposed to
compile? Yeah. So you are supposed to
use it with compile I
guess. So then this is the real error.
We don't have freaking dropout.
Maybe it's the LSTM
No.
Nope. Same freaking error.
This has not been changed, right? Like
This has not been changed, right? Like
you can't just enable
this. So confused.
Oh, yep.
2.5 CUDA graph or compile but not both.
So, I should be able to do it like this.
freaking thing.
You have to do
this and maybe I was not
this and maybe I was not
um given the full story here.
I guess it's
this. This is 5:30.
I'm probably going to have to go like
I'm probably going to have to go like
test this stuff in isolation if I really
test this stuff in isolation if I really
want this to get working. So, this is
want this to get working. So, this is
probably going to be a tomorrow
probably going to be a tomorrow
problem. We got really good progress on
problem. We got really good progress on
the binding stuff
the binding stuff
today. Maybe I'll start it later tonight
today. Maybe I'll start it later tonight
even. Um, yeah, I think that
even. Um, yeah, I think that
like the CUDA craft stuff is quite quite
like the CUDA craft stuff is quite quite
complicated.
I believe that this is like a possible
I believe that this is like a possible
big perf improvement
though. So, we will try
though. So, we will try
that. Yeah, it'll it'll be worth
that. Yeah, it'll it'll be worth
spending some time.
spending some time.
It's hard for me to say because
It's hard for me to say because
like you can do kind of anything with
like you can do kind of anything with
really shitty code and make it faster or
really shitty code and make it faster or
really poorly optimized code I should
really poorly optimized code I should
say. Clean R is awesome. It's just slow.
Um so yeah, it's
Um so yeah, it's
probably probably still worth doing.
Let me just at least start writing a
Let me just at least start writing a
little little tiny test for this,
little little tiny test for this,
right? Because it shouldn't be that that
right? Because it shouldn't be that that
hard.
this. So, some weird [ __ ] happening with
this. So, some weird [ __ ] happening with
compile. Ignore this.
[ __ ]
two devices.
Okay, so this is still
failing. See the grass.
warm up the
workload. This is insane, but okay.
Now it
Now it
works. Okay.
Does this mess it up?
Oh, I
Oh, I
see. So, you got to do this, right?
Okay, that's a very large
difference. Is a very large
difference. Is a very large
difference. And this should be like
difference. And this should be like
decent batch as well, right?
No, it's not very decent batch size. Why
No, it's not very decent batch size. Why
the hell is the batch that small?
Oh, you dummy.
Oh, and of
course I should redo that. That's like
course I should redo that. That's like
obnoxious.
If I can't figure out my own API, what
If I can't figure out my own API, what
the [ __ ] am I doing?
What in the
hell? Yeah, this is actually just me
hell? Yeah, this is actually just me
getting
tired there.
Still a big difference
though. That's
interesting. That's very
interesting. That's very
interesting. It's still almost 3x. What
interesting. It's still almost 3x. What
if I do like neural MMO?
out of memory.
Okay, that's a reasonable ops, right?
Oh, you know what this is? You didn't do
Oh, you know what this is? You didn't do
No, Brad.
Ah, now the advantage goes
Ah, now the advantage goes
away with the bigger
model. It
model. It
seems if you do like one
end, still goes away.
Okay, let's go back to the other one.
Okay. So the
Okay. So the
uh advantage has gone away
uh advantage has gone away
without without no
without without no
grad. I mean with uh with with no grad
grad. I mean with uh with with no grad
the advantage is mostly gone
the advantage is mostly gone
away unless you do
um yeah then you see the advantage
right now now you see the advantage
Yeah. So this is the one you cannot
do. So you get uh you only really get
do. So you get uh you only really get
this performance boost if you have
this performance boost if you have
stupid stupid dimensions.
You don't really get much even with the
You don't really get much even with the
smallest network once you have a
smallest network once you have a
reasonable batch
size. I mean I guess like sometimes you
size. I mean I guess like sometimes you
end up with stuff like this,
end up with stuff like this,
right? So that's still like something.
What about with
compile? Is there a way to get it to
compile? Is there a way to get it to
work with
work with
compile? Let's see if there was
Okay, so this just says use new torch or
Okay, so this just says use new torch or
whatever.
The hell? How is it that
slow? It's not the warm up, right?
Yeah, the compiled is just [ __ ] slow.
and it's slower than all of them.
How the hell is this possible that it's
How the hell is this possible that it's
just like
garbage? The only really does anything.
garbage? The only really does anything.
It's photographs.
Okay, we can try it on neural MMO.
I'm not doing something incredibly
I'm not doing something incredibly
stupid here,
right? Doesn't look like it.
Oh, maybe it's
this. I think it doesn't compile
this. I think it doesn't compile
anything but the forward function by
anything but the forward function by
default.
Nope. Still
[ __ ] Same as
before. Torch. Compile policy.
stupid lightning.
heck. We'll try it.
Nope. That looks way
Nope. That looks way
slower. Yep. Way slower.
Unless it's this. Hang on. Maybe I
Unless it's this. Hang on. Maybe I
screwed this
up. Possibly counts these as different
up. Possibly counts these as different
ops.
No, still
no slight difference.
[ __ ] compile,
[ __ ] compile,
man. Ridiculous.
was absolutely
ridiculous due to frequent
ridiculous due to frequent
recompiles. Well, why is it recompiling
recompiles. Well, why is it recompiling
then? Is it just
then? Is it just
trash?
trash?
Because like no combination of settings
Because like no combination of settings
does
anything. I set full
graph. No graph
breaks. Compile full graph. Yep.
Where is it?
I don't see how to fix this anywhere.
So you actually were getting compile
So you actually were getting compile
speed ups on impulse wars Four.
No graph breaks.
I'm surprised you got it to work. For
I'm surprised you got it to work. For
me, torch compile has never done
me, torch compile has never done
anything.
Try it with the smaller
model. Oh, lovely. Broke my
model. Oh, lovely. Broke my
driver. Good job, Torch.
Yeah, still slower.
Still
slower. Sameish speed actually.
Literally never gotten this thing to do
anything. Let me go update the model
anything. Let me go update the model
before I forget to and I'm
before I forget to and I'm
sad. So, as far as I can tell, compile
sad. So, as far as I can tell, compile
doesn't do
anything. Like, I've tried this on a
anything. Like, I've tried this on a
different networks and it just sucks.
different networks and it just sucks.
as far as I have seen.
All
All
right, I posted that on the Discord, so
right, I posted that on the Discord, so
you can try that. Um, I'm going to go
you can try that. Um, I'm going to go
get some exercise and get food. I'll see
get some exercise and get food. I'll see
if I can be back after. But, uh, yeah,
if I can be back after. But, uh, yeah,
compile doesn't freaking work.
compile doesn't freaking work.
Cudigraphs. Uh, it seems like it's not
Cudigraphs. Uh, it seems like it's not
really going to even do anything for us
really going to even do anything for us
is the thing because like I guess for
is the thing because like I guess for
very small batches I it could be nice.
very small batches I it could be nice.
Like it could let us do a few things.
Like it could let us do a few things.
It's really a pain in the ass to
It's really a pain in the ass to
implement though.
implement though.
And yeah, I think
And yeah, I think
1024 copies of the of an N with our
1024 copies of the of an N with our
smallest possible network uh is where it
smallest possible network uh is where it
has to be for that to make any
has to be for that to make any
sense. If I go to
2048, it's already less than a 10%
2048, it's already less than a 10%
difference. Oh, actually the compiled
difference. Oh, actually the compiled
SPS goes up then.
SPS goes up then.
That's
funny. Yay. The compile SPS goes
funny. Yay. The compile SPS goes
up. Ridiculous, man. It's ridiculous.
Now I've got to actually go check it.
Now I've got to actually go check it.
Stupid
thing. Is there like some off?
Are there any other nets I can
use? I could use snake moa.
I mean, it does actually do something on
I mean, it does actually do something on
the stupid pong
the stupid pong
network, right?
Barely. And you can't use both of them
Barely. And you can't use both of them
together for some reason.
Is this a version issue that I can't do
Is this a version issue that I can't do
this
on? I can't do this compiled.
This is a pretty new version of torch as
This is a pretty new version of torch as
well. It's not like super
old. But I got to do this later. I
old. But I got to do this later. I
really need to go get some exercise. So,
really need to go get some exercise. So,
we will call it there for the day.
we will call it there for the day.
Um, thanks for tuning in
Um, thanks for tuning in
folks. If you're interested in following
folks. If you're interested in following
my stuff, puffer.ai start the GitHub to
my stuff, puffer.ai start the GitHub to
help us out really helps. Join the
help us out really helps. Join the
Discord to get involved with dev and
Discord to get involved with dev and
follow me on X for more RL content. I'll
