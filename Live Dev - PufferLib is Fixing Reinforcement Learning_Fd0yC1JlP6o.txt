Kind: captions
Language: en
Good evening
folks. We are back for stream three of
folks. We are back for stream three of
today. Not a super good hours day
today. Not a super good hours day
honestly. Kind of burnt myself out in
honestly. Kind of burnt myself out in
the second session going over all this
the second session going over all this
crazy stuff with this
crazy stuff with this
algorithm. But um we are going to see if
algorithm. But um we are going to see if
it does anything.
a little
bit. The heck is this
thing? You need the ideas.
You refactored
tactical. I've actually really wanted
tactical. I've actually really wanted
that
that
unfinished. That one's a bit hard for
you. There's like a lot of like classic
you. There's like a lot of like classic
AI that you'd have to do.
It's based on the um like the MMO
It's based on the um like the MMO
Doofus. I've got like 3,000 hours in
Doofus. I've got like 3,000 hours in
that game growing up. Freaking awesome
that game growing up. Freaking awesome
game. The thing is it's still an awesome
game. The thing is it's still an awesome
game today. Like that and a Runescape
game today. Like that and a Runescape
are the two games that have ever been
are the two games that have ever been
like straight up heroin for me.
What happened to game studios? I don't
What happened to game studios? I don't
know,
know,
man. I can't think of like a
man. I can't think of like a
single modern game that I've really put
single modern game that I've really put
a lot of hours into. I guess Overwatch
a lot of hours into. I guess Overwatch
is like kind
is like kind
of, but like it's like I play that for
of, but like it's like I play that for
like a month or two
like a month or two
max. Yeah. Not even
close. Nobody makes
anymore. Good thing we have better
anymore. Good thing we have better
things to do. We have more productive
things to do. We have more productive
things to do. We probably don't have
things to do. We probably don't have
more fun things to do to be
honest. One of my best friends
honest. One of my best friends
um growing up like that I met on an MMO.
um growing up like that I met on an MMO.
I met him like over the summer cuz he
I met him like over the summer cuz he
turned out to be a he turned out to be a
turned out to be a he turned out to be a
software engineer as well and he's now
software engineer as well and he's now
at uh he's now at
at uh he's now at
Meta which is pretty cool.
MMOs. I don't know what it
MMOs. I don't know what it
is. It's
like a lot of it is the fact that it's
like a lot of it is the fact that it's
like a self-contained like big thing
like a self-contained like big thing
that you can like come up
that you can like come up
with approaches to. And I don't even
with approaches to. And I don't even
[ __ ] know. It's like it's more of a
[ __ ] know. It's like it's more of a
game than any other genre of game, I
game than any other genre of game, I
guess. I don't know.
Like every other game has like a
Like every other game has like a
gameplay loop, right? I think like an
gameplay loop, right? I think like an
MMO is the only thing that
MMO is the only thing that
has like a ton of gameplay loops and
has like a ton of gameplay loops and
just pick whatever gameplay loop you
just pick whatever gameplay loop you
figure that you feel like now and it all
figure that you feel like now and it all
somehow connects.
TTT output has no attribute squeeze.
TTT output has no attribute squeeze.
What in the
hell time
hell time
training we train and test and we test
training we train and test and we test
and
and
train. We are very smart.
Well, we're going to see whether it's a
Well, we're going to see whether it's a
meme, if it works or not.
I tried coding this thing myself and I
I tried coding this thing myself and I
just failed because the paper makes no
just failed because the paper makes no
bloody sense. What are you working on?
bloody sense. What are you working on?
So there's this
So there's this
paper. This is test time
paper. This is test time
training. It's an RNN where the hidden
training. It's an RNN where the hidden
state is a network that you train during
state is a network that you train during
the forward pass of the RNN.
the forward pass of the RNN.
It's really weird, but this was used in
It's really weird, but this was used in
Nvidia's like recent one minute video
Nvidia's like recent one minute video
generation
generation
paper.
paper.
Um, the thing is I read it and it looked
Um, the thing is I read it and it looked
like really really Yeah, I know it's
like really really Yeah, I know it's
crazy. Here it's roughly this. So
crazy. Here it's roughly this. So
like here's your layer and in the
like here's your layer and in the
forward path of the layer you go over
forward path of the layer you go over
all the tokens like of the sequence and
all the tokens like of the sequence and
for each token you train the state
for each token you train the state
Because the state is actually a model
Because the state is actually a model
that gets initialized in the forward
that gets initialized in the forward
pass. You take one gradient step per
pass. You take one gradient step per
token and then you use that model here
token and then you use that model here
that you just
that you just
trained. So you actually develop like
trained. So you actually develop like
you train the model over the course of
you train the model over the course of
the
sequence. So it's kind of an interesting
sequence. So it's kind of an interesting
idea, right?
idea, right?
Unfortunately, this code sucks and
Unfortunately, this code sucks and
doesn't remotely describe what it does
doesn't remotely describe what it does
correctly. This description about the
correctly. This description about the
batching and stuff is straight up wrong.
batching and stuff is straight up wrong.
Uh, all the math is incredibly confusing
Uh, all the math is incredibly confusing
and misleading. And their code base is
and misleading. And their code base is
confusing and misleading as hell as
well. So, it's just freaking confusing
well. So, it's just freaking confusing
on all fronts.
Can we call this on policy?
Can we call this on policy?
Sure. It's a free
Sure. It's a free
country. It is
country. It is
reproducible. Their code
reproducible. Their code
works. It's just everything is confusing
works. It's just everything is confusing
as
hell. It's kind of like the idea is
hell. It's kind of like the idea is
good. The execution is good. Even the
good. The execution is good. Even the
communication of it all just sucks.
How big is the RNN? As big as you want
How big is the RNN? As big as you want
it to be. 9.3 million is way too big for
it to be. 9.3 million is way too big for
a puffer. So, I don't know what's going
a puffer. So, I don't know what's going
on there.
Let's say this. So,
uh,
uh,
date ttt cache
date ttt cache
equals ttt cache
equals ttt cache
equal state.tt
equal state.tt
cache. Now we have to do
cache. Now we have to do
[Music]
training. I don't think we have to do
training. I don't think we have to do
any of that
there. So I think I can just
there. So I think I can just
do
do
state.ttach. We don't even need
it. Got to see what the last uh hidden
it. Got to see what the last uh hidden
state looks like.
state looks like.
This tensor has no attribute category.
This tensor has no attribute category.
Uhhuh.
This looks right to me.
Uh, do I have to like detach it?
Bro, what the heck is wrong with this
Bro, what the heck is wrong with this
crazy thing?
in training here. It somehow messes this
in training here. It somehow messes this
up.
So obnoxious.
outputs of
zero. I'm confused how this is
um how this is anything.
Maybe it's like they did some weird
override. You got to be kidding me that
override. You got to be kidding me that
they did that.
I don't understand. Are you not supposed
I don't understand. Are you not supposed
to freaking train this thing? Like,
to freaking train this thing? Like,
what's wrong?
where they give this
Ash. One of my friends told me about
Ash. One of my friends told me about
work. New here making a moral and focus
work. New here making a moral and focus
on cooperation between generally
on cooperation between generally
competent
competent
agents. What's the best way to reach out
agents. What's the best way to reach out
to you to get your quick 30 secondond
to you to get your quick 30 secondond
thoughts? You're doing it right here.
thoughts? You're doing it right here.
Can I drop a link to our extended
Can I drop a link to our extended
abstract? Yes, you can. Feel like you'd
abstract? Yes, you can. Feel like you'd
have an interesting perspective on our
have an interesting perspective on our
dev. Yeah,
sure. One wire
length. Oh, okay.
I was like I think I've heard that from
I was like I think I've heard that from
like people
like people
torrenting music back in the day
torrenting music back in the day
maybe.
Uh whatever. You can steal all of
Uh whatever. You can steal all of
my highly confidential open source
my highly confidential open source
research data.
Multi- aent environment for studying
Multi- aent environment for studying
emergent multi- aent role
emergent multi- aent role
specialization. That's my language.
This is not computationally accessible
This is not computationally accessible
in the least because it's slow as hell.
in the least because it's slow as hell.
Smack.
I'm not going to lie, one of the first
I'm not going to lie, one of the first
things I started doing since I graduated
things I started doing since I graduated
my PhD was like completely skipping
my PhD was like completely skipping
reading introduction sections. So, I
reading introduction sections. So, I
mean, this is fine. It's not for me.
mean, this is fine. It's not for me.
Like, you don't have to sell me. It's
Like, you don't have to sell me. It's
like, yes, we need Ms.
I will I would actually like to tell you
I will I would actually like to tell you
though I can scroll down. Okay. I would
though I can scroll down. Okay. I would
like to tell you in
like to tell you in
general if you actually like like
general if you actually like like
writing code and don't mind getting into
writing code and don't mind getting into
stuff a bit just drop jacks as an
stuff a bit just drop jacks as an
environment engine. It's so [ __ ] Like
environment engine. It's so [ __ ] Like
having to write all of your M's as
having to write all of your M's as
purely a series of array operations.
purely a series of array operations.
It's so constraining and it doesn't do
It's so constraining and it doesn't do
you any
favors. Have you seen the way that we
favors. Have you seen the way that we
build our MS and
puffer? Yeah. So, this is like a mini
puffer? Yeah. So, this is like a mini
grid extension style
thing. So, I mean, here's here's this
thing. So, I mean, here's here's this
the best cell for like the way that we
the best cell for like the way that we
do our stuff. Okay.
Right. Try to implement this in Jacks.
Right. Try to implement this in Jacks.
Good
luck.
Oops. Oh, yeah. There's a market, by the
Oops. Oh, yeah. There's a market, by the
way, in case this looks like, oh, maybe
way, in case this looks like, oh, maybe
I could do this in jacks.
Um, well, it's got to not be fighting.
Well, the thing is that Craftax is like
Well, the thing is that Craftax is like
it would have been easier and it would
it would have been easier and it would
have been faster in C. I like I don't
have been faster in C. I like I don't
even have Craft X actually. I have a
even have Craft X actually. I have a
collab with their lab, but like Craftex
collab with their lab, but like Craftex
is slow by tougher standards. It's 10
is slow by tougher standards. It's 10
times too slow and it's on a GPU. It
times too slow and it's on a GPU. It
would be 10 times faster on one CPU
would be 10 times faster on one CPU
core, you see? And it would have been
core, you see? And it would have been
easier to write. There's just no reason
easier to write. There's just no reason
to torture yourself like this. I mean,
to torture yourself like this. I mean,
we've got the MOA, right? All these
we've got the MOA, right? All these
different MS and we don't have to think
different MS and we don't have to think
about stupid array based programming at
about stupid array based programming at
all. Like this is one file. Okay, so
all. Like this is one file. Okay, so
this is like arguably one of the most
this is like arguably one of the most
complex MS out there right now. Uh
complex MS out there right now. Uh
particularly like complex plus fast. You
particularly like complex plus fast. You
can't really do better than
can't really do better than
that. Here's the code.
So this is shorter than Craft
So this is shorter than Craft
X. It's 2,800 lines and if you read it,
X. It's 2,800 lines and if you read it,
it's brained it. Like the code is
it's brained it. Like the code is
brained it easy and it runs over 1.5
brained it easy and it runs over 1.5
million steps per
million steps per
second. It's literally just four loops
second. It's literally just four loops
if statements. Like there's nothing
if statements. Like there's nothing
remotely smart or intelligent about the
remotely smart or intelligent about the
code here. It's just what if we just
code here. It's just what if we just
write brain dead simple code and
write brain dead simple code and
see like you can just see nothing's like
see like you can just see nothing's like
super deeply indented. There's no super
super deeply indented. There's no super
long lines. It's just bore for if yada
long lines. It's just bore for if yada
yada yada continue all the code you just
yada yada continue all the code you just
read it top to bottom. A first year
read it top to bottom. A first year
undergrad who's taken one systems course
undergrad who's taken one systems course
can read
this right and if I want to add anything
this right and if I want to add anything
to this it's super easy. I just edit
to this it's super easy. I just edit
arbitrary code. No need to think about
arbitrary code. No need to think about
array
programming. So yeah, I mean we have way
programming. So yeah, I mean we have way
simpler examples than this to get you
simpler examples than this to get you
started as well. But uh for people who
started as well. But uh for people who
are like seriously wanting to build new
are like seriously wanting to build new
RLMs, I highly highly suggest it. And as
RLMs, I highly highly suggest it. And as
a bonus, you get to run them on the web
a bonus, you get to run them on the web
for free. So you get to have your M's
for free. So you get to have your M's
online playable for free. Same exact
online playable for free. Same exact
code. You know what they had to do for
code. You know what they had to do for
kinetics? And I got to actually chat
kinetics? And I got to actually chat
with these guys because this is awesome
with these guys because this is awesome
work. It's just they made their lives
work. It's just they made their lives
way harder than it should have been.
way harder than it should have been.
Look, look how cool this thing is,
Look, look how cool this thing is,
right? Like you can build these ends. Do
right? Like you can build these ends. Do
you know what they had to do to make
you know what they had to do to make
this work? They had to take all the code
this work? They had to take all the code
that they just written their thousands
that they just written their thousands
and thousands of lines of jacks and
and thousands of lines of jacks and
rewrite all of it in JavaScript just to
rewrite all of it in JavaScript just to
get this
demo. If they'd written it the way that
demo. If they'd written it the way that
I suggested, it would have been shorter.
I suggested, it would have been shorter.
the original code would be shorter and
the original code would be shorter and
simpler and you would just compile it
simpler and you would just compile it
for web and be
for web and be
done. It's crazy,
right? So, literally Jack is like fine
right? So, literally Jack is like fine
as a training thing, right? Like
as a training thing, right? Like
whatever. Not my cup of tea because it's
whatever. Not my cup of tea because it's
like weird functional object-oriented
like weird functional object-oriented
hodge podge, but like fine. Jacks for
hodge podge, but like fine. Jacks for
environments was researchers not knowing
environments was researchers not knowing
how to program. That's
it. Oh, and you want to know something
it. Oh, and you want to know something
even
even
crazier? If you actually do want to
crazier? If you actually do want to
write, if you actually do want to write
write, if you actually do want to write
a GPU environment, you can copy and
a GPU environment, you can copy and
paste simple C into CUDA and it'll run
paste simple C into CUDA and it'll run
cuz CUDA is just C that runs on your
cuz CUDA is just C that runs on your
GPU. So there you go. Your same code
GPU. So there you go. Your same code
will run on the
will run on the
GPU. Now admittedly, for more complex
GPU. Now admittedly, for more complex
stuff, you kind of have to think about
stuff, you kind of have to think about
it a little bit more, but not that much.
So cool M. We absolutely need more M's.
So cool M. We absolutely need more M's.
If something like this were submitted to
If something like this were submitted to
Puffer Live as a PR, I will be like
Puffer Live as a PR, I will be like
delighted to have cool new M to study
delighted to have cool new M to study
stuff with like this. But you're making
stuff with like this. But you're making
your life hard on yourself with
jacks. Let me see what you got for state
jacks. Let me see what you got for state
space.
Uh, this is fine. I would just I just
Uh, this is fine. I would just I just
flatten the Well, you can see the
flatten the Well, you can see the
engineering optimizations we do to make
engineering optimizations we do to make
state stuff fast, but this data is
state stuff fast, but this data is
fine.
Discrete action space is awesome. Super
Discrete action space is awesome. Super
easy to implement. I mean, super easy to
easy to implement. I mean, super easy to
like implement networks for
Yeah, coordination and stuff like this
Yeah, coordination and stuff like this
all super
cool. Make it super fast. Make it super
cool. Make it super fast. Make it super
easy to use. Train some cool models on
easy to use. Train some cool models on
it. I would highly suggest trying out
it. I would highly suggest trying out
the puffer style of stuff with this. I
the puffer style of stuff with this. I
think you'll have a good time.
like this type of a thing
like this type of a thing
here. Even with uh without even having
here. Even with uh without even having
like a Jax compile trainer, just with
like a Jax compile trainer, just with
our PyTorch, you can easily train this
our PyTorch, you can easily train this
over a million steps per second. Does
over a million steps per second. Does
not train. Barely
not train. Barely
works. Yeah.
If you're interested in sticking around
If you're interested in sticking around
Puffer, if you want to have if you want
Puffer, if you want to have if you want
to submit something like this to Puffer,
to submit something like this to Puffer,
we would be
delighted. We feature all the M's right
here. It says who made the M.
here. It says who made the M.
This one is
bets and uh you literally just you pip
bets and uh you literally just you pip
install puffer limp and you can play the
install puffer limp and you can play the
end
immediately. Oh, also this is a
immediately. Oh, also this is a
superhuman neural network playing the
superhuman neural network playing the
game in your browser and I can hold
game in your browser and I can hold
shift and I can take over for it. Now
shift and I can take over for it. Now
I'm playing and I'm bad and now I can
I'm playing and I'm bad and now I can
let the bot take over and the bot will
let the bot take over and the bot will
be superhuman again.
It's pretty
fun. But yeah, welcome to my uh my
fun. But yeah, welcome to my uh my
personal crusade to make reinforcement
personal crusade to make reinforcement
learning fast and easy. That is what
learning fast and easy. That is what
this is.
kind of frustrated with the
kind of frustrated with the
jacks.
jacks.
Yep. There's a learning curve with C,
Yep. There's a learning curve with C,
but it is so much easier. So much
but it is so much easier. So much
easier. I wrote Python for 10 years. It
easier. I wrote Python for 10 years. It
took me like 2, three weeks and I was
took me like 2, three weeks and I was
perfectly happy in C. And now it pisses
perfectly happy in C. And now it pisses
me off that I have to write Python most
me off that I have to write Python most
of the time. I am way happier just
of the time. I am way happier just
jamming C environments all day.
But don't go too crazy with this C. The
But don't go too crazy with this C. The
key is to just keep it super simple.
key is to just keep it super simple.
Single
Single
pointers, for loops, if statements, no
pointers, for loops, if statements, no
crazy macros. You just write really
crazy macros. You just write really
simple code. All static
simple code. All static
memory, no crazy memory management. It's
memory, no crazy memory management. It's
just really easy.
And yeah, hang around. It's
And yeah, hang around. It's
discord.gg/pbuffer. We all just hang out
discord.gg/pbuffer. We all just hang out
and build RL stuff all
and build RL stuff all
day. What do you mean static memory? We
day. What do you mean static memory? We
allocate all the memory that we need for
allocate all the memory that we need for
the environment at the start. We don't
the environment at the start. We don't
bother reallocating memory midway
bother reallocating memory midway
through. That's not remotely a
through. That's not remotely a
constraint at all, by the way. We do
constraint at all, by the way. We do
multi- aent, we do variable agent, we do
multi- aent, we do variable agent, we do
all sorts of stuff. It's still easy.
You still malic, but you malic at the
You still malic, but you malic at the
start. And then you don't like do a
start. And then you don't like do a
whole bunch of mallets you have to keep
whole bunch of mallets you have to keep
track of. You don't slow stuff down with
track of. You don't slow stuff down with
that. It's really easy. Here, let me let
that. It's really easy. Here, let me let
me show you the snake code just you can
me show you the snake code just you can
see just how how truly easy stuff like
see just how how truly easy stuff like
this
this
is. Usually no pointers to pointers.
is. Usually no pointers to pointers.
Yep. Okay. So, puff snake is our multi-
Yep. Okay. So, puff snake is our multi-
aent demo, right? Snake is a pretty cool
aent demo, right? Snake is a pretty cool
environment as well. Like snake is
environment as well. Like snake is
pretty darn cool to look at. This thing
pretty darn cool to look at. This thing
trains at two million steps per second.
trains at two million steps per second.
By the way, so this is multi- aent
By the way, so this is multi- aent
snake. It's snake with a whole bunch of
snake. It's snake with a whole bunch of
snakes. 2 million snake snake steps per
snakes. 2 million snake snake steps per
second training with a little CNN LSTM.
second training with a little CNN LSTM.
I believe CNN LSTM. This one might just
I believe CNN LSTM. This one might just
be CNN. We'll see. But uh here's the
be CNN. We'll see. But uh here's the
code. Snake.h H 325 lines after the
code. Snake.h H 325 lines after the
refactor in the new branch. This is
refactor in the new branch. This is
going to be about 270 lines because we
going to be about 270 lines because we
don't need this logging crap anymore.
don't need this logging crap anymore.
You make a strct. This strct is your
You make a strct. This strct is your
environment. It's got some data. You
environment. It's got some data. You
make some
make some
init. You have a free but like you alloc
init. You have a free but like you alloc
once, you free once. That's it. This is
once, you free once. That's it. This is
your compute observation function.
your compute observation function.
444. That's it. This is how you delete a
444. That's it. This is how you delete a
snake from the game. This is how you
snake from the game. This is how you
spawn a snake into the game. This is how
spawn a snake into the game. This is how
you spawn food. This is how you reset
you spawn food. This is how you reset
the end. This is how you step the
the end. This is how you step the
snake. Little bit of logic for stepping
snake. Little bit of logic for stepping
the
snake. That's all the
snake. That's all the
code. This is the client. This is how we
code. This is the client. This is how we
render it. Really, it's just this bit of
render it. Really, it's just this bit of
code right here. Super
code right here. Super
easy. That's it.
runs at like tens of millions of steps
runs at like tens of millions of steps
per second. The actual environment
per second. The actual environment
itself on one CPU
core, you compile it with the flags that
core, you compile it with the flags that
we have, you'll get nice clean error
we have, you'll get nice clean error
messages, better error messages than
messages, better error messages than
Python even. You don't you don't get
Python even. You don't you don't get
stupid seg faults to debug. Um, you just
stupid seg faults to debug. Um, you just
get like clean air messages with address
get like clean air messages with address
sanitizer. We have SYON bindings, but
sanitizer. We have SYON bindings, but
actually in the new version, we have
actually in the new version, we have
made the bindings even easier. The new
made the bindings even easier. The new
binding code is like really easy.
binding code is like really easy.
Actually, did I do it for Snake
Actually, did I do it for Snake
yet? I wonder if I did it for
yet? I wonder if I did it for
Snake. I didn't do it for Snake yet. But
Snake. I didn't do it for Snake yet. But
we have new binding code that makes it
we have new binding code that makes it
like really easy to bind these to
like really easy to bind these to
Python. That's it.
So, I don't know what in what capacity
So, I don't know what in what capacity
you do RL stuff, but if you're looking
you do RL stuff, but if you're looking
for a cool open source place to do some
for a cool open source place to do some
research and sling some code,
research and sling some code,
We also give um compute access to
We also give um compute access to
contributors around
contributors around
here.
So if you need stuff to run experiments
So if you need stuff to run experiments
on and you're actually contributing
on and you're actually contributing
code, we also give access to uh
boxes. Oh, you got compute. That's cool.
boxes. Oh, you got compute. That's cool.
Most universities have terrible compute,
Most universities have terrible compute,
so that is solid. I I got my own after I
so that is solid. I I got my own after I
finished my PhD. And this is way better
finished my PhD. And this is way better
than anything I had at
MIT. We're getting more of these. By the
MIT. We're getting more of these. By the
way,
way,
um as soon as the tariff situation
um as soon as the tariff situation
revolves
revolves
itself, as soon as the tariff situation
itself, as soon as the tariff situation
revolves, uh resolves itself. We're
revolves, uh resolves itself. We're
buying 40 of these.
buying 40 of these.
MIT cluster is
MIT cluster is
insane. No, the machines really, really,
insane. No, the machines really, really,
really sucked, especially for
really sucked, especially for
RL. Each one of these boxes uh has been
RL. Each one of these boxes uh has been
like three times faster than $100,000
like three times faster than $100,000
server for the purposes of a lot of RL
server for the purposes of a lot of RL
stuff. And these are like five grand a
piece. Yeah. So contributors, we just
piece. Yeah. So contributors, we just
give people SSH access to boxes. It's a
give people SSH access to boxes. It's a
fun
time. Mainly the clusters have two slow
time. Mainly the clusters have two slow
CPUs for all the older M's. It doesn't
CPUs for all the older M's. It doesn't
matter as much now, but um like it
matter as much now, but um like it
doesn't matter as much now that our Ms
doesn't matter as much now that our Ms
are super
are super
fast, but
fast, but
uh for like Atari and stuff before when
uh for like Atari and stuff before when
we were doing that, the CPUs were
we were doing that, the CPUs were
awful. And that's uh this is B in the
awful. And that's uh this is B in the
discord as
discord as
well. He is resident puffer
procelite advertises of all things
procelite advertises of all things
puffer.
What in the hell does this
thing? Can I just use the TTGT layer?
thing? Can I just use the TTGT layer?
Hang on.
Oh yeah, I made um I made us a cool
Oh yeah, I made um I made us a cool
thing lately for
thing lately for
bindings. So this file is kind of a
bindings. So this file is kind of a
mess.
I'm trying to clean this up, but
I'm trying to clean this up, but
basically I wrote this 500ish line file
basically I wrote this 500ish line file
which uses just the Python C native API.
which uses just the Python C native API.
And yeah, this is kind of a mess. But
And yeah, this is kind of a mess. But
the cool thing about doing this is that
the cool thing about doing this is that
now instead of having to write this
now instead of having to write this
massive shitty Syon file for every
massive shitty Syon file for every
single end and you just do this, this is
single end and you just do this, this is
the binding for breakout now. So this is
the binding for breakout now. So this is
all the code that is needed to bind this
all the code that is needed to bind this
to uh from C to Python.
to uh from C to Python.
You just define variables that need to
You just define variables that need to
go from Python to
go from Python to
C and
C and
you figure out what variables you want
you figure out what variables you want
to extract as logs and that's
to extract as logs and that's
it. So it's pretty
cool. One of the fun things around here,
cool. One of the fun things around here,
right, is we have people that like to
right, is we have people that like to
help with infra. We have people that
help with infra. We have people that
like to help with some of the
like to help with some of the
engineering work. We have people who
engineering work. We have people who
like to help with experiments. Lots of
like to help with experiments. Lots of
stuff.
And yeah, B is right. Anybody can learn
And yeah, B is right. Anybody can learn
this. Bet is a relatively new
programmer. Bet. How long you been doing
programmer. Bet. How long you been doing
this? Like less than two years,
right? year and a few months of writing
right? year and a few months of writing
like any code at all. Like there you
go. To be fair, he is a trooper.
go. To be fair, he is a trooper.
Like I uh I gave him this project to do.
Like I uh I gave him this project to do.
I massively underestimated how hard of a
I massively underestimated how hard of a
project this was going to be for like a
project this was going to be for like a
new programmer and he still did it.
new programmer and he still did it.
He did it with like two to three times
He did it with like two to three times
too much code at the start, but then he
too much code at the start, but then he
like he trimmed it down and now it's
like he trimmed it down and now it's
actually pretty
actually pretty
reasonable. And this is like one of my
reasonable. And this is like one of my
favorite MS now. Look how freaking cool
favorite MS now. Look how freaking cool
this thing is to watch. It's like just
this thing is to watch. It's like just
so
mesmerizing. It's so cool. I love this
mesmerizing. It's so cool. I love this
M. It's just like this classic Atari
M. It's just like this classic Atari
game, but it's like one of the cooler
game, but it's like one of the cooler
ones. It's like actually a racing game.
Duro was a
beast.
Well, I don't know. Maybe I'm going to
Well, I don't know. Maybe I'm going to
start writing stuff and assembly next.
start writing stuff and assembly next.
We'll
We'll
see. Plus, puffer shipping custom
see. Plus, puffer shipping custom
assembly.
H I don't know. We've been shipping CUDA
H I don't know. We've been shipping CUDA
lately. It's the only next thing I could
lately. It's the only next thing I could
do.
See you around. I'm mostly streaming dev
See you around. I'm mostly streaming dev
pretty much always.
pretty much always.
So, drop on
So, drop on
by. Always use new contributors.
do start the
puffer. We're almost at 2K. 2K on puffer
puffer. We're almost at 2K. 2K on puffer
is going to be
is going to be
awesome. Got to hit 2k on puffer and 10k
awesome. Got to hit 2k on puffer and 10k
on
on
X. Be pretty solid base.
So I think the easiest
So I think the easiest
thing to do
thing to do
here is going to just be to modify the
here is going to just be to modify the
layer to take the mini back
layer to take the mini back
frames directly.
Wait, this doesn't use the cache params,
Wait, this doesn't use the cache params,
right?
thing doesn't look like it uses the
thing doesn't look like it uses the
cache params.
and just
pass last mini batch for Amstic.
You don't need to cash at all on crane.
You don't need to cash at all on crane.
I don't think
The base is now.
You can give it cash here, can't you?
And what if you don't give
it just give Attack params.
Why does this not give you the cats
back? It just fills it in.
Just hack that stupid thing.
first run protein use all mean hyper.
Yes, I figured seating it with like
Yes, I figured seating it with like
reasonable data would be better. It
reasonable data would be better. It
probably should be seated with like the
probably should be seated with like the
optimal hypers or whatever that you
optimal hypers or whatever that you
found. I don't know.
latest
latest
run. I set the means to be the last
run. I set the means to be the last
optimal. Now, that's a good idea.
Do we think that I just did anything?
Well, that gets updated it
seems.
So, let's go get our
model. That is blindingly bright. My
god. Yeah, I know.
This is brutal at
night. Model's freaking tiny. I'm sure
Yeah. So, this thing doesn't do much,
Yeah. So, this thing doesn't do much,
does it?
impulse wars.
Bad. That thing isn't training. I'm so
Bad. That thing isn't training. I'm so
Wait, what thing isn't
training?
training?
This. Yeah, obviously this isn't
training. What's
training. What's
happening? Uh, I tried to implement it
happening? Uh, I tried to implement it
and I couldn't get it to train. Uh, and
and I couldn't get it to train. Uh, and
then I tried their thing and I can't get
then I tried their thing and I can't get
it to train either.
The heck was that?
It does work
It does work
though. Oh, really?
What happens if we don't use this cash?
What happens if we don't use this cash?
Didn't I have something working if like
Didn't I have something working if like
we just don't use the
cash? Wasn't it like ironically doing
cash? Wasn't it like ironically doing
better without the cash?
How big is this
model? 360. So, this is a
model? 360. So, this is a
chunker. This is a chunker.
I thought I had it doing something a bit
I thought I had it doing something a bit
ago, didn't I?
Maybe.
I can't say that the results are
I can't say that the results are
particularly encouraging here
though better like
though better like
literally was
literally was
better and this for 40 mil literally
better and this for 40 mil literally
does better without the
cache marginally.
I had this thing doing something before,
I had this thing doing something before,
didn't
didn't
I? And we're not going to try [ __ ]
I? And we're not going to try [ __ ]
with custom hydro frames a whole
bunch. Okay, that's what I thought. It
bunch. Okay, that's what I thought. It
does actually eventually start doing a
does actually eventually start doing a
thing.
What did I have it doing
initially? What did I have changed?
No, it's not
Just add a yellow into this thing.
Doesn't magically work, does it?
How hard would it be to make this thing
How hard would it be to make this thing
fast? Like very right.
I thought I had like it running
I thought I had like it running
something at one
point. Was it just me leaving this
point. Was it just me leaving this
running for longer? I don't think so.
running for longer? I don't think so.
Right. Did it just like take off at one
Right. Did it just like take off at one
point? I don't think so.
I mean, I wouldn't call it working.
I mean, I wouldn't call it working.
Like, it sort of
Like, it sort of
trained. It still wasn't like
trained. It still wasn't like
good. This is probably it.
It's only stores demo.py.
Maybe not. Oh, hang on. Maybe this is
Maybe not. Oh, hang on. Maybe this is
still not the right one. That could just
still not the right one. That could just
be prior
replay. Yeah, I do think that I saw
replay. Yeah, I do think that I saw
something like this
something like this
though. But this is still not good
though. But this is still not good
perf.
Could it be
this? No.
Right. Okay. Yeah, I mean at least that
Right. Okay. Yeah, I mean at least that
is like definitely learning,
right? I That's good enough that I can
right? I That's good enough that I can
commit it.
Not to this branch.
Uh yeah, but breakout always has a steep
curve. I can do one more experiment
curve. I can do one more experiment
after this, I
after this, I
guess. Warm start.
We'll see what it
does. Ah, it's so [ __ ] slow, though.
does. Ah, it's so [ __ ] slow, though.
Look at this thing. This is double the
Look at this thing. This is double the
size of the previous model, and it's
size of the previous model, and it's
just so slow.
They say is it's literally 100 times
They say is it's literally 100 times
faster than the average RL researchers
faster than the average RL researchers
code. But it should be a thousand times
code. But it should be a thousand times
faster. It's so
slow. I don't think this thing's
slow. I don't think this thing's
freaking I not even Neptune
freaking I not even Neptune
this. Is it not here?
I guess I didn't have to in this
one. I mean, this is
one. I mean, this is
like not great.
It could solve it eventually, but it's
It could solve it eventually, but it's
[ __ ] breakout like anything
[ __ ] breakout like anything
should. Some messages real quick.
Yeah, that's
Yeah, that's
TTT. I uh I'm very much looking forward
TTT. I uh I'm very much looking forward
to not looking at
this. Well crap. Now it's 853 and we
this. Well crap. Now it's 853 and we
didn't really get to do much VR any VR
didn't really get to do much VR any VR
stuff at all today.
stuff at all today.
We can try one thing real quick.
That's V trace
That's V trace
here. I was thinking
here. I was thinking
um a little bit
um a little bit
about the loss with
about the loss with
Vray and I was thinking
Vray and I was thinking
here that you get this like
here that you get this like
clamped loss,
right? So, what if we did
We Oh,
It should be positive advantage here not
It should be positive advantage here not
negative Okay.
This is an L.
Okay, good. This is uh
really. This clamping is not going to do
really. This clamping is not going to do
it.
Okay. So, this is the same curve. Then
Okay. So, this is the same curve. Then
you're telling me that this messes it up
somehow? Like this doesn't train at all
somehow? Like this doesn't train at all
somehow.
That's
That's
bizarre. So, you can't clamp this for
bizarre. So, you can't clamp this for
some weirdo
reason. What if you norm
it? Can you norm
it? Can you norm
it and then clamp
Not exactly what you want to see,
huh? There's something screwy with the
huh? There's something screwy with the
way V trace works. Like, you can't clip
way V trace works. Like, you can't clip
it. And you'd really, really, really,
it. And you'd really, really, really,
really want to be able to clip
it. I mean, I can clip the advantage
it. I mean, I can clip the advantage
technically.
What do you clip in this? Can you like
What do you clip in this? Can you like
You can't clip anything,
right? I had to go to bed soon,
right? I had to go to bed soon,
but I'm annoyed that I didn't get to
but I'm annoyed that I didn't get to
work on this at all today. I kind of
work on this at all today. I kind of
just gassed out on
uh the freaking TTT stuff.
I don't know why I'm scrolling like
I don't know why I'm scrolling like
this. I I got to go to bed shortly cuz
this. I I got to go to bed shortly cuz
I'm like really losing uh the focus. But
I'm like really losing uh the focus. But
I like I just want to see if there's
I like I just want to see if there's
something we can do with this, right?
budgets
actions. Do you want to clip the
actions. Do you want to clip the
advantage, not the loss?
Hang on. This
thing the loss is the ratio,
right? There's no ratio to clip.
This is
This is
logic. This is actions.
Why is
this? It's crazy that clipping
this? It's crazy that clipping
completely breaks this,
huh? Do you just flip the advantage?
big ass
big ass
moth my
moth my
face.
face.
Um I don't know. Let's try clipping the
Um I don't know. Let's try clipping the
advantage. Then I'm going to bed.
I don't expect that to work to be
I don't expect that to work to be
honest. I think I'm going to have to
honest. I think I'm going to have to
think about this more deeply
tomorrow. So, we kind of figured out
tomorrow. So, we kind of figured out
from PO before that the clamping was
from PO before that the clamping was
really
really
important. Now, you're not going to give
important. Now, you're not going to give
me this error on this totally different
me this error on this totally different
algorithm. What the heck is this?
There.
Yeah, clipping the advantage really
Yeah, clipping the advantage really
screws you
over. It's like surprisingly bad as
over. It's like surprisingly bad as
well, isn't
it? It's kind of funny because like
Man, what happens if you just
Man, what happens if you just
[Music]
do What if you do this?
Does anything happen if you do this?
Well,
Is this actually slower than the
previous? It
previous? It
is. Dang. I thought we had something.
is. Dang. I thought we had something.
No, we definitely don't have
something that's negative
something that's negative
advantage. I mean, I'm sure it's not
advantage. I mean, I'm sure it's not
going to work if I do this,
right? The ratio needs to be negative,
right? The ratio needs to be negative,
right?
Yeah, that's unoptimized.
It's the fact that it like hard fails on
It's the fact that it like hard fails on
a lot of demons. To me, it's like
a lot of demons. To me, it's like
there's a quirk or a bug or something.
there's a quirk or a bug or something.
It's not just like Yeah, it's just
It's not just like Yeah, it's just
worse, right? It's like there's a quirk
worse, right? It's like there's a quirk
or a bug cuz like it's pretty darn good
or a bug cuz like it's pretty darn good
on
on
Breakout and then it just hard fails on
Breakout and then it just hard fails on
some other
some other
tasks. Anyways, I'm gonna try uh I
tasks. Anyways, I'm gonna try uh I
probably this will be the first thing I
probably this will be the first thing I
do in the morning. We'll see. I got lots
do in the morning. We'll see. I got lots
to work
to work
on. Try to get in the time. I guess
on. Try to get in the time. I guess
tomorrow I got to run first thing in the
tomorrow I got to run first thing in the
morning. So, we'll do that and then I'll
morning. So, we'll do that and then I'll
come to this. Um but for folks
come to this. Um but for folks
watching, all my stuff is open source.
watching, all my stuff is open source.
It's here buffer.ai. Lots of fun
It's here buffer.ai. Lots of fun
demos. If you want to help me out for
demos. If you want to help me out for
free, just start at the GitHub. almost
free, just start at the GitHub. almost
at 2k stars. It's going to be pretty
at 2k stars. It's going to be pretty
nice. Helps him out a lot. If you want
nice. Helps him out a lot. If you want
to get involved in dev, you don't need
to get involved in dev, you don't need
an RL background. Just need to know how
an RL background. Just need to know how
to program. Join the Discord. Some of
to program. Join the Discord. Some of
our best contributors came in with
our best contributors came in with
actually no experience whatsoever, but
actually no experience whatsoever, but
programming background does help. Um,
programming background does help. Um,
and other than that, you can follow me
and other than that, you can follow me
on X for more RL content. I post lots of
on X for more RL content. I post lots of
mostly RL
mostly RL
things. blog here, quick start guide,
things. blog here, quick start guide,
other useful resources, but there's more
other useful resources, but there's more
on X you can't get anywhere else.

Kind: captions
Language: en
Good evening
folks. We are back for stream three of
folks. We are back for stream three of
today. Not a super good hours day
today. Not a super good hours day
honestly. Kind of burnt myself out in
honestly. Kind of burnt myself out in
the second session going over all this
the second session going over all this
crazy stuff with this
crazy stuff with this
algorithm. But um we are going to see if
algorithm. But um we are going to see if
it does anything.
a little
bit. The heck is this
thing? You need the ideas.
You refactored
tactical. I've actually really wanted
tactical. I've actually really wanted
that
that
unfinished. That one's a bit hard for
you. There's like a lot of like classic
you. There's like a lot of like classic
AI that you'd have to do.
It's based on the um like the MMO
It's based on the um like the MMO
Doofus. I've got like 3,000 hours in
Doofus. I've got like 3,000 hours in
that game growing up. Freaking awesome
that game growing up. Freaking awesome
game. The thing is it's still an awesome
game. The thing is it's still an awesome
game today. Like that and a Runescape
game today. Like that and a Runescape
are the two games that have ever been
are the two games that have ever been
like straight up heroin for me.
What happened to game studios? I don't
What happened to game studios? I don't
know,
know,
man. I can't think of like a
man. I can't think of like a
single modern game that I've really put
single modern game that I've really put
a lot of hours into. I guess Overwatch
a lot of hours into. I guess Overwatch
is like kind
is like kind
of, but like it's like I play that for
of, but like it's like I play that for
like a month or two
like a month or two
max. Yeah. Not even
close. Nobody makes
anymore. Good thing we have better
anymore. Good thing we have better
things to do. We have more productive
things to do. We have more productive
things to do. We probably don't have
things to do. We probably don't have
more fun things to do to be
honest. One of my best friends
honest. One of my best friends
um growing up like that I met on an MMO.
um growing up like that I met on an MMO.
I met him like over the summer cuz he
I met him like over the summer cuz he
turned out to be a he turned out to be a
turned out to be a he turned out to be a
software engineer as well and he's now
software engineer as well and he's now
at uh he's now at
at uh he's now at
Meta which is pretty cool.
MMOs. I don't know what it
MMOs. I don't know what it
is. It's
like a lot of it is the fact that it's
like a lot of it is the fact that it's
like a self-contained like big thing
like a self-contained like big thing
that you can like come up
that you can like come up
with approaches to. And I don't even
with approaches to. And I don't even
[ __ ] know. It's like it's more of a
[ __ ] know. It's like it's more of a
game than any other genre of game, I
game than any other genre of game, I
guess. I don't know.
Like every other game has like a
Like every other game has like a
gameplay loop, right? I think like an
gameplay loop, right? I think like an
MMO is the only thing that
MMO is the only thing that
has like a ton of gameplay loops and
has like a ton of gameplay loops and
just pick whatever gameplay loop you
just pick whatever gameplay loop you
figure that you feel like now and it all
figure that you feel like now and it all
somehow connects.
TTT output has no attribute squeeze.
TTT output has no attribute squeeze.
What in the
hell time
hell time
training we train and test and we test
training we train and test and we test
and
and
train. We are very smart.
Well, we're going to see whether it's a
Well, we're going to see whether it's a
meme, if it works or not.
I tried coding this thing myself and I
I tried coding this thing myself and I
just failed because the paper makes no
just failed because the paper makes no
bloody sense. What are you working on?
bloody sense. What are you working on?
So there's this
So there's this
paper. This is test time
paper. This is test time
training. It's an RNN where the hidden
training. It's an RNN where the hidden
state is a network that you train during
state is a network that you train during
the forward pass of the RNN.
the forward pass of the RNN.
It's really weird, but this was used in
It's really weird, but this was used in
Nvidia's like recent one minute video
Nvidia's like recent one minute video
generation
generation
paper.
paper.
Um, the thing is I read it and it looked
Um, the thing is I read it and it looked
like really really Yeah, I know it's
like really really Yeah, I know it's
crazy. Here it's roughly this. So
crazy. Here it's roughly this. So
like here's your layer and in the
like here's your layer and in the
forward path of the layer you go over
forward path of the layer you go over
all the tokens like of the sequence and
all the tokens like of the sequence and
for each token you train the state
for each token you train the state
Because the state is actually a model
Because the state is actually a model
that gets initialized in the forward
that gets initialized in the forward
pass. You take one gradient step per
pass. You take one gradient step per
token and then you use that model here
token and then you use that model here
that you just
that you just
trained. So you actually develop like
trained. So you actually develop like
you train the model over the course of
you train the model over the course of
the
sequence. So it's kind of an interesting
sequence. So it's kind of an interesting
idea, right?
idea, right?
Unfortunately, this code sucks and
Unfortunately, this code sucks and
doesn't remotely describe what it does
doesn't remotely describe what it does
correctly. This description about the
correctly. This description about the
batching and stuff is straight up wrong.
batching and stuff is straight up wrong.
Uh, all the math is incredibly confusing
Uh, all the math is incredibly confusing
and misleading. And their code base is
and misleading. And their code base is
confusing and misleading as hell as
well. So, it's just freaking confusing
well. So, it's just freaking confusing
on all fronts.
Can we call this on policy?
Can we call this on policy?
Sure. It's a free
Sure. It's a free
country. It is
country. It is
reproducible. Their code
reproducible. Their code
works. It's just everything is confusing
works. It's just everything is confusing
as
hell. It's kind of like the idea is
hell. It's kind of like the idea is
good. The execution is good. Even the
good. The execution is good. Even the
communication of it all just sucks.
How big is the RNN? As big as you want
How big is the RNN? As big as you want
it to be. 9.3 million is way too big for
it to be. 9.3 million is way too big for
a puffer. So, I don't know what's going
a puffer. So, I don't know what's going
on there.
Let's say this. So,
uh,
uh,
date ttt cache
date ttt cache
equals ttt cache
equals ttt cache
equal state.tt
equal state.tt
cache. Now we have to do
cache. Now we have to do
[Music]
training. I don't think we have to do
training. I don't think we have to do
any of that
there. So I think I can just
there. So I think I can just
do
do
state.ttach. We don't even need
it. Got to see what the last uh hidden
it. Got to see what the last uh hidden
state looks like.
state looks like.
This tensor has no attribute category.
This tensor has no attribute category.
Uhhuh.
This looks right to me.
Uh, do I have to like detach it?
Bro, what the heck is wrong with this
Bro, what the heck is wrong with this
crazy thing?
in training here. It somehow messes this
in training here. It somehow messes this
up.
So obnoxious.
outputs of
zero. I'm confused how this is
um how this is anything.
Maybe it's like they did some weird
override. You got to be kidding me that
override. You got to be kidding me that
they did that.
I don't understand. Are you not supposed
I don't understand. Are you not supposed
to freaking train this thing? Like,
to freaking train this thing? Like,
what's wrong?
where they give this
Ash. One of my friends told me about
Ash. One of my friends told me about
work. New here making a moral and focus
work. New here making a moral and focus
on cooperation between generally
on cooperation between generally
competent
competent
agents. What's the best way to reach out
agents. What's the best way to reach out
to you to get your quick 30 secondond
to you to get your quick 30 secondond
thoughts? You're doing it right here.
thoughts? You're doing it right here.
Can I drop a link to our extended
Can I drop a link to our extended
abstract? Yes, you can. Feel like you'd
abstract? Yes, you can. Feel like you'd
have an interesting perspective on our
have an interesting perspective on our
dev. Yeah,
sure. One wire
length. Oh, okay.
I was like I think I've heard that from
I was like I think I've heard that from
like people
like people
torrenting music back in the day
torrenting music back in the day
maybe.
Uh whatever. You can steal all of
Uh whatever. You can steal all of
my highly confidential open source
my highly confidential open source
research data.
Multi- aent environment for studying
Multi- aent environment for studying
emergent multi- aent role
emergent multi- aent role
specialization. That's my language.
This is not computationally accessible
This is not computationally accessible
in the least because it's slow as hell.
in the least because it's slow as hell.
Smack.
I'm not going to lie, one of the first
I'm not going to lie, one of the first
things I started doing since I graduated
things I started doing since I graduated
my PhD was like completely skipping
my PhD was like completely skipping
reading introduction sections. So, I
reading introduction sections. So, I
mean, this is fine. It's not for me.
mean, this is fine. It's not for me.
Like, you don't have to sell me. It's
Like, you don't have to sell me. It's
like, yes, we need Ms.
I will I would actually like to tell you
I will I would actually like to tell you
though I can scroll down. Okay. I would
though I can scroll down. Okay. I would
like to tell you in
like to tell you in
general if you actually like like
general if you actually like like
writing code and don't mind getting into
writing code and don't mind getting into
stuff a bit just drop jacks as an
stuff a bit just drop jacks as an
environment engine. It's so [ __ ] Like
environment engine. It's so [ __ ] Like
having to write all of your M's as
having to write all of your M's as
purely a series of array operations.
purely a series of array operations.
It's so constraining and it doesn't do
It's so constraining and it doesn't do
you any
favors. Have you seen the way that we
favors. Have you seen the way that we
build our MS and
puffer? Yeah. So, this is like a mini
puffer? Yeah. So, this is like a mini
grid extension style
thing. So, I mean, here's here's this
thing. So, I mean, here's here's this
the best cell for like the way that we
the best cell for like the way that we
do our stuff. Okay.
Right. Try to implement this in Jacks.
Right. Try to implement this in Jacks.
Good
luck.
Oops. Oh, yeah. There's a market, by the
Oops. Oh, yeah. There's a market, by the
way, in case this looks like, oh, maybe
way, in case this looks like, oh, maybe
I could do this in jacks.
Um, well, it's got to not be fighting.
Well, the thing is that Craftax is like
Well, the thing is that Craftax is like
it would have been easier and it would
it would have been easier and it would
have been faster in C. I like I don't
have been faster in C. I like I don't
even have Craft X actually. I have a
even have Craft X actually. I have a
collab with their lab, but like Craftex
collab with their lab, but like Craftex
is slow by tougher standards. It's 10
is slow by tougher standards. It's 10
times too slow and it's on a GPU. It
times too slow and it's on a GPU. It
would be 10 times faster on one CPU
would be 10 times faster on one CPU
core, you see? And it would have been
core, you see? And it would have been
easier to write. There's just no reason
easier to write. There's just no reason
to torture yourself like this. I mean,
to torture yourself like this. I mean,
we've got the MOA, right? All these
we've got the MOA, right? All these
different MS and we don't have to think
different MS and we don't have to think
about stupid array based programming at
about stupid array based programming at
all. Like this is one file. Okay, so
all. Like this is one file. Okay, so
this is like arguably one of the most
this is like arguably one of the most
complex MS out there right now. Uh
complex MS out there right now. Uh
particularly like complex plus fast. You
particularly like complex plus fast. You
can't really do better than
can't really do better than
that. Here's the code.
So this is shorter than Craft
So this is shorter than Craft
X. It's 2,800 lines and if you read it,
X. It's 2,800 lines and if you read it,
it's brained it. Like the code is
it's brained it. Like the code is
brained it easy and it runs over 1.5
brained it easy and it runs over 1.5
million steps per
million steps per
second. It's literally just four loops
second. It's literally just four loops
if statements. Like there's nothing
if statements. Like there's nothing
remotely smart or intelligent about the
remotely smart or intelligent about the
code here. It's just what if we just
code here. It's just what if we just
write brain dead simple code and
write brain dead simple code and
see like you can just see nothing's like
see like you can just see nothing's like
super deeply indented. There's no super
super deeply indented. There's no super
long lines. It's just bore for if yada
long lines. It's just bore for if yada
yada yada continue all the code you just
yada yada continue all the code you just
read it top to bottom. A first year
read it top to bottom. A first year
undergrad who's taken one systems course
undergrad who's taken one systems course
can read
this right and if I want to add anything
this right and if I want to add anything
to this it's super easy. I just edit
to this it's super easy. I just edit
arbitrary code. No need to think about
arbitrary code. No need to think about
array
programming. So yeah, I mean we have way
programming. So yeah, I mean we have way
simpler examples than this to get you
simpler examples than this to get you
started as well. But uh for people who
started as well. But uh for people who
are like seriously wanting to build new
are like seriously wanting to build new
RLMs, I highly highly suggest it. And as
RLMs, I highly highly suggest it. And as
a bonus, you get to run them on the web
a bonus, you get to run them on the web
for free. So you get to have your M's
for free. So you get to have your M's
online playable for free. Same exact
online playable for free. Same exact
code. You know what they had to do for
code. You know what they had to do for
kinetics? And I got to actually chat
kinetics? And I got to actually chat
with these guys because this is awesome
with these guys because this is awesome
work. It's just they made their lives
work. It's just they made their lives
way harder than it should have been.
way harder than it should have been.
Look, look how cool this thing is,
Look, look how cool this thing is,
right? Like you can build these ends. Do
right? Like you can build these ends. Do
you know what they had to do to make
you know what they had to do to make
this work? They had to take all the code
this work? They had to take all the code
that they just written their thousands
that they just written their thousands
and thousands of lines of jacks and
and thousands of lines of jacks and
rewrite all of it in JavaScript just to
rewrite all of it in JavaScript just to
get this
demo. If they'd written it the way that
demo. If they'd written it the way that
I suggested, it would have been shorter.
I suggested, it would have been shorter.
the original code would be shorter and
the original code would be shorter and
simpler and you would just compile it
simpler and you would just compile it
for web and be
for web and be
done. It's crazy,
right? So, literally Jack is like fine
right? So, literally Jack is like fine
as a training thing, right? Like
as a training thing, right? Like
whatever. Not my cup of tea because it's
whatever. Not my cup of tea because it's
like weird functional object-oriented
like weird functional object-oriented
hodge podge, but like fine. Jacks for
hodge podge, but like fine. Jacks for
environments was researchers not knowing
environments was researchers not knowing
how to program. That's
it. Oh, and you want to know something
it. Oh, and you want to know something
even
even
crazier? If you actually do want to
crazier? If you actually do want to
write, if you actually do want to write
write, if you actually do want to write
a GPU environment, you can copy and
a GPU environment, you can copy and
paste simple C into CUDA and it'll run
paste simple C into CUDA and it'll run
cuz CUDA is just C that runs on your
cuz CUDA is just C that runs on your
GPU. So there you go. Your same code
GPU. So there you go. Your same code
will run on the
will run on the
GPU. Now admittedly, for more complex
GPU. Now admittedly, for more complex
stuff, you kind of have to think about
stuff, you kind of have to think about
it a little bit more, but not that much.
So cool M. We absolutely need more M's.
So cool M. We absolutely need more M's.
If something like this were submitted to
If something like this were submitted to
Puffer Live as a PR, I will be like
Puffer Live as a PR, I will be like
delighted to have cool new M to study
delighted to have cool new M to study
stuff with like this. But you're making
stuff with like this. But you're making
your life hard on yourself with
jacks. Let me see what you got for state
jacks. Let me see what you got for state
space.
Uh, this is fine. I would just I just
Uh, this is fine. I would just I just
flatten the Well, you can see the
flatten the Well, you can see the
engineering optimizations we do to make
engineering optimizations we do to make
state stuff fast, but this data is
state stuff fast, but this data is
fine.
Discrete action space is awesome. Super
Discrete action space is awesome. Super
easy to implement. I mean, super easy to
easy to implement. I mean, super easy to
like implement networks for
Yeah, coordination and stuff like this
Yeah, coordination and stuff like this
all super
cool. Make it super fast. Make it super
cool. Make it super fast. Make it super
easy to use. Train some cool models on
easy to use. Train some cool models on
it. I would highly suggest trying out
it. I would highly suggest trying out
the puffer style of stuff with this. I
the puffer style of stuff with this. I
think you'll have a good time.
like this type of a thing
like this type of a thing
here. Even with uh without even having
here. Even with uh without even having
like a Jax compile trainer, just with
like a Jax compile trainer, just with
our PyTorch, you can easily train this
our PyTorch, you can easily train this
over a million steps per second. Does
over a million steps per second. Does
not train. Barely
not train. Barely
works. Yeah.
If you're interested in sticking around
If you're interested in sticking around
Puffer, if you want to have if you want
Puffer, if you want to have if you want
to submit something like this to Puffer,
to submit something like this to Puffer,
we would be
delighted. We feature all the M's right
here. It says who made the M.
here. It says who made the M.
This one is
bets and uh you literally just you pip
bets and uh you literally just you pip
install puffer limp and you can play the
install puffer limp and you can play the
end
immediately. Oh, also this is a
immediately. Oh, also this is a
superhuman neural network playing the
superhuman neural network playing the
game in your browser and I can hold
game in your browser and I can hold
shift and I can take over for it. Now
shift and I can take over for it. Now
I'm playing and I'm bad and now I can
I'm playing and I'm bad and now I can
let the bot take over and the bot will
let the bot take over and the bot will
be superhuman again.
It's pretty
fun. But yeah, welcome to my uh my
fun. But yeah, welcome to my uh my
personal crusade to make reinforcement
personal crusade to make reinforcement
learning fast and easy. That is what
learning fast and easy. That is what
this is.
kind of frustrated with the
kind of frustrated with the
jacks.
jacks.
Yep. There's a learning curve with C,
Yep. There's a learning curve with C,
but it is so much easier. So much
but it is so much easier. So much
easier. I wrote Python for 10 years. It
easier. I wrote Python for 10 years. It
took me like 2, three weeks and I was
took me like 2, three weeks and I was
perfectly happy in C. And now it pisses
perfectly happy in C. And now it pisses
me off that I have to write Python most
me off that I have to write Python most
of the time. I am way happier just
of the time. I am way happier just
jamming C environments all day.
But don't go too crazy with this C. The
But don't go too crazy with this C. The
key is to just keep it super simple.
key is to just keep it super simple.
Single
Single
pointers, for loops, if statements, no
pointers, for loops, if statements, no
crazy macros. You just write really
crazy macros. You just write really
simple code. All static
simple code. All static
memory, no crazy memory management. It's
memory, no crazy memory management. It's
just really easy.
And yeah, hang around. It's
And yeah, hang around. It's
discord.gg/pbuffer. We all just hang out
discord.gg/pbuffer. We all just hang out
and build RL stuff all
and build RL stuff all
day. What do you mean static memory? We
day. What do you mean static memory? We
allocate all the memory that we need for
allocate all the memory that we need for
the environment at the start. We don't
the environment at the start. We don't
bother reallocating memory midway
bother reallocating memory midway
through. That's not remotely a
through. That's not remotely a
constraint at all, by the way. We do
constraint at all, by the way. We do
multi- aent, we do variable agent, we do
multi- aent, we do variable agent, we do
all sorts of stuff. It's still easy.
You still malic, but you malic at the
You still malic, but you malic at the
start. And then you don't like do a
start. And then you don't like do a
whole bunch of mallets you have to keep
whole bunch of mallets you have to keep
track of. You don't slow stuff down with
track of. You don't slow stuff down with
that. It's really easy. Here, let me let
that. It's really easy. Here, let me let
me show you the snake code just you can
me show you the snake code just you can
see just how how truly easy stuff like
see just how how truly easy stuff like
this
this
is. Usually no pointers to pointers.
is. Usually no pointers to pointers.
Yep. Okay. So, puff snake is our multi-
Yep. Okay. So, puff snake is our multi-
aent demo, right? Snake is a pretty cool
aent demo, right? Snake is a pretty cool
environment as well. Like snake is
environment as well. Like snake is
pretty darn cool to look at. This thing
pretty darn cool to look at. This thing
trains at two million steps per second.
trains at two million steps per second.
By the way, so this is multi- aent
By the way, so this is multi- aent
snake. It's snake with a whole bunch of
snake. It's snake with a whole bunch of
snakes. 2 million snake snake steps per
snakes. 2 million snake snake steps per
second training with a little CNN LSTM.
second training with a little CNN LSTM.
I believe CNN LSTM. This one might just
I believe CNN LSTM. This one might just
be CNN. We'll see. But uh here's the
be CNN. We'll see. But uh here's the
code. Snake.h H 325 lines after the
code. Snake.h H 325 lines after the
refactor in the new branch. This is
refactor in the new branch. This is
going to be about 270 lines because we
going to be about 270 lines because we
don't need this logging crap anymore.
don't need this logging crap anymore.
You make a strct. This strct is your
You make a strct. This strct is your
environment. It's got some data. You
environment. It's got some data. You
make some
make some
init. You have a free but like you alloc
init. You have a free but like you alloc
once, you free once. That's it. This is
once, you free once. That's it. This is
your compute observation function.
your compute observation function.
444. That's it. This is how you delete a
444. That's it. This is how you delete a
snake from the game. This is how you
snake from the game. This is how you
spawn a snake into the game. This is how
spawn a snake into the game. This is how
you spawn food. This is how you reset
you spawn food. This is how you reset
the end. This is how you step the
the end. This is how you step the
snake. Little bit of logic for stepping
snake. Little bit of logic for stepping
the
snake. That's all the
snake. That's all the
code. This is the client. This is how we
code. This is the client. This is how we
render it. Really, it's just this bit of
render it. Really, it's just this bit of
code right here. Super
code right here. Super
easy. That's it.
runs at like tens of millions of steps
runs at like tens of millions of steps
per second. The actual environment
per second. The actual environment
itself on one CPU
core, you compile it with the flags that
core, you compile it with the flags that
we have, you'll get nice clean error
we have, you'll get nice clean error
messages, better error messages than
messages, better error messages than
Python even. You don't you don't get
Python even. You don't you don't get
stupid seg faults to debug. Um, you just
stupid seg faults to debug. Um, you just
get like clean air messages with address
get like clean air messages with address
sanitizer. We have SYON bindings, but
sanitizer. We have SYON bindings, but
actually in the new version, we have
actually in the new version, we have
made the bindings even easier. The new
made the bindings even easier. The new
binding code is like really easy.
binding code is like really easy.
Actually, did I do it for Snake
Actually, did I do it for Snake
yet? I wonder if I did it for
yet? I wonder if I did it for
Snake. I didn't do it for Snake yet. But
Snake. I didn't do it for Snake yet. But
we have new binding code that makes it
we have new binding code that makes it
like really easy to bind these to
like really easy to bind these to
Python. That's it.
So, I don't know what in what capacity
So, I don't know what in what capacity
you do RL stuff, but if you're looking
you do RL stuff, but if you're looking
for a cool open source place to do some
for a cool open source place to do some
research and sling some code,
research and sling some code,
We also give um compute access to
We also give um compute access to
contributors around
contributors around
here.
So if you need stuff to run experiments
So if you need stuff to run experiments
on and you're actually contributing
on and you're actually contributing
code, we also give access to uh
boxes. Oh, you got compute. That's cool.
boxes. Oh, you got compute. That's cool.
Most universities have terrible compute,
Most universities have terrible compute,
so that is solid. I I got my own after I
so that is solid. I I got my own after I
finished my PhD. And this is way better
finished my PhD. And this is way better
than anything I had at
MIT. We're getting more of these. By the
MIT. We're getting more of these. By the
way,
way,
um as soon as the tariff situation
um as soon as the tariff situation
revolves
revolves
itself, as soon as the tariff situation
itself, as soon as the tariff situation
revolves, uh resolves itself. We're
revolves, uh resolves itself. We're
buying 40 of these.
buying 40 of these.
MIT cluster is
MIT cluster is
insane. No, the machines really, really,
insane. No, the machines really, really,
really sucked, especially for
really sucked, especially for
RL. Each one of these boxes uh has been
RL. Each one of these boxes uh has been
like three times faster than $100,000
like three times faster than $100,000
server for the purposes of a lot of RL
server for the purposes of a lot of RL
stuff. And these are like five grand a
piece. Yeah. So contributors, we just
piece. Yeah. So contributors, we just
give people SSH access to boxes. It's a
give people SSH access to boxes. It's a
fun
time. Mainly the clusters have two slow
time. Mainly the clusters have two slow
CPUs for all the older M's. It doesn't
CPUs for all the older M's. It doesn't
matter as much now, but um like it
matter as much now, but um like it
doesn't matter as much now that our Ms
doesn't matter as much now that our Ms
are super
are super
fast, but
fast, but
uh for like Atari and stuff before when
uh for like Atari and stuff before when
we were doing that, the CPUs were
we were doing that, the CPUs were
awful. And that's uh this is B in the
awful. And that's uh this is B in the
discord as
discord as
well. He is resident puffer
procelite advertises of all things
procelite advertises of all things
puffer.
What in the hell does this
thing? Can I just use the TTGT layer?
thing? Can I just use the TTGT layer?
Hang on.
Oh yeah, I made um I made us a cool
Oh yeah, I made um I made us a cool
thing lately for
thing lately for
bindings. So this file is kind of a
bindings. So this file is kind of a
mess.
I'm trying to clean this up, but
I'm trying to clean this up, but
basically I wrote this 500ish line file
basically I wrote this 500ish line file
which uses just the Python C native API.
which uses just the Python C native API.
And yeah, this is kind of a mess. But
And yeah, this is kind of a mess. But
the cool thing about doing this is that
the cool thing about doing this is that
now instead of having to write this
now instead of having to write this
massive shitty Syon file for every
massive shitty Syon file for every
single end and you just do this, this is
single end and you just do this, this is
the binding for breakout now. So this is
the binding for breakout now. So this is
all the code that is needed to bind this
all the code that is needed to bind this
to uh from C to Python.
to uh from C to Python.
You just define variables that need to
You just define variables that need to
go from Python to
go from Python to
C and
C and
you figure out what variables you want
you figure out what variables you want
to extract as logs and that's
to extract as logs and that's
it. So it's pretty
cool. One of the fun things around here,
cool. One of the fun things around here,
right, is we have people that like to
right, is we have people that like to
help with infra. We have people that
help with infra. We have people that
like to help with some of the
like to help with some of the
engineering work. We have people who
engineering work. We have people who
like to help with experiments. Lots of
like to help with experiments. Lots of
stuff.
And yeah, B is right. Anybody can learn
And yeah, B is right. Anybody can learn
this. Bet is a relatively new
programmer. Bet. How long you been doing
programmer. Bet. How long you been doing
this? Like less than two years,
right? year and a few months of writing
right? year and a few months of writing
like any code at all. Like there you
go. To be fair, he is a trooper.
go. To be fair, he is a trooper.
Like I uh I gave him this project to do.
Like I uh I gave him this project to do.
I massively underestimated how hard of a
I massively underestimated how hard of a
project this was going to be for like a
project this was going to be for like a
new programmer and he still did it.
new programmer and he still did it.
He did it with like two to three times
He did it with like two to three times
too much code at the start, but then he
too much code at the start, but then he
like he trimmed it down and now it's
like he trimmed it down and now it's
actually pretty
actually pretty
reasonable. And this is like one of my
reasonable. And this is like one of my
favorite MS now. Look how freaking cool
favorite MS now. Look how freaking cool
this thing is to watch. It's like just
this thing is to watch. It's like just
so
mesmerizing. It's so cool. I love this
mesmerizing. It's so cool. I love this
M. It's just like this classic Atari
M. It's just like this classic Atari
game, but it's like one of the cooler
game, but it's like one of the cooler
ones. It's like actually a racing game.
Duro was a
beast.
Well, I don't know. Maybe I'm going to
Well, I don't know. Maybe I'm going to
start writing stuff and assembly next.
start writing stuff and assembly next.
We'll
We'll
see. Plus, puffer shipping custom
see. Plus, puffer shipping custom
assembly.
H I don't know. We've been shipping CUDA
H I don't know. We've been shipping CUDA
lately. It's the only next thing I could
lately. It's the only next thing I could
do.
See you around. I'm mostly streaming dev
See you around. I'm mostly streaming dev
pretty much always.
pretty much always.
So, drop on
So, drop on
by. Always use new contributors.
do start the
puffer. We're almost at 2K. 2K on puffer
puffer. We're almost at 2K. 2K on puffer
is going to be
is going to be
awesome. Got to hit 2k on puffer and 10k
awesome. Got to hit 2k on puffer and 10k
on
on
X. Be pretty solid base.
So I think the easiest
So I think the easiest
thing to do
thing to do
here is going to just be to modify the
here is going to just be to modify the
layer to take the mini back
layer to take the mini back
frames directly.
Wait, this doesn't use the cache params,
Wait, this doesn't use the cache params,
right?
thing doesn't look like it uses the
thing doesn't look like it uses the
cache params.
and just
pass last mini batch for Amstic.
You don't need to cash at all on crane.
You don't need to cash at all on crane.
I don't think
The base is now.
You can give it cash here, can't you?
And what if you don't give
it just give Attack params.
Why does this not give you the cats
back? It just fills it in.
Just hack that stupid thing.
first run protein use all mean hyper.
Yes, I figured seating it with like
Yes, I figured seating it with like
reasonable data would be better. It
reasonable data would be better. It
probably should be seated with like the
probably should be seated with like the
optimal hypers or whatever that you
optimal hypers or whatever that you
found. I don't know.
latest
latest
run. I set the means to be the last
run. I set the means to be the last
optimal. Now, that's a good idea.
Do we think that I just did anything?
Well, that gets updated it
seems.
So, let's go get our
model. That is blindingly bright. My
god. Yeah, I know.
This is brutal at
night. Model's freaking tiny. I'm sure
Yeah. So, this thing doesn't do much,
Yeah. So, this thing doesn't do much,
does it?
impulse wars.
Bad. That thing isn't training. I'm so
Bad. That thing isn't training. I'm so
Wait, what thing isn't
training?
training?
This. Yeah, obviously this isn't
training. What's
training. What's
happening? Uh, I tried to implement it
happening? Uh, I tried to implement it
and I couldn't get it to train. Uh, and
and I couldn't get it to train. Uh, and
then I tried their thing and I can't get
then I tried their thing and I can't get
it to train either.
The heck was that?
It does work
It does work
though. Oh, really?
What happens if we don't use this cash?
What happens if we don't use this cash?
Didn't I have something working if like
Didn't I have something working if like
we just don't use the
cash? Wasn't it like ironically doing
cash? Wasn't it like ironically doing
better without the cash?
How big is this
model? 360. So, this is a
model? 360. So, this is a
chunker. This is a chunker.
I thought I had it doing something a bit
I thought I had it doing something a bit
ago, didn't I?
Maybe.
I can't say that the results are
I can't say that the results are
particularly encouraging here
though better like
though better like
literally was
literally was
better and this for 40 mil literally
better and this for 40 mil literally
does better without the
cache marginally.
I had this thing doing something before,
I had this thing doing something before,
didn't
didn't
I? And we're not going to try [ __ ]
I? And we're not going to try [ __ ]
with custom hydro frames a whole
bunch. Okay, that's what I thought. It
bunch. Okay, that's what I thought. It
does actually eventually start doing a
does actually eventually start doing a
thing.
What did I have it doing
initially? What did I have changed?
No, it's not
Just add a yellow into this thing.
Doesn't magically work, does it?
How hard would it be to make this thing
How hard would it be to make this thing
fast? Like very right.
I thought I had like it running
I thought I had like it running
something at one
point. Was it just me leaving this
point. Was it just me leaving this
running for longer? I don't think so.
running for longer? I don't think so.
Right. Did it just like take off at one
Right. Did it just like take off at one
point? I don't think so.
I mean, I wouldn't call it working.
I mean, I wouldn't call it working.
Like, it sort of
Like, it sort of
trained. It still wasn't like
trained. It still wasn't like
good. This is probably it.
It's only stores demo.py.
Maybe not. Oh, hang on. Maybe this is
Maybe not. Oh, hang on. Maybe this is
still not the right one. That could just
still not the right one. That could just
be prior
replay. Yeah, I do think that I saw
replay. Yeah, I do think that I saw
something like this
something like this
though. But this is still not good
though. But this is still not good
perf.
Could it be
this? No.
Right. Okay. Yeah, I mean at least that
Right. Okay. Yeah, I mean at least that
is like definitely learning,
right? I That's good enough that I can
right? I That's good enough that I can
commit it.
Not to this branch.
Uh yeah, but breakout always has a steep
curve. I can do one more experiment
curve. I can do one more experiment
after this, I
after this, I
guess. Warm start.
We'll see what it
does. Ah, it's so [ __ ] slow, though.
does. Ah, it's so [ __ ] slow, though.
Look at this thing. This is double the
Look at this thing. This is double the
size of the previous model, and it's
size of the previous model, and it's
just so slow.
They say is it's literally 100 times
They say is it's literally 100 times
faster than the average RL researchers
faster than the average RL researchers
code. But it should be a thousand times
code. But it should be a thousand times
faster. It's so
slow. I don't think this thing's
slow. I don't think this thing's
freaking I not even Neptune
freaking I not even Neptune
this. Is it not here?
I guess I didn't have to in this
one. I mean, this is
one. I mean, this is
like not great.
It could solve it eventually, but it's
It could solve it eventually, but it's
[ __ ] breakout like anything
[ __ ] breakout like anything
should. Some messages real quick.
Yeah, that's
Yeah, that's
TTT. I uh I'm very much looking forward
TTT. I uh I'm very much looking forward
to not looking at
this. Well crap. Now it's 853 and we
this. Well crap. Now it's 853 and we
didn't really get to do much VR any VR
didn't really get to do much VR any VR
stuff at all today.
stuff at all today.
We can try one thing real quick.
That's V trace
That's V trace
here. I was thinking
here. I was thinking
um a little bit
um a little bit
about the loss with
about the loss with
Vray and I was thinking
Vray and I was thinking
here that you get this like
here that you get this like
clamped loss,
right? So, what if we did
We Oh,
It should be positive advantage here not
It should be positive advantage here not
negative Okay.
This is an L.
Okay, good. This is uh
really. This clamping is not going to do
really. This clamping is not going to do
it.
Okay. So, this is the same curve. Then
Okay. So, this is the same curve. Then
you're telling me that this messes it up
somehow? Like this doesn't train at all
somehow? Like this doesn't train at all
somehow.
That's
That's
bizarre. So, you can't clamp this for
bizarre. So, you can't clamp this for
some weirdo
reason. What if you norm
it? Can you norm
it? Can you norm
it and then clamp
Not exactly what you want to see,
huh? There's something screwy with the
huh? There's something screwy with the
way V trace works. Like, you can't clip
way V trace works. Like, you can't clip
it. And you'd really, really, really,
it. And you'd really, really, really,
really want to be able to clip
it. I mean, I can clip the advantage
it. I mean, I can clip the advantage
technically.
What do you clip in this? Can you like
What do you clip in this? Can you like
You can't clip anything,
right? I had to go to bed soon,
right? I had to go to bed soon,
but I'm annoyed that I didn't get to
but I'm annoyed that I didn't get to
work on this at all today. I kind of
work on this at all today. I kind of
just gassed out on
uh the freaking TTT stuff.
I don't know why I'm scrolling like
I don't know why I'm scrolling like
this. I I got to go to bed shortly cuz
this. I I got to go to bed shortly cuz
I'm like really losing uh the focus. But
I'm like really losing uh the focus. But
I like I just want to see if there's
I like I just want to see if there's
something we can do with this, right?
budgets
actions. Do you want to clip the
actions. Do you want to clip the
advantage, not the loss?
Hang on. This
thing the loss is the ratio,
right? There's no ratio to clip.
This is
This is
logic. This is actions.
Why is
this? It's crazy that clipping
this? It's crazy that clipping
completely breaks this,
huh? Do you just flip the advantage?
big ass
big ass
moth my
moth my
face.
face.
Um I don't know. Let's try clipping the
Um I don't know. Let's try clipping the
advantage. Then I'm going to bed.
I don't expect that to work to be
I don't expect that to work to be
honest. I think I'm going to have to
honest. I think I'm going to have to
think about this more deeply
tomorrow. So, we kind of figured out
tomorrow. So, we kind of figured out
from PO before that the clamping was
from PO before that the clamping was
really
really
important. Now, you're not going to give
important. Now, you're not going to give
me this error on this totally different
me this error on this totally different
algorithm. What the heck is this?
There.
Yeah, clipping the advantage really
Yeah, clipping the advantage really
screws you
over. It's like surprisingly bad as
over. It's like surprisingly bad as
well, isn't
it? It's kind of funny because like
Man, what happens if you just
Man, what happens if you just
[Music]
do What if you do this?
Does anything happen if you do this?
Well,
Is this actually slower than the
previous? It
previous? It
is. Dang. I thought we had something.
is. Dang. I thought we had something.
No, we definitely don't have
something that's negative
something that's negative
advantage. I mean, I'm sure it's not
advantage. I mean, I'm sure it's not
going to work if I do this,
right? The ratio needs to be negative,
right? The ratio needs to be negative,
right?
Yeah, that's unoptimized.
It's the fact that it like hard fails on
It's the fact that it like hard fails on
a lot of demons. To me, it's like
a lot of demons. To me, it's like
there's a quirk or a bug or something.
there's a quirk or a bug or something.
It's not just like Yeah, it's just
It's not just like Yeah, it's just
worse, right? It's like there's a quirk
worse, right? It's like there's a quirk
or a bug cuz like it's pretty darn good
or a bug cuz like it's pretty darn good
on
on
Breakout and then it just hard fails on
Breakout and then it just hard fails on
some other
some other
tasks. Anyways, I'm gonna try uh I
tasks. Anyways, I'm gonna try uh I
probably this will be the first thing I
probably this will be the first thing I
do in the morning. We'll see. I got lots
do in the morning. We'll see. I got lots
to work
to work
on. Try to get in the time. I guess
on. Try to get in the time. I guess
tomorrow I got to run first thing in the
tomorrow I got to run first thing in the
morning. So, we'll do that and then I'll
morning. So, we'll do that and then I'll
come to this. Um but for folks
come to this. Um but for folks
watching, all my stuff is open source.
watching, all my stuff is open source.
It's here buffer.ai. Lots of fun
It's here buffer.ai. Lots of fun
demos. If you want to help me out for
demos. If you want to help me out for
free, just start at the GitHub. almost
free, just start at the GitHub. almost
at 2k stars. It's going to be pretty
at 2k stars. It's going to be pretty
nice. Helps him out a lot. If you want
nice. Helps him out a lot. If you want
to get involved in dev, you don't need
to get involved in dev, you don't need
an RL background. Just need to know how
an RL background. Just need to know how
to program. Join the Discord. Some of
to program. Join the Discord. Some of
our best contributors came in with
our best contributors came in with
actually no experience whatsoever, but
actually no experience whatsoever, but
programming background does help. Um,
programming background does help. Um,
and other than that, you can follow me
and other than that, you can follow me
on X for more RL content. I post lots of
on X for more RL content. I post lots of
mostly RL
mostly RL
things. blog here, quick start guide,
things. blog here, quick start guide,
other useful resources, but there's more
other useful resources, but there's more
on X you can't get anywhere else.
