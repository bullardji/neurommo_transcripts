Kind: captions
Language: en
back live for a little
back live for a little
bit light Dev session
bit light Dev session
today there light Dev
today there light Dev
session
session
um let's check if I missed
um let's check if I missed
anything user messages
wait
what I think yeah
do stream
do stream
work oh yeah we're
work oh yeah we're
live all right so we're just I think
live all right so we're just I think
that the goal for right now is just
that the goal for right now is just
going to be to finish this little demo
going to be to finish this little demo
example it's probably only going to take
example it's probably only going to take
me like an hour if that we'll push this
me like an hour if that we'll push this
we'll hope we don't break anything and
we'll hope we don't break anything and
if anybody's around or has questions
if anybody's around or has questions
then I'll answer stuff there and if not
then I'll answer stuff there and if not
I'll just call it and enjoy my uh Sunday
I'll just call it and enjoy my uh Sunday
afternoon got balers Gate 3 to finish
afternoon got balers Gate 3 to finish
after
all collabs aren't really starting until
all collabs aren't really starting until
early January though this does need to
early January though this does need to
be
be
done um this is a little in for
done um this is a little in for
improvement just want to make a little
improvement just want to make a little
demo
demo
um I less than equal
um I less than equal
Z
what so4
how the heck did that
happen is there not a bounce check on
this
this
oh yeah this
no
no
B but what this is this is just like a
B but what this is this is just like a
super basic test environment I'm porting
super basic test environment I'm porting
the C back to python as a really just
the C back to python as a really just
dead simple
test python environment at 300,000 steps
test python environment at 300,000 steps
per second is a new
per second is a new
one but you can see actually look at
one but you can see actually look at
this this should be like well over a
this this should be like well over a
million look at all the environment
million look at all the environment
overhead cuz
python uh
python uh
rewards it's also not
training should be a puffer Square isn't
there buffer uncore Square
oh no
oh no
comma there we
go and there we go 1.1
go and there we go 1.1
mil and trainable
hey YouTube folks hey twitch
hey YouTube folks hey twitch
folks we're making a little toy demo
folks we're making a little toy demo
envin python so if you wanted to try out
envin python so if you wanted to try out
the new Ultra fast puffer stuff um but
the new Ultra fast puffer stuff um but
the C was a little intimidating this
the C was a little intimidating this
gives you a slightly smoother starting
gives you a slightly smoother starting
point still recommend trying the C it's
point still recommend trying the C it's
nowhere near as hard as you would think
nowhere near as hard as you would think
it's actually and we've had brand new
it's actually and we've had brand new
programmers pick this stuff up and it's
programmers pick this stuff up and it's
just it's very rewarding as well stuff
just it's very rewarding as well stuff
is just effortlessly fast but we'll
is just effortlessly fast but we'll
still get stuff faster than 99% of the
still get stuff faster than 99% of the
rest of the field even in Python
here huge fan do you accept a resumees
here huge fan do you accept a resumees
for collab I'm a CS undergrad yeah I've
for collab I'm a CS undergrad yeah I've
got even better than that we don't
got even better than that we don't
accept resumés you can just collab um
accept resumés you can just collab um
it's you literally there are no
it's you literally there are no
credentials required at all you just
credentials required at all you just
join the Discord Discord g/p Puffer
join the Discord Discord g/p Puffer
you start building cool environments if
you start building cool environments if
you PR a cool environment I do a Live
you PR a cool environment I do a Live
code review uh I hang out on stream I
code review uh I hang out on stream I
hang out in voice a lot of the biggest
hang out in voice a lot of the biggest
contributors came in with zero RL or AI
contributors came in with zero RL or AI
experience like it's mainly just a a
experience like it's mainly just a a
matter of like who's actually interested
matter of like who's actually interested
enough and has the time to put into
enough and has the time to put into
build stuff um so I built this one this
build stuff um so I built this one this
one and where's snake snake
one and where's snake snake
this one was by an RL PhD okay but then
this one was by an RL PhD okay but then
these go uh rware Connect 4 triple Triad
these go uh rware Connect 4 triple Triad
these were by uh experienced programmer
these were by uh experienced programmer
brand new to
brand new to
AI uh relatively newer programmers
AI uh relatively newer programmers
here and then this one's brand new
here and then this one's brand new
programmer and then we've got a few more
programmer and then we've got a few more
in development by new RL people so it's
in development by new RL people so it's
pretty much just like if you like put in
pretty much just like if you like put in
the time and like build some
the time and like build some
environments uh you get code reviews I
environments uh you get code reviews I
give pointers and then the idea is that
give pointers and then the idea is that
like building an environment is the best
like building an environment is the best
way to get familiar with puffer and
way to get familiar with puffer and
familiar with the process of like what
familiar with the process of like what
it takes to get RL to work on a new
it takes to get RL to work on a new
problem and then I start onboarding
problem and then I start onboarding
people to the science side I don't know
people to the science side I don't know
if you're more interested in engineering
if you're more interested in engineering
or science side but um for people that
or science side but um for people that
come over to the science side we have a
come over to the science side we have a
lot of big plans for
lot of big plans for
2025 uh we're going to be running like
2025 uh we're going to be running like
huge massive scale ablations trillions
huge massive scale ablations trillions
of steps of experiments really really
of steps of experiments really really
making RL sane and stable in 2025 and
making RL sane and stable in 2025 and
we're definitely looking for people to
we're definitely looking for people to
help with that um that will have a
help with that um that will have a
slightly higher bar on it we just like
slightly higher bar on it we just like
you'll need to be experienced enough to
you'll need to be experienced enough to
not just be totally wasting compute and
not just be totally wasting compute and
to be running reasonable experiments but
to be running reasonable experiments but
know basically the qualifications there
know basically the qualifications there
are be a competent programmer uh listen
are be a competent programmer uh listen
to feedback have some basic
to feedback have some basic
understanding of how science is done
preferred qualifications include never
preferred qualifications include never
having written
Java I learned in Java just pain in the
ass yeah so either new environment from
ass yeah so either new environment from
scratch or TCG is too big of a project
scratch or TCG is too big of a project
to give to somebody new but like
to give to somebody new but like
finishing Robo code would be a decent
finishing Robo code would be a decent
project for like a new contributor I've
project for like a new contributor I've
been wanting to get somebody to do this
been wanting to get somebody to do this
for a while it's a really cool tank
for a while it's a really cool tank
battle game it's almost done as well it
battle game it's almost done as well it
just needs a little bit of help just
just needs a little bit of help just
join yeah Discord g/p puffer so I've
join yeah Discord g/p puffer so I've
been away for the last two weeks because
been away for the last two weeks because
nops followed by being sick and I it's
nops followed by being sick and I it's
going to be the holidays and I get to
going to be the holidays and I get to
get a root canal for the holidays so I'm
get a root canal for the holidays so I'm
going to be out for a few more days as
going to be out for a few more days as
well but generally uh going forward a
well but generally uh going forward a
lot lot more Dev is going to be live on
lot lot more Dev is going to be live on
stream so it should be very very easy to
stream so it should be very very easy to
get help but we're really trying to uh
get help but we're really trying to uh
to make RL work in 2025 and we actually
to make RL work in 2025 and we actually
have enough devs now I think to make it
have enough devs now I think to make it
happen like we're getting enough
happen like we're getting enough
environment submitted um it's really
environment submitted um it's really
just going to be a matter of leveraging
just going to be a matter of leveraging
those to run new good experiments and
those to run new good experiments and
having enough people that are really
having enough people that are really
interested enough to get on board with
interested enough to get on board with
that type of
that type of
stuff I'm still working on figuring out
stuff I'm still working on figuring out
how I'm going to fund uh like bounties
how I'm going to fund uh like bounties
on specific stuff that's still in the
on specific stuff that's still in the
works but for now great place to
learn would you mind taking a quick look
learn would you mind taking a quick look
at how I generate continuous actions
at how I generate continuous actions
think some things up with my code I
think some things up with my code I
copied what you doing default when I
copied what you doing default when I
eval train policies behaviors really
eval train policies behaviors really
strange only ever move or a in One
strange only ever move or a in One
Direction Sure Link me code and I will
Direction Sure Link me code and I will
do a full review whenever you
do a full review whenever you
want timeline wise
want timeline wise
uh I have a little bit of time tomorrow
uh I have a little bit of time tomorrow
I think I have one meeting or like in
I think I have one meeting or like in
the afternoon so I'll be on a little in
the afternoon so I'll be on a little in
the morning
the morning
tomorrow and then 24th is root canal so
tomorrow and then 24th is root canal so
fun it's Christmas I'll probably take
fun it's Christmas I'll probably take
like 25th maybe 26th off um
like 25th maybe 26th off um
uh and then I'll have like a few days
uh and then I'll have like a few days
before New Year's where I'll be like
before New Year's where I'll be like
merging more
merging more
environments I'm really excited for your
environments I'm really excited for your
environment as well I think it deserves
environment as well I think it deserves
a better renderer too like I think we
a better renderer too like I think we
should make a way better like a nicer
should make a way better like a nicer
renderer for you hold on my chat's not
working I got to get the uh the window
working I got to get the uh the window
up with the clickable
chat can you post the link again or
chat can you post the link again or
actually I can just type it
in uh
Captain
space probably have full review next
space probably have full review next
week also like agents trained before I
week also like agents trained before I
pr to puffer yeah that's fine
pr to puffer yeah that's fine
um but like for next week so let me
um but like for next week so let me
check
check
Cal see when I can do
this
this
so a little bit of time in the morning
so a little bit of time in the morning
tomorrow root canal Christmas maybe if
tomorrow root canal Christmas maybe if
you have time I can do 26th or
you have time I can do 26th or
27th if we just schedule something we'll
27th if we just schedule something we'll
do that live for you whenever you're
do that live for you whenever you're
ready
up to you how many files on layout stuff
up to you how many files on layout stuff
I'm not going to too much if you
I'm not going to too much if you
have multiple
files we are the one thing I want to be
files we are the one thing I want to be
Petty about is we have to make sure the
Petty about is we have to make sure the
Box 2D compilation doesn't make it hard
Box 2D compilation doesn't make it hard
for
for
users I mean I won't have
time need one next week I mean I won't
time need one next week I mean I won't
have time this week
well yeah I mean I'm saying like if you
well yeah I mean I'm saying like if you
do have time next week I can find some
do have time next week I can find some
time for a full
time for a full
review oh this week is because it's
review oh this week is because it's
Sunday I see what you mean yeah yeah I
Sunday I see what you mean yeah yeah I
forgot in my mind Sunday is the end of
forgot in my mind Sunday is the end of
the
week so yeah that's fine so that's like
week so yeah that's fine so that's like
right before New Year or whatever yeah
right before New Year or whatever yeah
we can do
we can do
that um oh right I was reviewing
that um oh right I was reviewing
code where is uh what should I look
at
at
policy
gotcha what's this I want to see the
gotcha what's this I want to see the
scale of your actions
Ops I'm not seeing your
Ops I'm not seeing your
constants you'll have to just tell me
constants you'll have to just tell me
the scale of OBS but I'll look at your
policy okay so you
have whatever this
have whatever this
is and you
encode num
encode num
drones the
heck uh
th a torch that's
th a torch that's
fine
fine
XY whether to shoot or
not I think that should be fine um
um wait
normal is this what I
normal is this what I
did I know I have a demo of
this I know I have a demo of this
this I know I have a demo of this
somewhere
is it in
is it in
policy. or
models so decode me and decode log
models so decode me and decode log
standard
standard
deviation and then I
deviation and then I
do this is the sample code right
here okay so I do take a
here okay so I do take a
normal and then I return the
normal and then I return the
distribution
so that seems
fine do you know if this network
fine do you know if this network
architecture is any good
though yeah it's just your param so
though yeah it's just your param so
you're just
you're just
parameterizing so you got to just
parameterizing so you got to just
realize this is not the only way that
realize this is not the only way that
you could do continuous actions what
you could do continuous actions what
this is assuming is that your is that
this is assuming is that your is that
your action space should follow a normal
your action space should follow a normal
distribution which is actually not
distribution which is actually not
necessarily a great assumption um
but yeah it's a little tricky because
but yeah it's a little tricky because
like continuous is generally less tested
like continuous is generally less tested
and often harder to optimize as far as
and often harder to optimize as far as
I'm aware uh compared to
I'm aware uh compared to
continuous so we do want to do
continuous so we do want to do
continuous but we might have to test it
discret yeah so this is this is the
discret yeah so this is this is the
point of having you do stuff like this
point of having you do stuff like this
right is you make environments you try
right is you make environments you try
to build policies and like you pick up
to build policies and like you pick up
stuff about reinforcement learning in
stuff about reinforcement learning in
the process
right the whole point of the contributor
right the whole point of the contributor
pipeline
um okay explaining me what the heck
um okay explaining me what the heck
you're doing with this network so you
you're doing with this network so you
have weapon type
have weapon type
embeddings floating wall type em map
embeddings floating wall type em map
cell embed so you have all these
cell embed so you have all these
different types of
different types of
embeddings you've got this map CNN which
embeddings you've got this map CNN which
is
I don't know what the size is here if
I don't know what the size is here if
this is like 11 by 11 this is my net
this is like 11 by 11 this is my net
that I use for 11 by 11 this is
that I use for 11 by 11 this is
perfectly good maybe a little small I
perfectly good maybe a little small I
think I use 64 here I
think I use 64 here I
forget 21 by okay so then that makes
forget 21 by okay so then that makes
sense because otherwise it gets too
sense because otherwise it gets too
big is this a local crop centered on the
big is this a local crop centered on the
uh the agent or is this like a global
uh the agent or is this like a global
obs
whole map okay I've not tried that
whole map okay I've not tried that
before but it should that should work
before but it should that should work
fine compute CNN
shape
shape
walls okay so the first thing is
the first thing is I would ask why you
the first thing is I would ask why you
have a loop here I mean this is more
have a loop here I mean this is more
just a speed optimization but there's
just a speed optimization but there's
basically no reason you should ever have
basically no reason you should ever have
a loop here um this you can batch
a loop here um this you can batch
embeddings
embeddings
so weapon type
OBS plus yeah so star so this is just
OBS plus yeah so star so this is just
OBS and then you apply the
embedding offset and offset plus so
embedding offset and offset plus so
there's maybe some fancy indexing but
there's maybe some fancy indexing but
you should be able to do this without a
you should be able to do this without a
loop unless I don't understand what
loop unless I don't understand what
you're doing
you're doing
here what's
here what's
this yeah so same thing here and then
this yeah so same thing here and then
same thing
same thing
here so you should be able to make this
here so you should be able to make this
net like massively faster there's no
net like massively faster there's no
reason you should have four Loops in a
reason you should have four Loops in a
forward
pass bit
pass bit
longer bit slower than though then I
longer bit slower than though then I
would be suspicious as how you as to how
would be suspicious as how you as to how
you did it because it shouldn't be
you did it because it shouldn't be
slower it's like really sketchy to have
slower it's like really sketchy to have
loops in a in a forward pass like
this technically with big enough batch
this technically with big enough batch
size and big enough networks maybe but
size and big enough networks maybe but
how fast is your net right now like if
how fast is your net right now like if
you're over 500k I won't complain though
you're over 500k I won't complain though
it is like a little bit like I can't
it is like a little bit like I can't
even read this this is like I don't even
even read this this is like I don't even
know exactly what you're doing I assume
know exactly what you're doing I assume
it's just three different embedding
it's just three different embedding
types with some weird offsets but I
types with some weird offsets but I
can't even
can't even
tell
tell
um but like assuming that you have some
um but like assuming that you have some
reasonable embeddings okay then what do
reasonable embeddings okay then what do
you do you
take
take
300K on your
300K on your
desktop we'll get you a puffer box for
desktop we'll get you a puffer box for
testing 500k is the is Benchmark for uh
testing 500k is the is Benchmark for uh
4090 and and uh keep in mind right one
4090 and and uh keep in mind right one
of my favorite things about writing
of my favorite things about writing
really complicated M's myself is I get
really complicated M's myself is I get
to tell everybody else who writes more
to tell everybody else who writes more
complicated M's like might writes
complicated M's like might writes
complicated M's if your M isn't more
complicated M's if your M isn't more
complicated than neural mm mo3 then the
complicated than neural mm mo3 then the
code shouldn't be more complicated than
code shouldn't be more complicated than
neural mm3 right and that includes the
neural mm3 right and that includes the
networks
and that thing literally has an economy
and that thing literally has an economy
in
it policy can be yeah a lot of the time
it policy can be yeah a lot of the time
it's like don't get clever like you try
it's like don't get clever like you try
something simple and then you slowly
something simple and then you slowly
build up to something more complex with
build up to something more complex with
these
these
things
um yeah okay so this is like if you
um yeah okay so this is like if you
don't have a ton of different entities
don't have a ton of different entities
this can kind of work
this is just a flatten as far as I can
this is just a flatten as far as I can
tell so
tell so
usually let me explain to you entity
usually let me explain to you entity
style networks
style networks
and you know I'm going to do this for
and you know I'm going to do this for
you real quick because you put a lot of
you real quick because you put a lot of
work in so I'm going to give you a nice
work in so I'm going to give you a nice
explanation and this actually will be
explanation and this actually will be
good for people watching as
good for people watching as
well I'm also free to chat and voice at
well I'm also free to chat and voice at
some point later today if you want
some point later today if you want
whenever um so
whenever um so
here so there are kind of two different
here so there are kind of two different
ways that you can
ways that you can
parameterize a network for the type of
parameterize a network for the type of
game that you have and it depends on how
game that you have and it depends on how
you represent the observations right so
you represent the observations right so
one way is you either globally or just
one way is you either globally or just
centered on your agent either way it's
centered on your agent either way it's
usually more efficient if you Center it
usually more efficient if you Center it
on your agent but like you have your
on your agent but like you have your
agent there you know you have your
agent there you know you have your
grid doesn't matter if the environment
grid doesn't matter if the environment
is continuous you can still partition it
is continuous you can still partition it
into a grid and so you have something
into a grid and so you have something
like this or
like this or
whatever and then in each of these
whatever and then in each of these
cells right each of these cells tells
cells right each of these cells tells
you maybe it has like a PID to an entity
you maybe it has like a PID to an entity
so this is like entity one this entity 5
so this is like entity one this entity 5
this is entity three and then you see
this is entity three and then you see
all these different entities and then
all these different entities and then
what is the representation of each of
what is the representation of each of
these tiles well this is actually going
these tiles well this is actually going
to give you a 3D
to give you a 3D
array so like 3D and if we like take
array so like 3D and if we like take
this like this little bit here and we
this like this little bit here and we
like zoom in on
like zoom in on
this then this is actually just going to
this then this is actually just going to
be an array that this is going to be
be an array that this is going to be
like uh
like uh
health and then like I don't know what
health and then like I don't know what
else your agents have like
weapon
ammo all the different things in it hey
ammo all the different things in it hey
how's it going man man let me finish
how's it going man man let me finish
this explanation and we can chat about
this explanation and we can chat about
your uh I'm sure the the optimizer thing
your uh I'm sure the the optimizer thing
you want to chat about um
you want to chat about um
so yeah this is one way to do it and
so yeah this is one way to do it and
this is generally what I recommend
this is generally what I recommend
because it's really easy to write
because it's really easy to write
architectures for this you just take
architectures for this you just take
this thing maybe you have to do like a
this thing maybe you have to do like a
multi-hot encoding or something we have
multi-hot encoding or something we have
examples in the Moa and the neural M mo3
examples in the Moa and the neural M mo3
but you just do that en coding you throw
but you just do that en coding you throw
it into a con maybe like your own agent
it into a con maybe like your own agent
has some extra data as as well so maybe
has some extra data as as well so maybe
like you have more stuff right maybe you
like you have more stuff right maybe you
have like an extra private data here
have like an extra private data here
right maybe you have like
inventory gold
inventory gold
whatever um but then the architecture
whatever um but then the architecture
that you use for this is just going to
that you use for this is just going to
be like
con so this is your 2D data and then you
con so this is your 2D data and then you
have 1D
have 1D
data and this goes into
data and this goes into
like fully connected
Network and then these get
Network and then these get
Conta and
Conta and
then
then
LM
LM
right so that's one architecture this is
right so that's one architecture this is
what I generally recommend because it's
what I generally recommend because it's
easier than the thing that you're going
easier than the thing that you're going
to have to do now with entity style data
to have to do now with entity style data
um The Entity style data can be made
um The Entity style data can be made
fast it can be made very very good in
fast it can be made very very good in
fact and it is amenable to like Advanced
fact and it is amenable to like Advanced
networks with Transformers and stuff I
networks with Transformers and stuff I
highly recommend Clem's blog on this
highly recommend Clem's blog on this
entity neural
networks but the other type whoops
new okay so the other type
new okay so the other type
here is going to be entity based which
here is going to be entity based which
is you still have your your agent
is you still have your your agent
here but now you have your agent over
here but now you have your agent over
here your agent over here and this it's
here your agent over here and this it's
not on a GD G and then what you do is
not on a GD G and then what you do is
you take all these different
agents and you take their attributes and
agents and you take their attributes and
you put them into a nice big Matrix like
you put them into a nice big Matrix like
this so this is Agent one and this is
this so this is Agent one and this is
Agent two and this is Agent three but
Agent two and this is Agent three but
you can't just now put these into a
you can't just now put these into a
neural network as easily because they
neural network as easily because they
the order needs to be invariant right
the order needs to be invariant right
like you don't want to have to relearn
like you don't want to have to relearn
everything if like agent one is here and
everything if like agent one is here and
then agent two is here versus Agent two
then agent two is here versus Agent two
is here and agent one is here so then
is here and agent one is here so then
what you have to do is some sort of
what you have to do is some sort of
intentional type Network so the simplest
intentional type Network so the simplest
possible form of this which usually
possible form of this which usually
doesn't work amazingly is going to be
doesn't work amazingly is going to be
like you take this block of
like you take this block of
data and then you like put it into a
data and then you like put it into a
fully connected net mind you each of
fully connected net mind you each of
these is going to the fully independ uh
these is going to the fully independ uh
the network
independently and then what you do is
independently and then what you do is
you like take a
you like take a
Max and then you take a
Max and then you take a
Max uh over this Dimension so you take
Max uh over this Dimension so you take
an entity
Max and then you do
Max and then you do
lstm that's one version uh this here can
lstm that's one version uh this here can
be any attentional operator where any
be any attentional operator where any
attentional operator takes n vectors and
attentional operator takes n vectors and
gives you one vector back so this can
gives you one vector back so this can
actually be like a
actually be like a
Transformer I don't know what's a
Transformer I don't know what's a
transformer robot
transformer robot
thing I don't know how to draw a robot
thing I don't know how to draw a robot
thing
Transformer so you can do do this it
Transformer so you can do do this it
requires a dramatically different type
requires a dramatically different type
of network though you see because you
of network though you see because you
get this like entity invariant Dimension
get this like entity invariant Dimension
and GPU Drive does this uh Clemens does
and GPU Drive does this uh Clemens does
this in his work a few other things do
this in his work a few other things do
it it's a little harder right it's a
it it's a little harder right it's a
little harder and you can't just slap
little harder and you can't just slap
your old default architecture on it so
your old default architecture on it so
hopefully that's a good explanation for
hopefully that's a good explanation for
you
you
here um
here um
generally what what actionable stuff do
generally what what actionable stuff do
I
I
recommend first example yeah first
recommend first example yeah first
example is usually the default now if
example is usually the default now if
you don't want to go through all that
you don't want to go through all that
work just yet what I would recommend to
work just yet what I would recommend to
you that would be a very quick exercise
you that would be a very quick exercise
is to add a flag and this is actually
is to add a flag and this is actually
really good for our research as well we
really good for our research as well we
would like to have this if you're
would like to have this if you're
amendable to it just add a flag to your
amendable to it just add a flag to your
environment that is like discretize
environment that is like discretize
equals false and you you set discretize
equals false and you you set discretize
equals true you turn the action space
equals true you turn the action space
into multi- discreete instead of
into multi- discreete instead of
continuous how would that work well
continuous how would that work well
let's say that your uh your action space
let's say that your uh your action space
is like1
is like1
to
to
one right then what you do is you do
one right then what you do is you do
discret of
discret of
five and then you just map like 0 goes
five and then you just map like 0 goes
to1 one goes to
uh5 2 goes to
uh5 2 goes to
zero you
zero you
see so it's very easy to discretize
see so it's very easy to discretize
and turn a continuous space into a
and turn a continuous space into a
multi- discreet space and because you're
multi- discreet space and because you're
doing low dimensional continuous control
doing low dimensional continuous control
not like really fine grain continuous
not like really fine grain continuous
control this will look this will work
control this will look this will work
perfectly fine and this is done widely
perfectly fine and this is done widely
across all different branches of
across all different branches of
reinforcement
learning so that would be my
learning so that would be my
recommendation if you are concerned
recommendation if you are concerned
about the continuous actions and you
about the continuous actions and you
just want to test your net I would
just want to test your net I would
suggest you do that and in fact this
suggest you do that and in fact this
would be very helpful to with puffer Li
would be very helpful to with puffer Li
uh because one of the things that we
uh because one of the things that we
want to do over the next couple of weeks
want to do over the next couple of weeks
or
months Pablo released this thing which
months Pablo released this thing which
is a continuous version of Atari we want
is a continuous version of Atari we want
to add continuous actions to some of our
to add continuous actions to some of our
environments especially Atari but you
environments especially Atari but you
know also maybe some of our more complex
know also maybe some of our more complex
Ms and then we want to really understand
Ms and then we want to really understand
whether continuous action spaces are
whether continuous action spaces are
fundamentally harder to learn or if
fundamentally harder to learn or if
there's some algorithmic deficiency that
there's some algorithmic deficiency that
we can fix or something similar there
so this is one one of the branches of
so this is one one of the branches of
research that I think we want to do and
research that I think we want to do and
this is in fact something that I I've
this is in fact something that I I've
told spener about as well as maybe one
told spener about as well as maybe one
of the things he can look
at but he is looking at it in the uh
at but he is looking at it in the uh
context like P and
breakout any other
questions posted a video on
questions posted a video on
YouTube or video
oh is that yeah yeah yeah the policy
oh is that yeah yeah yeah the policy
that just like shoots in One Direction I
that just like shoots in One Direction I
can't I'm not an oracle right that's
can't I'm not an oracle right that's
just a crappy policy if you link me want
just a crappy policy if you link me want
to be curves maybe I can tell you
something e
I'll look at your W curves for
you oh my are you still here for
you oh my are you still here for
um
um
psgd we can look at that after if that's
psgd we can look at that after if that's
what you're here for if you're uh unless
what you're here for if you're uh unless
you're just dropping in to say
you're just dropping in to say
hi yeah so this is do you have episode
hi yeah so this is do you have episode
return on
here okay this starts way too high yeah
here okay this starts way too high yeah
this policy loss is
this policy loss is
nuts just lurking yeah no worries uh we
nuts just lurking yeah no worries uh we
can start the like algorithmic collabs
can start the like algorithmic collabs
whenever pretty much it's just going to
whenever pretty much it's just going to
be like great plus sweeps uh we can
be like great plus sweeps uh we can
probably get you a box for that I think
probably get you a box for that I think
we might have some spare at the moment
we might have some spare at the moment
we'll see um but yeah comprehensive
we'll see um but yeah comprehensive
ablations what we're going to want to do
ablations what we're going to want to do
train reward at top
train reward at top
left yeah I saw
it it's so
slow I literally have python M that run
slow I literally have python M that run
that
that
fast very simple ones but
losses what was I looking for oh yeah
losses what was I looking for oh yeah
these are kind of
silly intergate with heavy balls since
silly intergate with heavy balls since
many Ops and methods yeah try it I will
many Ops and methods yeah try it I will
help with that for
help with that for
sure
um okay so I got to ask you is this 16
um okay so I got to ask you is this 16
total environments does each environment
total environments does each environment
internally have a
internally have a
bunch is it 1536 internal m is that
correct
[Music]
badge per puff rounds
badge per puff rounds
okay so then uh what's going to happen
okay so then uh what's going to happen
there that's kind of
there that's kind of
sketchy I teach you how to do some math
sketchy I teach you how to do some math
it's very simple
it's very simple
math okay
so
so
1536 I'm 16 in bons
right all right that's what you have and
right all right that's what you have and
then your batch size is
then your batch size is
26 2
26 2
144 divided by
144 divided by
this that is the effective Horizon over
this that is the effective Horizon over
which you're able to compute returns per
which you're able to compute returns per
environment so basically you're getting
environment so basically you're getting
in this optimized you're getting
in this optimized you're getting
trajectory segments of length around
trajectory segments of length around
10 not good enough uh you've got too
10 not good enough uh you've got too
many environments
many environments
I would generally
I would generally
suggest
suggest
4096 or maybe
4096 or maybe
8192 you got three to six three to six
8192 you got three to six three to six
times too many environments at the
moment there may be some other stuff
moment there may be some other stuff
screwy the policy loss is nuts straight
screwy the policy loss is nuts straight
from the
from the
get-go um your policy law should not
get-go um your policy law should not
look like that and you can see basically
look like that and you can see basically
that this is not learning anything this
that this is not learning anything this
is
flat this is complete policy failure
flat this is complete policy failure
right here at the top complete
collapse that's what I would suggest
collapse that's what I would suggest
tweaking
first like what do I do for n
mo3 so for neural
mo3 so for neural
mo3 I've got
mo3 I've got
260k with M mini batch of
260k with M mini batch of
32k and I have a total
32k and I have a total
of uh this is internally each of these
of uh this is internally each of these
has four environments with uh five 12
has four environments with uh five 12
agent I think this is 8192 total agents
and that's like cutting it close on the
and that's like cutting it close on the
horizon
lengths so those are my recommendations
lengths so those are my recommendations
to start with I'd also just try a
to start with I'd also just try a
massively simpler Network
massively simpler Network
architecture you
architecture you
know it's kind of crazy to write a
know it's kind of crazy to write a
network like the one that you have
network like the one that you have
before you have some baseline training
those are my recommendations
cool well if that settles stuff I'll
cool well if that settles stuff I'll
keep finishing this little
toy we now have python stuff training at
toy we now have python stuff training at
300K steps a
second P Puffer squar
it's
puff where's this command there we go
by lowering M's batch size is
large it doesn't have to go higher
large it doesn't have to go higher
though as like I'm not telling you that
though as like I'm not telling you that
it has to go
it has to go
higher I'm telling you you probably have
higher I'm telling you you probably have
too many
too many
environments like Okay the reason that
environments like Okay the reason that
we pick the reason that we do the batch
we pick the reason that we do the batch
sizes that we have and like you want to
sizes that we have and like you want to
have a forward pass bat size that
have a forward pass bat size that
saturates your GPU which means that you
saturates your GPU which means that you
need to have enough environments to make
need to have enough environments to make
a batch size big enough for small
a batch size big enough for small
networks that's usually around
networks that's usually around
4096 sometimes as low as 1024
4096 sometimes as low as 1024
and then if your environment if you want
and then if your environment if you want
to squeeze the last little bit of
to squeeze the last little bit of
performance out of it you use at least
performance out of it you use at least
an asynchronicity factor of two meaning
an asynchronicity factor of two meaning
that you have a bank of environments
that you have a bank of environments
that's running in the background well
that's running in the background well
the bank of environments that you're
the bank of environments that you're
currently using is stepping so then like
currently using is stepping so then like
4096 environments times 2 8192 total
4096 environments times 2 8192 total
agents so if they're multi-agent
agents so if they're multi-agent
environments however many you need to
environments however many you need to
get 8192 agents with 4096 agents used
get 8192 agents with 4096 agents used
per forward pass and then you want to
per forward pass and then you want to
make sure that you're at least getting a
make sure that you're at least getting a
reasonable Horizon 32 64 ideally 10 uh
reasonable Horizon 32 64 ideally 10 uh
128 times the total number of Agents is
128 times the total number of Agents is
going to be equal to your batch size
going to be equal to your batch size
divide by something between 4 and 16
divide by something between 4 and 16
usually and that gives you your mini
usually and that gives you your mini
batch size done
I think I know what they broke
here for
ah this is probably not as uh
ah this is probably not as uh
fast as it could
be still
know
e e
don't see a one on here
there's the one where's the
there's the one where's the
two oh I haven't added it yet
there yeah
Target
r ah so this is the wrong one right here
r ah so this is the wrong one right here
this
this
is
is
uh r
solved
solved
in about 6 million
in about 6 million
steps mind you we have crazy large facts
steps mind you we have crazy large facts
so this is even though a very simple
so this is even though a very simple
task it's not designed to be sample
task it's not designed to be sample
efficient it's only we only care about
efficient it's only we only care about
wall clock in this particular case
wall clock in this particular case
now let's try the C
now let's try the C
version hey welcome how's it
going and for whatever reason the python
going and for whatever reason the python
version
learns in fewer
learns in fewer
steps is this
broken Unbreak this somehow
I think it should learn by
I think it should learn by
then maybe the environments aren't well
then maybe the environments aren't well
they would have to not be identical
right CR num m
right CR num m
M batch
M batch
size yeah so this is correct
size yeah so this is correct
for like they actually should match
here it's very odd
yeah so this is like
yeah so this is like
solved let's figure out why this does
solved let's figure out why this does
not work the same oh and then also we
not work the same oh and then also we
got to
try okay you can see that this is
try okay you can see that this is
different what if I do back
native should be the
same yeah it's the same it's not the V
same yeah it's the same it's not the V
it's something with this specific M
maybe it's kind of
weird so
match this as closely as I
match this as closely as I
can take a
can take a
zero get a random position
it should be or not
and that might change the learn Dynamics
oh it's still pretty much solved by 6
oh it's still pretty much solved by 6
mil okay
um and then
um and then
step we set the
step we set the
actions terminals goes to
actions terminals goes to
false rewards goes to
false rewards goes to
zero UPS goes to empty
this down plus one right Plus + one up -
this down plus one right Plus + one up -
one left minus
one left minus
one tick is greater than 3 *
one tick is greater than 3 *
s over that over that that over that
s over that over that that over that
yep SK this to True reward
yep SK this to True reward
toga1
toga1
reset and then we set infos in this
reset and then we set infos in this
case 1 return evasion rewards terminals
case 1 return evasion rewards terminals
conations very good and then what else
conations very good and then what else
here so n r size C size which is very
here so n r size C size which is very
good right yep that's what we
good right yep that's what we
want
if uh this is is this
wrong me
wrong me
see no this is
correct observations a POS
correct observations a POS
Target then we set terminal to True
Target then we set terminal to True
reward one we
reward one we
reset okay and then we do
reset okay and then we do
this and
this and
this and this is basically now line by
this and this is basically now line by
line
line
equal uh so why does one of these learn
equal uh so why does one of these learn
perfectly and the other
doesn't I think
do I do anything with the
RNG this could be an RNG thing
RNG this could be an RNG thing
right make sure puffer still good
so we can see Pi squ is harder to learn
something changed because we used to not
something changed because we used to not
get a ton of These
Warnings so some compile settings need
Warnings so some compile settings need
to be fixed
to be fixed
here fine for now
though I think these are just like all
though I think these are just like all
weird pedantic warnings
well isn't that interesting now it
well isn't that interesting now it
doesn't learn at all
[Music]
so very well can be something with
RNG well is this going to give you yeah
RNG well is this going to give you yeah
this is going to give you the
this is going to give you the
uh the same on every reset I think so
uh the same on every reset I think so
that's
that's
bad what if we do it on
allocate it still melt
I would think this would give you unique
I would think this would give you unique
seeds I don't actually know for sure
seeds I don't actually know for sure
that it is seaing to be
that it is seaing to be
fair I can't see why it would be
fair I can't see why it would be
actually cuz we're not spawning new
actually cuz we're not spawning new
python processes or new C processes it's
python processes or new C processes it's
only
only
one one C process
okay what else could this
okay what else could this
be like why would this end be hard to
be like why would this end be hard to
learn for some weird
reason this is like line for line the
same discreet of five
oh this is the
oh this is the
same with you and eight right
[Music]
[Music]
I yeah this is
fine reset all the
M's
H kind of bizarre
pretty darn sure this match
exactly I'm running what would be
exactly I'm running what would be
different here
so me set to
zero empty is zero
zero empty is zero
right and then
agent size size over two
yep take gets up to zero
makes
makes
random
random
[Music]
observations
observations
uhuh actions of
uhuh actions of
zero
terminals that's
terminals that's
fine you do this it's like
um this looks line by line identical to
me but they're not training the
me but they're not training the
same am I like messing up the number of
same am I like messing up the number of
environments somehow
secretly um
so oh does it not train as well as it
so oh does it not train as well as it
used to now hold on
used to now hold on
I didn't change anything that should
I didn't change anything that should
have made a
difference oh no it's just
difference oh no it's just
RNG yeah yeah just
RNG yeah know there it goes just
RNG sure
yeah that's
fine let's implement the renderer are
we'll train this
we'll train this
policy actually let's make it trained
policy actually let's make it trained
for last time not
annoying
annoying
okay so we're training this
policy and then we're going to look at
policy and then we're going to look at
it see if it looks
weird e
okay um
okay um
red equal. observations.
reshape not getting any render mode
and
see
see
okay so this is reasonable but if you'll
okay so this is reasonable but if you'll
notice it's
notice it's
um it's only in One Direction here so I
um it's only in One Direction here so I
didn't fix I messed this up
basically so probably it's harder when
basically so probably it's harder when
you do it this way
yeah that's more in line with the other
yeah that's more in line with the other
environment
now this is why you always freaking
now this is why you always freaking
render you will always be wrong until
render you will always be wrong until
you render
you render
always even on the most basic of
things 101
lines 100 lines
lines 100 lines
cleaner um
I go back to 20
I go back to 20
mil see if this matches the C version
now roughly matches doesn't have to be
now roughly matches doesn't have to be
exact
400k there goes the
400k there goes the
camera fix this
okay there's the 20 mil stuck
at8 I wonder if we broke something
at8 I wonder if we broke something
though
though
because I thought that it would work
because I thought that it would work
before it's very easy
before it's very easy
environment try this
one maret see
okay it's about the same
8585 and let's see if this is any
8585 and let's see if this is any
faster I think the
main it is actually
and there you can see it matches so
and there you can see it matches so
there's a little
there's a little
RNG as to uh how well it does
RNG as to uh how well it does
there probably bad
hypers I'm going to add this to the
hypers I'm going to add this to the
commit and then I'm going to go check to
commit and then I'm going to go check to
make sure that uh it doesn't work in the
make sure that uh it doesn't work in the
older
version up for
squared I also think I should just make
squared I also think I should just make
a new file real quick
one
496 and B size
496 and B size
496 like this
yeah this way it gets its own
so we need to figure it out there's like
so we need to figure it out there's like
some weird thing
there this works but there's something
weird for
good
good
370k what if I do four
370k what if I do four
workers that change anything
it's actually slower
still suppose makes sense the end is
still suppose makes sense the end is
just fast enough
this yeah the multiprocessing overhead
this yeah the multiprocessing overhead
is there even with uh
one that would get amortized with um
one that would get amortized with um
Asing so why did the Native not work
here oh because you have
here oh because you have
multiple yeah it's because you have
multiple yeah it's because you have
multiple that's
fine I just need to add a warning as
fine I just need to add a warning as
well
seor
e
e e
there we go
we can probably handle this more
we can probably handle this more
transparently but I think this is good
transparently but I think this is good
for
now
e
e e
this just required a lot of little silly
this just required a lot of little silly
uh changes for this uh this API
uh changes for this uh this API
Improvement I think it should be a
Improvement I think it should be a
little faster though for uh for other
little faster though for uh for other
stuff
stuff
like 100,000 however
like 100,000 however
100,000 python pretty
100,000 python pretty
good for
the only other thing I want to do is see
the only other thing I want to do is see
if I can get it even
if I can get it even
faster for
today forgot butterfly
okay that's everything um
try this
first
okay we're getting somewhere
now I think you need to have a ton of
now I think you need to have a ton of
them is the only Annoying Thing
oh this needs to stay at
oh this needs to stay at
192 you want more workers than
this like I think this is going to be
slower oh no that's
slower oh no that's
fast there we go
where's the overhead coming
from 62 5
from 62 5
8 43
8 43
42 16 11 lower Mist
42 16 11 lower Mist
maybe slightly lower miss that doesn't
maybe slightly lower miss that doesn't
seem very significant right
seem very significant right
1615 it's a little
significant 0 seconds
significant 0 seconds
seconds I mean
I guess just too much info
reporting yeah it's literally just infos
reporting yeah it's literally just infos
reporting I would
reporting I would
imagine slightly annoying
not much way around
that I guess I could change the
that I guess I could change the
reporting interval
I would like to get a million and
see I can't do it with the same 4096
see I can't do it with the same 4096
environments the thing
environments the thing
right yeah I have d a synchronicity I
right yeah I have d a synchronicity I
could do it with 16k
environments 16
still
still
no yeah then it's got to be the um
orangs
28 like this
size e
and refactor a little bit
just a little bit I got to
just a little bit I got to
refactor just take
refactor just take
this down here
this down here
somehow
else like
this for
there this is how it
is try
this size
there we
go oh it was 900k what happened
bet those means are getting to it
how's
this well now you can't
tell for
try
this it's just really hard to get stuff
this it's just really hard to get stuff
to run that fast in Python
holy e
I honestly don't think this whole report
I honestly don't think this whole report
thing is even good because it makes the
thing is even good because it makes the
example more complicated I don't think
example more complicated I don't think
it's worth making this faster at the
it's worth making this faster at the
price of
price of
uh but you know I will keep this logic
uh but you know I will keep this logic
because I like I think this refactor is
because I like I think this refactor is
decent for the python
decent for the python
version so what I'm going to do
version so what I'm going to do
is undo all this stuff
T this
here and do
here and do
this think this is good
so you can actually see there it's not
so you can actually see there it's not
even the infos we're not even returning
even the infos we're not even returning
the
the
infos so it's just uh multi procing
infos so it's just uh multi procing
being
annoying okay so now this
works maybe I can find a config for
it we better
940 stable no not
stable 900
stable 900
stable about
four much lower
oh actually we see 9% out of time
oh actually we see 9% out of time
there I missed that
if I do 16 do I have 9% end
time no but we get more synchronization
maybe and this is actually
slower so let's do um
96 * 3
1228 and
workers divide by num workers
workers divide by num workers
or
CR there we
CR there we
go it's a
million for
and just Pi
squar or that way is it poer squar
there we go
one other thing I want to
one other thing I want to
do can I do like
train a decent
policy my uh desktop just goes nuts
policy my uh desktop just goes nuts
whenever you use the
whenever you use the
multiprocessing see the CPU
ports e
just trying a couple
just trying a couple
things fiddling with it for a little
bit there we go that's
bit there we go that's
better a little
bit
e e
that didn't help
just trying to get something
reasonable that might have been a little
much e
[Music]
[Music]
I would have expected that to have
I would have expected that to have
helped or El's weird
now we'll tune it at some point
now we'll tune it at some point
it's an easy end no point doing it this
it's an easy end no point doing it this
way this is the type of thing you
way this is the type of thing you
totally just
totally just
automate basically very very simple and
automate basically very very simple and
bad hyper parameters makes it look like
bad hyper parameters makes it look like
it's really hard to learn but it's not
it's really hard to learn but it's not
it's just bad hypers we'll leave it at
it's just bad hypers we'll leave it at
017 or whatever the original was I'm
017 or whatever the original was I'm
going to train this I'm post a little
going to train this I'm post a little
Quick
Clip call a
day for
go e
I love how auntu has um this little
I love how auntu has um this little
recorder built directly
into built directly into it
24 okay and I just have to convert this
the heck happened here why is it
like why did it record this top
portion e
[Music]
and come on
mod
e
e
e
e
e e
there we
go it feels good to post that given that
go it feels good to post that given that
uh this stupid ass
uh this stupid ass
library now has 177,000
library now has 177,000
stars um because they claim to do that
stars um because they claim to do that
and lie about it it's fun to just post
and lie about it it's fun to just post
that a couple days later that we
that a couple days later that we
actually can do that is for simple
actually can do that is for simple
environments let me uh let me commit all
environments let me uh let me commit all
this stuff up
uh
uh
serial support for
serial support for
Native puffer
Native puffer
M up to one M
Train
Train
fired l
fired l
refactors so wait it h we'll just yal
refactors so wait it h we'll just yal
little
meret hey just got here what is it with
meret hey just got here what is it with
Genesis uh it's fake is what it
Genesis uh it's fake is what it
is they just massively lied about it as
well yeah the uh the person to follow
well yeah the uh the person to follow
for this my go-to in
for this my go-to in
robotics is
robotics is
Stone
um can't sign in
um can't sign in
but
but
yeah so basically uh they're a bunch of
yeah so basically uh they're a bunch of
lion
lion
shills and
uh another day in
AI
stupid I suggest you check out uh K's
stupid I suggest you check out uh K's
well Chung has some cool stuff too but
well Chung has some cool stuff too but
if you're doing heavy robotics then um
if you're doing heavy robotics then um
check out Stone stuff with many
check out Stone stuff with many
skill if you have non robotics like non
skill if you have non robotics like non
super heavy physic stuff check out
super heavy physic stuff check out
puffer Li I don't know if you're doing
puffer Li I don't know if you're doing
heavy physics or not if you're doing
heavy physics or not if you're doing
like light physics or just like
like light physics or just like
non-physics based Sim you check out
non-physics based Sim you check out
puffer
puffer
Li we actually have million step per
Li we actually have million step per
second
second
training um and on much more interesting
training um and on much more interesting
environments than
this I'm going to just YOLO merge this
this I'm going to just YOLO merge this
thing because I'm sick of having Dev
thing because I'm sick of having Dev
branches that take forever to merge mer
branches that take forever to merge mer
I won't ship the PIP package though I'll
I won't ship the PIP package though I'll
leave the pit package
stable e
yes I just got to send this to somebody
yes I just got to send this to somebody
on Discord
on Discord
this was a
this was a
uh
request very
good it is
good it is
4:43
4:43
um I think if there's anything else I
um I think if there's anything else I
want to do right now
want to do right now
anybody need some help getting started
anybody need some help getting started
with puffer or anything I'm trying to
with puffer or anything I'm trying to
think if there's anything else I want to
think if there's anything else I want to
Dev on right now or if I'm just going to
Dev on right now or if I'm just going to
you know call it and enjoy an hour off
you know call it and enjoy an hour off
or whatever Sunday before
dinner there will be tomorrow there will
dinner there will be tomorrow there will
be more live
be more live
stuff um possibly more code reviews or
stuff um possibly more code reviews or
Dev or whatever I'm going to be live
Dev or whatever I'm going to be live
streaming a lot of the dev now all this
streaming a lot of the dev now all this
stuff is free and open source if you
stuff is free and open source if you
want to help us out a ton for free all
want to help us out a ton for free all
you got to do is start the repo really
you got to do is start the repo really
really helps us come on don't let don't
really helps us come on don't let don't
let the fake repo have 10 times more
let the fake repo have 10 times more
stars than puffer we were the fastest
stars than puffer we were the fastest
growing RL Library I'm pretty sure of
growing RL Library I'm pretty sure of
the year until these guys just decided
the year until these guys just decided
to come out a left field and Li
to come out a left field and Li
bench would you consider doing a
bench would you consider doing a
tutorial video for how to use and create
tutorial video for how to use and create
stuff for puffer I've there's lots of
stuff for puffer I've there's lots of
the there's like lots and lots of
the there's like lots and lots of
tutorial material out there man um
tutorial material out there man um
here
here
so we've got this blog that gives you
so we've got this blog that gives you
high level overview of all of our latest
high level overview of all of our latest
stuff we've got this RL quick start
stuff we've got this RL quick start
guide for new RL newcomers to RL we've
guide for new RL newcomers to RL we've
got this single like Doc Page it's just
got this single like Doc Page it's just
like a tutorial walk through of
like a tutorial walk through of
everything in puffer and how to use
everything in puffer and how to use
everything
everything
and then for one o I have a video
and then for one o I have a video
showing like going through stuff but
showing like going through stuff but
this covers it pretty darn well like
this covers it pretty darn well like
it's really really
simple if you want to work on getting
simple if you want to work on getting
code ball to train oh are you on stream
that'd be
sweet oh okay so yeah you're listening
sweet oh okay so yeah you're listening
so yeah awesome I will do
so yeah awesome I will do
that yeah link that I'm going to use the
that yeah link that I'm going to use the
restroom I'll be back in a minute and
restroom I'll be back in a minute and
then I will be more than happy to get
then I will be more than happy to get
that set up that environment looks
that set up that environment looks
awesome uh this will be a real treat be
awesome uh this will be a real treat be
right
back
e
e
e e
okay
this repo is
private check out
branch do you not want to just PR it
nck SL puffer
lib oh I
see let me see
where is it in
where is it in
here it's not in uh
here it's not in uh
ocean this is where we would put
it branch code ball
gotcha okay let's see how you did this
gotcha okay let's see how you did this
so we got
oh yeah you made your life a little
oh yeah you made your life a little
harder than
harder than
uh then it needs to be here you can just
uh then it needs to be here you can just
add this to our main setup.py
local
Dev well typically what I suggest
Dev well typically what I suggest
contributors do is just add it like the
contributors do is just add it like the
way that we would add it as our real M
way that we would add it as our real M
it'll be just as fast for local
build ocean but that requires yeah but
build ocean but that requires yeah but
the build ocean it's in the root
the build ocean it's in the root
directory which is where you run
directory which is where you run
training
training
from okay
from okay
sure but are you building through python
sure but are you building through python
every time for Dev like the python
every time for Dev like the python
compilation is really slow I generally
compilation is really slow I generally
suggest um the C builds for development
suggest um the C builds for development
I never used like python build while I'm
I never used like python build while I'm
building new Ms I only do that when I'm
building new Ms I only do that when I'm
integrating
integrating
it's like dramatically dramatically
it's like dramatically dramatically
faster to just be running the C back and
faster to just be running the C back and
forth Loop and you get better compiler
forth Loop and you get better compiler
messages as
well yeah it's pretty slow yeah so I
well yeah it's pretty slow yeah so I
will show you how I would have suggested
will show you how I would have suggested
setting this stuff up
setting this stuff up
um what is your preference on how to do
um what is your preference on how to do
this so I can copy stuff over and just
this so I can copy stuff over and just
like manually make the pr um um if you
like manually make the pr um um if you
want to be listed on the as a
want to be listed on the as a
contributor on the repo it's probably
contributor on the repo it's probably
better if you PR it
better if you PR it
yourself would you like to just PR like
yourself would you like to just PR like
a code ball Branch off of 20 Dev if you
a code ball Branch off of 20 Dev if you
want to do that and then I can like I
want to do that and then I can like I
can help you PR and like merge it or are
can help you PR and like merge it or are
you just looking for me to like play
you just looking for me to like play
around with it and see like what do you
around with it and see like what do you
want me to do right now with it
currently just play around okay I can do
currently just play around okay I can do
that
that
gotcha in that case I'm just going to
gotcha in that case I'm just going to
clone this separately
and you just go into puffer ocean ball
oops check out
P
P
install
install
this
this
nope how do you install
nope how do you install
it build
X or do we need
RB do you just stick RB into
here oh I probably don't have RB in the
here oh I probably don't have RB in the
route hold
on oh jeez you're on
on oh jeez you're on
collab my guy we got to get you a
better a better Dev setup holy
hell you're on like Ultra masochism mode
collab was for testing okay fair I
collab was for testing okay fair I
generally just do Docker for that
generally just do Docker for that
frankly it's
frankly it's
like the docker so easy provided you
like the docker so easy provided you
have a GPU we don't we don't ship CPU
have a GPU we don't we don't ship CPU
containers at the moment um I don't know
containers at the moment um I don't know
Docker is just
nice doesn't really make sense for CPU
nice doesn't really make sense for CPU
though to be
though to be
fair it's mostly like all the ca
it still gives you consistent Dev
it still gives you consistent Dev
environment
though all right and then how do I run
though all right and then how do I run
this code ball.
P this is a perf test Maybe
P this is a perf test Maybe
make
run uh you have uh those are Mac OS
run uh you have uh those are Mac OS
arguments right
there let me see
I hate make
files I just do this what happens if I
files I just do this what happens if I
just do
this
implicit how does this work if you don't
implicit how does this work if you don't
have time
oh
okay
LGL L OBS C I don't think you need
LGL L OBS C I don't think you need
either of these though I just Mac
thingies cannot
find
find
yeah are you still watching this Captain
yeah are you still watching this Captain
as
well you need op
C hold on
uh
so this is not linking RB
now you're missing
lrb look
Flags these flags where are they right
here build from
here build from
rout that'd be better
whoa does this have a train policy
whoa does this have a train policy
already what is
this how is this there's no way this is
this how is this there's no way this is
random
random
actions they're following the
ball
right
right
freeze is it a scripted policy
scripted okay I was going to say that
scripted okay I was going to say that
was like I'd be very impressed if you'd
was like I'd be very impressed if you'd
already
already
done done that oh like yeah yeah okay VC
done done that oh like yeah yeah okay VC
three
subract what's this I guess this is your
function you have weights loaded in here
function you have weights loaded in here
wait do you have you have a network
but they were bad
but they were bad
okay we can help with
okay we can help with
that I mean this is freaking
awesome they don't use linear lstm so
awesome they don't use linear lstm so
they don't run in
they don't run in
C we have several examples of dedicated
C we have several examples of dedicated
C networks they're not that bad to
C networks they're not that bad to
write I even I did the neurom MMO 3 one
write I even I did the neurom MMO 3 one
and C as well so it's not that
hard this is really cool to watch
this good
this good
physics is this just your own physics or
physics is this just your own physics or
is this box 2D for
physics llm
physics llm
translated I'm kind of surprised that
translated I'm kind of surprised that
even works at all
basically open sourced a handwritten
basically open sourced a handwritten
physics Sim Oh
physics Sim Oh
okay that's cool no I prefer
okay that's cool no I prefer
self-contained self-contained stuff is
self-contained self-contained stuff is
good you got some freeze to write I
good you got some freeze to write I
think
here what would would you like me to do
here what would would you like me to do
um what would you like me to do with
um what would you like me to do with
this do you want me to read through
this do you want me to read through
code don't see leaks on my machine
code don't see leaks on my machine
that's because on Mac you don't have F
that's because on Mac you don't have F
sanitized F sanitized doesn't work
sanitized F sanitized doesn't work
correctly on Mac so you're not actually
correctly on Mac so you're not actually
getting the sanitizer
getting the sanitizer
information train and look at the
information train and look at the
rewards all
right puffer code ball should be
it outputs yeah it doesn't work
nicely some this is just a bad PR that I
nicely some this is just a bad PR that I
merged I I've already fixed this I'm
merged I I've already fixed this I'm
pretty
pretty
sure you just happen to get the branch
sure you just happen to get the branch
at like the hour interval in which I
at like the hour interval in which I
pushed
pushed
that for
let me go get my key
it's that fast on
CPU
CPU
what what
what what
is this this is running
GPU 100k
hang on let me f out where I put Discord
hang on let me f out where I put Discord
so I can still read your
so I can still read your
messages changed the I didn't change
anything there might be an auto
detect okay so we
detect okay so we
have well this looks
have well this looks
good return goes up
right I didn't change the config at
all let me
see wait what the heck to these
see wait what the heck to these
semicolons
semicolons
do is this a
do is this a
comment I thought it was
comment I thought it was
a
a
pound I didn't know that was a valid
pound I didn't know that was a valid
comment
comment
symbol uh
device 100K on CPU would not be
device 100K on CPU would not be
surprising though
we do get 100K plus we can actually get
we do get 100K plus we can actually get
like 250k for some faster Ms on CPU
like 250k for some faster Ms on CPU
puffer very
fast 200k uh GPU is kind of embarrassing
though we have really good
machines you will get access to some for
machines you will get access to some for
uh running experiments on this as well
uh running experiments on this as well
this is a large enough contribution to
this is a large enough contribution to
Merit
that so you can look forward to
that
slow let's
see let's start with your policy
MLP
policy where is the
whoops MLP
policy okay so you just did a fancy
policy okay so you just did a fancy
thing
is this policy copied from
is this policy copied from
somewhere do you know that you actually
somewhere do you know that you actually
need these extra
layers it works slightly better than
layers it works slightly better than
linear
lstm well it's just an extra
layer right
I'm going try this policy real
I'm going try this policy real
quick it should
work so num robots num Nitros this is
work so num robots num Nitros this is
six agents per environment is the uh are
six agents per environment is the uh are
you controlling all of them
all are controlled by the network okay
all are controlled by the network okay
so it's a slightly awkward
number um let me think how many Ms that
number um let me think how many Ms that
should
be uh
six six
82 it's annoying it's not divisible but
82 it's annoying it's not divisible but
I think it's fine to just round
I think it's fine to just round
down it's
down it's
82 you can raise it oh that's even
82 you can raise it oh that's even
better let's do eight that's nicer and
better let's do eight that's nicer and
then we divide B it's 512
m is it possible to make the parameters
m is it possible to make the parameters
for the model
I don't know if I just did it for RNN or
I don't know if I just did it for RNN or
for model or
whatever could a device side
huh is this
huh is this
policy oh it should be fine
is there something weird here
try
this
nope pound works just as well I didn't
nope pound works just as well I didn't
even know that the uh I didn't even know
even know that the uh I didn't even know
semicolon was a
thing
thing
Batman there's your
so that's not going to go
anywhere why why NS um I assume that
anywhere why why NS um I assume that
that means your observations are
that means your observations are
actually n
does this thing actually
does this thing actually
handle um number of robots
correctly for simulation yes it is
possible I see some
nams why is it 40 96x 10 by
nams why is it 40 96x 10 by
9 that seems
9 that seems
weird number robots plus
weird number robots plus
two n
should be typed
should be typed
TBH uh scon type checks for
TBH uh scon type checks for
you scon type checks for
you scon type checks for
you doesn't it's not going to type check
you doesn't it's not going to type check
individual elements it'll check when you
individual elements it'll check when you
like pass the tensors in
type what does that do python doesn't
type what does that do python doesn't
actually check the
actually check the
types like you mean
annotated numpy struct oh no yeah you
annotated numpy struct oh no yeah you
can do that but we actually we typically
can do that but we actually we typically
don't do that for um
don't do that for um
uh for Native environments because it
uh for Native environments because it
adds
adds
overhead this is totally fine it's just
overhead this is totally fine it's just
there NS in here
somehow so I see the third one and the
somehow so I see the third one and the
sixth one are nams does that ring a bell
why is there so much stuff in
here is there like substantial logic in
here is there like substantial logic in
syon Z position of the first robot
I'm uh I'm not sure how you have this
I'm uh I'm not sure how you have this
thing working
thing working
here oh you have this make I see you
here oh you have this make I see you
have this make observation buffer thing
have this make observation buffer thing
okay I Noah wanted to finally get to
okay I Noah wanted to finally get to
work on TCG awesome do you know what the
work on TCG awesome do you know what the
next step that need to be done there
next step that need to be done there
yeah so so uh if you want to just do
yeah so so uh if you want to just do
something simple to start off I would
something simple to start off I would
get a land area working on the side so
get a land area working on the side so
like the lands are displayed separately
like the lands are displayed separately
and then the bigger thing is I think
and then the bigger thing is I think
right now you can attack and block with
right now you can attack and block with
the same card on the same turn so fix
the same card on the same turn so fix
that so it actually matches magic and
that so it actually matches magic and
then after that you can start on some
then after that you can start on some
like basic spells probably start with
like basic spells probably start with
like instance and stuff and then work
like instance and stuff and then work
your way up to more complex stuff from
your way up to more complex stuff from
there there's already a stack
there there's already a stack
implemented in everything
implemented in everything
and I will be around for uh pretty much
and I will be around for uh pretty much
all the winter break as well to help
all the winter break as well to help
actions on python side and cide are
actions on python side and cide are
different I I don't know if you're also
different I I don't know if you're also
on the Discord now Noah I have the
on the Discord now Noah I have the
Discord well you see it up there um
Discord well you see it up there um
helping this guy as well he's got a cool
helping this guy as well he's got a cool
end very cool end
translates from eight discrete actions
translates from eight discrete actions
to two continuous variables uh is there
to two continuous variables uh is there
anywhere where like numb robots would be
anywhere where like numb robots would be
hardcoded to six or something because
hardcoded to six or something because
when you set it to eight stuff
when you set it to eight stuff
breaks let me just double check that for
breaks let me just double check that for
sure
what if I set this to
32 yep still
broken I'll set it to six for
broken I'll set it to six for
now uh we'll just have to figure out six
now uh we'll just have to figure out six
times
6 * 128
6 * 128
maybe *
256 1536 that's too
256 1536 that's too
small 3072
small 3072
maybe so this is going to be 3072
so this is what
so this is what
144 and then batch size will be
144 and then batch size will be
like time
16 98 304
yeah so that actually works
right in my
shell slightly better
400,000 so according to this your
400,000 so according to this your
environment is
slow possibly you're losing perf in scon
slow possibly you're losing perf in scon
or
or
something I don't know why you have um
something I don't know why you have um
the amount of logic in scon that you do
the amount of logic in scon that you do
I think that you should
I think that you should
either option one would be to make sure
either option one would be to make sure
you're not calling back to scon or to
you're not calling back to scon or to
see I calling back to python in
syon um the easier thing is to just like
syon um the easier thing is to just like
follow the way that we do our scyon
follow the way that we do our scyon
binds and move most of it into
binds and move most of it into
C it's pretty
easy I actually find debugging uh C way
easy I actually find debugging uh C way
easier than debugging through cython
easier than debugging through cython
because in C you just boot up GDB right
because in C you just boot up GDB right
where scon like converts it into a big
where scon like converts it into a big
giant mess of c and it's kind of a pain
so techically I think easier to have
so techically I think easier to have
more stuff in C rather than
less but I got you to
420,000 not bad for few minutes
420,000 not bad for few minutes
work you can see 56% M time right here
work you can see 56% M time right here
this is how I know that your m is this
this is how I know that your m is this
low you know the
bottleneck with um observations as small
bottleneck with um observations as small
as you have this is like an easy million
as you have this is like an easy million
step per second environment for training
step per second environment for training
easy million step per second
train and in fact it's a pretty nice
train and in fact it's a pretty nice
opportunity to experiment with some cool
opportunity to experiment with some cool
architectures because you literally just
architectures because you literally just
have entity data so I can show you some
have entity data so I can show you some
cool stuff with
that I don't know if you were around for
that I don't know if you were around for
the earlier uh Spiel on that but started
the earlier uh Spiel on that but started
this stream like close to the start of
this stream like close to the start of
this stream I gave a pretty detailed
this stream I gave a pretty detailed
overview of like different types of
overview of like different types of
neuron nets for different types of
neuron nets for different types of
data moving observation to see sped it
data moving observation to see sped it
up quite a bit fix action to be discreet
up quite a bit fix action to be discreet
pass other buffers to see well I
pass other buffers to see well I
wouldn't just make everything discreet
wouldn't just make everything discreet
actually um what I would do and because
actually um what I would do and because
this would be really helpful for
this would be really helpful for
research as well um I think we have an
research as well um I think we have an
example of this in MOA you you just add
example of this in MOA you you just add
a discretized flag to uh you add a
a discretized flag to uh you add a
discretized flag to the python setting
discretized flag to the python setting
right or continuous flag whatever and
right or continuous flag whatever and
you can set the observation space to be
you can set the observation space to be
discrete or continuous so you basically
discrete or continuous so you basically
can support both um there really should
can support both um there really should
not be any overhead from one or the
not be any overhead from one or the
other you move the conversion into C but
other you move the conversion into C but
you make it
you make it
optional it's a pretty cool thing cuz
optional it's a pretty cool thing cuz
then you can train with discreet or
then you can train with discreet or
continuous action heads you can
continuous action heads you can
discretize for now but I would
discretize for now but I would
definitely keep it in mind because like
definitely keep it in mind because like
I know it's pretty cool to have the
I know it's pretty cool to have the
support for continuous actions and it'll
support for continuous actions and it'll
be really helpful for the research as
be really helpful for the research as
well currently in scon yeah just look at
well currently in scon yeah just look at
all of our other environments like our
all of our other environments like our
scon buying are really really
scon buying are really really
small keep the yeah you can totally do
small keep the yeah you can totally do
that I think we might even have that in
that I think we might even have that in
MOBA I don't know if I uh if I kept that
MOBA I don't know if I uh if I kept that
code path working but the idea is there
or you just like add a discretized flag
or you just like add a discretized flag
and set the space conditionally you use
and set the space conditionally you use
a float for um you know float array for
a float for um you know float array for
observations for the not for
observations for the not for
observations for actions use a float
observations for actions use a float
array and then um you know if it's
array and then um you know if it's
discreet well it's it's an INT but it's
discreet well it's it's an INT but it's
in a float array it's just fine and if
in a float array it's just fine and if
it's continuous then it's continuous
so this thing is at
17.3 yeah so it like it learns up to
17.3 yeah so it like it learns up to
here and then it stops learning is that
here and then it stops learning is that
what
happens does it run to the center I
happens does it run to the center I
don't know I
don't know I
haven't how do I run it
haven't how do I run it
I'm not sure if it saved a
policy so here's the other thing neev
policy so here's the other thing neev
that um is probably tripping you up you
that um is probably tripping you up you
have a selfplay
have a selfplay
environment so as soon as you learn
environment so as soon as you learn
something your opponent has learned it
something your opponent has learned it
as
as
well we do support selfplay but for
well we do support selfplay but for
early environments that are like new in
early environments that are like new in
development what I would suggest that
development what I would suggest that
you do is you add an option to make
you do is you add an option to make
one side scripted and just use your
one side scripted and just use your
current policy that like pushes the ball
current policy that like pushes the ball
for scripted and then get win rate
for scripted and then get win rate
versus the scripted
versus the scripted
policy and then you should be able to
policy and then you should be able to
train you know your policy to
train you know your policy to
consistently beat the simple scripted
consistently beat the simple scripted
policy and then you can go selfplay from
policy and then you can go selfplay from
there to get like superhuman policies
there to get like superhuman policies
but that'll be really useful for
but that'll be really useful for
debugging I literally just gave a
debugging I literally just gave a
captain like the same advice earlier
captain like the same advice earlier
today
he's also got like um
h
I don't know it might be slightly better
I don't know it might be slightly better
than random it's hard to
than random it's hard to
say I haven't seen them own goal it from
say I haven't seen them own goal it from
the start
yet tried to hit out of the way it looks
yet tried to hit out of the way it looks
like
like
yeah it's probably pretty bad but better
yeah it's probably pretty bad but better
than
random current reward is just running to
random current reward is just running to
the oh I see well then yeah it's not
the oh I see well then yeah it's not
doing that obviously
doing that obviously
right I would check rewards because
right I would check rewards because
often like you're not you're forgetting
often like you're not you're forgetting
to reset them or something at the start
to reset them or something at the start
of uh the start of a new step like
of uh the start of a new step like
forgetting to reset your reward is very
forgetting to reset your reward is very
common um
common um
you know make sure your buffers are
you know make sure your buffers are
actually making it into python stuff
actually making it into python stuff
like
like
that is it the only environment in
experiments how do I
know yeah
no
no
worries let me see if there's anything
worries let me see if there's anything
else obvious
and then I got to run to
dinner this is an awesome end
dinner this is an awesome end
though I think do you know do your
though I think do you know do your
discretization or
discretization or
whatever uh Port some stuff to
whatever uh Port some stuff to
[Music]
[Music]
see add scripted policy option to the
see add scripted policy option to the
environment for the
environment for the
opponents yeah I'm looking at your other
opponents yeah I'm looking at your other
stuff first to make sure you've got
stuff first to make sure you've got
reasonable configs
reasonable configs
badge gamma G Lambda
badge gamma G Lambda
Yep this value function coefficient is
Yep this value function coefficient is
low there's no reason to have it this
low there's no reason to have it this
low leave it at 0.
low leave it at 0.
five
five
um it's just going to create
Jank don't mess with the clip params and
Jank don't mess with the clip params and
the VF coefficient if you don't know if
the VF coefficient if you don't know if
you don't have a reason for
you don't have a reason for
it reward
code goal scored well you do actually
code goal scored well you do actually
have more than
have more than
a me
say is this it right here
this all meant to be inside the
loop what's
this oh this is logging that's fine
gold scored reward looks
gold scored reward looks
fine to get
used yeah you do you do have a goal
used yeah you do you do have a goal
reward don't
you I think I got to go I think dinner
you I think I got to go I think dinner
is
is
uh currently Nord didn't do okay
uh currently Nord didn't do okay
um so one thing I will tell you
um so one thing I will tell you
continuous rewards can be a little
continuous rewards can be a little
tricky because the Delta between like
tricky because the Delta between like
moving a little bit to the center or a
moving a little bit to the center or a
little bit away is very small so what I
little bit away is very small so what I
would do is I would replace it with like
would do is I would replace it with like
a constant 0.1 if you move closer to the
a constant 0.1 if you move closer to the
uh closer to the center and negative.
uh closer to the center and negative.
one if you move farther from the center
one if you move farther from the center
I would try
I would try
that if you're just trying to get like
that if you're just trying to get like
debug it continuous rewards are very
debug it continuous rewards are very
tricky dense rewards are good continuous
tricky dense rewards are good continuous
rewards are a little
rewards are a little
tricky so I've given you try the continu
tricky so I've given you try the continu
like try those
like try those
rewards um scripted
rewards um scripted
opponents proportional to distance
opponents proportional to distance
change to Center yes that is fine
change to Center yes that is fine
roughly scale of like 0.1 for really
roughly scale of like 0.1 for really
dense rewards like that 0.1 to one
dense rewards like that 0.1 to one
somewhere in there
somewhere in there
um that that's what I would
um that that's what I would
do proportional to change not
do proportional to change not
proportional to Absolute distance to
Center yeah so that would be my
Center yeah so that would be my
suggestion other than that if this is
suggestion other than that if this is
most of the code if it's like a thousand
most of the code if it's like a thousand
is lines we can definitely clean some
is lines we can definitely clean some
stuff
stuff
up and uh get a nice clean merge of this
up and uh get a nice clean merge of this
pretty
soon yeah you just see you have oh I
soon yeah you just see you have oh I
guess we have a separate render h
only 200 lines though I just put this
only 200 lines though I just put this
all in a
file I get rid of some of the macros on
file I get rid of some of the macros on
like the if deaths and whatever but I'll
like the if deaths and whatever but I'll
help you with that stuff all
help you with that stuff all
right um I got to run to dinner awesome
right um I got to run to dinner awesome
environment uh pick some of the stuff
environment uh pick some of the stuff
that I suggested and then I will be
that I suggested and then I will be
around tomorrow or whenever and uh yeah
around tomorrow or whenever and uh yeah
hopefully we can get something cool
hopefully we can get something cool
training
training
I think this would be an end people
I think this would be an end people
would really be interested in for other
would really be interested in for other
folks watching I stream this stuff a lot
folks watching I stream this stuff a lot
all this code is free and open
all this code is free and open
source if you just check not this one
source if you just check not this one
peer.
peer.
GitHub star repel helps a
GitHub star repel helps a
ton also you can join the Discord
ton also you can join the Discord
discord. jpu or click right here and you
discord. jpu or click right here and you
can follow me on X I post tons of RL and
can follow me on X I post tons of RL and
you can see when I'm live as well thanks
you can see when I'm live as well thanks
all and

Kind: captions
Language: en
back live for a little
back live for a little
bit light Dev session
bit light Dev session
today there light Dev
today there light Dev
session
session
um let's check if I missed
um let's check if I missed
anything user messages
wait
what I think yeah
do stream
do stream
work oh yeah we're
work oh yeah we're
live all right so we're just I think
live all right so we're just I think
that the goal for right now is just
that the goal for right now is just
going to be to finish this little demo
going to be to finish this little demo
example it's probably only going to take
example it's probably only going to take
me like an hour if that we'll push this
me like an hour if that we'll push this
we'll hope we don't break anything and
we'll hope we don't break anything and
if anybody's around or has questions
if anybody's around or has questions
then I'll answer stuff there and if not
then I'll answer stuff there and if not
I'll just call it and enjoy my uh Sunday
I'll just call it and enjoy my uh Sunday
afternoon got balers Gate 3 to finish
afternoon got balers Gate 3 to finish
after
all collabs aren't really starting until
all collabs aren't really starting until
early January though this does need to
early January though this does need to
be
be
done um this is a little in for
done um this is a little in for
improvement just want to make a little
improvement just want to make a little
demo
demo
um I less than equal
um I less than equal
Z
what so4
how the heck did that
happen is there not a bounce check on
this
this
oh yeah this
no
no
B but what this is this is just like a
B but what this is this is just like a
super basic test environment I'm porting
super basic test environment I'm porting
the C back to python as a really just
the C back to python as a really just
dead simple
test python environment at 300,000 steps
test python environment at 300,000 steps
per second is a new
per second is a new
one but you can see actually look at
one but you can see actually look at
this this should be like well over a
this this should be like well over a
million look at all the environment
million look at all the environment
overhead cuz
python uh
python uh
rewards it's also not
training should be a puffer Square isn't
there buffer uncore Square
oh no
oh no
comma there we
go and there we go 1.1
go and there we go 1.1
mil and trainable
hey YouTube folks hey twitch
hey YouTube folks hey twitch
folks we're making a little toy demo
folks we're making a little toy demo
envin python so if you wanted to try out
envin python so if you wanted to try out
the new Ultra fast puffer stuff um but
the new Ultra fast puffer stuff um but
the C was a little intimidating this
the C was a little intimidating this
gives you a slightly smoother starting
gives you a slightly smoother starting
point still recommend trying the C it's
point still recommend trying the C it's
nowhere near as hard as you would think
nowhere near as hard as you would think
it's actually and we've had brand new
it's actually and we've had brand new
programmers pick this stuff up and it's
programmers pick this stuff up and it's
just it's very rewarding as well stuff
just it's very rewarding as well stuff
is just effortlessly fast but we'll
is just effortlessly fast but we'll
still get stuff faster than 99% of the
still get stuff faster than 99% of the
rest of the field even in Python
here huge fan do you accept a resumees
here huge fan do you accept a resumees
for collab I'm a CS undergrad yeah I've
for collab I'm a CS undergrad yeah I've
got even better than that we don't
got even better than that we don't
accept resumés you can just collab um
accept resumés you can just collab um
it's you literally there are no
it's you literally there are no
credentials required at all you just
credentials required at all you just
join the Discord Discord g/p Puffer
join the Discord Discord g/p Puffer
you start building cool environments if
you start building cool environments if
you PR a cool environment I do a Live
you PR a cool environment I do a Live
code review uh I hang out on stream I
code review uh I hang out on stream I
hang out in voice a lot of the biggest
hang out in voice a lot of the biggest
contributors came in with zero RL or AI
contributors came in with zero RL or AI
experience like it's mainly just a a
experience like it's mainly just a a
matter of like who's actually interested
matter of like who's actually interested
enough and has the time to put into
enough and has the time to put into
build stuff um so I built this one this
build stuff um so I built this one this
one and where's snake snake
one and where's snake snake
this one was by an RL PhD okay but then
this one was by an RL PhD okay but then
these go uh rware Connect 4 triple Triad
these go uh rware Connect 4 triple Triad
these were by uh experienced programmer
these were by uh experienced programmer
brand new to
brand new to
AI uh relatively newer programmers
AI uh relatively newer programmers
here and then this one's brand new
here and then this one's brand new
programmer and then we've got a few more
programmer and then we've got a few more
in development by new RL people so it's
in development by new RL people so it's
pretty much just like if you like put in
pretty much just like if you like put in
the time and like build some
the time and like build some
environments uh you get code reviews I
environments uh you get code reviews I
give pointers and then the idea is that
give pointers and then the idea is that
like building an environment is the best
like building an environment is the best
way to get familiar with puffer and
way to get familiar with puffer and
familiar with the process of like what
familiar with the process of like what
it takes to get RL to work on a new
it takes to get RL to work on a new
problem and then I start onboarding
problem and then I start onboarding
people to the science side I don't know
people to the science side I don't know
if you're more interested in engineering
if you're more interested in engineering
or science side but um for people that
or science side but um for people that
come over to the science side we have a
come over to the science side we have a
lot of big plans for
lot of big plans for
2025 uh we're going to be running like
2025 uh we're going to be running like
huge massive scale ablations trillions
huge massive scale ablations trillions
of steps of experiments really really
of steps of experiments really really
making RL sane and stable in 2025 and
making RL sane and stable in 2025 and
we're definitely looking for people to
we're definitely looking for people to
help with that um that will have a
help with that um that will have a
slightly higher bar on it we just like
slightly higher bar on it we just like
you'll need to be experienced enough to
you'll need to be experienced enough to
not just be totally wasting compute and
not just be totally wasting compute and
to be running reasonable experiments but
to be running reasonable experiments but
know basically the qualifications there
know basically the qualifications there
are be a competent programmer uh listen
are be a competent programmer uh listen
to feedback have some basic
to feedback have some basic
understanding of how science is done
preferred qualifications include never
preferred qualifications include never
having written
Java I learned in Java just pain in the
ass yeah so either new environment from
ass yeah so either new environment from
scratch or TCG is too big of a project
scratch or TCG is too big of a project
to give to somebody new but like
to give to somebody new but like
finishing Robo code would be a decent
finishing Robo code would be a decent
project for like a new contributor I've
project for like a new contributor I've
been wanting to get somebody to do this
been wanting to get somebody to do this
for a while it's a really cool tank
for a while it's a really cool tank
battle game it's almost done as well it
battle game it's almost done as well it
just needs a little bit of help just
just needs a little bit of help just
join yeah Discord g/p puffer so I've
join yeah Discord g/p puffer so I've
been away for the last two weeks because
been away for the last two weeks because
nops followed by being sick and I it's
nops followed by being sick and I it's
going to be the holidays and I get to
going to be the holidays and I get to
get a root canal for the holidays so I'm
get a root canal for the holidays so I'm
going to be out for a few more days as
going to be out for a few more days as
well but generally uh going forward a
well but generally uh going forward a
lot lot more Dev is going to be live on
lot lot more Dev is going to be live on
stream so it should be very very easy to
stream so it should be very very easy to
get help but we're really trying to uh
get help but we're really trying to uh
to make RL work in 2025 and we actually
to make RL work in 2025 and we actually
have enough devs now I think to make it
have enough devs now I think to make it
happen like we're getting enough
happen like we're getting enough
environment submitted um it's really
environment submitted um it's really
just going to be a matter of leveraging
just going to be a matter of leveraging
those to run new good experiments and
those to run new good experiments and
having enough people that are really
having enough people that are really
interested enough to get on board with
interested enough to get on board with
that type of
that type of
stuff I'm still working on figuring out
stuff I'm still working on figuring out
how I'm going to fund uh like bounties
how I'm going to fund uh like bounties
on specific stuff that's still in the
on specific stuff that's still in the
works but for now great place to
learn would you mind taking a quick look
learn would you mind taking a quick look
at how I generate continuous actions
at how I generate continuous actions
think some things up with my code I
think some things up with my code I
copied what you doing default when I
copied what you doing default when I
eval train policies behaviors really
eval train policies behaviors really
strange only ever move or a in One
strange only ever move or a in One
Direction Sure Link me code and I will
Direction Sure Link me code and I will
do a full review whenever you
do a full review whenever you
want timeline wise
want timeline wise
uh I have a little bit of time tomorrow
uh I have a little bit of time tomorrow
I think I have one meeting or like in
I think I have one meeting or like in
the afternoon so I'll be on a little in
the afternoon so I'll be on a little in
the morning
the morning
tomorrow and then 24th is root canal so
tomorrow and then 24th is root canal so
fun it's Christmas I'll probably take
fun it's Christmas I'll probably take
like 25th maybe 26th off um
like 25th maybe 26th off um
uh and then I'll have like a few days
uh and then I'll have like a few days
before New Year's where I'll be like
before New Year's where I'll be like
merging more
merging more
environments I'm really excited for your
environments I'm really excited for your
environment as well I think it deserves
environment as well I think it deserves
a better renderer too like I think we
a better renderer too like I think we
should make a way better like a nicer
should make a way better like a nicer
renderer for you hold on my chat's not
working I got to get the uh the window
working I got to get the uh the window
up with the clickable
chat can you post the link again or
chat can you post the link again or
actually I can just type it
in uh
Captain
space probably have full review next
space probably have full review next
week also like agents trained before I
week also like agents trained before I
pr to puffer yeah that's fine
pr to puffer yeah that's fine
um but like for next week so let me
um but like for next week so let me
check
check
Cal see when I can do
this
this
so a little bit of time in the morning
so a little bit of time in the morning
tomorrow root canal Christmas maybe if
tomorrow root canal Christmas maybe if
you have time I can do 26th or
you have time I can do 26th or
27th if we just schedule something we'll
27th if we just schedule something we'll
do that live for you whenever you're
do that live for you whenever you're
ready
up to you how many files on layout stuff
up to you how many files on layout stuff
I'm not going to too much if you
I'm not going to too much if you
have multiple
files we are the one thing I want to be
files we are the one thing I want to be
Petty about is we have to make sure the
Petty about is we have to make sure the
Box 2D compilation doesn't make it hard
Box 2D compilation doesn't make it hard
for
for
users I mean I won't have
time need one next week I mean I won't
time need one next week I mean I won't
have time this week
well yeah I mean I'm saying like if you
well yeah I mean I'm saying like if you
do have time next week I can find some
do have time next week I can find some
time for a full
time for a full
review oh this week is because it's
review oh this week is because it's
Sunday I see what you mean yeah yeah I
Sunday I see what you mean yeah yeah I
forgot in my mind Sunday is the end of
forgot in my mind Sunday is the end of
the
week so yeah that's fine so that's like
week so yeah that's fine so that's like
right before New Year or whatever yeah
right before New Year or whatever yeah
we can do
we can do
that um oh right I was reviewing
that um oh right I was reviewing
code where is uh what should I look
at
at
policy
gotcha what's this I want to see the
gotcha what's this I want to see the
scale of your actions
Ops I'm not seeing your
Ops I'm not seeing your
constants you'll have to just tell me
constants you'll have to just tell me
the scale of OBS but I'll look at your
policy okay so you
have whatever this
have whatever this
is and you
encode num
encode num
drones the
heck uh
th a torch that's
th a torch that's
fine
fine
XY whether to shoot or
not I think that should be fine um
um wait
normal is this what I
normal is this what I
did I know I have a demo of
this I know I have a demo of this
this I know I have a demo of this
somewhere
is it in
is it in
policy. or
models so decode me and decode log
models so decode me and decode log
standard
standard
deviation and then I
deviation and then I
do this is the sample code right
here okay so I do take a
here okay so I do take a
normal and then I return the
normal and then I return the
distribution
so that seems
fine do you know if this network
fine do you know if this network
architecture is any good
though yeah it's just your param so
though yeah it's just your param so
you're just
you're just
parameterizing so you got to just
parameterizing so you got to just
realize this is not the only way that
realize this is not the only way that
you could do continuous actions what
you could do continuous actions what
this is assuming is that your is that
this is assuming is that your is that
your action space should follow a normal
your action space should follow a normal
distribution which is actually not
distribution which is actually not
necessarily a great assumption um
but yeah it's a little tricky because
but yeah it's a little tricky because
like continuous is generally less tested
like continuous is generally less tested
and often harder to optimize as far as
and often harder to optimize as far as
I'm aware uh compared to
I'm aware uh compared to
continuous so we do want to do
continuous so we do want to do
continuous but we might have to test it
discret yeah so this is this is the
discret yeah so this is this is the
point of having you do stuff like this
point of having you do stuff like this
right is you make environments you try
right is you make environments you try
to build policies and like you pick up
to build policies and like you pick up
stuff about reinforcement learning in
stuff about reinforcement learning in
the process
right the whole point of the contributor
right the whole point of the contributor
pipeline
um okay explaining me what the heck
um okay explaining me what the heck
you're doing with this network so you
you're doing with this network so you
have weapon type
have weapon type
embeddings floating wall type em map
embeddings floating wall type em map
cell embed so you have all these
cell embed so you have all these
different types of
different types of
embeddings you've got this map CNN which
embeddings you've got this map CNN which
is
I don't know what the size is here if
I don't know what the size is here if
this is like 11 by 11 this is my net
this is like 11 by 11 this is my net
that I use for 11 by 11 this is
that I use for 11 by 11 this is
perfectly good maybe a little small I
perfectly good maybe a little small I
think I use 64 here I
think I use 64 here I
forget 21 by okay so then that makes
forget 21 by okay so then that makes
sense because otherwise it gets too
sense because otherwise it gets too
big is this a local crop centered on the
big is this a local crop centered on the
uh the agent or is this like a global
uh the agent or is this like a global
obs
whole map okay I've not tried that
whole map okay I've not tried that
before but it should that should work
before but it should that should work
fine compute CNN
shape
shape
walls okay so the first thing is
the first thing is I would ask why you
the first thing is I would ask why you
have a loop here I mean this is more
have a loop here I mean this is more
just a speed optimization but there's
just a speed optimization but there's
basically no reason you should ever have
basically no reason you should ever have
a loop here um this you can batch
a loop here um this you can batch
embeddings
embeddings
so weapon type
OBS plus yeah so star so this is just
OBS plus yeah so star so this is just
OBS and then you apply the
embedding offset and offset plus so
embedding offset and offset plus so
there's maybe some fancy indexing but
there's maybe some fancy indexing but
you should be able to do this without a
you should be able to do this without a
loop unless I don't understand what
loop unless I don't understand what
you're doing
you're doing
here what's
here what's
this yeah so same thing here and then
this yeah so same thing here and then
same thing
same thing
here so you should be able to make this
here so you should be able to make this
net like massively faster there's no
net like massively faster there's no
reason you should have four Loops in a
reason you should have four Loops in a
forward
pass bit
pass bit
longer bit slower than though then I
longer bit slower than though then I
would be suspicious as how you as to how
would be suspicious as how you as to how
you did it because it shouldn't be
you did it because it shouldn't be
slower it's like really sketchy to have
slower it's like really sketchy to have
loops in a in a forward pass like
this technically with big enough batch
this technically with big enough batch
size and big enough networks maybe but
size and big enough networks maybe but
how fast is your net right now like if
how fast is your net right now like if
you're over 500k I won't complain though
you're over 500k I won't complain though
it is like a little bit like I can't
it is like a little bit like I can't
even read this this is like I don't even
even read this this is like I don't even
know exactly what you're doing I assume
know exactly what you're doing I assume
it's just three different embedding
it's just three different embedding
types with some weird offsets but I
types with some weird offsets but I
can't even
can't even
tell
tell
um but like assuming that you have some
um but like assuming that you have some
reasonable embeddings okay then what do
reasonable embeddings okay then what do
you do you
take
take
300K on your
300K on your
desktop we'll get you a puffer box for
desktop we'll get you a puffer box for
testing 500k is the is Benchmark for uh
testing 500k is the is Benchmark for uh
4090 and and uh keep in mind right one
4090 and and uh keep in mind right one
of my favorite things about writing
of my favorite things about writing
really complicated M's myself is I get
really complicated M's myself is I get
to tell everybody else who writes more
to tell everybody else who writes more
complicated M's like might writes
complicated M's like might writes
complicated M's if your M isn't more
complicated M's if your M isn't more
complicated than neural mm mo3 then the
complicated than neural mm mo3 then the
code shouldn't be more complicated than
code shouldn't be more complicated than
neural mm3 right and that includes the
neural mm3 right and that includes the
networks
and that thing literally has an economy
and that thing literally has an economy
in
it policy can be yeah a lot of the time
it policy can be yeah a lot of the time
it's like don't get clever like you try
it's like don't get clever like you try
something simple and then you slowly
something simple and then you slowly
build up to something more complex with
build up to something more complex with
these
these
things
um yeah okay so this is like if you
um yeah okay so this is like if you
don't have a ton of different entities
don't have a ton of different entities
this can kind of work
this is just a flatten as far as I can
this is just a flatten as far as I can
tell so
tell so
usually let me explain to you entity
usually let me explain to you entity
style networks
style networks
and you know I'm going to do this for
and you know I'm going to do this for
you real quick because you put a lot of
you real quick because you put a lot of
work in so I'm going to give you a nice
work in so I'm going to give you a nice
explanation and this actually will be
explanation and this actually will be
good for people watching as
good for people watching as
well I'm also free to chat and voice at
well I'm also free to chat and voice at
some point later today if you want
some point later today if you want
whenever um so
whenever um so
here so there are kind of two different
here so there are kind of two different
ways that you can
ways that you can
parameterize a network for the type of
parameterize a network for the type of
game that you have and it depends on how
game that you have and it depends on how
you represent the observations right so
you represent the observations right so
one way is you either globally or just
one way is you either globally or just
centered on your agent either way it's
centered on your agent either way it's
usually more efficient if you Center it
usually more efficient if you Center it
on your agent but like you have your
on your agent but like you have your
agent there you know you have your
agent there you know you have your
grid doesn't matter if the environment
grid doesn't matter if the environment
is continuous you can still partition it
is continuous you can still partition it
into a grid and so you have something
into a grid and so you have something
like this or
like this or
whatever and then in each of these
whatever and then in each of these
cells right each of these cells tells
cells right each of these cells tells
you maybe it has like a PID to an entity
you maybe it has like a PID to an entity
so this is like entity one this entity 5
so this is like entity one this entity 5
this is entity three and then you see
this is entity three and then you see
all these different entities and then
all these different entities and then
what is the representation of each of
what is the representation of each of
these tiles well this is actually going
these tiles well this is actually going
to give you a 3D
to give you a 3D
array so like 3D and if we like take
array so like 3D and if we like take
this like this little bit here and we
this like this little bit here and we
like zoom in on
like zoom in on
this then this is actually just going to
this then this is actually just going to
be an array that this is going to be
be an array that this is going to be
like uh
like uh
health and then like I don't know what
health and then like I don't know what
else your agents have like
weapon
ammo all the different things in it hey
ammo all the different things in it hey
how's it going man man let me finish
how's it going man man let me finish
this explanation and we can chat about
this explanation and we can chat about
your uh I'm sure the the optimizer thing
your uh I'm sure the the optimizer thing
you want to chat about um
you want to chat about um
so yeah this is one way to do it and
so yeah this is one way to do it and
this is generally what I recommend
this is generally what I recommend
because it's really easy to write
because it's really easy to write
architectures for this you just take
architectures for this you just take
this thing maybe you have to do like a
this thing maybe you have to do like a
multi-hot encoding or something we have
multi-hot encoding or something we have
examples in the Moa and the neural M mo3
examples in the Moa and the neural M mo3
but you just do that en coding you throw
but you just do that en coding you throw
it into a con maybe like your own agent
it into a con maybe like your own agent
has some extra data as as well so maybe
has some extra data as as well so maybe
like you have more stuff right maybe you
like you have more stuff right maybe you
have like an extra private data here
have like an extra private data here
right maybe you have like
inventory gold
inventory gold
whatever um but then the architecture
whatever um but then the architecture
that you use for this is just going to
that you use for this is just going to
be like
con so this is your 2D data and then you
con so this is your 2D data and then you
have 1D
have 1D
data and this goes into
data and this goes into
like fully connected
Network and then these get
Network and then these get
Conta and
Conta and
then
then
LM
LM
right so that's one architecture this is
right so that's one architecture this is
what I generally recommend because it's
what I generally recommend because it's
easier than the thing that you're going
easier than the thing that you're going
to have to do now with entity style data
to have to do now with entity style data
um The Entity style data can be made
um The Entity style data can be made
fast it can be made very very good in
fast it can be made very very good in
fact and it is amenable to like Advanced
fact and it is amenable to like Advanced
networks with Transformers and stuff I
networks with Transformers and stuff I
highly recommend Clem's blog on this
highly recommend Clem's blog on this
entity neural
networks but the other type whoops
new okay so the other type
new okay so the other type
here is going to be entity based which
here is going to be entity based which
is you still have your your agent
is you still have your your agent
here but now you have your agent over
here but now you have your agent over
here your agent over here and this it's
here your agent over here and this it's
not on a GD G and then what you do is
not on a GD G and then what you do is
you take all these different
agents and you take their attributes and
agents and you take their attributes and
you put them into a nice big Matrix like
you put them into a nice big Matrix like
this so this is Agent one and this is
this so this is Agent one and this is
Agent two and this is Agent three but
Agent two and this is Agent three but
you can't just now put these into a
you can't just now put these into a
neural network as easily because they
neural network as easily because they
the order needs to be invariant right
the order needs to be invariant right
like you don't want to have to relearn
like you don't want to have to relearn
everything if like agent one is here and
everything if like agent one is here and
then agent two is here versus Agent two
then agent two is here versus Agent two
is here and agent one is here so then
is here and agent one is here so then
what you have to do is some sort of
what you have to do is some sort of
intentional type Network so the simplest
intentional type Network so the simplest
possible form of this which usually
possible form of this which usually
doesn't work amazingly is going to be
doesn't work amazingly is going to be
like you take this block of
like you take this block of
data and then you like put it into a
data and then you like put it into a
fully connected net mind you each of
fully connected net mind you each of
these is going to the fully independ uh
these is going to the fully independ uh
the network
independently and then what you do is
independently and then what you do is
you like take a
you like take a
Max and then you take a
Max and then you take a
Max uh over this Dimension so you take
Max uh over this Dimension so you take
an entity
Max and then you do
Max and then you do
lstm that's one version uh this here can
lstm that's one version uh this here can
be any attentional operator where any
be any attentional operator where any
attentional operator takes n vectors and
attentional operator takes n vectors and
gives you one vector back so this can
gives you one vector back so this can
actually be like a
actually be like a
Transformer I don't know what's a
Transformer I don't know what's a
transformer robot
transformer robot
thing I don't know how to draw a robot
thing I don't know how to draw a robot
thing
Transformer so you can do do this it
Transformer so you can do do this it
requires a dramatically different type
requires a dramatically different type
of network though you see because you
of network though you see because you
get this like entity invariant Dimension
get this like entity invariant Dimension
and GPU Drive does this uh Clemens does
and GPU Drive does this uh Clemens does
this in his work a few other things do
this in his work a few other things do
it it's a little harder right it's a
it it's a little harder right it's a
little harder and you can't just slap
little harder and you can't just slap
your old default architecture on it so
your old default architecture on it so
hopefully that's a good explanation for
hopefully that's a good explanation for
you
you
here um
here um
generally what what actionable stuff do
generally what what actionable stuff do
I
I
recommend first example yeah first
recommend first example yeah first
example is usually the default now if
example is usually the default now if
you don't want to go through all that
you don't want to go through all that
work just yet what I would recommend to
work just yet what I would recommend to
you that would be a very quick exercise
you that would be a very quick exercise
is to add a flag and this is actually
is to add a flag and this is actually
really good for our research as well we
really good for our research as well we
would like to have this if you're
would like to have this if you're
amendable to it just add a flag to your
amendable to it just add a flag to your
environment that is like discretize
environment that is like discretize
equals false and you you set discretize
equals false and you you set discretize
equals true you turn the action space
equals true you turn the action space
into multi- discreete instead of
into multi- discreete instead of
continuous how would that work well
continuous how would that work well
let's say that your uh your action space
let's say that your uh your action space
is like1
is like1
to
to
one right then what you do is you do
one right then what you do is you do
discret of
discret of
five and then you just map like 0 goes
five and then you just map like 0 goes
to1 one goes to
uh5 2 goes to
uh5 2 goes to
zero you
zero you
see so it's very easy to discretize
see so it's very easy to discretize
and turn a continuous space into a
and turn a continuous space into a
multi- discreet space and because you're
multi- discreet space and because you're
doing low dimensional continuous control
doing low dimensional continuous control
not like really fine grain continuous
not like really fine grain continuous
control this will look this will work
control this will look this will work
perfectly fine and this is done widely
perfectly fine and this is done widely
across all different branches of
across all different branches of
reinforcement
learning so that would be my
learning so that would be my
recommendation if you are concerned
recommendation if you are concerned
about the continuous actions and you
about the continuous actions and you
just want to test your net I would
just want to test your net I would
suggest you do that and in fact this
suggest you do that and in fact this
would be very helpful to with puffer Li
would be very helpful to with puffer Li
uh because one of the things that we
uh because one of the things that we
want to do over the next couple of weeks
want to do over the next couple of weeks
or
months Pablo released this thing which
months Pablo released this thing which
is a continuous version of Atari we want
is a continuous version of Atari we want
to add continuous actions to some of our
to add continuous actions to some of our
environments especially Atari but you
environments especially Atari but you
know also maybe some of our more complex
know also maybe some of our more complex
Ms and then we want to really understand
Ms and then we want to really understand
whether continuous action spaces are
whether continuous action spaces are
fundamentally harder to learn or if
fundamentally harder to learn or if
there's some algorithmic deficiency that
there's some algorithmic deficiency that
we can fix or something similar there
so this is one one of the branches of
so this is one one of the branches of
research that I think we want to do and
research that I think we want to do and
this is in fact something that I I've
this is in fact something that I I've
told spener about as well as maybe one
told spener about as well as maybe one
of the things he can look
at but he is looking at it in the uh
at but he is looking at it in the uh
context like P and
breakout any other
questions posted a video on
questions posted a video on
YouTube or video
oh is that yeah yeah yeah the policy
oh is that yeah yeah yeah the policy
that just like shoots in One Direction I
that just like shoots in One Direction I
can't I'm not an oracle right that's
can't I'm not an oracle right that's
just a crappy policy if you link me want
just a crappy policy if you link me want
to be curves maybe I can tell you
something e
I'll look at your W curves for
you oh my are you still here for
you oh my are you still here for
um
um
psgd we can look at that after if that's
psgd we can look at that after if that's
what you're here for if you're uh unless
what you're here for if you're uh unless
you're just dropping in to say
you're just dropping in to say
hi yeah so this is do you have episode
hi yeah so this is do you have episode
return on
here okay this starts way too high yeah
here okay this starts way too high yeah
this policy loss is
this policy loss is
nuts just lurking yeah no worries uh we
nuts just lurking yeah no worries uh we
can start the like algorithmic collabs
can start the like algorithmic collabs
whenever pretty much it's just going to
whenever pretty much it's just going to
be like great plus sweeps uh we can
be like great plus sweeps uh we can
probably get you a box for that I think
probably get you a box for that I think
we might have some spare at the moment
we might have some spare at the moment
we'll see um but yeah comprehensive
we'll see um but yeah comprehensive
ablations what we're going to want to do
ablations what we're going to want to do
train reward at top
train reward at top
left yeah I saw
it it's so
slow I literally have python M that run
slow I literally have python M that run
that
that
fast very simple ones but
losses what was I looking for oh yeah
losses what was I looking for oh yeah
these are kind of
silly intergate with heavy balls since
silly intergate with heavy balls since
many Ops and methods yeah try it I will
many Ops and methods yeah try it I will
help with that for
help with that for
sure
um okay so I got to ask you is this 16
um okay so I got to ask you is this 16
total environments does each environment
total environments does each environment
internally have a
internally have a
bunch is it 1536 internal m is that
correct
[Music]
badge per puff rounds
badge per puff rounds
okay so then uh what's going to happen
okay so then uh what's going to happen
there that's kind of
there that's kind of
sketchy I teach you how to do some math
sketchy I teach you how to do some math
it's very simple
it's very simple
math okay
so
so
1536 I'm 16 in bons
right all right that's what you have and
right all right that's what you have and
then your batch size is
then your batch size is
26 2
26 2
144 divided by
144 divided by
this that is the effective Horizon over
this that is the effective Horizon over
which you're able to compute returns per
which you're able to compute returns per
environment so basically you're getting
environment so basically you're getting
in this optimized you're getting
in this optimized you're getting
trajectory segments of length around
trajectory segments of length around
10 not good enough uh you've got too
10 not good enough uh you've got too
many environments
many environments
I would generally
I would generally
suggest
suggest
4096 or maybe
4096 or maybe
8192 you got three to six three to six
8192 you got three to six three to six
times too many environments at the
moment there may be some other stuff
moment there may be some other stuff
screwy the policy loss is nuts straight
screwy the policy loss is nuts straight
from the
from the
get-go um your policy law should not
get-go um your policy law should not
look like that and you can see basically
look like that and you can see basically
that this is not learning anything this
that this is not learning anything this
is
flat this is complete policy failure
flat this is complete policy failure
right here at the top complete
collapse that's what I would suggest
collapse that's what I would suggest
tweaking
first like what do I do for n
mo3 so for neural
mo3 so for neural
mo3 I've got
mo3 I've got
260k with M mini batch of
260k with M mini batch of
32k and I have a total
32k and I have a total
of uh this is internally each of these
of uh this is internally each of these
has four environments with uh five 12
has four environments with uh five 12
agent I think this is 8192 total agents
and that's like cutting it close on the
and that's like cutting it close on the
horizon
lengths so those are my recommendations
lengths so those are my recommendations
to start with I'd also just try a
to start with I'd also just try a
massively simpler Network
massively simpler Network
architecture you
architecture you
know it's kind of crazy to write a
know it's kind of crazy to write a
network like the one that you have
network like the one that you have
before you have some baseline training
those are my recommendations
cool well if that settles stuff I'll
cool well if that settles stuff I'll
keep finishing this little
toy we now have python stuff training at
toy we now have python stuff training at
300K steps a
second P Puffer squar
it's
puff where's this command there we go
by lowering M's batch size is
large it doesn't have to go higher
large it doesn't have to go higher
though as like I'm not telling you that
though as like I'm not telling you that
it has to go
it has to go
higher I'm telling you you probably have
higher I'm telling you you probably have
too many
too many
environments like Okay the reason that
environments like Okay the reason that
we pick the reason that we do the batch
we pick the reason that we do the batch
sizes that we have and like you want to
sizes that we have and like you want to
have a forward pass bat size that
have a forward pass bat size that
saturates your GPU which means that you
saturates your GPU which means that you
need to have enough environments to make
need to have enough environments to make
a batch size big enough for small
a batch size big enough for small
networks that's usually around
networks that's usually around
4096 sometimes as low as 1024
4096 sometimes as low as 1024
and then if your environment if you want
and then if your environment if you want
to squeeze the last little bit of
to squeeze the last little bit of
performance out of it you use at least
performance out of it you use at least
an asynchronicity factor of two meaning
an asynchronicity factor of two meaning
that you have a bank of environments
that you have a bank of environments
that's running in the background well
that's running in the background well
the bank of environments that you're
the bank of environments that you're
currently using is stepping so then like
currently using is stepping so then like
4096 environments times 2 8192 total
4096 environments times 2 8192 total
agents so if they're multi-agent
agents so if they're multi-agent
environments however many you need to
environments however many you need to
get 8192 agents with 4096 agents used
get 8192 agents with 4096 agents used
per forward pass and then you want to
per forward pass and then you want to
make sure that you're at least getting a
make sure that you're at least getting a
reasonable Horizon 32 64 ideally 10 uh
reasonable Horizon 32 64 ideally 10 uh
128 times the total number of Agents is
128 times the total number of Agents is
going to be equal to your batch size
going to be equal to your batch size
divide by something between 4 and 16
divide by something between 4 and 16
usually and that gives you your mini
usually and that gives you your mini
batch size done
I think I know what they broke
here for
ah this is probably not as uh
ah this is probably not as uh
fast as it could
be still
know
e e
don't see a one on here
there's the one where's the
there's the one where's the
two oh I haven't added it yet
there yeah
Target
r ah so this is the wrong one right here
r ah so this is the wrong one right here
this
this
is
is
uh r
solved
solved
in about 6 million
in about 6 million
steps mind you we have crazy large facts
steps mind you we have crazy large facts
so this is even though a very simple
so this is even though a very simple
task it's not designed to be sample
task it's not designed to be sample
efficient it's only we only care about
efficient it's only we only care about
wall clock in this particular case
wall clock in this particular case
now let's try the C
now let's try the C
version hey welcome how's it
going and for whatever reason the python
going and for whatever reason the python
version
learns in fewer
learns in fewer
steps is this
broken Unbreak this somehow
I think it should learn by
I think it should learn by
then maybe the environments aren't well
then maybe the environments aren't well
they would have to not be identical
right CR num m
right CR num m
M batch
M batch
size yeah so this is correct
size yeah so this is correct
for like they actually should match
here it's very odd
yeah so this is like
yeah so this is like
solved let's figure out why this does
solved let's figure out why this does
not work the same oh and then also we
not work the same oh and then also we
got to
try okay you can see that this is
try okay you can see that this is
different what if I do back
native should be the
same yeah it's the same it's not the V
same yeah it's the same it's not the V
it's something with this specific M
maybe it's kind of
weird so
match this as closely as I
match this as closely as I
can take a
can take a
zero get a random position
it should be or not
and that might change the learn Dynamics
oh it's still pretty much solved by 6
oh it's still pretty much solved by 6
mil okay
um and then
um and then
step we set the
step we set the
actions terminals goes to
actions terminals goes to
false rewards goes to
false rewards goes to
zero UPS goes to empty
this down plus one right Plus + one up -
this down plus one right Plus + one up -
one left minus
one left minus
one tick is greater than 3 *
one tick is greater than 3 *
s over that over that that over that
s over that over that that over that
yep SK this to True reward
yep SK this to True reward
toga1
toga1
reset and then we set infos in this
reset and then we set infos in this
case 1 return evasion rewards terminals
case 1 return evasion rewards terminals
conations very good and then what else
conations very good and then what else
here so n r size C size which is very
here so n r size C size which is very
good right yep that's what we
good right yep that's what we
want
if uh this is is this
wrong me
wrong me
see no this is
correct observations a POS
correct observations a POS
Target then we set terminal to True
Target then we set terminal to True
reward one we
reward one we
reset okay and then we do
reset okay and then we do
this and
this and
this and this is basically now line by
this and this is basically now line by
line
line
equal uh so why does one of these learn
equal uh so why does one of these learn
perfectly and the other
doesn't I think
do I do anything with the
RNG this could be an RNG thing
RNG this could be an RNG thing
right make sure puffer still good
so we can see Pi squ is harder to learn
something changed because we used to not
something changed because we used to not
get a ton of These
Warnings so some compile settings need
Warnings so some compile settings need
to be fixed
to be fixed
here fine for now
though I think these are just like all
though I think these are just like all
weird pedantic warnings
well isn't that interesting now it
well isn't that interesting now it
doesn't learn at all
[Music]
so very well can be something with
RNG well is this going to give you yeah
RNG well is this going to give you yeah
this is going to give you the
this is going to give you the
uh the same on every reset I think so
uh the same on every reset I think so
that's
that's
bad what if we do it on
allocate it still melt
I would think this would give you unique
I would think this would give you unique
seeds I don't actually know for sure
seeds I don't actually know for sure
that it is seaing to be
that it is seaing to be
fair I can't see why it would be
fair I can't see why it would be
actually cuz we're not spawning new
actually cuz we're not spawning new
python processes or new C processes it's
python processes or new C processes it's
only
only
one one C process
okay what else could this
okay what else could this
be like why would this end be hard to
be like why would this end be hard to
learn for some weird
reason this is like line for line the
same discreet of five
oh this is the
oh this is the
same with you and eight right
[Music]
[Music]
I yeah this is
fine reset all the
M's
H kind of bizarre
pretty darn sure this match
exactly I'm running what would be
exactly I'm running what would be
different here
so me set to
zero empty is zero
zero empty is zero
right and then
agent size size over two
yep take gets up to zero
makes
makes
random
random
[Music]
observations
observations
uhuh actions of
uhuh actions of
zero
terminals that's
terminals that's
fine you do this it's like
um this looks line by line identical to
me but they're not training the
me but they're not training the
same am I like messing up the number of
same am I like messing up the number of
environments somehow
secretly um
so oh does it not train as well as it
so oh does it not train as well as it
used to now hold on
used to now hold on
I didn't change anything that should
I didn't change anything that should
have made a
difference oh no it's just
difference oh no it's just
RNG yeah yeah just
RNG yeah know there it goes just
RNG sure
yeah that's
fine let's implement the renderer are
we'll train this
we'll train this
policy actually let's make it trained
policy actually let's make it trained
for last time not
annoying
annoying
okay so we're training this
policy and then we're going to look at
policy and then we're going to look at
it see if it looks
weird e
okay um
okay um
red equal. observations.
reshape not getting any render mode
and
see
see
okay so this is reasonable but if you'll
okay so this is reasonable but if you'll
notice it's
notice it's
um it's only in One Direction here so I
um it's only in One Direction here so I
didn't fix I messed this up
basically so probably it's harder when
basically so probably it's harder when
you do it this way
yeah that's more in line with the other
yeah that's more in line with the other
environment
now this is why you always freaking
now this is why you always freaking
render you will always be wrong until
render you will always be wrong until
you render
you render
always even on the most basic of
things 101
lines 100 lines
lines 100 lines
cleaner um
I go back to 20
I go back to 20
mil see if this matches the C version
now roughly matches doesn't have to be
now roughly matches doesn't have to be
exact
400k there goes the
400k there goes the
camera fix this
okay there's the 20 mil stuck
at8 I wonder if we broke something
at8 I wonder if we broke something
though
though
because I thought that it would work
because I thought that it would work
before it's very easy
before it's very easy
environment try this
one maret see
okay it's about the same
8585 and let's see if this is any
8585 and let's see if this is any
faster I think the
main it is actually
and there you can see it matches so
and there you can see it matches so
there's a little
there's a little
RNG as to uh how well it does
RNG as to uh how well it does
there probably bad
hypers I'm going to add this to the
hypers I'm going to add this to the
commit and then I'm going to go check to
commit and then I'm going to go check to
make sure that uh it doesn't work in the
make sure that uh it doesn't work in the
older
version up for
squared I also think I should just make
squared I also think I should just make
a new file real quick
one
496 and B size
496 and B size
496 like this
yeah this way it gets its own
so we need to figure it out there's like
so we need to figure it out there's like
some weird thing
there this works but there's something
weird for
good
good
370k what if I do four
370k what if I do four
workers that change anything
it's actually slower
still suppose makes sense the end is
still suppose makes sense the end is
just fast enough
this yeah the multiprocessing overhead
this yeah the multiprocessing overhead
is there even with uh
one that would get amortized with um
one that would get amortized with um
Asing so why did the Native not work
here oh because you have
here oh because you have
multiple yeah it's because you have
multiple yeah it's because you have
multiple that's
fine I just need to add a warning as
fine I just need to add a warning as
well
seor
e
e e
there we go
we can probably handle this more
we can probably handle this more
transparently but I think this is good
transparently but I think this is good
for
now
e
e e
this just required a lot of little silly
this just required a lot of little silly
uh changes for this uh this API
uh changes for this uh this API
Improvement I think it should be a
Improvement I think it should be a
little faster though for uh for other
little faster though for uh for other
stuff
stuff
like 100,000 however
like 100,000 however
100,000 python pretty
100,000 python pretty
good for
the only other thing I want to do is see
the only other thing I want to do is see
if I can get it even
if I can get it even
faster for
today forgot butterfly
okay that's everything um
try this
first
okay we're getting somewhere
now I think you need to have a ton of
now I think you need to have a ton of
them is the only Annoying Thing
oh this needs to stay at
oh this needs to stay at
192 you want more workers than
this like I think this is going to be
slower oh no that's
slower oh no that's
fast there we go
where's the overhead coming
from 62 5
from 62 5
8 43
8 43
42 16 11 lower Mist
42 16 11 lower Mist
maybe slightly lower miss that doesn't
maybe slightly lower miss that doesn't
seem very significant right
seem very significant right
1615 it's a little
significant 0 seconds
significant 0 seconds
seconds I mean
I guess just too much info
reporting yeah it's literally just infos
reporting yeah it's literally just infos
reporting I would
reporting I would
imagine slightly annoying
not much way around
that I guess I could change the
that I guess I could change the
reporting interval
I would like to get a million and
see I can't do it with the same 4096
see I can't do it with the same 4096
environments the thing
environments the thing
right yeah I have d a synchronicity I
right yeah I have d a synchronicity I
could do it with 16k
environments 16
still
still
no yeah then it's got to be the um
orangs
28 like this
size e
and refactor a little bit
just a little bit I got to
just a little bit I got to
refactor just take
refactor just take
this down here
this down here
somehow
else like
this for
there this is how it
is try
this size
there we
go oh it was 900k what happened
bet those means are getting to it
how's
this well now you can't
tell for
try
this it's just really hard to get stuff
this it's just really hard to get stuff
to run that fast in Python
holy e
I honestly don't think this whole report
I honestly don't think this whole report
thing is even good because it makes the
thing is even good because it makes the
example more complicated I don't think
example more complicated I don't think
it's worth making this faster at the
it's worth making this faster at the
price of
price of
uh but you know I will keep this logic
uh but you know I will keep this logic
because I like I think this refactor is
because I like I think this refactor is
decent for the python
decent for the python
version so what I'm going to do
version so what I'm going to do
is undo all this stuff
T this
here and do
here and do
this think this is good
so you can actually see there it's not
so you can actually see there it's not
even the infos we're not even returning
even the infos we're not even returning
the
the
infos so it's just uh multi procing
infos so it's just uh multi procing
being
annoying okay so now this
works maybe I can find a config for
it we better
940 stable no not
stable 900
stable 900
stable about
four much lower
oh actually we see 9% out of time
oh actually we see 9% out of time
there I missed that
if I do 16 do I have 9% end
time no but we get more synchronization
maybe and this is actually
slower so let's do um
96 * 3
1228 and
workers divide by num workers
workers divide by num workers
or
CR there we
CR there we
go it's a
million for
and just Pi
squar or that way is it poer squar
there we go
one other thing I want to
one other thing I want to
do can I do like
train a decent
policy my uh desktop just goes nuts
policy my uh desktop just goes nuts
whenever you use the
whenever you use the
multiprocessing see the CPU
ports e
just trying a couple
just trying a couple
things fiddling with it for a little
bit there we go that's
bit there we go that's
better a little
bit
e e
that didn't help
just trying to get something
reasonable that might have been a little
much e
[Music]
[Music]
I would have expected that to have
I would have expected that to have
helped or El's weird
now we'll tune it at some point
now we'll tune it at some point
it's an easy end no point doing it this
it's an easy end no point doing it this
way this is the type of thing you
way this is the type of thing you
totally just
totally just
automate basically very very simple and
automate basically very very simple and
bad hyper parameters makes it look like
bad hyper parameters makes it look like
it's really hard to learn but it's not
it's really hard to learn but it's not
it's just bad hypers we'll leave it at
it's just bad hypers we'll leave it at
017 or whatever the original was I'm
017 or whatever the original was I'm
going to train this I'm post a little
going to train this I'm post a little
Quick
Clip call a
day for
go e
I love how auntu has um this little
I love how auntu has um this little
recorder built directly
into built directly into it
24 okay and I just have to convert this
the heck happened here why is it
like why did it record this top
portion e
[Music]
and come on
mod
e
e
e
e
e e
there we
go it feels good to post that given that
go it feels good to post that given that
uh this stupid ass
uh this stupid ass
library now has 177,000
library now has 177,000
stars um because they claim to do that
stars um because they claim to do that
and lie about it it's fun to just post
and lie about it it's fun to just post
that a couple days later that we
that a couple days later that we
actually can do that is for simple
actually can do that is for simple
environments let me uh let me commit all
environments let me uh let me commit all
this stuff up
uh
uh
serial support for
serial support for
Native puffer
Native puffer
M up to one M
Train
Train
fired l
fired l
refactors so wait it h we'll just yal
refactors so wait it h we'll just yal
little
meret hey just got here what is it with
meret hey just got here what is it with
Genesis uh it's fake is what it
Genesis uh it's fake is what it
is they just massively lied about it as
well yeah the uh the person to follow
well yeah the uh the person to follow
for this my go-to in
for this my go-to in
robotics is
robotics is
Stone
um can't sign in
um can't sign in
but
but
yeah so basically uh they're a bunch of
yeah so basically uh they're a bunch of
lion
lion
shills and
uh another day in
AI
stupid I suggest you check out uh K's
stupid I suggest you check out uh K's
well Chung has some cool stuff too but
well Chung has some cool stuff too but
if you're doing heavy robotics then um
if you're doing heavy robotics then um
check out Stone stuff with many
check out Stone stuff with many
skill if you have non robotics like non
skill if you have non robotics like non
super heavy physic stuff check out
super heavy physic stuff check out
puffer Li I don't know if you're doing
puffer Li I don't know if you're doing
heavy physics or not if you're doing
heavy physics or not if you're doing
like light physics or just like
like light physics or just like
non-physics based Sim you check out
non-physics based Sim you check out
puffer
puffer
Li we actually have million step per
Li we actually have million step per
second
second
training um and on much more interesting
training um and on much more interesting
environments than
this I'm going to just YOLO merge this
this I'm going to just YOLO merge this
thing because I'm sick of having Dev
thing because I'm sick of having Dev
branches that take forever to merge mer
branches that take forever to merge mer
I won't ship the PIP package though I'll
I won't ship the PIP package though I'll
leave the pit package
stable e
yes I just got to send this to somebody
yes I just got to send this to somebody
on Discord
on Discord
this was a
this was a
uh
request very
good it is
good it is
4:43
4:43
um I think if there's anything else I
um I think if there's anything else I
want to do right now
want to do right now
anybody need some help getting started
anybody need some help getting started
with puffer or anything I'm trying to
with puffer or anything I'm trying to
think if there's anything else I want to
think if there's anything else I want to
Dev on right now or if I'm just going to
Dev on right now or if I'm just going to
you know call it and enjoy an hour off
you know call it and enjoy an hour off
or whatever Sunday before
dinner there will be tomorrow there will
dinner there will be tomorrow there will
be more live
be more live
stuff um possibly more code reviews or
stuff um possibly more code reviews or
Dev or whatever I'm going to be live
Dev or whatever I'm going to be live
streaming a lot of the dev now all this
streaming a lot of the dev now all this
stuff is free and open source if you
stuff is free and open source if you
want to help us out a ton for free all
want to help us out a ton for free all
you got to do is start the repo really
you got to do is start the repo really
really helps us come on don't let don't
really helps us come on don't let don't
let the fake repo have 10 times more
let the fake repo have 10 times more
stars than puffer we were the fastest
stars than puffer we were the fastest
growing RL Library I'm pretty sure of
growing RL Library I'm pretty sure of
the year until these guys just decided
the year until these guys just decided
to come out a left field and Li
to come out a left field and Li
bench would you consider doing a
bench would you consider doing a
tutorial video for how to use and create
tutorial video for how to use and create
stuff for puffer I've there's lots of
stuff for puffer I've there's lots of
the there's like lots and lots of
the there's like lots and lots of
tutorial material out there man um
tutorial material out there man um
here
here
so we've got this blog that gives you
so we've got this blog that gives you
high level overview of all of our latest
high level overview of all of our latest
stuff we've got this RL quick start
stuff we've got this RL quick start
guide for new RL newcomers to RL we've
guide for new RL newcomers to RL we've
got this single like Doc Page it's just
got this single like Doc Page it's just
like a tutorial walk through of
like a tutorial walk through of
everything in puffer and how to use
everything in puffer and how to use
everything
everything
and then for one o I have a video
and then for one o I have a video
showing like going through stuff but
showing like going through stuff but
this covers it pretty darn well like
this covers it pretty darn well like
it's really really
simple if you want to work on getting
simple if you want to work on getting
code ball to train oh are you on stream
that'd be
sweet oh okay so yeah you're listening
sweet oh okay so yeah you're listening
so yeah awesome I will do
so yeah awesome I will do
that yeah link that I'm going to use the
that yeah link that I'm going to use the
restroom I'll be back in a minute and
restroom I'll be back in a minute and
then I will be more than happy to get
then I will be more than happy to get
that set up that environment looks
that set up that environment looks
awesome uh this will be a real treat be
awesome uh this will be a real treat be
right
back
e
e
e e
okay
this repo is
private check out
branch do you not want to just PR it
nck SL puffer
lib oh I
see let me see
where is it in
where is it in
here it's not in uh
here it's not in uh
ocean this is where we would put
it branch code ball
gotcha okay let's see how you did this
gotcha okay let's see how you did this
so we got
oh yeah you made your life a little
oh yeah you made your life a little
harder than
harder than
uh then it needs to be here you can just
uh then it needs to be here you can just
add this to our main setup.py
local
Dev well typically what I suggest
Dev well typically what I suggest
contributors do is just add it like the
contributors do is just add it like the
way that we would add it as our real M
way that we would add it as our real M
it'll be just as fast for local
build ocean but that requires yeah but
build ocean but that requires yeah but
the build ocean it's in the root
the build ocean it's in the root
directory which is where you run
directory which is where you run
training
training
from okay
from okay
sure but are you building through python
sure but are you building through python
every time for Dev like the python
every time for Dev like the python
compilation is really slow I generally
compilation is really slow I generally
suggest um the C builds for development
suggest um the C builds for development
I never used like python build while I'm
I never used like python build while I'm
building new Ms I only do that when I'm
building new Ms I only do that when I'm
integrating
integrating
it's like dramatically dramatically
it's like dramatically dramatically
faster to just be running the C back and
faster to just be running the C back and
forth Loop and you get better compiler
forth Loop and you get better compiler
messages as
well yeah it's pretty slow yeah so I
well yeah it's pretty slow yeah so I
will show you how I would have suggested
will show you how I would have suggested
setting this stuff up
setting this stuff up
um what is your preference on how to do
um what is your preference on how to do
this so I can copy stuff over and just
this so I can copy stuff over and just
like manually make the pr um um if you
like manually make the pr um um if you
want to be listed on the as a
want to be listed on the as a
contributor on the repo it's probably
contributor on the repo it's probably
better if you PR it
better if you PR it
yourself would you like to just PR like
yourself would you like to just PR like
a code ball Branch off of 20 Dev if you
a code ball Branch off of 20 Dev if you
want to do that and then I can like I
want to do that and then I can like I
can help you PR and like merge it or are
can help you PR and like merge it or are
you just looking for me to like play
you just looking for me to like play
around with it and see like what do you
around with it and see like what do you
want me to do right now with it
currently just play around okay I can do
currently just play around okay I can do
that
that
gotcha in that case I'm just going to
gotcha in that case I'm just going to
clone this separately
and you just go into puffer ocean ball
oops check out
P
P
install
install
this
this
nope how do you install
nope how do you install
it build
X or do we need
RB do you just stick RB into
here oh I probably don't have RB in the
here oh I probably don't have RB in the
route hold
on oh jeez you're on
on oh jeez you're on
collab my guy we got to get you a
better a better Dev setup holy
hell you're on like Ultra masochism mode
collab was for testing okay fair I
collab was for testing okay fair I
generally just do Docker for that
generally just do Docker for that
frankly it's
frankly it's
like the docker so easy provided you
like the docker so easy provided you
have a GPU we don't we don't ship CPU
have a GPU we don't we don't ship CPU
containers at the moment um I don't know
containers at the moment um I don't know
Docker is just
nice doesn't really make sense for CPU
nice doesn't really make sense for CPU
though to be
though to be
fair it's mostly like all the ca
it still gives you consistent Dev
it still gives you consistent Dev
environment
though all right and then how do I run
though all right and then how do I run
this code ball.
P this is a perf test Maybe
P this is a perf test Maybe
make
run uh you have uh those are Mac OS
run uh you have uh those are Mac OS
arguments right
there let me see
I hate make
files I just do this what happens if I
files I just do this what happens if I
just do
this
implicit how does this work if you don't
implicit how does this work if you don't
have time
oh
okay
LGL L OBS C I don't think you need
LGL L OBS C I don't think you need
either of these though I just Mac
thingies cannot
find
find
yeah are you still watching this Captain
yeah are you still watching this Captain
as
well you need op
C hold on
uh
so this is not linking RB
now you're missing
lrb look
Flags these flags where are they right
here build from
here build from
rout that'd be better
whoa does this have a train policy
whoa does this have a train policy
already what is
this how is this there's no way this is
this how is this there's no way this is
random
random
actions they're following the
ball
right
right
freeze is it a scripted policy
scripted okay I was going to say that
scripted okay I was going to say that
was like I'd be very impressed if you'd
was like I'd be very impressed if you'd
already
already
done done that oh like yeah yeah okay VC
done done that oh like yeah yeah okay VC
three
subract what's this I guess this is your
function you have weights loaded in here
function you have weights loaded in here
wait do you have you have a network
but they were bad
but they were bad
okay we can help with
okay we can help with
that I mean this is freaking
awesome they don't use linear lstm so
awesome they don't use linear lstm so
they don't run in
they don't run in
C we have several examples of dedicated
C we have several examples of dedicated
C networks they're not that bad to
C networks they're not that bad to
write I even I did the neurom MMO 3 one
write I even I did the neurom MMO 3 one
and C as well so it's not that
hard this is really cool to watch
this good
this good
physics is this just your own physics or
physics is this just your own physics or
is this box 2D for
physics llm
physics llm
translated I'm kind of surprised that
translated I'm kind of surprised that
even works at all
basically open sourced a handwritten
basically open sourced a handwritten
physics Sim Oh
physics Sim Oh
okay that's cool no I prefer
okay that's cool no I prefer
self-contained self-contained stuff is
self-contained self-contained stuff is
good you got some freeze to write I
good you got some freeze to write I
think
here what would would you like me to do
here what would would you like me to do
um what would you like me to do with
um what would you like me to do with
this do you want me to read through
this do you want me to read through
code don't see leaks on my machine
code don't see leaks on my machine
that's because on Mac you don't have F
that's because on Mac you don't have F
sanitized F sanitized doesn't work
sanitized F sanitized doesn't work
correctly on Mac so you're not actually
correctly on Mac so you're not actually
getting the sanitizer
getting the sanitizer
information train and look at the
information train and look at the
rewards all
right puffer code ball should be
it outputs yeah it doesn't work
nicely some this is just a bad PR that I
nicely some this is just a bad PR that I
merged I I've already fixed this I'm
merged I I've already fixed this I'm
pretty
pretty
sure you just happen to get the branch
sure you just happen to get the branch
at like the hour interval in which I
at like the hour interval in which I
pushed
pushed
that for
let me go get my key
it's that fast on
CPU
CPU
what what
what what
is this this is running
GPU 100k
hang on let me f out where I put Discord
hang on let me f out where I put Discord
so I can still read your
so I can still read your
messages changed the I didn't change
anything there might be an auto
detect okay so we
detect okay so we
have well this looks
have well this looks
good return goes up
right I didn't change the config at
all let me
see wait what the heck to these
see wait what the heck to these
semicolons
semicolons
do is this a
do is this a
comment I thought it was
comment I thought it was
a
a
pound I didn't know that was a valid
pound I didn't know that was a valid
comment
comment
symbol uh
device 100K on CPU would not be
device 100K on CPU would not be
surprising though
we do get 100K plus we can actually get
we do get 100K plus we can actually get
like 250k for some faster Ms on CPU
like 250k for some faster Ms on CPU
puffer very
fast 200k uh GPU is kind of embarrassing
though we have really good
machines you will get access to some for
machines you will get access to some for
uh running experiments on this as well
uh running experiments on this as well
this is a large enough contribution to
this is a large enough contribution to
Merit
that so you can look forward to
that
slow let's
see let's start with your policy
MLP
policy where is the
whoops MLP
policy okay so you just did a fancy
policy okay so you just did a fancy
thing
is this policy copied from
is this policy copied from
somewhere do you know that you actually
somewhere do you know that you actually
need these extra
layers it works slightly better than
layers it works slightly better than
linear
lstm well it's just an extra
layer right
I'm going try this policy real
I'm going try this policy real
quick it should
work so num robots num Nitros this is
work so num robots num Nitros this is
six agents per environment is the uh are
six agents per environment is the uh are
you controlling all of them
all are controlled by the network okay
all are controlled by the network okay
so it's a slightly awkward
number um let me think how many Ms that
number um let me think how many Ms that
should
be uh
six six
82 it's annoying it's not divisible but
82 it's annoying it's not divisible but
I think it's fine to just round
I think it's fine to just round
down it's
down it's
82 you can raise it oh that's even
82 you can raise it oh that's even
better let's do eight that's nicer and
better let's do eight that's nicer and
then we divide B it's 512
m is it possible to make the parameters
m is it possible to make the parameters
for the model
I don't know if I just did it for RNN or
I don't know if I just did it for RNN or
for model or
whatever could a device side
huh is this
huh is this
policy oh it should be fine
is there something weird here
try
this
nope pound works just as well I didn't
nope pound works just as well I didn't
even know that the uh I didn't even know
even know that the uh I didn't even know
semicolon was a
thing
thing
Batman there's your
so that's not going to go
anywhere why why NS um I assume that
anywhere why why NS um I assume that
that means your observations are
that means your observations are
actually n
does this thing actually
does this thing actually
handle um number of robots
correctly for simulation yes it is
possible I see some
nams why is it 40 96x 10 by
nams why is it 40 96x 10 by
9 that seems
9 that seems
weird number robots plus
weird number robots plus
two n
should be typed
should be typed
TBH uh scon type checks for
TBH uh scon type checks for
you scon type checks for
you scon type checks for
you doesn't it's not going to type check
you doesn't it's not going to type check
individual elements it'll check when you
individual elements it'll check when you
like pass the tensors in
type what does that do python doesn't
type what does that do python doesn't
actually check the
actually check the
types like you mean
annotated numpy struct oh no yeah you
annotated numpy struct oh no yeah you
can do that but we actually we typically
can do that but we actually we typically
don't do that for um
don't do that for um
uh for Native environments because it
uh for Native environments because it
adds
adds
overhead this is totally fine it's just
overhead this is totally fine it's just
there NS in here
somehow so I see the third one and the
somehow so I see the third one and the
sixth one are nams does that ring a bell
why is there so much stuff in
here is there like substantial logic in
here is there like substantial logic in
syon Z position of the first robot
I'm uh I'm not sure how you have this
I'm uh I'm not sure how you have this
thing working
thing working
here oh you have this make I see you
here oh you have this make I see you
have this make observation buffer thing
have this make observation buffer thing
okay I Noah wanted to finally get to
okay I Noah wanted to finally get to
work on TCG awesome do you know what the
work on TCG awesome do you know what the
next step that need to be done there
next step that need to be done there
yeah so so uh if you want to just do
yeah so so uh if you want to just do
something simple to start off I would
something simple to start off I would
get a land area working on the side so
get a land area working on the side so
like the lands are displayed separately
like the lands are displayed separately
and then the bigger thing is I think
and then the bigger thing is I think
right now you can attack and block with
right now you can attack and block with
the same card on the same turn so fix
the same card on the same turn so fix
that so it actually matches magic and
that so it actually matches magic and
then after that you can start on some
then after that you can start on some
like basic spells probably start with
like basic spells probably start with
like instance and stuff and then work
like instance and stuff and then work
your way up to more complex stuff from
your way up to more complex stuff from
there there's already a stack
there there's already a stack
implemented in everything
implemented in everything
and I will be around for uh pretty much
and I will be around for uh pretty much
all the winter break as well to help
all the winter break as well to help
actions on python side and cide are
actions on python side and cide are
different I I don't know if you're also
different I I don't know if you're also
on the Discord now Noah I have the
on the Discord now Noah I have the
Discord well you see it up there um
Discord well you see it up there um
helping this guy as well he's got a cool
helping this guy as well he's got a cool
end very cool end
translates from eight discrete actions
translates from eight discrete actions
to two continuous variables uh is there
to two continuous variables uh is there
anywhere where like numb robots would be
anywhere where like numb robots would be
hardcoded to six or something because
hardcoded to six or something because
when you set it to eight stuff
when you set it to eight stuff
breaks let me just double check that for
breaks let me just double check that for
sure
what if I set this to
32 yep still
broken I'll set it to six for
broken I'll set it to six for
now uh we'll just have to figure out six
now uh we'll just have to figure out six
times
6 * 128
6 * 128
maybe *
256 1536 that's too
256 1536 that's too
small 3072
small 3072
maybe so this is going to be 3072
so this is what
so this is what
144 and then batch size will be
144 and then batch size will be
like time
16 98 304
yeah so that actually works
right in my
shell slightly better
400,000 so according to this your
400,000 so according to this your
environment is
slow possibly you're losing perf in scon
slow possibly you're losing perf in scon
or
or
something I don't know why you have um
something I don't know why you have um
the amount of logic in scon that you do
the amount of logic in scon that you do
I think that you should
I think that you should
either option one would be to make sure
either option one would be to make sure
you're not calling back to scon or to
you're not calling back to scon or to
see I calling back to python in
syon um the easier thing is to just like
syon um the easier thing is to just like
follow the way that we do our scyon
follow the way that we do our scyon
binds and move most of it into
binds and move most of it into
C it's pretty
easy I actually find debugging uh C way
easy I actually find debugging uh C way
easier than debugging through cython
easier than debugging through cython
because in C you just boot up GDB right
because in C you just boot up GDB right
where scon like converts it into a big
where scon like converts it into a big
giant mess of c and it's kind of a pain
so techically I think easier to have
so techically I think easier to have
more stuff in C rather than
less but I got you to
420,000 not bad for few minutes
420,000 not bad for few minutes
work you can see 56% M time right here
work you can see 56% M time right here
this is how I know that your m is this
this is how I know that your m is this
low you know the
bottleneck with um observations as small
bottleneck with um observations as small
as you have this is like an easy million
as you have this is like an easy million
step per second environment for training
step per second environment for training
easy million step per second
train and in fact it's a pretty nice
train and in fact it's a pretty nice
opportunity to experiment with some cool
opportunity to experiment with some cool
architectures because you literally just
architectures because you literally just
have entity data so I can show you some
have entity data so I can show you some
cool stuff with
that I don't know if you were around for
that I don't know if you were around for
the earlier uh Spiel on that but started
the earlier uh Spiel on that but started
this stream like close to the start of
this stream like close to the start of
this stream I gave a pretty detailed
this stream I gave a pretty detailed
overview of like different types of
overview of like different types of
neuron nets for different types of
neuron nets for different types of
data moving observation to see sped it
data moving observation to see sped it
up quite a bit fix action to be discreet
up quite a bit fix action to be discreet
pass other buffers to see well I
pass other buffers to see well I
wouldn't just make everything discreet
wouldn't just make everything discreet
actually um what I would do and because
actually um what I would do and because
this would be really helpful for
this would be really helpful for
research as well um I think we have an
research as well um I think we have an
example of this in MOA you you just add
example of this in MOA you you just add
a discretized flag to uh you add a
a discretized flag to uh you add a
discretized flag to the python setting
discretized flag to the python setting
right or continuous flag whatever and
right or continuous flag whatever and
you can set the observation space to be
you can set the observation space to be
discrete or continuous so you basically
discrete or continuous so you basically
can support both um there really should
can support both um there really should
not be any overhead from one or the
not be any overhead from one or the
other you move the conversion into C but
other you move the conversion into C but
you make it
you make it
optional it's a pretty cool thing cuz
optional it's a pretty cool thing cuz
then you can train with discreet or
then you can train with discreet or
continuous action heads you can
continuous action heads you can
discretize for now but I would
discretize for now but I would
definitely keep it in mind because like
definitely keep it in mind because like
I know it's pretty cool to have the
I know it's pretty cool to have the
support for continuous actions and it'll
support for continuous actions and it'll
be really helpful for the research as
be really helpful for the research as
well currently in scon yeah just look at
well currently in scon yeah just look at
all of our other environments like our
all of our other environments like our
scon buying are really really
scon buying are really really
small keep the yeah you can totally do
small keep the yeah you can totally do
that I think we might even have that in
that I think we might even have that in
MOBA I don't know if I uh if I kept that
MOBA I don't know if I uh if I kept that
code path working but the idea is there
or you just like add a discretized flag
or you just like add a discretized flag
and set the space conditionally you use
and set the space conditionally you use
a float for um you know float array for
a float for um you know float array for
observations for the not for
observations for the not for
observations for actions use a float
observations for actions use a float
array and then um you know if it's
array and then um you know if it's
discreet well it's it's an INT but it's
discreet well it's it's an INT but it's
in a float array it's just fine and if
in a float array it's just fine and if
it's continuous then it's continuous
so this thing is at
17.3 yeah so it like it learns up to
17.3 yeah so it like it learns up to
here and then it stops learning is that
here and then it stops learning is that
what
happens does it run to the center I
happens does it run to the center I
don't know I
don't know I
haven't how do I run it
haven't how do I run it
I'm not sure if it saved a
policy so here's the other thing neev
policy so here's the other thing neev
that um is probably tripping you up you
that um is probably tripping you up you
have a selfplay
have a selfplay
environment so as soon as you learn
environment so as soon as you learn
something your opponent has learned it
something your opponent has learned it
as
as
well we do support selfplay but for
well we do support selfplay but for
early environments that are like new in
early environments that are like new in
development what I would suggest that
development what I would suggest that
you do is you add an option to make
you do is you add an option to make
one side scripted and just use your
one side scripted and just use your
current policy that like pushes the ball
current policy that like pushes the ball
for scripted and then get win rate
for scripted and then get win rate
versus the scripted
versus the scripted
policy and then you should be able to
policy and then you should be able to
train you know your policy to
train you know your policy to
consistently beat the simple scripted
consistently beat the simple scripted
policy and then you can go selfplay from
policy and then you can go selfplay from
there to get like superhuman policies
there to get like superhuman policies
but that'll be really useful for
but that'll be really useful for
debugging I literally just gave a
debugging I literally just gave a
captain like the same advice earlier
captain like the same advice earlier
today
he's also got like um
h
I don't know it might be slightly better
I don't know it might be slightly better
than random it's hard to
than random it's hard to
say I haven't seen them own goal it from
say I haven't seen them own goal it from
the start
yet tried to hit out of the way it looks
yet tried to hit out of the way it looks
like
like
yeah it's probably pretty bad but better
yeah it's probably pretty bad but better
than
random current reward is just running to
random current reward is just running to
the oh I see well then yeah it's not
the oh I see well then yeah it's not
doing that obviously
doing that obviously
right I would check rewards because
right I would check rewards because
often like you're not you're forgetting
often like you're not you're forgetting
to reset them or something at the start
to reset them or something at the start
of uh the start of a new step like
of uh the start of a new step like
forgetting to reset your reward is very
forgetting to reset your reward is very
common um
common um
you know make sure your buffers are
you know make sure your buffers are
actually making it into python stuff
actually making it into python stuff
like
like
that is it the only environment in
experiments how do I
know yeah
no
no
worries let me see if there's anything
worries let me see if there's anything
else obvious
and then I got to run to
dinner this is an awesome end
dinner this is an awesome end
though I think do you know do your
though I think do you know do your
discretization or
discretization or
whatever uh Port some stuff to
whatever uh Port some stuff to
[Music]
[Music]
see add scripted policy option to the
see add scripted policy option to the
environment for the
environment for the
opponents yeah I'm looking at your other
opponents yeah I'm looking at your other
stuff first to make sure you've got
stuff first to make sure you've got
reasonable configs
reasonable configs
badge gamma G Lambda
badge gamma G Lambda
Yep this value function coefficient is
Yep this value function coefficient is
low there's no reason to have it this
low there's no reason to have it this
low leave it at 0.
low leave it at 0.
five
five
um it's just going to create
Jank don't mess with the clip params and
Jank don't mess with the clip params and
the VF coefficient if you don't know if
the VF coefficient if you don't know if
you don't have a reason for
you don't have a reason for
it reward
code goal scored well you do actually
code goal scored well you do actually
have more than
have more than
a me
say is this it right here
this all meant to be inside the
loop what's
this oh this is logging that's fine
gold scored reward looks
gold scored reward looks
fine to get
used yeah you do you do have a goal
used yeah you do you do have a goal
reward don't
you I think I got to go I think dinner
you I think I got to go I think dinner
is
is
uh currently Nord didn't do okay
uh currently Nord didn't do okay
um so one thing I will tell you
um so one thing I will tell you
continuous rewards can be a little
continuous rewards can be a little
tricky because the Delta between like
tricky because the Delta between like
moving a little bit to the center or a
moving a little bit to the center or a
little bit away is very small so what I
little bit away is very small so what I
would do is I would replace it with like
would do is I would replace it with like
a constant 0.1 if you move closer to the
a constant 0.1 if you move closer to the
uh closer to the center and negative.
uh closer to the center and negative.
one if you move farther from the center
one if you move farther from the center
I would try
I would try
that if you're just trying to get like
that if you're just trying to get like
debug it continuous rewards are very
debug it continuous rewards are very
tricky dense rewards are good continuous
tricky dense rewards are good continuous
rewards are a little
rewards are a little
tricky so I've given you try the continu
tricky so I've given you try the continu
like try those
like try those
rewards um scripted
rewards um scripted
opponents proportional to distance
opponents proportional to distance
change to Center yes that is fine
change to Center yes that is fine
roughly scale of like 0.1 for really
roughly scale of like 0.1 for really
dense rewards like that 0.1 to one
dense rewards like that 0.1 to one
somewhere in there
somewhere in there
um that that's what I would
um that that's what I would
do proportional to change not
do proportional to change not
proportional to Absolute distance to
Center yeah so that would be my
Center yeah so that would be my
suggestion other than that if this is
suggestion other than that if this is
most of the code if it's like a thousand
most of the code if it's like a thousand
is lines we can definitely clean some
is lines we can definitely clean some
stuff
stuff
up and uh get a nice clean merge of this
up and uh get a nice clean merge of this
pretty
soon yeah you just see you have oh I
soon yeah you just see you have oh I
guess we have a separate render h
only 200 lines though I just put this
only 200 lines though I just put this
all in a
file I get rid of some of the macros on
file I get rid of some of the macros on
like the if deaths and whatever but I'll
like the if deaths and whatever but I'll
help you with that stuff all
help you with that stuff all
right um I got to run to dinner awesome
right um I got to run to dinner awesome
environment uh pick some of the stuff
environment uh pick some of the stuff
that I suggested and then I will be
that I suggested and then I will be
around tomorrow or whenever and uh yeah
around tomorrow or whenever and uh yeah
hopefully we can get something cool
hopefully we can get something cool
training
training
I think this would be an end people
I think this would be an end people
would really be interested in for other
would really be interested in for other
folks watching I stream this stuff a lot
folks watching I stream this stuff a lot
all this code is free and open
all this code is free and open
source if you just check not this one
source if you just check not this one
peer.
peer.
GitHub star repel helps a
GitHub star repel helps a
ton also you can join the Discord
ton also you can join the Discord
discord. jpu or click right here and you
discord. jpu or click right here and you
can follow me on X I post tons of RL and
can follow me on X I post tons of RL and
you can see when I'm live as well thanks
you can see when I'm live as well thanks
all and
