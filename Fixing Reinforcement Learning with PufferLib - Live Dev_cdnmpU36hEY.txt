Kind: captions
Language: en
we're
live I don't know why we're live it is
live I don't know why we're live it is
Sunday but uh I feel like working on
Sunday but uh I feel like working on
this thing just for a little
this thing just for a little
bit just for a little
bit puffer lib SL sweep
for e
okay
we're going to debug this implementation
we're going to debug this implementation
and see if it does
and see if it does
anything what we will do right
anything what we will do right
now I'm trying to think what other stuff
now I'm trying to think what other stuff
I actually really have to do
today I think I pretty much just have to
today I think I pretty much just have to
check a couple Financial
things and that's about it so I think
things and that's about it so I think
I'm good to work on this for a little
bit I me there's all sorts of other
bit I me there's all sorts of other
stuff I'd like to
stuff I'd like to
do but this is higher priority
I got to find some followers that I can
I got to find some followers that I can
just like ask [ __ ] about ask [ __ ] in
just like ask [ __ ] about ask [ __ ] in
various different
areas as I end up spending a fair bit of
areas as I end up spending a fair bit of
time outside of ARL trying to do
time outside of ARL trying to do
research on other
areas I probably know somebody come to
areas I probably know somebody come to
B be good uh What is this
B be good uh What is this
no this is not going to be a generator
no this is not going to be a generator
this is
stupid in fact what the hell is
this why did I make this a
yield I'm going to have to fix that at
yield I'm going to have to fix that at
some point I why would I do that ever I
some point I why would I do that ever I
hate generators
oh it's fast shut up you're using
python how
python how
to no Adder search Center
how about
me
success self. success too many C's
none I bet I forgot to return
it why do it trying to make it a
it why do it trying to make it a
couple I thought so weird
still
now that is
weird suggestion index is
weird suggestion index is
one there should be less than equal
why that's
Jank operand could not be
broadcast does numai have I can just do
broadcast does numai have I can just do
like this star none right
uh
okay Sigma
wait what numpy random Rand
wait what numpy random Rand
in yeah those are moo
indices well this is just
and the
and the
that of
one so let's
do inut
D
what yeah this isn't I'm input
okay very
okay very
good uh wait moo do
good uh wait moo do
shape that's not
right you did it wrong dummy
does this
does this
work looks like it
works deep
copy for
isn't that kind of
weird yeah it's different
weird yeah it's different
seeds so how's that happening
also why is it so
slow I shouldn't be so
slow
oops is the sample function slow
that's not
bad wait
bad wait
what PH takes
what PH takes
time that's bizarre
huh so something's broken
here for
huh uh it looks like they never got
huh uh it looks like they never got
normalized that's what that looks like
normalized that's what that looks like
to me
so actually the thing that happened
so actually the thing that happened
that's so funny it's just like giant
that's so funny it's just like giant
number calculations with the exponents
number calculations with the exponents
that's that slow that's
weird see if I were writing this in C
weird see if I were writing this in C
the computer would probably just blow up
the computer would probably just blow up
or
something which is the desired
outcome to be punished for writing such
outcome to be punished for writing such
garbage
how two should have a in
you should absolutely have a
you should absolutely have a
in oh you know what it
in oh you know what it
is see this is why we hate
is see this is why we hate
inheritance and uh we will probably find
inheritance and uh we will probably find
a way around having to do any of this
a way around having to do any of this
garbage
wait no I didn't even
wait no I didn't even
Define I didn't even Define
um something weird here
wait self.
min
oh which came first the chicken or the
oh which came first the chicken or the
egg I
see e
okay great so we're on to this
e error
zero
for
e how's this
happen yeah I see
okay so all the scores are always the
okay so all the scores are always the
same um but this does
Run's best and
Run's best and
we
we
return perams
carbs. suggest
arcs and I don't think that this suggest
arcs and I don't think that this suggest
needs to take in anything right
yeah AR is no longer
used hey there we
go and All I Need is Another
terminal
Ser who's using
Ser who's using
this do I have a server up I don't think
this do I have a server up I don't think
I
do yes I do
do yes I do
somewhere no idea
where this
visualize empty
chart okay what's wrong with
chart okay what's wrong with
you oh I forgot to just here
lovely so this
is the result of uh the randomized neoc
is the result of uh the randomized neoc
carb
carb
search I don't know how the heck you get
search I don't know how the heck you get
a point sampled this far out but
a point sampled this far out but
uh and which task are we on
linear I mean that's fairly interesting
num random
num random
samples give it 200 runs real quick
samples give it 200 runs real quick
because we can actually do that now it's
because we can actually do that now it's
fast so much
faster okay this task isn't supposed to
faster okay this task isn't supposed to
work like
work like
this so
um something's
um something's
probably wrong here
this looks yeah there's something wrong
this looks yeah there's something wrong
for sure
see if this
works
works
holy nope ah okay we're returning them
holy nope ah okay we're returning them
in the
okay so this is in the wrong
space they need to do
um okay here's what we're going to do
then scale is already normed
one negative 1 to
one and then this has to
one and then this has to
get
suggestion ah and then Phil will
suggestion ah and then Phil will
unnormalized right
unnormalized right
yes Phil does un
normalize way better way way way
normalize way better way way way
better it's actually pretty funny how
better it's actually pretty funny how
well that
does as just like um as a Bas line
the 100 points can see it doesn't fill
the 100 points can see it doesn't fill
it in as
nicely and do a th000
points still works like
points still works like
instantly and this is what you
get so this is let me just put this into
get so this is let me just put this into
perspective what we have here we have a
perspective what we have here we have a
version of
version of
cars uh that runs instantly without any
cars uh that runs instantly without any
of the overhead uh where we've discarded
of the overhead uh where we've discarded
all of the
all of the
math and it still does pretty
decently can we do random for
comparison is it better to reimplement
comparison is it better to reimplement
some already built environment or go
some already built environment or go
full out on something new it depends on
full out on something new it depends on
your
your
reference uh and what you're excited
reference uh and what you're excited
about so if you see an environment that
about so if you see an environment that
you think is cool that you think will
you think is cool that you think will
add something to puffer that's not going
add something to puffer that's not going
to a ton of work then go for it it is
to a ton of work then go for it it is
possible for reference code bases to
possible for reference code bases to
have negative value many of them in
have negative value many of them in
Academia do there are many code bases
Academia do there are many code bases
that are so bad that replicating them
that are so bad that replicating them
with good code that's actually usable is
with good code that's actually usable is
harder than just coming up with
harder than just coming up with
something that'll be
better I'd say this is somebody who I
better I'd say this is somebody who I
guess technically I professionally weigh
guess technically I professionally weigh
through academic code bases I can say
that a good example of this is
that a good example of this is
overcooked it has that code base boggles
overcooked it has that code base boggles
the
Mind generally you should for a first uh
Mind generally you should for a first uh
a first environment
a first environment
you should look to do something that's
you should look to do something that's
going to be between 2 and 500
lines a good chunk of that as well will
lines a good chunk of that as well will
be logging allocation free and there's
be logging allocation free and there's
like you know 150 lines of M code 200
like you know 150 lines of M code 200
lines of M
code you can do a fair bit in that like
code you can do a fair bit in that like
I think snake is about that length our
I think snake is about that length our
multi-agent snake implementation I mean
multi-agent snake implementation I mean
that we we have is about that length do
that we we have is about that length do
quite a bit with that
[Music]
do you have any ideas around that like
do you have any ideas around that like
new environments let me
new environments let me
think let me think of stuff we could use
think let me think of stuff we could use
at the moment that would
at the moment that would
be in that Simplicity with so many
be in that Simplicity with so many
options
you think going to be looking
you think going to be looking
at curriculum
at curriculum
[Music]
[Music]
exploration m covers pretty
well see I'm trying to think of things
well see I'm trying to think of things
that aren't out there in directions I
that aren't out there in directions I
haven't explored yet and uh where I
haven't explored yet and uh where I
don't know if I'm giving you something
don't know if I'm giving you something
crazy
hard like last time I gave uh I tried to
hard like last time I gave uh I tried to
I gave Enduro to somebody as a project
I gave Enduro to somebody as a project
uh some fairly new and he did it but it
uh some fairly new and he did it but it
was way more complicated than I
expected let me think of like what is
expected let me think of like what is
something that I've wanted there's so
something that I've wanted there's so
many things I've wanted to happen in
many things I've wanted to happen in
here for a
while it'll be fun yes but I don't want
while it'll be fun yes but I don't want
to give you something that's too large
to give you something that's too large
that'll be discouraging especially
that'll be discouraging especially
without knowing your level EXP
without knowing your level EXP
experience if you tell me you're a SE
experience if you tell me you're a SE
whz that's another story
but see multi-agent Dynamics are also
but see multi-agent Dynamics are also
hard to test
oh wait I think I have something let me
oh wait I think I have something let me
think let me think if this is actually a
think let me think if this is actually a
good project
yeah I think this is
good what do you think about
this so
this so
this is like it's a flocking thing right
this is like it's a flocking thing right
yeah this is from artificial life it
yeah this is from artificial life it
turns out that you can create like these
turns out that you can create like these
flocking type behaviors with very simple
flocking type behaviors with very simple
rules so all you do is you if you just
rules so all you do is you if you just
put the constraint that um where is
put the constraint that um where is
it yeah Birds try to stay you know they
it yeah Birds try to stay you know they
don't get too close they try to match
don't get too close they try to match
velocity of neighbors and they try to
velocity of neighbors and they try to
move towards Center of mass you get
move towards Center of mass you get
these really cool looking
these really cool looking
Sims so what I was thinking you could do
Sims so what I was thinking you could do
is you could implement this but then
is you could implement this but then
what you so you could implement this so
what you so you could implement this so
that you get this type of behavior so
that you get this type of behavior so
you know your sim is correct right but
you know your sim is correct right but
then what you can do is you can replace
then what you can do is you can replace
these rules with rewards and see if we
these rules with rewards and see if we
can RL like cool flocking
behaviors I think that this is a really
behaviors I think that this is a really
short implementation as
short implementation as
well yeah it's a really short
well yeah it's a really short
implementation
and it'll be funny cuz we can use the
and it'll be funny cuz we can use the
puffer as the uh we can use the puffer
puffer as the uh we can use the puffer
as the uh the
character is that something you'd be
character is that something you'd be
excited about or should I pick something
else I think that's like a you know 100
else I think that's like a you know 100
to 200 lines of logic
to 200 lines of logic
kind of a
thing you'll pretty much be able to
thing you'll pretty much be able to
follow the snake logic as a
follow the snake logic as a
template you get to have some fun
template you get to have some fun
playing around with training as well
playing around with training as well
because it'll train really fast
only thing that'll be a little tricky
only thing that'll be a little tricky
will be the
will be the
observations you don't want to do
observations you don't want to do
uh well observations will be a little
uh well observations will be a little
tricky you can figure it out though I'm
sure can you pick one more yeah let me
sure can you pick one more yeah let me
than
than
so this is one
option let me think of something else as
well so really comple I have a couple of
well so really comple I have a couple of
really complicated ones in mind that I'm
really complicated ones in mind that I'm
definitely not going
definitely not going
to hand out willing
to hand out willing
La let me see if I can think of
La let me see if I can think of
something
simpler see I like I think of other
simpler see I like I think of other
Atari games as well just to like round
Atari games as well just to like round
out our collection of arcade tasks but a
out our collection of arcade tasks but a
lot of them are actually more
lot of them are actually more
complicated than you would suspect to
complicated than you would suspect to
implement
do you have a preference for like
do you have a preference for like
continuous like with physic like basic
continuous like with physic like basic
physics or like discreet or do you have
physics or like discreet or do you have
any preference around
any preference around
anything or am I just coming up with
anything or am I just coming up with
something
here see these board games actually end
here see these board games actually end
up being a pain in the ass CU you have
up being a pain in the ass CU you have
to script a decent opponent to play
to script a decent opponent to play
against
against
ideally we pick something that doesn't
ideally we pick something that doesn't
require that
it's going to be too
it's going to be too
[Music]
complicated pretty comfortable with math
complicated pretty comfortable with math
and
physics well that makes one of
us there will be a lot to do on that I
us there will be a lot to do on that I
don't want to give you as a first thing
though cuz there the thing is there are
though cuz there the thing is there are
L details that pop in very
quickly no good M's there
guys discussing new Ms yeah I'm trying
guys discussing new Ms yeah I'm trying
to figure out a good new one for uh for
to figure out a good new one for uh for
for a new friend
for a new friend
here I came up with one
here I came up with one
option I'm trying to think of others cuz
option I'm trying to think of others cuz
the thing that's difficult at the moment
the thing that's difficult at the moment
right is we're just starting all the
right is we're just starting all the
science side stuff so I'm trying to
science side stuff so I'm trying to
think of like what type of stuff would
think of like what type of stuff would
be relatively easy to implement and
be relatively easy to implement and
would directly support
that and also be relatively fun because
that and also be relatively fun because
we have some we've got some synthetic
we have some we've got some synthetic
tasks that are just boring
pretty comfortable with math and physics
pretty comfortable with math and physics
okay that is good because there's a lot
okay that is good because there's a lot
I want to do
there but I don't want to assign you
there but I don't want to assign you
just like a straight Port of where's
just like a straight Port of where's
like this
RL not this one
not this one somebody had a really good
not this one somebody had a really good
SE environment for
SE environment for
this I think a lot of these are
slow I can do one
slow I can do one
also oh man so now I am coming up with
also oh man so now I am coming up with
multiple new Ms for people to build
okay see usually people are like oh I
okay see usually people are like oh I
have this thing I want to build and I
have this thing I want to build and I
say great let's make it an
say great let's make it an
rlm but yeah now I'm thinking about how
rlm but yeah now I'm thinking about how
to like round out the collection okay
to like round out the collection okay
let me think of like other M's that
let me think of like other M's that
people use so the obvious one the
people use so the obvious one the
obvious one that like we can always use
obvious one that like we can always use
a few more of are the arcade tasks right
a few more of are the arcade tasks right
the problem with them is that some of
the problem with them is that some of
them are a little harder to implement
them are a little harder to implement
than you would expect right like if I
than you would expect right like if I
gave you asteroids or something then
gave you asteroids or something then
you're going to go wait a second but
you're going to go wait a second but
like the asteroids break into many
like the asteroids break into many
different asteroids and then I got to
different asteroids and then I got to
keep track of all these asteroids and
keep track of all these asteroids and
then I'm going to have to go through
then I'm going to have to go through
yeah but you just allocate a big buffer
yeah but you just allocate a big buffer
and you keep them contiguous and like
and you keep them contiguous and like
I'm going to have to go through that
I'm going to have to go through that
Spiel
Spiel
um which is sub
um which is sub
optimal and then there's Collision
optimal and then there's Collision
checks and all that other stuff
um other common arlons
there's so many like mediumsized
there's so many like mediumsized
projects that would be good as
projects that would be good as
well but smaller
ones smaller ones are
ones smaller ones are
usually unless it's an existing gamer
usually unless it's an existing gamer
project they're very
project they're very
intentional like my maze environment
intentional like my maze environment
would probably count count as a smaller
would probably count count as a smaller
project because um well if you ignore
project because um well if you ignore
the keys and the doors and like some of
the keys and the doors and like some of
the fancy
the fancy
features that that took me like two days
features that that took me like two days
there's still a fair bit of code in
there's still a fair bit of code in
there for somebody new
though but let me think along those
though but let me think along those
lines
because the maze really isn't great for
because the maze really isn't great for
continuous I'd like something that gives
continuous I'd like something that gives
us like a
us like a
continuous it has the option for it but
continuous it has the option for it but
it's not a great test of it I'd like
it's not a great test of it I'd like
something that's like a
something that's like a
continuous exploration type
task something where we can really
task something where we can really
figure that side
Out Boy is more like
Out Boy is more like
multi-agent so I guess I'm looking for a
multi-agent so I guess I'm looking for a
single
single
agent continuous task is an
option first one is
option first one is
for rashab I
for rashab I
believe I don't know maybe you can give
believe I don't know maybe you can give
out something that would just be a fun
out something that would just be a fun
just boost fun learning and overall
just boost fun learning and overall
intuition yeah but I can do something I
intuition yeah but I can do something I
can find something like that that's also
can find something like that that's also
going to be like a legitimately useful
going to be like a legitimately useful
contribution of at the same time like a
contribution of at the same time like a
lot of these things they look like toys
lot of these things they look like toys
but they're actually really good
but they're actually really good
research
environments like snake for instance
environments like snake for instance
this is like a toy but this thing is a
this is like a toy but this thing is a
really
really
stable many agent
stable many agent
environment that can be learned very
environment that can be learned very
quickly and has non-trivial Behavior
quickly and has non-trivial Behavior
non-trivial Behavior
me actually go look
me actually go look
fem get some
stuff so
see this is too
see this is too
complicated stuff like this is awesome
complicated stuff like this is awesome
but this is too
complicated oh hang on wait wait wait I
complicated oh hang on wait wait wait I
have
have
something um
something um
let me think how hard it is
though I think if we limit the number of
entities if we don't try to make it
entities if we don't try to make it
hugely
hugely
scalable and we limit the number of
scalable and we limit the number of
entities it's okay
entities it's okay
it is adversarial though adversarial Ms
it is adversarial though adversarial Ms
are
hard it would be a good multi-agent
hard it would be a good multi-agent
though a multi-agent test
which we
which we
need directly
competitive runnable
competitive runnable
nontrivially
nontrivially
with one agent as
with one agent as
well for debugging
well for debugging
purposes okay I got something
I'm pretty sure you can do this
I'm pretty sure you can do this
thing where is the stupid oh yeah stupid
thing where is the stupid oh yeah stupid
advertising I like how I get Rogue adver
advertising I like how I get Rogue adver
how do
how do
I of course I get Rogue advertisements I
I of course I get Rogue advertisements I
you already have my money stop so yeah I
you already have my money stop so yeah I
think you could do something like this
think you could do something like this
very very
very very
efficiently uh with not very much code
efficiently uh with not very much code
it's actually probably simpler than my
it's actually probably simpler than my
snake code
don't bother with like these spiky
don't bother with like these spiky
things just like the basic you know
things just like the basic you know
there are
there are
dots if you collide with them you pick
dots if you collide with them you pick
them up if you're bigger otherwise they
them up if you're bigger otherwise they
eat you or
eat you or
whatever you have a fixed number of
whatever you have a fixed number of
players you have like a Max Map size or
players you have like a Max Map size or
whatever with at most like 100 dots
whatever with at most like 100 dots
something like that
something like that
this would be another option something
this would be another option something
like this this would be a this is cool
like this this would be a this is cool
because it's configurable multi-agent
because it's configurable multi-agent
it's continuous uh you could run it
it's continuous uh you could run it
discrete as well like you could
discrete as well like you could
discretize the action space so that's a
discretize the action space so that's a
good comparison for us uh it should be
good comparison for us uh it should be
very simple single agent to get like
very simple single agent to get like
non-trivial exploration and
stuff what in the hell
they just
slowly okay there have people who have
slowly okay there have people who have
been just like on this for hours
been just like on this for hours
apparently because this is a
apparently because this is a
planet probably set a match size on the
planet probably set a match size on the
lines of snake yeah that's what I
lines of snake yeah that's what I
figured so it would be a pretty direct
figured so it would be a pretty direct
it'd be pretty direct um it would be a
it'd be pretty direct um it would be a
pretty direct Port like pretty direct
pretty direct Port like pretty direct
comparable I think that slither.io or
comparable I think that slither.io or
something like slyther iio would be
something like slyther iio would be
harder
harder
because you have to keep track of the
because you have to keep track of the
snake body in continuous
snake body in continuous
space but
space but
um yeah I think rashab if you're
um yeah I think rashab if you're
interested in doing something like this
interested in doing something like this
I think that the logic for that should
I think that the logic for that should
be pretty clean the only things that you
be pretty clean the only things that you
have to not worry about too much are
have to not worry about too much are
like variable numbers of food and
like variable numbers of food and
opponents just don't worry about it just
opponents just don't worry about it just
allocate a uh for now just like allocate
allocate a uh for now just like allocate
a Max buffer of 128 and then just Loop
a Max buffer of 128 and then just Loop
over all of
over all of
them and then we'll deal with like if we
them and then we'll deal with like if we
want really big Maps I'll come up with a
want really big Maps I'll come up with a
way to do
that I mean I have ways to do that
that I mean I have ways to do that
they're just a little complicated for a
they're just a little complicated for a
first
end that's two two options you want me
end that's two two options you want me
to come up with some additional Ur are
to come up with some additional Ur are
either of those interesting
for folks watching as well I code review
for folks watching as well I code review
all contributed environments uh live on
all contributed environments uh live on
stream if that is something that you
stream if that is something that you
want so it's a good way to get feedback
want so it's a good way to get feedback
on RL stuff no no don't do slyther
on RL stuff no no don't do slyther
slyther iio would be hard man slither.io
slyther iio would be hard man slither.io
would be hard I think agar would be
would be hard I think agar would be
substantially
easier cuz with slyther like you have to
easier cuz with slyther like you have to
do
do
you have to basically keep track of
you have to basically keep track of
either a curve or some like line
either a curve or some like line
segments or something I actually don't
segments or something I actually don't
know off the top of my head how the code
know off the top of my head how the code
works for that for snakes in continuous
space agar is like Circ like they're
space agar is like Circ like they're
blobs so you don't have to keep track of
blobs so you don't have to keep track of
a growing snake that like can have all
a growing snake that like can have all
sorts of weird angles and stuff in
sorts of weird angles and stuff in
continuous space you just have to keep
continuous space you just have to keep
track of the size of the blob
track of the size of the blob
yeah you can try Slither but I think
yeah you can try Slither but I think
it's going to be much harder and I think
it's going to be much harder and I think
it'll be hard to learn uh to learn good
it'll be hard to learn uh to learn good
policies on so I think it'll just be
policies on so I think it'll just be
harder
overall like much
harder anel what's your background I can
harder anel what's your background I can
uh I can come up with something for
uh I can come up with something for
you or if you have your own ideas like
you or if you have your own ideas like
this this is not just assignment based
this this is not just assignment based
we're also very happy when people are
we're also very happy when people are
like all right I got a cool idea I want
like all right I got a cool idea I want
to turn this into an rlm we usually just
to turn this into an rlm we usually just
go yeah awesome more rlm is
go yeah awesome more rlm is
good oh dude that's hard are you are you
sure I'm just telling you like that
sure I'm just telling you like that
would
would
be I wrote I mean I write some cool code
be I wrote I mean I write some cool code
and I think it would be non-trivial to
and I think it would be non-trivial to
make that like fast and to do this like
make that like fast and to do this like
the way that we build our
the way that we build our
M for reference right like this is I
M for reference right like this is I
made this thing a million steps a second
made this thing a million steps a second
two million closer to really
two million closer to really
um yeah I did the Moa and I still think
um yeah I did the Moa and I still think
I I could be wrong there probably some
I I could be wrong there probably some
stuff online about how they do it but I
stuff online about how they do it but I
don't know if it's easy I'm a final year
don't know if it's easy I'm a final year
student yeah and I'm a PhD who's been
student yeah and I'm a PhD who's been
writing codes since I was 14
writing codes since I was 14
um let me think
let me
let me
look it's also we don't need two very
look it's also we don't need two very
similar
M what the
hell nasty C
projects I at least would want to know
projects I at least would want to know
the algorithm for this but the other
the algorithm for this but the other
thing is it's like very duplicate right
thing is it's like very duplicate right
cuz we have discreet snake and then if
cuz we have discreet snake and then if
agar's going to be in continuous space
agar's going to be in continuous space
like I it doesn't add a ton I
think this would still be my yeah I mean
think this would still be my yeah I mean
so the thing that I was suggesting
so the thing that I was suggesting
before was
this yes I am a h this also to be fair I
this yes I am a h this also to be fair I
got stuck writing python for like 10
got stuck writing python for like 10
years but I've been writing some pretty
years but I've been writing some pretty
cool C stuff
cool C stuff
lately um unfortunately today I'm
lately um unfortunately today I'm
writing python but have you seen this
writing python but have you seen this
this is
voids it's like this really cool
voids it's like this really cool
flocking simulation I think this can be
flocking simulation I think this can be
done in like this is something that
done in like this is something that
would probably take me a day to like get
would probably take me a day to like get
something
something
working it's only it's going to be
working it's only it's going to be
probably like 100 150 lines of real code
probably like 100 150 lines of real code
plus the you know the N4
plus the you know the N4
plate uh it has decent ways to test it
plate uh it has decent ways to test it
it has really cool emerging behaviors
it has really cool emerging behaviors
and you can do quite a bit with the
SIM and there are like there are tons of
SIM and there are like there are tons of
blog posts on how to do this stuff like
blog posts on how to do this stuff like
this is the whole logic of it in
this is the whole logic of it in
python or pseudo code or whatever
python or pseudo code or whatever
language yeah pseudo
code so probably I don't know like a
code so probably I don't know like a
couple hundred lines of see
see and there are ways to get fancier
see and there are ways to get fancier
with this as well so if you want to come
with this as well so if you want to come
up with some cooler stuff um the right
up with some cooler stuff um the right
now it does a centroid so it scales
now it does a centroid so it scales
quadratically with the number of boids
quadratically with the number of boids
technically you could do either a quad
technically you could do either a quad
tree or if you want to be simpler about
tree or if you want to be simpler about
it you just do a fixed grid and then you
it you just do a fixed grid and then you
allocate a number of entities to each
allocate a number of entities to each
grid cell uh and that that prevents you
grid cell uh and that that prevents you
from getting quadratic scaling by
from getting quadratic scaling by
checking everything on the map so
checking everything on the map so
there's some stuff kles Lux S3 I know
there's some stuff kles Lux S3 I know
Stone
Stone
well let me see their
end how did you solve element
end how did you solve element
interactions nope didn't require quad
interactions nope didn't require quad
quadratic or anything um snake is is
quadratic or anything um snake is is
discrete so you just have to check
discrete so you just have to check
neighboring tiles and uh that I actually
neighboring tiles and uh that I actually
do that for continuous M's as well let
do that for continuous M's as well let
me show you so without even a f tree
me show you so without even a f tree
there's something way simpler you can
do so we have continuous movement right
do so we have continuous movement right
here you can see I'm moving around
here you can see I'm moving around
continuously and I'm not stuck to any
continuously and I'm not stuck to any
grid cell but there is actually a grid
grid cell but there is actually a grid
on this environment and the tiles are
on this environment and the tiles are
not tiny either like if if I uh if I use
not tiny either like if if I uh if I use
an
an
ability yeah so you can see like that is
ability yeah so you can see like that is
a radius of I believe two cells out um
a radius of I believe two cells out um
so all you have to do for Collision
so all you have to do for Collision
checks and stuff is you just check
checks and stuff is you just check
everything in those tiles instead of on
everything in those tiles instead of on
the whole map um and then you know you
the whole map um and then you know you
have a continuous position but you also
have a continuous position but you also
have a grid cell
position environments written in Jacks
position environments written in Jacks
let me see what they're on this
I tried to tell them that this is
um it's like literally harder to write
um it's like literally harder to write
this stuff in Jacks than
this stuff in Jacks than
MC and it doesn't look as
MC and it doesn't look as
cool wait what is the end let me
see 2D map in a
see 2D map in a
best for
is the game interesting it's hard to
is the game interesting it's hard to
tell with the uh the current visuals
oops
e e
this is funny this is like substantially
this is funny this is like substantially
simpler of an environment than they had
simpler of an environment than they had
in previous years that's what happens
in previous years that's what happens
when you use
when you use
Jacks I feel for him though because if
Jacks I feel for him though because if
you write if you're used to writing Ms
you write if you're used to writing Ms
in Python you go like wow I can train so
in Python you go like wow I can train so
fast oh but wait it's so hard to write
fast oh but wait it's so hard to write
anything
interesting I mean I also know how much
interesting I mean I also know how much
freaking work competitions are so this
freaking work competitions are so this
is still very very
is still very very
impressive competitions suck to organize
impressive competitions suck to organize
they really
do see this does something
reasonable I wouldn't bother with
reasonable I wouldn't bother with
something like that though that's going
something like that though that's going
to be a lot more work like you really
to be a lot more work like you really
can't tell what's going on from uh the
can't tell what's going on from uh the
visuals there very well you're going to
visuals there very well you're going to
want like a texture pack or something at
want like a texture pack or something at
the very least if not
the very least if not
animations uh for something like that so
animations uh for something like that so
yeah things quickly become more
work I just do boids as a first
work I just do boids as a first
environment it'll be a nice contribution
environment it'll be a nice contribution
it'll be very quick it should give you a
it'll be very quick it should give you a
sense of stuff there's some interesting
sense of stuff there's some interesting
optimizations you can do if you want
optimizations you can do if you want
to I do
to I do
that we've got 10 people watching me on
that we've got 10 people watching me on
a
a
Sunday well welcome
Sunday well welcome
folks I do not know why I'm live on a
folks I do not know why I'm live on a
Sunday either I should probably be
Sunday either I should probably be
chilling out but
chilling out but
uh all right so that's some Ms if anyone
uh all right so that's some Ms if anyone
else is interested um that offer is open
else is interested um that offer is open
by the way agar.io yeah um you can look
by the way agar.io yeah um you can look
it doesn't have to be a onetoone
it doesn't have to be a onetoone
reproduction either it's just like the
reproduction either it's just like the
general idea right is you know you're a
general idea right is you know you're a
blob or your sphere you go eat other
blob or your sphere you go eat other
spheres right
spheres right
yeah that sort of thing yeah and for
yeah that sort of thing yeah and for
folks
folks
interested just because we do have quite
interested just because we do have quite
a few people watching at the moment um
a few people watching at the moment um
Huffer lib is an ultra high performance
Huffer lib is an ultra high performance
reinforcement learning library this is
reinforcement learning library this is
what I'm building full-time now uh we
what I'm building full-time now uh we
build really high perms in C like
build really high perms in C like
million steps per second thousand times
million steps per second thousand times
faster than most of what is an Academia
faster than most of what is an Academia
all of these are playable online at
all of these are playable online at
puffer doai from very simple to like
puffer doai from very simple to like
actually pretty full
actually pretty full
MMO and a bunch of other stuff as
MMO and a bunch of other stuff as
well uh and most of these are written by
well uh and most of these are written by
contributors uh some of whom came in
contributors uh some of whom came in
with no RL
with no RL
experience uh pretty much if you're
experience uh pretty much if you're
interested in getting involved this is a
interested in getting involved this is a
great way to do so I review all
great way to do so I review all
contributed m's on stream and uh you
contributed m's on stream and uh you
know once you contribute a couple Ms you
know once you contribute a couple Ms you
kind of get the hang of some of the RL
kind of get the hang of some of the RL
Basics and I start onboarding people
Basics and I start onboarding people
onto the cool science stuff that we're
onto the cool science stuff that we're
doing as as well is this project is
doing as as well is this project is
really my effort to make the field of
really my effort to make the field of
reinforcement learning sane consistent
reinforcement learning sane consistent
and fast actually we have contributors
and fast actually we have contributors
working on both of these at the moment I
working on both of these at the moment I
just came up with some prototypes for
just came up with some prototypes for
these so like tank battle n raing card
these so like tank battle n raing card
game um there are there are several
game um there are there are several
others as well that aren't here
yet all
yet all
right so with that I think we go back
right so with that I think we go back
to what I was working on at the moment
to what I was working on at the moment
I'll keep answering questions of
course but uh I was working on this
course but uh I was working on this
hyper parameter sweep
algorithm and ah yeah star the repo as
algorithm and ah yeah star the repo as
well please star the repo it really
well please star the repo it really
helps when people star the
helps when people star the
repository doesn't cost you
repository doesn't cost you
anything but um I mean pretty much the
anything but um I mean pretty much the
growth metrics I track are stars here
growth metrics I track are stars here
and then followers on X that's what I
and then followers on X that's what I
track that's generally been pretty
good okay
so uh oh there we go so this is what we
so uh oh there we go so this is what we
got out
of our new new
of our new new
version This Is
version This Is
Random so you can see we've already
Random so you can see we've already
done well the random it's not like true
done well the random it's not like true
uniform random it's Rand random around
uniform random it's Rand random around
the start
the start
points but you can see already that this
points but you can see already that this
is much
better very good be the hey puffer Stars
that's what he
eats close some
tabs this is actually kind of funny um
tabs this is actually kind of funny um
let me explain the significance of this
let me explain the significance of this
result real
result real
quick so
the paper that this is based off of is
the paper that this is based off of is
carbs this this paper from M VII their
carbs this this paper from M VII their
cool startup they used to do RL now they
cool startup they used to do RL now they
do language models like everyone
do language models like everyone
else but they came up with this really
else but they came up with this really
mathy paper uh but the key thing was
mathy paper uh but the key thing was
that there's this Benchmark called proen
that there's this Benchmark called proen
right which is an arcade Benchmark for
right which is an arcade Benchmark for
reinforcement learning similar to Atari
reinforcement learning similar to Atari
it just runs faster
it just runs faster
and they were able to solve it with
and they were able to solve it with
po uh and just hyper parameter tuning so
po uh and just hyper parameter tuning so
they were able to solve this existing
they were able to solve this existing
Benchmark with the simplest possible
Benchmark with the simplest possible
method purely by hyperparameter tuning
method purely by hyperparameter tuning
with this
with this
algorithm um the algorithm has a bunch
algorithm um the algorithm has a bunch
of math in it though it's very
of math in it though it's very
mathy and when you actually dig into the
mathy and when you actually dig into the
math not all of it's exactly well
math not all of it's exactly well
motivated so I've been working on a new
motivated so I've been working on a new
algorithm based on this uh to see if I
algorithm based on this uh to see if I
can really
can really
outperform this algorithm and there were
outperform this algorithm and there were
a few issues one of the main ones is
a few issues one of the main ones is
just the typical academic issue of the
just the typical academic issue of the
code base being kind of a mess they had
code base being kind of a mess they had
way way way too much code uh for what
way way way too much code uh for what
this thing is so just this morning I
this thing is so just this morning I
said okay I'm going to go just make my
said okay I'm going to go just make my
own implementation of it and I started
own implementation of it and I started
doing that and I said hey wait a second
doing that and I said hey wait a second
there's a baseline version of this that
there's a baseline version of this that
you can do with none of this
you can do with none of this
math let me explain how this works at a
math let me explain how this works at a
high level without the math
high level without the math
so I have to briefly explain the concept
so I have to briefly explain the concept
of parito
of parito
optimality so let's say that you have
optimality so let's say that you have
two variables one of which is a cost
two variables one of which is a cost
which is say the amount of time it takes
which is say the amount of time it takes
you to run an experiment in seconds and
you to run an experiment in seconds and
then you have the score which is how
then you have the score which is how
well you do on your environment so
well you do on your environment so
you're playing playing breakout it takes
you're playing playing breakout it takes
you two minutes that's your cost you
you two minutes that's your cost you
score 500 points that's your score
score 500 points that's your score
pretty intuitive right
pretty intuitive right
so a point is said to be parito
so a point is said to be parito
optimal if there's no point that is both
optimal if there's no point that is both
higher score and lower cost so you
higher score and lower cost so you
cannot give me an experiment or at least
cannot give me an experiment or at least
so far none of your experiments do both
so far none of your experiments do both
better on breakout uh and also have a
better on breakout uh and also have a
lower cost the experiment runs faster it
lower cost the experiment runs faster it
doesn't
doesn't
exist so what this algorithm is about is
exist so what this algorithm is about is
about trying to discover the whole Paro
about trying to discover the whole Paro
front find all the points uh that are
front find all the points uh that are
like this so basically for however much
like this so basically for however much
compute you want to invest in your
compute you want to invest in your
experiment you want to get the optimal
experiment you want to get the optimal
results and that is useful because it
results and that is useful because it
tells you uh the shape of that curve
tells you uh the shape of that curve
sometimes it'll be really steep so
sometimes it'll be really steep so
you'll say hey if you invest 2 minutes
you'll say hey if you invest 2 minutes
you can basically get Optimal
you can basically get Optimal
Performance you don't really get that
Performance you don't really get that
much benefit by going more or some
much benefit by going more or some
environments it's like hey this
environments it's like hey this
environment scales really really well
environment scales really really well
with compute you just have to keep
with compute you just have to keep
dumping more Compu and and you'll keep
dumping more Compu and and you'll keep
getting better results things like
getting better results things like
this um it's useful for other reasons
this um it's useful for other reasons
but that's one of the big
but that's one of the big
ones so what they do is they generate a
ones so what they do is they generate a
whole bunch of points around whatever
whole bunch of points around whatever
existing Paro points they have and then
existing Paro points they have and then
they score them so basically they take
they score them so basically they take
this set of parito points and they do
this set of parito points and they do
like this genetic algorithm type thing
like this genetic algorithm type thing
where they're just like searching around
where they're just like searching around
the existing good points that they have
the existing good points that they have
and then all this math all that this
and then all this math all that this
math is for is when you take a bunch of
math is for is when you take a bunch of
random samples around the points the
random samples around the points the
math tells you which one to
math tells you which one to
pick so the Baseline I came up with is
pick so the Baseline I came up with is
hey what if we just take all the math
hey what if we just take all the math
away and just pick
away and just pick
randomly you know we just randomly
randomly you know we just randomly
sample what point we're going to use uh
sample what point we're going to use uh
it turns out that that already does
it turns out that that already does
pretty
pretty
well it does at least way better than
well it does at least way better than
the base random search uh and this
the base random search uh and this
random search is also a usually much
random search is also a usually much
better than most random search
better than most random search
implementations out there now it's not a
implementations out there now it's not a
great Baseline but hey already pretty
great Baseline but hey already pretty
good the best possible performance would
good the best possible performance would
be if all the points were on this line
be if all the points were on this line
and you didn't have any points over here
and you didn't have any points over here
but again this is you know just a
but again this is you know just a
moderately better random search so the
moderately better random search so the
next thing is going to be to try to
next thing is going to be to try to
implement my my versions of the math uh
implement my my versions of the math uh
to see if we can do even better than
this and this is a where it gets a
this and this is a where it gets a
little bit tricky because
little bit tricky because
there are two components to this there's
there are two components to this there's
the math
the math
itself which are these formulas which
itself which are these formulas which
I've spent a lot of time looking at and
I've spent a lot of time looking at and
redesigning and then there these gussian
redesigning and then there these gussian
processes these are a set of learned
processes these are a set of learned
models they are learned online as you
models they are learned online as you
run experiments so the results of the
run experiments so the results of the
experiments that's your data and you
experiments that's your data and you
just train this model as you run more
just train this model as you run more
experiments uh the problem is very often
experiments uh the problem is very often
these models are very bad so all the
these models are very bad so all the
math kind of goes out the window when
math kind of goes out the window when
you're using a bad model so we're going
you're using a bad model so we're going
to look at all of this but that is The
to look at all of this but that is The
quick summary of what we are doing
today now let's actually do it for a
today now let's actually do it for a
little bit
we're going to need to pull
we're going to need to pull
in the
in the
model and some of the
formulas okay
so this is what they have as their
model there a lot of code
model there a lot of code
here I think we're just going to copy it
here I think we're just going to copy it
and then start deleting
and then start deleting
stuff I think that's what we're going to
stuff I think that's what we're going to
do
I'm just deleting stuff that I know I'm
I'm just deleting stuff that I know I'm
not going to
use in fact this isn't going to be a
use in fact this isn't going to be a
separate class
separate class
I don't see any reason for it to
be quantile
Transformer this an input variable
yeah let's see what they call this
yeah let's see what they call this
with surrogate model
with surrogate model
pams and then they call this with
pams and then they call this with
pams that's kind of gross
outstanding suggestion
estimator Thompson
which literally just says Thompson okay
which literally just says Thompson okay
so that's all useless
it's really weird how they uh have to
it's really weird how they uh have to
recreate
recreate
the model every
time such a
time such a
mess so this is pyro I've heard about
mess so this is pyro I've heard about
this thing for many
this thing for many
years but
years but
um never used
um never used
it it's very weird that you create a
it it's very weird that you create a
model with the existing parameters like
this I guess cuz it's
analytic H it looks like you do have to
analytic H it looks like you do have to
recreate it every time based on their
recreate it every time based on their
API I'm not about to reimplement pyro at
API I'm not about to reimplement pyro at
least not yet
least not yet
so uh I guess we will leave this kernel
so uh I guess we will leave this kernel
here but we
will I guess this is going to have to go
will I guess this is going to have to go
into down here
somewhere ah and here's where they
somewhere ah and here's where they
fit here's where they fit this
all right and this is it that below this
all right and this is it that below this
is my
is my
code let's just start cutting where we
code let's just start cutting where we
can I know I'm not using this thing
and just replace this with a
dict I know I'm going to have to have
dict I know I'm going to have to have
some sort of
some sort of
fit for the gaussian process
see
see
x
x
y colel
it goes here actually so yeah you'll see
it goes here actually so yeah you'll see
me deleting um typing information very
me deleting um typing information very
often from
often from
python do not like types in Python
python do not like types in Python
because they're not actually
enforced we're going to get actually get
enforced we're going to get actually get
a few of Kernel this time
a few of Kernel this time
this
this
is you don't need this on GPU it's
is you don't need this on GPU it's
actually slower on GPU I tested it that
actually slower on GPU I tested it that
will probably be true for everything
will probably be true for everything
that we are
that we are
doing so this is now a oneliner with a
doing so this is now a oneliner with a
reasonable line
reasonable line
length and
length and
then
noise
noise
uhhuh tells train
there we
go now we can get rid
go now we can get rid
of that
move these up for now
as basic as what I what I'm doing right
as basic as what I what I'm doing right
now is this is literally been the best
now is this is literally been the best
tool in my Arsenal for like making RL
tool in my Arsenal for like making RL
work is just taking like academic code
work is just taking like academic code
bases with good ideas and cleaning them
bases with good ideas and cleaning them
up substantially until like all the bugs
up substantially until like all the bugs
and errors fall out
bit Target
Transformers all right
so since this is called there then this
so since this is called there then this
goes here and then we delete this
I'm looking for like code that looks
I'm looking for like code that looks
like it does
like it does
something in the rest of
this most of this doesn't look like it
this most of this doesn't look like it
does something
clamp the variance computation does
something wait what self
Target
variance ah okay so this is I was using
variance ah okay so this is I was using
this at some
point so apparently that's not even
point so apparently that's not even
correct good to know
let me take a crack at just integrating
let me take a crack at just integrating
this now
this now
into cuz I think that this whole
into cuz I think that this whole
block right this is what we care
block right this is what we care
about and this
goes this goes right here
cuz it's basically a ranker on the
suggestions let see raw outputs
ah I
ah I
see so we have to retrain fit and
see so we have to retrain fit and
retrain the
retrain the
model which is very
obnoxious so
maybe hold on
we'll figure this
we'll figure this
out
fantile
fit clost transformer.
fit clost transformer.
fit okay I want to see the original
fit okay I want to see the original
here I'm just going to pull it up on the
here I'm just going to pull it up on the
side
I want to see how they were doing this
originally cuz the logic here is just
originally cuz the logic here is just
very convoluted for what it
very convoluted for what it
is get
is get
model so this is them training a
model okay here it is
input in
basic and then we have output in
surrogate and then the cost one is log
surrogate and then the cost one is log
costed
Target to
surette Output Transformer
call this
first okay so I see the logic
first okay so I see the logic
here and this is all just for the
fit so all I have to do is essentially
fit so all I have to do is essentially
un is just
un is just
take it serg it to
take it serg it to
Target Target to so most of these
Target Target to so most of these
functions just get all compressed
functions just get all compressed
as best I can here there's a bunch of
as best I can here there's a bunch of
junk it's very hard to
understand so okay
understand so okay
here this here
this is
this is
nope this is fit Target Transformers
nope this is fit Target Transformers
this block
here and then this
here and then this
is this block here is fit observations
and we shouldn't need any of this data
and we shouldn't need any of this data
until down here but this is going to
be uh we'll also probably find we'll
be uh we'll also probably find we'll
also probably like put all this in one
also probably like put all this in one
separate function at least CU they'll
separate function at least CU they'll
this is in this big elves
block success observations
Square Ro
using more distance information
okay output Transformer
so they want this to be raw
outputs they're doing something very
outputs they're doing something very
weird here that I have to actually
weird here that I have to actually
understand with these transforms because
understand with these transforms because
this doesn't seem like it Mak sense the
this doesn't seem like it Mak sense the
way it's written and maybe it
way it's written and maybe it
doesn't so let me let me go back
this oh also let me reply
this oh also let me reply
to D and put it on my
calendar 4 p.m.
holy looks like we got some new people
holy looks like we got some new people
in here
little dock mess up
ah I don't actually see what he's
ah I don't actually see what he's
talking
about
e e
that kind of interrupted my train of
thought but I was trying to figure out
thought but I was trying to figure out
how they're dealing with the data here
how they're dealing with the data here
um okay okay so they do Target to
um okay okay so they do Target to
surrogate what's Target to
surrogate goes from Target function
space space of the score function is a
space space of the score function is a
well- behaved Gan
space okay
output transformer.
transform hold
on output transformer. transform
I
see so these things are all just done in
see so these things are all just done in
a weird order essentially
a weird order essentially
um these are useful they're just done in
um these are useful they're just done in
a weird
order with a bunch of extra
order with a bunch of extra
stuff so that's fix that oh let's fix
stuff so that's fix that oh let's fix
let me fix this
first
but e
so somebody got link the 10 docs off of
so somebody got link the 10 docs off of
Google thank you Google
it's kind of
funny I'll put this over here
so this is Success observations this is
so this is Success observations this is
raw
scores e
okay here's our output Transformer
do fit
cost
cost
Transformer Transformer
fit see if we need
fit see if we need
these but there's still some weird stuff
these but there's still some weird stuff
going on here
as you fit
this target to Sur
again ah okay then we need this
function we need this
so transform
okay it's actually transformed on the
raw what the
hell and this is so convoluted it's like
hell and this is so convoluted it's like
you make all these damn functions and
you make all these damn functions and
then you end up going in
then you end up going in
circles like cuz you can't think
anymore cuz okay they do fit Target
anymore cuz okay they do fit Target
right and then they call this raw
right and then they call this raw
outputs but then they do the same Loop
outputs but then they do the same Loop
right here so they do Target to
right here so they do Target to
surrogate on Raw
surrogate on Raw
outputs and then Target to surrogate
does this transform
and then wait they fit the
transform can somebody please explain to
transform can somebody please explain to
me why the heck there's a thing here
me why the heck there's a thing here
where you fit a model to some train data
where you fit a model to some train data
and then you use the same model on the
and then you use the same model on the
train
train
data is there not just a function
data is there not just a function
version of this where the heck does this
version of this where the heck does this
come
come
from sklearn preprocessing
from sklearn preprocessing
what is this
function fre can SK
learn quantile transform
holy what on Earth
jeez what does a quantal what does this
jeez what does a quantal what does this
even
do where's the actual
logic e
there's a numpy
wrapper n
percentile computes
quants are
quants are
monotonically increasing
this get
fixed okay so this was never
fixed
wait question
mark is this function literally just a
mark is this function literally just a
numpy
what I'm trying to do now is not use S
what I'm trying to do now is not use S
kit learn look at this code do you want
kit learn look at this code do you want
to use this code do you want this code
to use this code do you want this code
in your code base
in your code base
no this is a multi thousand line numpy
no this is a multi thousand line numpy
wrapper for functions that literally
wrapper for functions that literally
exist in
exist in
numpy that makes it like
Java e
there's a second one as well right min
there's a second one as well right min
max scaler that's easy to that's easy to
max scaler that's easy to that's easy to
replace I'm sure so I guess the easiest
replace I'm sure so I guess the easiest
way to do this is going to
be do I have this yes
be do I have this yes
uh
I hope pyro doesn't look like this as
I hope pyro doesn't look like this as
well be so funny if I end up making
well be so funny if I end up making
making an implementation half the length
making an implementation half the length
of the original that doesn't have the
dependencies it's how it happens though
dependencies it's how it happens though
people just wrap stuff and wrap stuff
people just wrap stuff and wrap stuff
and then everything ends up 10 layers
deep oops forget I'm not in
deep oops forget I'm not in
pdb no attribute
pdb no attribute
references
references
underscore okay
ah check
inputs damn it I actually have to read a
inputs damn it I actually have to read a
substantial portion of this
substantial portion of this
garbage
garbage
um check inputs validate
data copy
form is this the actual
function no this is oh that's so gross
function no this is oh that's so gross
they did it
they did it
backwards they made their function like
backwards they made their function like
their procedural API a wrapper over
their procedural API a wrapper over
their object object API
their object object API
God
okay that's
okay that's
crazy the funny thing is that this is
crazy the funny thing is that this is
probably like well tested code as well
probably like well tested code as well
it's just written like very big
it's just written like very big
Tech it's like very big Tech
Tech it's like very big Tech
where it's like you're not ever intended
where it's like you're not ever intended
to read this because look what happens
to read this because look what happens
when you have to read it
okay so n
quantiles yeah so they just make it it's
quantiles yeah so they just make it it's
literally just a Lin
literally just a Lin
space and what's this end point
and then they
and then they
call then they call this
call then they call this
so X
references a okay so this is the same
references a okay so this is the same
signature this is the same
signature this is the same
thing
thing
AQ it's X references X is just your
data
data
sample you don't need to subsample I
sample you don't need to subsample I
don't think
don't think
times
100 that's the same as 0 to
100 that's the same as 0 to
100 and
100 and
[Music]
[Music]
then this is just nonp percent nonp
quantile so we just do
do that's the same thing
then let's see they this is their
then let's see they this is their
quantiles and then what do they
do return
do return
self
okay and then what do they do with this
okay and then what do they do with this
they
they
call transform
transform
transform
call so they do this no Loop for some
call so they do this no Loop for some
reason
why did they have to do all this
I think they do all this because this is
I think they do all this because this is
like
like
[Music]
interpolation this is like if you fit on
interpolation this is like if you fit on
some data and transform other data but
some data and transform other data but
we're literally fitting on the same
we're literally fitting on the same
data
right hello
yeah every single time you fit you make
yeah every single time you fit you make
a new one of
these okay
and then what's this min max
scaler trans scaling each feature to a
scaler trans scaling each feature to a
given
range no
they use this
dependency with all this freaking code
to avoid doing
this I will never
this I will never
understand big textile
understand big textile
code I
code I
swear I will never understand and at
swear I will never understand and at
this point I no longer want
to uh now the one thing is I think that
to uh now the one thing is I think that
you do have to multiply this
yeah you do have to multiply this
by you do have to do
by you do have to do
this and I think I want to do it the
this and I think I want to do it the
other
way so let's not forget that that' be
bad I mean you see how insane this is
bad I mean you see how insane this is
though right like as I just go through
though right like as I just go through
here and I just like keep pulling the
here and I just like keep pulling the
thread pulling the thread you see how
thread pulling the thread you see how
insane this is right you add a very
insane this is right you add a very
heavy dependency that's doing some weird
heavy dependency that's doing some weird
transform and then you go look at it and
transform and then you go look at it and
it's like two lines of code that's
it's like two lines of code that's
included with
numpy and you go try to read the code
numpy and you go try to read the code
and it takes a while to even figure that
and it takes a while to even figure that
out because it's like some Fang engineer
out because it's like some Fang engineer
has like un WRA and onion wrapped and
has like un WRA and onion wrapped and
onion wrapped this thing to make sure
onion wrapped this thing to make sure
it's like fully abstracted so it'll be
it's like fully abstracted so it'll be
very very safe from anybody trying to
very very safe from anybody trying to
understand
understand
it Christ my
gosh like honestly if that's how I had
gosh like honestly if that's how I had
to write
code I've done some pretty bad stuff
code I've done some pretty bad stuff
with class messing like objectoriented
with class messing like objectoriented
mess but like if I had to write code
mess but like if I had to write code
like that I don't think I would have
like that I don't think I would have
lasted as a as a like a software
lasted as a as a like a software
engineer I think I would have just
engineer I think I would have just
gotten bored and gone and done something
else to be fair uh a lot of like the
else to be fair uh a lot of like the
first many years of learning stuff was
first many years of learning stuff was
like really boring because it would go
like really boring because it would go
too slow because like this is how you're
too slow because like this is how you're
taught to write code you don't have to
taught to write code you don't have to
write code that
write code that
way God
of course I say this and then it's going
of course I say this and then it's going
to be real stupid if I mess it
up lot clost so it's got to be
then the cost
I also I generally prefer to do
I also I generally prefer to do
this and this is not
this and this is not
self this
self this
is lost
there we
go so there's normalized log
pause and what did they call this
pause and what did they call this
thing min max
scale
for e
okay we're starting to get to a
okay we're starting to get to a
reasonable amount of code
oh shoot do I have to apply the same
oh shoot do I have to apply the same
quantile transform to
quantile transform to
uh to the surrogates as
well maybe there was something hang on
well maybe there was something hang on
maybe I did something stupid let me look
maybe I did something stupid let me look
I don't think so but
output
Transformer so then we
Transformer so then we
do outputs in
do outputs in
surrogate we do Target to
surrogate so we fit
this we fit this on
outputs oh wait and then we do Target to
outputs oh wait and then we do Target to
suret out
puts
okay you just removed a 600
okay you just removed a 600
yeah I don't know I've done some stuff
yeah I don't know I've done some stuff
man I've seen some
[ __ ] generally I suggest like here's the
[ __ ] generally I suggest like here's the
thing you can save yourself a lot of
thing you can save yourself a lot of
time just by as a general rule you don't
time just by as a general rule you don't
use SK learn you don't use SK image you
use SK learn you don't use SK image you
don't use any of the SK libraries maybe
don't use any of the SK libraries maybe
once in a while you use scipi if you're
once in a while you use scipi if you're
doing stat stuff all right but for the
doing stat stuff all right but for the
most part you don't touch these
libraries like you can save yourself a
libraries like you can save yourself a
lot of time just by knowing what
lot of time just by knowing what
libraries like you generally don't want
libraries like you generally don't want
to invest time in learning open CV is
to invest time in learning open CV is
another one if you're not doing very
another one if you're not doing very
specific CV stuff that needs it don't
specific CV stuff that needs it don't
touch open CV
I almost don't want to look at the
I almost don't want to look at the
source code for numpy for fear that like
source code for numpy for fear that like
you know the illusion of what I hold up
you know the illusion of what I hold up
is one of the best ever made pack
is one of the best ever made pack
packages the implementation is not going
packages the implementation is not going
to hold
to hold
up it's probably pretty good but I have
up it's probably pretty good but I have
no
idea I mean it's probably littered with
idea I mean it's probably littered with
so many tests and things so that they uh
so many tests and things so that they uh
CU it's like so heavily relied
upon
e e
observe
surrogate stuff on Discord I'm missing
is there new stuff on support I don't
is there new stuff on support I don't
see
anything I mean the reason I'm doing all
anything I mean the reason I'm doing all
of this right is cuz I want to get
of this right is cuz I want to get
something that's very simple where I can
something that's very simple where I can
actually inspect each component easily
actually inspect each component easily
for
for
errors and like try each component to
errors and like try each component to
see if it actually matters
okay so when you do fit observations
right where's the other one of these I
right where's the other one of these I
only see
one I guess this is what you call do you
one I guess this is what you call do you
call fit observations from
yeah so every time you
yeah so every time you
call you Call fit observations and then
call you Call fit observations and then
suggestions and then failures so you're
suggestions and then failures so you're
literally refitting these models every
literally refitting these models every
single
time uh oh are they using the same model
time uh oh are they using the same model
hold on this could be
bad fit observations before
suggestions inputs in basic
suggestions inputs in basic
okay and
okay and
[Music]
[Music]
then output model. it
then output model. it
sample self out okay but this output
sample self out okay but this output
model this is the Gan process so we're
model this is the Gan process so we're
still
still
okay and then they can cat and then they
okay and then they can cat and then they
call get
model wait they
model wait they
call output model
call output model
dox the
hell and then they call get model
do it or
sample oh wait cuz then they make the
sample oh wait cuz then they make the
output model with
this is
this is
insane this is truly
deranged truly truly drin I'm going to
deranged truly truly drin I'm going to
be right back use a restroom and grab a
be right back use a restroom and grab a
drink be back in a couple minutes we'll
drink be back in a couple minutes we'll
keep on this this is
nuts
e
e
e
e
e e
okay let's see if I can figure this
okay let's see if I can figure this
thing
out self output model
out self output model
let's we're going to need the double for
this okay
this okay
so they call get followed by fit
right get surrogate
model wait no no they call self get
model wait no no they call self get
survey get surrogate
survey get surrogate
model
model
okay so what this does is this
okay so what this does is this
instantiates this whole
class I didn't miss anything here
class I didn't miss anything here
right no this is all it is this doesn't
right no this is all it is this doesn't
do anything else good
okay and then they call fit observations
this is where you create the
model wait what okay they make two
model wait what okay they make two
different models fine and then they call
different models fine and then they call
fit
observations wait fit no no hold on they
observations wait fit no no hold on they
call fit
observations okay fine this is what
observations okay fine this is what
creates the models and they use the data
creates the models and they use the data
for this
for this
so they use the data on the
so they use the data on the
fifth which of course they do
fine and then they fit the
suggestions and how do they fit the
suggestions and how do they fit the
suggestions
output
model where's output
model where's output
model get to
model get to
find output model
okay oh okay here so they fit
okay oh okay here so they fit
this wait real number
this wait real number
input okay yeah but this is inputs and
input okay yeah but this is inputs and
base so fine there's no transform on
base so fine there's no transform on
this they just use the raw they they use
this they just use the raw they they use
the uh the already
the uh the already
existing transform
space
fine and then they call get model okay
fine and then they call get model okay
this makes
this makes
sense and
then I don't know what the sampler is
output
predictions iter
predictions iter
sample
iter nuts
okay
it Forward set
D are you kidding
me you don't have to remake the model
me you don't have to remake the model
every time there is a set
every time there is a set
data
stupid
yeah it sample iteratively constructs a
yeah it sample iteratively constructs a
sample from the Gin process pest
sample from the Gin process pest
interior
what samples
lerate later query points can depend
lerate later query points can depend
upon earlier
upon earlier
ones quering is to be done by an
ones quering is to be done by an
optimization routine
which it
is samples
from Christ
almighty wait a second
made this code's breaking my freaking
head this is output model okay
self. output model
self. output model
equal this is a new
model what
okay so at least you're not passing the
okay so at least you're not passing the
sampler you're just using the sampler
here why are you doing this
we erate the
we erate the
real both mean and Thompson the output
real both mean and Thompson the output
model is used to estimate the outputs of
model is used to estimate the outputs of
the
the
suggestions this is necessary to
suggestions this is necessary to
do as we await the real outputs
wait
fit
suggestions find
inputs oh outstanding suggestions
wait
what this is the most confused I've been
what this is the most confused I've been
on one of
on one of
these
so they fit OB they
so they fit OB they
fit the past data right and then these
fit the past data right and then these
are data points for which they don't
are data points for which they don't
have any labels because you're waiting
have any labels because you're waiting
to score
to score
them and they're retraining the model on
them and they're retraining the model on
the suggestions that don't have
labels where where do you even get
labels where where do you even get
outstanding suggestions hold on
remember suggestion
number of outstanding
what in the
hell standing
isn't this whole thing
redundant do
values I I don't know why they're
values I I don't know why they're
storing these
separately but this doesn't make any
separately but this doesn't make any
sense
sense
because they just fit the model to the
because they just fit the model to the
success observations this is what you
success observations this is what you
want
want
right and then what they do from
right and then what they do from
there no target outputs are passed in
there no target outputs are passed in
and they have to be estimated using the
and they have to be estimated using the
circuit they're training a model on the
circuit they're training a model on the
outputs of the same model so they have a
outputs of the same model so they have a
model that they just fit with this okay
model that they just fit with this okay
and then they have some data that they
and then they have some data that they
don't have labeled with it so they use
don't have labeled with it so they use
this model to fit that
this model to fit that
data and then they train a new model on
both that's insane right
I love how my main use case for freaking
I love how my main use case for freaking
language models is checking whether I'm
language models is checking whether I'm
insane or the other researcher
insane
e
e e
yes
ucing the
ucing the
incentive to sample near them
again well that's not
true I think this is wrong
I don't even see where there would be
I don't even see where there would be
outstanding
suggestion yeah that assumes you have a
suggestion yeah that assumes you have a
good model and these models suck as well
good model and these models suck as well
we're ripping this thing out this is
insane so we don't need to do either of
insane so we don't need to do either of
these
jeez yeah this makes no sense in this
jeez yeah this makes no sense in this
context at
context at
all obervations
there the original
output model right here
output model right here
so fit Target yeah and then this is fit
so fit Target yeah and then this is fit
observations so all I have to
observations so all I have to
do these lines I don't know why people
do these lines I don't know why people
break up code that way these lines go
break up code that way these lines go
here these lines go
here these lines go
here now
success
observations wait for X in success
oh it's just input in my
case then they do Target to
surrogate which is this literally
surrogate which is this literally
this normalized Force
then get model will be uh different as
then get model will be uh different as
well
now what about the cost
model cost to log
model cost to log
cost this is just log right
for.log wait hold on cost to log cost
for.log wait hold on cost to log cost
they do log and then they transform so
they do log and then they transform so
yeah I did this
correctly so this is just normalized log
correctly so this is just normalized log
cost
and then inputs in basic is just
and then inputs in basic is just
pams that can go here this is
pams crazy man crazy
I actually want to now get rid of all of
I actually want to now get rid of all of
this cuz we don't need most of this and
this cuz we don't need most of this and
it's just cluttering
it's just cluttering
my my field of view
here
okay this now these can go at the bottom
here we do need torch
oops do these Colonels have pams
well we only have two models to make
or do we have
three oh we only have two and they use
three oh we only have two and they use
the same
the same
kernel hang on
okay let's
just put this up
just put this up
top we'll move this if we need
top we'll move this if we need
to getting rid of this and this for sure
do you have to create it with
do you have to create it with
data is that API just really awkward
you do that's so
silly
e
e
e
e
e e
okay
okay
that looks
better so now you create
GP need to pass it to
dim and scale
length which I don't even have for
now Rams real dims this is self. n for
now Rams real dims this is self. n for
Rams it's all this
is GP
is GP
opt then GP
cost cost
cost cost
op
op
GPU
oops L
oops L
op very good
here a
here a
second and now we get to
second and now we get to
do BP or is it was it self
dot
data okay
and they fit they train it here as
and they fit they train it here as
well so we'll
well so we'll
do
dot there's no dot fit is
there dot fit
this doesn't have
this doesn't have
that stupid
BP
util and we do the same thing
here okay set data
here okay set data
train set data train
train set data train
eval for
zerve surrogate
so self. output
model and the output space of that is
model and the output space of that is
already quanti
transformed actually this might be a
transformed actually this might be a
decent transform to use because this is
decent transform to use because this is
kind of what I was looking for in the
kind of what I was looking for in the
first
first
place
um yeah
would be good to be able to undo the
transform we'll handle
that but
that but
first we do
minized
minized
score
score
s GP
score
suggestions cost estimate
and
now do I even have to technically undo
now do I even have to technically undo
these I do have to undo the cost one
these I do have to undo the cost one
because I don't want to have cost on a
because I don't want to have cost on a
log
log
scale to cost they're just going to use
scale to cost they're just going to use
the stupid model
right yeah
cost
T let's just undo the operation
T let's just undo the operation
right normalize log
cost equals
normalized log
cost minus
divided
byv wait was is it
hold on this
is now you want to recover log cost
is now you want to recover log cost
STD so it's divided by Max minus men
and
then there we
then there we
go and then we do
go and then we do
cost
cost
test there we go undo the transform
now I think I got to look at my own code
this is some heavy duty
work digging through this code I did not
work digging through this code I did not
expect
expect
um I did not expect this today
do
our parito observations will be in basic
our parito observations will be in basic
space so this won't be an
issue and that'll give us a better
issue and that'll give us a better
estimate as
well you don't need this
well you don't need this
either yeah is going to get way
simpler so
r divided by cost estimate
Max
cost there's no actually don't even need
cost there's no actually don't even need
any of
any of
this perfect
then we
do I forgot about y
nearest I will have to do y nearest as
nearest I will have to do y nearest as
well I may as well do it now
burrito
costs uh I think we'll do that
costs uh I think we'll do that
after CU there's going to be some more
after CU there's going to be some more
stuff
stuff
there just want to get the basic version
there just want to get the basic version
of it for
you need to apply the clipping above
you need to apply the clipping above
here
here
so hold
on okay we'll clip
here and
here and
then these ones are already
fine this one has to be clipped
that's the basic algorithm I
think normal
so we'll clean this little bit up but I
so we'll clean this little bit up but I
mean even if I have to add a little bit
mean even if I have to add a little bit
back this is replacing like thousand
back this is replacing like thousand
lines of code this little snippet
lines of code this little snippet
here so I think that's pretty good
I guess we just try to make it work
now it's
now it's
4:45 I'm going to take a
4:45 I'm going to take a
second my brain hurts from that
second my brain hurts from that
jeez that was a lot of logic to
jeez that was a lot of logic to
unwrap so we'll have to debug this a
unwrap so we'll have to debug this a
little bit I'm
sure once I get this working
sure once I get this working
we will have a dramatically simplified
we will have a dramatically simplified
version of
version of
carbs um not simplified algorithm it's
carbs um not simplified algorithm it's
our version I think we add like an extra
our version I think we add like an extra
five or 10 lines for the one term I
five or 10 lines for the one term I
didn't compute yet but this is 259 up
didn't compute yet but this is 259 up
to yeah it's like 30 lines of code
to yeah it's like 30 lines of code
instead
instead
of I there was at least like five or 600
of I there was at least like five or 600
lines devoted to this with an additional
lines devoted to this with an additional
600 lines of useless dependencies
this min max scale thing is interesting
this min max scale thing is interesting
actually I'm kind of interested to see
actually I'm kind of interested to see
um we might want to use that for our
um we might want to use that for our
parameter spaces
actually okay
so we're just going to speed debug
this search
centers what the heck is this
duplicated
s better Direction sign
quantiles must be 0 to one
okay so apparently
BP
score no attribute GP ah
in is not callable
uhoh
well this didn't do what I
well this didn't do what I
wanted let me
say
say
accumulate let me go look at the
accumulate let me go look at the
reference for this
I guess it's a me special that I had to
I guess it's a me special that I had to
reimplement this but like come on this
reimplement this but like come on this
code is so
bad numpy maximum
accumulate this is already done here for
accumulate this is already done here for
us I
think D
fit ah you have to apply this I see
interpolate in one
let me just
I want to make sure I'm not
I want to make sure I'm not
misunderstanding
this was in their paper I believe
okay
okay
so parameter free method
so parameter free method
quantile
transform so what I'm going to do here
transform so what I'm going to do here
in order to figure this mess
out um
going I do
going I do
this Target to
surrogate
surrogate
okay this is your X I can see that this
okay this is your X I can see that this
is looks to be raw
is looks to be raw
cost this looks to be raw cost to me yep
cost this looks to be raw cost to me yep
raw
raw
cost and
okay so this is
okay so this is
Benning I think this is binning yeah you
Benning I think this is binning yeah you
can see it is binning
this is screwed up though because
this is screwed up though because
look
five e
I guess it just gets mapped
I guess it just gets mapped
to doesn't just get mapped to a standard
to doesn't just get mapped to a standard
normal though
it's very
it's very
weird box
and for transer match the output
and for transer match the output
distribution
transform data so it more closely
transform data so it more closely
follows a normal distribution
when it clearly
doesn't does that make any sense
wait no this is score okay no no this is
wait no this is score okay no no this is
valid this is
score well score still shouldn't follow
score well score still shouldn't follow
a
a
normal distribution
confusing math coupled with confusing
confusing math coupled with confusing
code
actually shifted to follow a normal
okay e
why do you have to
interpolate e Earth
in
in
yes impure IAL cumulative
yes impure IAL cumulative
probability for any new data
probability for any new data
point we want to know its empirical
point we want to know its empirical
cumulative
cumulative
probability the proportion of data below
X you can use numpy inter turp to
X you can use numpy inter turp to
determine this probability
map the cumulative
probability inverse
okay so that's actually not that
bad e
interesting I think this is still worth
interesting I think this is still worth
doing though because this is four lines
doing though because this is four lines
of code compared to the 600 from the
of code compared to the 600 from the
freaking dependency who knows what
freaking dependency who knows what
that's
that's
doing for
wait length of
wait length of
quantile that's just
Q so you have your quantiles
this is just quantiles
confusing stuff
C
let's see about
let's see about
this ah it's broke my
terminal does n not have if I swear if
terminal does n not have if I swear if
GPD hallucinated this whole function
side
side
pie well whatever
noxious
okay this is correct right we got 50
points and then here are normalized
points and then here are normalized
scores why the hell are some of these
Infinity that's
dumb we'll fix that in
clipping that's
clipping that's
where this stuff has been St for years
where this stuff has been St for years
it's straight up
hallucinating that function did not
hallucinating that function did not
exist and never existed
okay that's better
ah oh it just needs to be n obviously
yeah try that
yeah try that
on claw I wonder what it gives I mean
on claw I wonder what it gives I mean
it's a whole long
it's a whole long
conversation i' I use both of them you
conversation i' I use both of them you
know because Claude has the uh PDF you
know because Claude has the uh PDF you
can drop in PDFs you can't drop in PDFs
can drop in PDFs you can't drop in PDFs
on the new open AI models
and then right here we get the same
and then right here we get the same
thing so we
thing so we
get
Rams
Rams
nope not yet
m
e
e
e e
LMS don't really read the
inputs you know what we call that right
inputs you know what we call that right
kind of freaking useless
injects the files into the
context I mean it seems like it at least
context I mean it seems like it at least
kind of read some stuff like it'll
kind of read some stuff like it'll
reference formulas and
reference formulas and
things it definitely doesn't read it
things it definitely doesn't read it
closely but
um
e
e e
[Music]
[Music]
uh where is this
that's weird
where did this come from
again
again
[Music]
suggests look at that
it
it
runs looks like it's a bit faster than
before I'll be amazed if it's any good
before I'll be amazed if it's any good
on the first try but
on the first try but
um yeah there it goes predicting 200
um yeah there it goes predicting 200
cost
me actually just Commit This real quick
350 lines in the whole file
so I don't know if the samples are any
so I don't know if the samples are any
good but the predictive model is
good but the predictive model is
actually correct
now for the most part here the score and
now for the most part here the score and
the cost should be equal if your prams
the cost should be equal if your prams
are
optimal e
no idea how many points I ran this
no idea how many points I ran this
with might take
with might take
forever
forever
um you think in the meantime here
I do want to see
my will there be performance
my will there be performance
loss when running all environments that
loss when running all environments that
ially compared to using puffer Li
multiprocessing they can't be will they
multiprocessing they can't be will they
be performance
be performance
loss when
loss when
running my environment share large
running my environment share large
readon lookup tables so they can't be
readon lookup tables so they can't be
cloned
cloned
naively so most of our experiments we
naively so most of our experiments we
use like most of our new environments
use like most of our new environments
only use one core because the
only use one core because the
environments are just so fast that we we
environments are just so fast that we we
can run 4,000 copies uh and we can step
can run 4,000 copies uh and we can step
4,000 environments and the model won't
4,000 environments and the model won't
even notice it takes virtually no time
even notice it takes virtually no time
uh
uh
you'll there will it will if your
you'll there will it will if your
environment is slow then yes it will be
environment is slow then yes it will be
slower
slower
um so what you can do
um so what you can do
potentially and we do this as well for
potentially and we do this as well for
things that share uh that have to share
things that share uh that have to share
a large amount of data can you make like
a large amount of data can you make like
each process have a large group of those
each process have a large group of those
environments so one thing you can do
environments so one thing you can do
right is like each core can have a
right is like each core can have a
thousand copies of the environment and
thousand copies of the environment and
you have eight cores and then On Any
you have eight cores and then On Any
Given step you use four cores worth of
Given step you use four cores worth of
data that gives you 2x
data that gives you 2x
asynchronicity it gives you
asynchronicity it gives you
multiprocessing and that can work very
multiprocessing and that can work very
well
also we do we do have examples on using
also we do we do have examples on using
shared assets for C
environments same thing would work for
environments same thing would work for
python environments but if you're
python environments but if you're
running for Loops in Python things are
running for Loops in Python things are
probably
slow e
R to
scores
e
e e
which environment mobile pathf finding
which environment mobile pathf finding
works that wasn't scrapped as far as I
works that wasn't scrapped as far as I
know was it oh yeah I guess it was uh
know was it oh yeah I guess it was uh
here the current thing I just have
here the current thing I just have
uh I mean I literally do this in my
uh I mean I literally do this in my
latest
latest
thing if you just
thing if you just
check I'll link it to you
okay so this is my new procedural maze
okay so this is my new procedural maze
environment and it's got a shared level
environment and it's got a shared level
buffer and we sample from a shared level
buffer and we sample from a shared level
buffer
right
here this is the current Branch I'm
here this is the current Branch I'm
working on I me you can see though it's
working on I me you can see though it's
like it's not particularly complicated
like it's not particularly complicated
technically all of the environments have
technically all of the environments have
shared data because of the log buffer
shared data because of the log buffer
right it's the the same exact idea like
right it's the the same exact idea like
we pass the same log buffer into all of
we pass the same log buffer into all of
the different
environments right so they technically
environments right so they technically
they all
they all
do it's How We Do logs
cleanly hello how's it going I I just
cleanly hello how's it going I I just
realized I forgot to reply to my buddy
y r to
points e
okay now we got our Pito scores
ppcx so cost
minus
minus
one
normalize I want normalized parito cost
so this is cost
man this is actually unnormalized so
man this is actually unnormalized so
this is parito clost man
well miners no I need purito scores
stff all right we'll see how that goes
stff all right we'll see how that goes
is the thing still running nope we got
is the thing still running nope we got
it Neo carbs Neo
V2 holy
V2 holy
hell what
um hey guys I
uh
uh
oh I think we're going to
oh I think we're going to
solve I think we're going to solve hyper
solve I think we're going to solve hyper
parameter sweeps within the next couple
parameter sweeps within the next couple
weeks here
are you kidding
me the blue points are random samples
me the blue points are random samples
all right and then the red ones are from
all right and then the red ones are from
later on so it's just beines along the
optimal yeah
optimal yeah
okay
Jesus this is without the
Jesus this is without the
math this is with the math now it's not
math this is with the math now it's not
traveling fast enough we will get to
traveling fast enough we will get to
that but like what the
hell that's insane
that's actually
insane I'm glad I got up and did this
insane I'm glad I got up and did this
today I'm still blazing
today I'm still blazing
around have ample time for that in the
evening
for
e
e e
okay this seems to work
hey
I don't know if what I'm doing makes any
I don't know if what I'm doing makes any
sense yet hold
on we're going to read through this code
on we're going to read through this code
while this runs assuming that this
while this runs assuming that this
runs yep okay
um let me make sure that I did something
um let me make sure that I did something
that makes some sense here
that makes some sense here
so these come from the
successes no this is wrong
yeah because here with normalize SP
main they should just be normalized
main they should just be normalized
scores
yeah let's correct
yeah let's correct
this thing I did didn't make any
sense variable names to clean up and all
sense variable names to clean up and all
sorts of things yes but
sorts of things yes but
um we shall
see
for e
so these are two conservative I can
tell I wonder why they're too
conservative
for
e e
yeah so this has it looks like this has
yeah so this has it looks like this has
had the opposite effect
this is so
crazy what going on in
DMs e
look at
look at
this so our base
one need to go faster not
slower I think why this could be the
slower I think why this could be the
case normalize near burito score
do I have these in the same
space think so
oh hold
on yeah so this is this term is wrong as
on yeah so this is this term is wrong as
all so yeah it's going to mess it up
all so yeah it's going to mess it up
because this term is wrong
right e
be costs
like this and then what's our current
like this and then what's our current
look
like yeah okay
garbage this is where's it cost
me
for e
so the score prediction is in Norm space
so the score prediction is in Norm space
so we don't know how accurate it
so we don't know how accurate it
is um but judging by the cost prediction
is um but judging by the cost prediction
it should be very
accurate now this is still driving us
accurate now this is still driving us
down towards the bottom for some reason
have to figure that
out why would this drive it down
we'll wait for the cost to like kind of
we'll wait for the cost to like kind of
match before we
match before we
uh we look at it
uh we'll do one
more okay
lucky okay so it takes like 10 15
lucky okay so it takes like 10 15
samples to match up is not bad
use a restroom real quick I'll be right
back
e
e e
okay
D it's one crazy
algorithm yeah good
normalize and nearest
I don't think that should be possible
I don't think that should be possible
right let me see if I have a math
error normalized nearest parito
error normalized nearest parito
form it's going to be
cost wa
normalized oh no that is possible Right
hi new to ml
hi new to ml
welcome this is
welcome this is
currently attempting
currently attempting
to design a really really good
to design a really really good
hyperparameter optimization
algorithm and waiting through tons and
algorithm and waiting through tons and
tons of code and math in order to do so
what's going on this
what's going on this
is a complete
is a complete
deconstruction of the
deconstruction of the
carbs hyperparameter optimization
carbs hyperparameter optimization
algorithm for reinforcement
algorithm for reinforcement
learning uh complete rewrite of the code
learning uh complete rewrite of the code
that was open sourced for
that was open sourced for
this uh and a whole bunch of
this uh and a whole bunch of
mathematical optimizations on the
mathematical optimizations on the
original followed by a ton of synthetic
original followed by a ton of synthetic
testing and a bunch of testing on real
testing and a bunch of testing on real
RL
environments the goal here is that we
environments the goal here is that we
just end up with a really really good
just end up with a really really good
hyperparameter tuner for reinforcement
hyperparameter tuner for reinforcement
learning I think that's kind of the
learning I think that's kind of the
highest leverage thing in RL right now
highest leverage thing in RL right now
if we do this it will make all the
if we do this it will make all the
research that I do much
easier I got to run to dinner in a few
easier I got to run to dinner in a few
as well i' sort of been on here for the
as well i' sort of been on here for the
past I don't know I was on this morning
past I don't know I was on this morning
I've been on like the last 3 4 hours I
I've been on like the last 3 4 hours I
think but I'd like to at least have some
think but I'd like to at least have some
idea of what's going on here why is this
idea of what's going on here why is this
particular modification not working
sure so my theory
here the way that this works is it looks
here the way that this works is it looks
for the nearest lower cost optimal
point and then it takes the difference
point and then it takes the difference
between the estimated score of this
between the estimated score of this
proposed candidate
proposed candidate
point and the known score of that
point and the known score of that
nearest paredo
nearest paredo
Point uh in other
Point uh in other
words that's a whole bunch of fancy
jargon to mean something very
simple so if you have this you have some
simple so if you have this you have some
uh some
points and you pick a sample let's say
points and you pick a sample let's say
that you're going to choose a sample
that you're going to choose a sample
Point that's right
Point that's right
here then it just looks
at it looks at this distance
so this point to the left it looks at
so this point to the left it looks at
this distance to see how good this one
this distance to see how good this one
is so the idea is once you fill these in
is so the idea is once you fill these in
right so once you fill in the best set
right so once you fill in the best set
of points you can then there's not
of points you can then there's not
really any way to put a new Point that's
really any way to put a new Point that's
going to like give you a substantial
going to like give you a substantial
increment so then what you have to do is
increment so then what you have to do is
you go over here you know and you try
you go over here you know and you try
this so pushes you to explore
more that's what this is trying to do
more that's what this is trying to do
but it's for some reason it's doing the
but it's for some reason it's doing the
opposite I don't think I just flipped a
opposite I don't think I just flipped a
negative sign hardy hardy
negative sign hardy hardy
heart
um see this is obnoxious because
this looks
better what if I remove the cost mean
term oh wait hold on well I can see
term oh wait hold on well I can see
already that it's just it is doing
it oh you know what it might be
let me see if this works
let me see if this works
first if this works I think it's the
first if this works I think it's the
quanti
quanti
transform doesn't seem to be working
transform doesn't seem to be working
though
I wonder if it's the
clipping hang on normalize forine
clipping hang on normalize forine
normalize nearest parito
score normalized forine comes out of
score normalized forine comes out of
this
oh don't need to W any
oh don't need to W any
longer just took a second to figure it
out how many samples was that 20ish
it's crazy that it can jump that
much I guess the model just has to had
much I guess the model just has to had
to get good enough and then it went and
to get good enough and then it went and
selected
selected
um one of the other random
samples now the thing is that this
samples now the thing is that this
should fill in the front it shouldn't
should fill in the front it shouldn't
just chill out at
200 so if it's just going to chill out
200 so if it's just going to chill out
at 200 then that's not good
either push the latest
version getting hungry here
oh wait is
it okay there is there is a glitch
here is
there no there shouldn't be a glitch
there no there shouldn't be a glitch
anymore actually cuz it's filled in
now for
it might be the quantal transform
we'll have to check
that I'm happy with the progress here
that I'm happy with the progress here
though
there's a lot of good progress
today is the nearby scort at least
today is the nearby scort at least
decreasing over
decreasing over
time yes it
is this is a resample I
assume yeah
so what knows that this is getting less
so what knows that this is getting less
appealing I
think but there will still have to be
think but there will still have to be
some fixes to
this I'm going to have to think about
this I'm going to have to think about
how
I think the quanti transform is going to
I think the quanti transform is going to
mess
up it's going to mess up the cost
penalty I think that's
likely you need something that's at
likely you need something that's at
least linearly better like a linear
least linearly better like a linear
increase in cost I mean in score to
increase in cost I mean in score to
justify the cost
and we'll look at
it okay I'm going to go get food
it okay I'm going to go get food
um was
um was
exhausting so I'm going to get some food
exhausting so I'm going to get some food
check some emails and then just chill
check some emails and then just chill
out for the rest of the evening most
out for the rest of the evening most
likely be back tomorrow think I've got
likely be back tomorrow think I've got
some other stuff to work on other than
some other stuff to work on other than
this tomorrow really want to finish this
this tomorrow really want to finish this
though this is going to be so so good
though this is going to be so so good
when it's
when it's
done when I get this thing working
done when I get this thing working
properly like it's going to be really
properly like it's going to be really
good but in the time being thanks for
good but in the time being thanks for
tuning in if you're interested in
tuning in if you're interested in
following all this work everything you
following all this work everything you
see here is free and open source can
see here is free and open source can
check out puffer doai got all of our
check out puffer doai got all of our
demos right here on Ocean and play all
demos right here on Ocean and play all
of these online as well very simple up
of these online as well very simple up
to very
to very
complex if you're looking to get into RL
complex if you're looking to get into RL
looking for Cutting Edge RL improvements
looking for Cutting Edge RL improvements
got a whole bunch of stuff on our blog
got a whole bunch of stuff on our blog
also got a community Discord you can
also got a community Discord you can
start the repository to help us out that
start the repository to help us out that
really really helps and if you're
really really helps and if you're
looking for even more content you can
looking for even more content you can
follow me on X I post a ton of RL stuff
follow me on X I post a ton of RL stuff
including some articles you can't find
including some articles you can't find
anywhere else so thank you and

Kind: captions
Language: en
we're
live I don't know why we're live it is
live I don't know why we're live it is
Sunday but uh I feel like working on
Sunday but uh I feel like working on
this thing just for a little
this thing just for a little
bit just for a little
bit puffer lib SL sweep
for e
okay
we're going to debug this implementation
we're going to debug this implementation
and see if it does
and see if it does
anything what we will do right
anything what we will do right
now I'm trying to think what other stuff
now I'm trying to think what other stuff
I actually really have to do
today I think I pretty much just have to
today I think I pretty much just have to
check a couple Financial
things and that's about it so I think
things and that's about it so I think
I'm good to work on this for a little
bit I me there's all sorts of other
bit I me there's all sorts of other
stuff I'd like to
stuff I'd like to
do but this is higher priority
I got to find some followers that I can
I got to find some followers that I can
just like ask [ __ ] about ask [ __ ] in
just like ask [ __ ] about ask [ __ ] in
various different
areas as I end up spending a fair bit of
areas as I end up spending a fair bit of
time outside of ARL trying to do
time outside of ARL trying to do
research on other
areas I probably know somebody come to
areas I probably know somebody come to
B be good uh What is this
B be good uh What is this
no this is not going to be a generator
no this is not going to be a generator
this is
stupid in fact what the hell is
this why did I make this a
yield I'm going to have to fix that at
yield I'm going to have to fix that at
some point I why would I do that ever I
some point I why would I do that ever I
hate generators
oh it's fast shut up you're using
python how
python how
to no Adder search Center
how about
me
success self. success too many C's
none I bet I forgot to return
it why do it trying to make it a
it why do it trying to make it a
couple I thought so weird
still
now that is
weird suggestion index is
weird suggestion index is
one there should be less than equal
why that's
Jank operand could not be
broadcast does numai have I can just do
broadcast does numai have I can just do
like this star none right
uh
okay Sigma
wait what numpy random Rand
wait what numpy random Rand
in yeah those are moo
indices well this is just
and the
and the
that of
one so let's
do inut
D
what yeah this isn't I'm input
okay very
okay very
good uh wait moo do
good uh wait moo do
shape that's not
right you did it wrong dummy
does this
does this
work looks like it
works deep
copy for
isn't that kind of
weird yeah it's different
weird yeah it's different
seeds so how's that happening
also why is it so
slow I shouldn't be so
slow
oops is the sample function slow
that's not
bad wait
bad wait
what PH takes
what PH takes
time that's bizarre
huh so something's broken
here for
huh uh it looks like they never got
huh uh it looks like they never got
normalized that's what that looks like
normalized that's what that looks like
to me
so actually the thing that happened
so actually the thing that happened
that's so funny it's just like giant
that's so funny it's just like giant
number calculations with the exponents
number calculations with the exponents
that's that slow that's
weird see if I were writing this in C
weird see if I were writing this in C
the computer would probably just blow up
the computer would probably just blow up
or
something which is the desired
outcome to be punished for writing such
outcome to be punished for writing such
garbage
how two should have a in
you should absolutely have a
you should absolutely have a
in oh you know what it
in oh you know what it
is see this is why we hate
is see this is why we hate
inheritance and uh we will probably find
inheritance and uh we will probably find
a way around having to do any of this
a way around having to do any of this
garbage
wait no I didn't even
wait no I didn't even
Define I didn't even Define
um something weird here
wait self.
min
oh which came first the chicken or the
oh which came first the chicken or the
egg I
see e
okay great so we're on to this
e error
zero
for
e how's this
happen yeah I see
okay so all the scores are always the
okay so all the scores are always the
same um but this does
Run's best and
Run's best and
we
we
return perams
carbs. suggest
arcs and I don't think that this suggest
arcs and I don't think that this suggest
needs to take in anything right
yeah AR is no longer
used hey there we
go and All I Need is Another
terminal
Ser who's using
Ser who's using
this do I have a server up I don't think
this do I have a server up I don't think
I
do yes I do
do yes I do
somewhere no idea
where this
visualize empty
chart okay what's wrong with
chart okay what's wrong with
you oh I forgot to just here
lovely so this
is the result of uh the randomized neoc
is the result of uh the randomized neoc
carb
carb
search I don't know how the heck you get
search I don't know how the heck you get
a point sampled this far out but
a point sampled this far out but
uh and which task are we on
linear I mean that's fairly interesting
num random
num random
samples give it 200 runs real quick
samples give it 200 runs real quick
because we can actually do that now it's
because we can actually do that now it's
fast so much
faster okay this task isn't supposed to
faster okay this task isn't supposed to
work like
work like
this so
um something's
um something's
probably wrong here
this looks yeah there's something wrong
this looks yeah there's something wrong
for sure
see if this
works
works
holy nope ah okay we're returning them
holy nope ah okay we're returning them
in the
okay so this is in the wrong
space they need to do
um okay here's what we're going to do
then scale is already normed
one negative 1 to
one and then this has to
one and then this has to
get
suggestion ah and then Phil will
suggestion ah and then Phil will
unnormalized right
unnormalized right
yes Phil does un
normalize way better way way way
normalize way better way way way
better it's actually pretty funny how
better it's actually pretty funny how
well that
does as just like um as a Bas line
the 100 points can see it doesn't fill
the 100 points can see it doesn't fill
it in as
nicely and do a th000
points still works like
points still works like
instantly and this is what you
get so this is let me just put this into
get so this is let me just put this into
perspective what we have here we have a
perspective what we have here we have a
version of
version of
cars uh that runs instantly without any
cars uh that runs instantly without any
of the overhead uh where we've discarded
of the overhead uh where we've discarded
all of the
all of the
math and it still does pretty
decently can we do random for
comparison is it better to reimplement
comparison is it better to reimplement
some already built environment or go
some already built environment or go
full out on something new it depends on
full out on something new it depends on
your
your
reference uh and what you're excited
reference uh and what you're excited
about so if you see an environment that
about so if you see an environment that
you think is cool that you think will
you think is cool that you think will
add something to puffer that's not going
add something to puffer that's not going
to a ton of work then go for it it is
to a ton of work then go for it it is
possible for reference code bases to
possible for reference code bases to
have negative value many of them in
have negative value many of them in
Academia do there are many code bases
Academia do there are many code bases
that are so bad that replicating them
that are so bad that replicating them
with good code that's actually usable is
with good code that's actually usable is
harder than just coming up with
harder than just coming up with
something that'll be
better I'd say this is somebody who I
better I'd say this is somebody who I
guess technically I professionally weigh
guess technically I professionally weigh
through academic code bases I can say
that a good example of this is
that a good example of this is
overcooked it has that code base boggles
overcooked it has that code base boggles
the
Mind generally you should for a first uh
Mind generally you should for a first uh
a first environment
a first environment
you should look to do something that's
you should look to do something that's
going to be between 2 and 500
lines a good chunk of that as well will
lines a good chunk of that as well will
be logging allocation free and there's
be logging allocation free and there's
like you know 150 lines of M code 200
like you know 150 lines of M code 200
lines of M
code you can do a fair bit in that like
code you can do a fair bit in that like
I think snake is about that length our
I think snake is about that length our
multi-agent snake implementation I mean
multi-agent snake implementation I mean
that we we have is about that length do
that we we have is about that length do
quite a bit with that
[Music]
do you have any ideas around that like
do you have any ideas around that like
new environments let me
new environments let me
think let me think of stuff we could use
think let me think of stuff we could use
at the moment that would
at the moment that would
be in that Simplicity with so many
be in that Simplicity with so many
options
you think going to be looking
you think going to be looking
at curriculum
at curriculum
[Music]
[Music]
exploration m covers pretty
well see I'm trying to think of things
well see I'm trying to think of things
that aren't out there in directions I
that aren't out there in directions I
haven't explored yet and uh where I
haven't explored yet and uh where I
don't know if I'm giving you something
don't know if I'm giving you something
crazy
hard like last time I gave uh I tried to
hard like last time I gave uh I tried to
I gave Enduro to somebody as a project
I gave Enduro to somebody as a project
uh some fairly new and he did it but it
uh some fairly new and he did it but it
was way more complicated than I
expected let me think of like what is
expected let me think of like what is
something that I've wanted there's so
something that I've wanted there's so
many things I've wanted to happen in
many things I've wanted to happen in
here for a
while it'll be fun yes but I don't want
while it'll be fun yes but I don't want
to give you something that's too large
to give you something that's too large
that'll be discouraging especially
that'll be discouraging especially
without knowing your level EXP
without knowing your level EXP
experience if you tell me you're a SE
experience if you tell me you're a SE
whz that's another story
but see multi-agent Dynamics are also
but see multi-agent Dynamics are also
hard to test
oh wait I think I have something let me
oh wait I think I have something let me
think let me think if this is actually a
think let me think if this is actually a
good project
yeah I think this is
good what do you think about
this so
this so
this is like it's a flocking thing right
this is like it's a flocking thing right
yeah this is from artificial life it
yeah this is from artificial life it
turns out that you can create like these
turns out that you can create like these
flocking type behaviors with very simple
flocking type behaviors with very simple
rules so all you do is you if you just
rules so all you do is you if you just
put the constraint that um where is
put the constraint that um where is
it yeah Birds try to stay you know they
it yeah Birds try to stay you know they
don't get too close they try to match
don't get too close they try to match
velocity of neighbors and they try to
velocity of neighbors and they try to
move towards Center of mass you get
move towards Center of mass you get
these really cool looking
these really cool looking
Sims so what I was thinking you could do
Sims so what I was thinking you could do
is you could implement this but then
is you could implement this but then
what you so you could implement this so
what you so you could implement this so
that you get this type of behavior so
that you get this type of behavior so
you know your sim is correct right but
you know your sim is correct right but
then what you can do is you can replace
then what you can do is you can replace
these rules with rewards and see if we
these rules with rewards and see if we
can RL like cool flocking
behaviors I think that this is a really
behaviors I think that this is a really
short implementation as
short implementation as
well yeah it's a really short
well yeah it's a really short
implementation
and it'll be funny cuz we can use the
and it'll be funny cuz we can use the
puffer as the uh we can use the puffer
puffer as the uh we can use the puffer
as the uh the
character is that something you'd be
character is that something you'd be
excited about or should I pick something
else I think that's like a you know 100
else I think that's like a you know 100
to 200 lines of logic
to 200 lines of logic
kind of a
thing you'll pretty much be able to
thing you'll pretty much be able to
follow the snake logic as a
follow the snake logic as a
template you get to have some fun
template you get to have some fun
playing around with training as well
playing around with training as well
because it'll train really fast
only thing that'll be a little tricky
only thing that'll be a little tricky
will be the
will be the
observations you don't want to do
observations you don't want to do
uh well observations will be a little
uh well observations will be a little
tricky you can figure it out though I'm
sure can you pick one more yeah let me
sure can you pick one more yeah let me
than
than
so this is one
option let me think of something else as
well so really comple I have a couple of
well so really comple I have a couple of
really complicated ones in mind that I'm
really complicated ones in mind that I'm
definitely not going
definitely not going
to hand out willing
to hand out willing
La let me see if I can think of
La let me see if I can think of
something
simpler see I like I think of other
simpler see I like I think of other
Atari games as well just to like round
Atari games as well just to like round
out our collection of arcade tasks but a
out our collection of arcade tasks but a
lot of them are actually more
lot of them are actually more
complicated than you would suspect to
complicated than you would suspect to
implement
do you have a preference for like
do you have a preference for like
continuous like with physic like basic
continuous like with physic like basic
physics or like discreet or do you have
physics or like discreet or do you have
any preference around
any preference around
anything or am I just coming up with
anything or am I just coming up with
something
here see these board games actually end
here see these board games actually end
up being a pain in the ass CU you have
up being a pain in the ass CU you have
to script a decent opponent to play
to script a decent opponent to play
against
against
ideally we pick something that doesn't
ideally we pick something that doesn't
require that
it's going to be too
it's going to be too
[Music]
complicated pretty comfortable with math
complicated pretty comfortable with math
and
physics well that makes one of
us there will be a lot to do on that I
us there will be a lot to do on that I
don't want to give you as a first thing
though cuz there the thing is there are
though cuz there the thing is there are
L details that pop in very
quickly no good M's there
guys discussing new Ms yeah I'm trying
guys discussing new Ms yeah I'm trying
to figure out a good new one for uh for
to figure out a good new one for uh for
for a new friend
for a new friend
here I came up with one
here I came up with one
option I'm trying to think of others cuz
option I'm trying to think of others cuz
the thing that's difficult at the moment
the thing that's difficult at the moment
right is we're just starting all the
right is we're just starting all the
science side stuff so I'm trying to
science side stuff so I'm trying to
think of like what type of stuff would
think of like what type of stuff would
be relatively easy to implement and
be relatively easy to implement and
would directly support
that and also be relatively fun because
that and also be relatively fun because
we have some we've got some synthetic
we have some we've got some synthetic
tasks that are just boring
pretty comfortable with math and physics
pretty comfortable with math and physics
okay that is good because there's a lot
okay that is good because there's a lot
I want to do
there but I don't want to assign you
there but I don't want to assign you
just like a straight Port of where's
just like a straight Port of where's
like this
RL not this one
not this one somebody had a really good
not this one somebody had a really good
SE environment for
SE environment for
this I think a lot of these are
slow I can do one
slow I can do one
also oh man so now I am coming up with
also oh man so now I am coming up with
multiple new Ms for people to build
okay see usually people are like oh I
okay see usually people are like oh I
have this thing I want to build and I
have this thing I want to build and I
say great let's make it an
say great let's make it an
rlm but yeah now I'm thinking about how
rlm but yeah now I'm thinking about how
to like round out the collection okay
to like round out the collection okay
let me think of like other M's that
let me think of like other M's that
people use so the obvious one the
people use so the obvious one the
obvious one that like we can always use
obvious one that like we can always use
a few more of are the arcade tasks right
a few more of are the arcade tasks right
the problem with them is that some of
the problem with them is that some of
them are a little harder to implement
them are a little harder to implement
than you would expect right like if I
than you would expect right like if I
gave you asteroids or something then
gave you asteroids or something then
you're going to go wait a second but
you're going to go wait a second but
like the asteroids break into many
like the asteroids break into many
different asteroids and then I got to
different asteroids and then I got to
keep track of all these asteroids and
keep track of all these asteroids and
then I'm going to have to go through
then I'm going to have to go through
yeah but you just allocate a big buffer
yeah but you just allocate a big buffer
and you keep them contiguous and like
and you keep them contiguous and like
I'm going to have to go through that
I'm going to have to go through that
Spiel
Spiel
um which is sub
um which is sub
optimal and then there's Collision
optimal and then there's Collision
checks and all that other stuff
um other common arlons
there's so many like mediumsized
there's so many like mediumsized
projects that would be good as
projects that would be good as
well but smaller
ones smaller ones are
ones smaller ones are
usually unless it's an existing gamer
usually unless it's an existing gamer
project they're very
project they're very
intentional like my maze environment
intentional like my maze environment
would probably count count as a smaller
would probably count count as a smaller
project because um well if you ignore
project because um well if you ignore
the keys and the doors and like some of
the keys and the doors and like some of
the fancy
the fancy
features that that took me like two days
features that that took me like two days
there's still a fair bit of code in
there's still a fair bit of code in
there for somebody new
though but let me think along those
though but let me think along those
lines
because the maze really isn't great for
because the maze really isn't great for
continuous I'd like something that gives
continuous I'd like something that gives
us like a
us like a
continuous it has the option for it but
continuous it has the option for it but
it's not a great test of it I'd like
it's not a great test of it I'd like
something that's like a
something that's like a
continuous exploration type
task something where we can really
task something where we can really
figure that side
Out Boy is more like
Out Boy is more like
multi-agent so I guess I'm looking for a
multi-agent so I guess I'm looking for a
single
single
agent continuous task is an
option first one is
option first one is
for rashab I
for rashab I
believe I don't know maybe you can give
believe I don't know maybe you can give
out something that would just be a fun
out something that would just be a fun
just boost fun learning and overall
just boost fun learning and overall
intuition yeah but I can do something I
intuition yeah but I can do something I
can find something like that that's also
can find something like that that's also
going to be like a legitimately useful
going to be like a legitimately useful
contribution of at the same time like a
contribution of at the same time like a
lot of these things they look like toys
lot of these things they look like toys
but they're actually really good
but they're actually really good
research
environments like snake for instance
environments like snake for instance
this is like a toy but this thing is a
this is like a toy but this thing is a
really
really
stable many agent
stable many agent
environment that can be learned very
environment that can be learned very
quickly and has non-trivial Behavior
quickly and has non-trivial Behavior
non-trivial Behavior
me actually go look
me actually go look
fem get some
stuff so
see this is too
see this is too
complicated stuff like this is awesome
complicated stuff like this is awesome
but this is too
complicated oh hang on wait wait wait I
complicated oh hang on wait wait wait I
have
have
something um
something um
let me think how hard it is
though I think if we limit the number of
entities if we don't try to make it
entities if we don't try to make it
hugely
hugely
scalable and we limit the number of
scalable and we limit the number of
entities it's okay
entities it's okay
it is adversarial though adversarial Ms
it is adversarial though adversarial Ms
are
hard it would be a good multi-agent
hard it would be a good multi-agent
though a multi-agent test
which we
which we
need directly
competitive runnable
competitive runnable
nontrivially
nontrivially
with one agent as
with one agent as
well for debugging
well for debugging
purposes okay I got something
I'm pretty sure you can do this
I'm pretty sure you can do this
thing where is the stupid oh yeah stupid
thing where is the stupid oh yeah stupid
advertising I like how I get Rogue adver
advertising I like how I get Rogue adver
how do
how do
I of course I get Rogue advertisements I
I of course I get Rogue advertisements I
you already have my money stop so yeah I
you already have my money stop so yeah I
think you could do something like this
think you could do something like this
very very
very very
efficiently uh with not very much code
efficiently uh with not very much code
it's actually probably simpler than my
it's actually probably simpler than my
snake code
don't bother with like these spiky
don't bother with like these spiky
things just like the basic you know
things just like the basic you know
there are
there are
dots if you collide with them you pick
dots if you collide with them you pick
them up if you're bigger otherwise they
them up if you're bigger otherwise they
eat you or
eat you or
whatever you have a fixed number of
whatever you have a fixed number of
players you have like a Max Map size or
players you have like a Max Map size or
whatever with at most like 100 dots
whatever with at most like 100 dots
something like that
something like that
this would be another option something
this would be another option something
like this this would be a this is cool
like this this would be a this is cool
because it's configurable multi-agent
because it's configurable multi-agent
it's continuous uh you could run it
it's continuous uh you could run it
discrete as well like you could
discrete as well like you could
discretize the action space so that's a
discretize the action space so that's a
good comparison for us uh it should be
good comparison for us uh it should be
very simple single agent to get like
very simple single agent to get like
non-trivial exploration and
stuff what in the hell
they just
slowly okay there have people who have
slowly okay there have people who have
been just like on this for hours
been just like on this for hours
apparently because this is a
apparently because this is a
planet probably set a match size on the
planet probably set a match size on the
lines of snake yeah that's what I
lines of snake yeah that's what I
figured so it would be a pretty direct
figured so it would be a pretty direct
it'd be pretty direct um it would be a
it'd be pretty direct um it would be a
pretty direct Port like pretty direct
pretty direct Port like pretty direct
comparable I think that slither.io or
comparable I think that slither.io or
something like slyther iio would be
something like slyther iio would be
harder
harder
because you have to keep track of the
because you have to keep track of the
snake body in continuous
snake body in continuous
space but
space but
um yeah I think rashab if you're
um yeah I think rashab if you're
interested in doing something like this
interested in doing something like this
I think that the logic for that should
I think that the logic for that should
be pretty clean the only things that you
be pretty clean the only things that you
have to not worry about too much are
have to not worry about too much are
like variable numbers of food and
like variable numbers of food and
opponents just don't worry about it just
opponents just don't worry about it just
allocate a uh for now just like allocate
allocate a uh for now just like allocate
a Max buffer of 128 and then just Loop
a Max buffer of 128 and then just Loop
over all of
over all of
them and then we'll deal with like if we
them and then we'll deal with like if we
want really big Maps I'll come up with a
want really big Maps I'll come up with a
way to do
that I mean I have ways to do that
that I mean I have ways to do that
they're just a little complicated for a
they're just a little complicated for a
first
end that's two two options you want me
end that's two two options you want me
to come up with some additional Ur are
to come up with some additional Ur are
either of those interesting
for folks watching as well I code review
for folks watching as well I code review
all contributed environments uh live on
all contributed environments uh live on
stream if that is something that you
stream if that is something that you
want so it's a good way to get feedback
want so it's a good way to get feedback
on RL stuff no no don't do slyther
on RL stuff no no don't do slyther
slyther iio would be hard man slither.io
slyther iio would be hard man slither.io
would be hard I think agar would be
would be hard I think agar would be
substantially
easier cuz with slyther like you have to
easier cuz with slyther like you have to
do
do
you have to basically keep track of
you have to basically keep track of
either a curve or some like line
either a curve or some like line
segments or something I actually don't
segments or something I actually don't
know off the top of my head how the code
know off the top of my head how the code
works for that for snakes in continuous
space agar is like Circ like they're
space agar is like Circ like they're
blobs so you don't have to keep track of
blobs so you don't have to keep track of
a growing snake that like can have all
a growing snake that like can have all
sorts of weird angles and stuff in
sorts of weird angles and stuff in
continuous space you just have to keep
continuous space you just have to keep
track of the size of the blob
track of the size of the blob
yeah you can try Slither but I think
yeah you can try Slither but I think
it's going to be much harder and I think
it's going to be much harder and I think
it'll be hard to learn uh to learn good
it'll be hard to learn uh to learn good
policies on so I think it'll just be
policies on so I think it'll just be
harder
overall like much
harder anel what's your background I can
harder anel what's your background I can
uh I can come up with something for
uh I can come up with something for
you or if you have your own ideas like
you or if you have your own ideas like
this this is not just assignment based
this this is not just assignment based
we're also very happy when people are
we're also very happy when people are
like all right I got a cool idea I want
like all right I got a cool idea I want
to turn this into an rlm we usually just
to turn this into an rlm we usually just
go yeah awesome more rlm is
go yeah awesome more rlm is
good oh dude that's hard are you are you
sure I'm just telling you like that
sure I'm just telling you like that
would
would
be I wrote I mean I write some cool code
be I wrote I mean I write some cool code
and I think it would be non-trivial to
and I think it would be non-trivial to
make that like fast and to do this like
make that like fast and to do this like
the way that we build our
the way that we build our
M for reference right like this is I
M for reference right like this is I
made this thing a million steps a second
made this thing a million steps a second
two million closer to really
two million closer to really
um yeah I did the Moa and I still think
um yeah I did the Moa and I still think
I I could be wrong there probably some
I I could be wrong there probably some
stuff online about how they do it but I
stuff online about how they do it but I
don't know if it's easy I'm a final year
don't know if it's easy I'm a final year
student yeah and I'm a PhD who's been
student yeah and I'm a PhD who's been
writing codes since I was 14
writing codes since I was 14
um let me think
let me
let me
look it's also we don't need two very
look it's also we don't need two very
similar
M what the
hell nasty C
projects I at least would want to know
projects I at least would want to know
the algorithm for this but the other
the algorithm for this but the other
thing is it's like very duplicate right
thing is it's like very duplicate right
cuz we have discreet snake and then if
cuz we have discreet snake and then if
agar's going to be in continuous space
agar's going to be in continuous space
like I it doesn't add a ton I
think this would still be my yeah I mean
think this would still be my yeah I mean
so the thing that I was suggesting
so the thing that I was suggesting
before was
this yes I am a h this also to be fair I
this yes I am a h this also to be fair I
got stuck writing python for like 10
got stuck writing python for like 10
years but I've been writing some pretty
years but I've been writing some pretty
cool C stuff
cool C stuff
lately um unfortunately today I'm
lately um unfortunately today I'm
writing python but have you seen this
writing python but have you seen this
this is
voids it's like this really cool
voids it's like this really cool
flocking simulation I think this can be
flocking simulation I think this can be
done in like this is something that
done in like this is something that
would probably take me a day to like get
would probably take me a day to like get
something
something
working it's only it's going to be
working it's only it's going to be
probably like 100 150 lines of real code
probably like 100 150 lines of real code
plus the you know the N4
plus the you know the N4
plate uh it has decent ways to test it
plate uh it has decent ways to test it
it has really cool emerging behaviors
it has really cool emerging behaviors
and you can do quite a bit with the
SIM and there are like there are tons of
SIM and there are like there are tons of
blog posts on how to do this stuff like
blog posts on how to do this stuff like
this is the whole logic of it in
this is the whole logic of it in
python or pseudo code or whatever
python or pseudo code or whatever
language yeah pseudo
code so probably I don't know like a
code so probably I don't know like a
couple hundred lines of see
see and there are ways to get fancier
see and there are ways to get fancier
with this as well so if you want to come
with this as well so if you want to come
up with some cooler stuff um the right
up with some cooler stuff um the right
now it does a centroid so it scales
now it does a centroid so it scales
quadratically with the number of boids
quadratically with the number of boids
technically you could do either a quad
technically you could do either a quad
tree or if you want to be simpler about
tree or if you want to be simpler about
it you just do a fixed grid and then you
it you just do a fixed grid and then you
allocate a number of entities to each
allocate a number of entities to each
grid cell uh and that that prevents you
grid cell uh and that that prevents you
from getting quadratic scaling by
from getting quadratic scaling by
checking everything on the map so
checking everything on the map so
there's some stuff kles Lux S3 I know
there's some stuff kles Lux S3 I know
Stone
Stone
well let me see their
end how did you solve element
end how did you solve element
interactions nope didn't require quad
interactions nope didn't require quad
quadratic or anything um snake is is
quadratic or anything um snake is is
discrete so you just have to check
discrete so you just have to check
neighboring tiles and uh that I actually
neighboring tiles and uh that I actually
do that for continuous M's as well let
do that for continuous M's as well let
me show you so without even a f tree
me show you so without even a f tree
there's something way simpler you can
do so we have continuous movement right
do so we have continuous movement right
here you can see I'm moving around
here you can see I'm moving around
continuously and I'm not stuck to any
continuously and I'm not stuck to any
grid cell but there is actually a grid
grid cell but there is actually a grid
on this environment and the tiles are
on this environment and the tiles are
not tiny either like if if I uh if I use
not tiny either like if if I uh if I use
an
an
ability yeah so you can see like that is
ability yeah so you can see like that is
a radius of I believe two cells out um
a radius of I believe two cells out um
so all you have to do for Collision
so all you have to do for Collision
checks and stuff is you just check
checks and stuff is you just check
everything in those tiles instead of on
everything in those tiles instead of on
the whole map um and then you know you
the whole map um and then you know you
have a continuous position but you also
have a continuous position but you also
have a grid cell
position environments written in Jacks
position environments written in Jacks
let me see what they're on this
I tried to tell them that this is
um it's like literally harder to write
um it's like literally harder to write
this stuff in Jacks than
this stuff in Jacks than
MC and it doesn't look as
MC and it doesn't look as
cool wait what is the end let me
see 2D map in a
see 2D map in a
best for
is the game interesting it's hard to
is the game interesting it's hard to
tell with the uh the current visuals
oops
e e
this is funny this is like substantially
this is funny this is like substantially
simpler of an environment than they had
simpler of an environment than they had
in previous years that's what happens
in previous years that's what happens
when you use
when you use
Jacks I feel for him though because if
Jacks I feel for him though because if
you write if you're used to writing Ms
you write if you're used to writing Ms
in Python you go like wow I can train so
in Python you go like wow I can train so
fast oh but wait it's so hard to write
fast oh but wait it's so hard to write
anything
interesting I mean I also know how much
interesting I mean I also know how much
freaking work competitions are so this
freaking work competitions are so this
is still very very
is still very very
impressive competitions suck to organize
impressive competitions suck to organize
they really
do see this does something
reasonable I wouldn't bother with
reasonable I wouldn't bother with
something like that though that's going
something like that though that's going
to be a lot more work like you really
to be a lot more work like you really
can't tell what's going on from uh the
can't tell what's going on from uh the
visuals there very well you're going to
visuals there very well you're going to
want like a texture pack or something at
want like a texture pack or something at
the very least if not
the very least if not
animations uh for something like that so
animations uh for something like that so
yeah things quickly become more
work I just do boids as a first
work I just do boids as a first
environment it'll be a nice contribution
environment it'll be a nice contribution
it'll be very quick it should give you a
it'll be very quick it should give you a
sense of stuff there's some interesting
sense of stuff there's some interesting
optimizations you can do if you want
optimizations you can do if you want
to I do
to I do
that we've got 10 people watching me on
that we've got 10 people watching me on
a
a
Sunday well welcome
Sunday well welcome
folks I do not know why I'm live on a
folks I do not know why I'm live on a
Sunday either I should probably be
Sunday either I should probably be
chilling out but
chilling out but
uh all right so that's some Ms if anyone
uh all right so that's some Ms if anyone
else is interested um that offer is open
else is interested um that offer is open
by the way agar.io yeah um you can look
by the way agar.io yeah um you can look
it doesn't have to be a onetoone
it doesn't have to be a onetoone
reproduction either it's just like the
reproduction either it's just like the
general idea right is you know you're a
general idea right is you know you're a
blob or your sphere you go eat other
blob or your sphere you go eat other
spheres right
spheres right
yeah that sort of thing yeah and for
yeah that sort of thing yeah and for
folks
folks
interested just because we do have quite
interested just because we do have quite
a few people watching at the moment um
a few people watching at the moment um
Huffer lib is an ultra high performance
Huffer lib is an ultra high performance
reinforcement learning library this is
reinforcement learning library this is
what I'm building full-time now uh we
what I'm building full-time now uh we
build really high perms in C like
build really high perms in C like
million steps per second thousand times
million steps per second thousand times
faster than most of what is an Academia
faster than most of what is an Academia
all of these are playable online at
all of these are playable online at
puffer doai from very simple to like
puffer doai from very simple to like
actually pretty full
actually pretty full
MMO and a bunch of other stuff as
MMO and a bunch of other stuff as
well uh and most of these are written by
well uh and most of these are written by
contributors uh some of whom came in
contributors uh some of whom came in
with no RL
with no RL
experience uh pretty much if you're
experience uh pretty much if you're
interested in getting involved this is a
interested in getting involved this is a
great way to do so I review all
great way to do so I review all
contributed m's on stream and uh you
contributed m's on stream and uh you
know once you contribute a couple Ms you
know once you contribute a couple Ms you
kind of get the hang of some of the RL
kind of get the hang of some of the RL
Basics and I start onboarding people
Basics and I start onboarding people
onto the cool science stuff that we're
onto the cool science stuff that we're
doing as as well is this project is
doing as as well is this project is
really my effort to make the field of
really my effort to make the field of
reinforcement learning sane consistent
reinforcement learning sane consistent
and fast actually we have contributors
and fast actually we have contributors
working on both of these at the moment I
working on both of these at the moment I
just came up with some prototypes for
just came up with some prototypes for
these so like tank battle n raing card
these so like tank battle n raing card
game um there are there are several
game um there are there are several
others as well that aren't here
yet all
yet all
right so with that I think we go back
right so with that I think we go back
to what I was working on at the moment
to what I was working on at the moment
I'll keep answering questions of
course but uh I was working on this
course but uh I was working on this
hyper parameter sweep
algorithm and ah yeah star the repo as
algorithm and ah yeah star the repo as
well please star the repo it really
well please star the repo it really
helps when people star the
helps when people star the
repository doesn't cost you
repository doesn't cost you
anything but um I mean pretty much the
anything but um I mean pretty much the
growth metrics I track are stars here
growth metrics I track are stars here
and then followers on X that's what I
and then followers on X that's what I
track that's generally been pretty
good okay
so uh oh there we go so this is what we
so uh oh there we go so this is what we
got out
of our new new
of our new new
version This Is
version This Is
Random so you can see we've already
Random so you can see we've already
done well the random it's not like true
done well the random it's not like true
uniform random it's Rand random around
uniform random it's Rand random around
the start
the start
points but you can see already that this
points but you can see already that this
is much
better very good be the hey puffer Stars
that's what he
eats close some
tabs this is actually kind of funny um
tabs this is actually kind of funny um
let me explain the significance of this
let me explain the significance of this
result real
result real
quick so
the paper that this is based off of is
the paper that this is based off of is
carbs this this paper from M VII their
carbs this this paper from M VII their
cool startup they used to do RL now they
cool startup they used to do RL now they
do language models like everyone
do language models like everyone
else but they came up with this really
else but they came up with this really
mathy paper uh but the key thing was
mathy paper uh but the key thing was
that there's this Benchmark called proen
that there's this Benchmark called proen
right which is an arcade Benchmark for
right which is an arcade Benchmark for
reinforcement learning similar to Atari
reinforcement learning similar to Atari
it just runs faster
it just runs faster
and they were able to solve it with
and they were able to solve it with
po uh and just hyper parameter tuning so
po uh and just hyper parameter tuning so
they were able to solve this existing
they were able to solve this existing
Benchmark with the simplest possible
Benchmark with the simplest possible
method purely by hyperparameter tuning
method purely by hyperparameter tuning
with this
with this
algorithm um the algorithm has a bunch
algorithm um the algorithm has a bunch
of math in it though it's very
of math in it though it's very
mathy and when you actually dig into the
mathy and when you actually dig into the
math not all of it's exactly well
math not all of it's exactly well
motivated so I've been working on a new
motivated so I've been working on a new
algorithm based on this uh to see if I
algorithm based on this uh to see if I
can really
can really
outperform this algorithm and there were
outperform this algorithm and there were
a few issues one of the main ones is
a few issues one of the main ones is
just the typical academic issue of the
just the typical academic issue of the
code base being kind of a mess they had
code base being kind of a mess they had
way way way too much code uh for what
way way way too much code uh for what
this thing is so just this morning I
this thing is so just this morning I
said okay I'm going to go just make my
said okay I'm going to go just make my
own implementation of it and I started
own implementation of it and I started
doing that and I said hey wait a second
doing that and I said hey wait a second
there's a baseline version of this that
there's a baseline version of this that
you can do with none of this
you can do with none of this
math let me explain how this works at a
math let me explain how this works at a
high level without the math
high level without the math
so I have to briefly explain the concept
so I have to briefly explain the concept
of parito
of parito
optimality so let's say that you have
optimality so let's say that you have
two variables one of which is a cost
two variables one of which is a cost
which is say the amount of time it takes
which is say the amount of time it takes
you to run an experiment in seconds and
you to run an experiment in seconds and
then you have the score which is how
then you have the score which is how
well you do on your environment so
well you do on your environment so
you're playing playing breakout it takes
you're playing playing breakout it takes
you two minutes that's your cost you
you two minutes that's your cost you
score 500 points that's your score
score 500 points that's your score
pretty intuitive right
pretty intuitive right
so a point is said to be parito
so a point is said to be parito
optimal if there's no point that is both
optimal if there's no point that is both
higher score and lower cost so you
higher score and lower cost so you
cannot give me an experiment or at least
cannot give me an experiment or at least
so far none of your experiments do both
so far none of your experiments do both
better on breakout uh and also have a
better on breakout uh and also have a
lower cost the experiment runs faster it
lower cost the experiment runs faster it
doesn't
doesn't
exist so what this algorithm is about is
exist so what this algorithm is about is
about trying to discover the whole Paro
about trying to discover the whole Paro
front find all the points uh that are
front find all the points uh that are
like this so basically for however much
like this so basically for however much
compute you want to invest in your
compute you want to invest in your
experiment you want to get the optimal
experiment you want to get the optimal
results and that is useful because it
results and that is useful because it
tells you uh the shape of that curve
tells you uh the shape of that curve
sometimes it'll be really steep so
sometimes it'll be really steep so
you'll say hey if you invest 2 minutes
you'll say hey if you invest 2 minutes
you can basically get Optimal
you can basically get Optimal
Performance you don't really get that
Performance you don't really get that
much benefit by going more or some
much benefit by going more or some
environments it's like hey this
environments it's like hey this
environment scales really really well
environment scales really really well
with compute you just have to keep
with compute you just have to keep
dumping more Compu and and you'll keep
dumping more Compu and and you'll keep
getting better results things like
getting better results things like
this um it's useful for other reasons
this um it's useful for other reasons
but that's one of the big
but that's one of the big
ones so what they do is they generate a
ones so what they do is they generate a
whole bunch of points around whatever
whole bunch of points around whatever
existing Paro points they have and then
existing Paro points they have and then
they score them so basically they take
they score them so basically they take
this set of parito points and they do
this set of parito points and they do
like this genetic algorithm type thing
like this genetic algorithm type thing
where they're just like searching around
where they're just like searching around
the existing good points that they have
the existing good points that they have
and then all this math all that this
and then all this math all that this
math is for is when you take a bunch of
math is for is when you take a bunch of
random samples around the points the
random samples around the points the
math tells you which one to
math tells you which one to
pick so the Baseline I came up with is
pick so the Baseline I came up with is
hey what if we just take all the math
hey what if we just take all the math
away and just pick
away and just pick
randomly you know we just randomly
randomly you know we just randomly
sample what point we're going to use uh
sample what point we're going to use uh
it turns out that that already does
it turns out that that already does
pretty
pretty
well it does at least way better than
well it does at least way better than
the base random search uh and this
the base random search uh and this
random search is also a usually much
random search is also a usually much
better than most random search
better than most random search
implementations out there now it's not a
implementations out there now it's not a
great Baseline but hey already pretty
great Baseline but hey already pretty
good the best possible performance would
good the best possible performance would
be if all the points were on this line
be if all the points were on this line
and you didn't have any points over here
and you didn't have any points over here
but again this is you know just a
but again this is you know just a
moderately better random search so the
moderately better random search so the
next thing is going to be to try to
next thing is going to be to try to
implement my my versions of the math uh
implement my my versions of the math uh
to see if we can do even better than
this and this is a where it gets a
this and this is a where it gets a
little bit tricky because
little bit tricky because
there are two components to this there's
there are two components to this there's
the math
the math
itself which are these formulas which
itself which are these formulas which
I've spent a lot of time looking at and
I've spent a lot of time looking at and
redesigning and then there these gussian
redesigning and then there these gussian
processes these are a set of learned
processes these are a set of learned
models they are learned online as you
models they are learned online as you
run experiments so the results of the
run experiments so the results of the
experiments that's your data and you
experiments that's your data and you
just train this model as you run more
just train this model as you run more
experiments uh the problem is very often
experiments uh the problem is very often
these models are very bad so all the
these models are very bad so all the
math kind of goes out the window when
math kind of goes out the window when
you're using a bad model so we're going
you're using a bad model so we're going
to look at all of this but that is The
to look at all of this but that is The
quick summary of what we are doing
today now let's actually do it for a
today now let's actually do it for a
little bit
we're going to need to pull
we're going to need to pull
in the
in the
model and some of the
formulas okay
so this is what they have as their
model there a lot of code
model there a lot of code
here I think we're just going to copy it
here I think we're just going to copy it
and then start deleting
and then start deleting
stuff I think that's what we're going to
stuff I think that's what we're going to
do
I'm just deleting stuff that I know I'm
I'm just deleting stuff that I know I'm
not going to
use in fact this isn't going to be a
use in fact this isn't going to be a
separate class
separate class
I don't see any reason for it to
be quantile
Transformer this an input variable
yeah let's see what they call this
yeah let's see what they call this
with surrogate model
with surrogate model
pams and then they call this with
pams and then they call this with
pams that's kind of gross
outstanding suggestion
estimator Thompson
which literally just says Thompson okay
which literally just says Thompson okay
so that's all useless
it's really weird how they uh have to
it's really weird how they uh have to
recreate
recreate
the model every
time such a
time such a
mess so this is pyro I've heard about
mess so this is pyro I've heard about
this thing for many
this thing for many
years but
years but
um never used
um never used
it it's very weird that you create a
it it's very weird that you create a
model with the existing parameters like
this I guess cuz it's
analytic H it looks like you do have to
analytic H it looks like you do have to
recreate it every time based on their
recreate it every time based on their
API I'm not about to reimplement pyro at
API I'm not about to reimplement pyro at
least not yet
least not yet
so uh I guess we will leave this kernel
so uh I guess we will leave this kernel
here but we
will I guess this is going to have to go
will I guess this is going to have to go
into down here
somewhere ah and here's where they
somewhere ah and here's where they
fit here's where they fit this
all right and this is it that below this
all right and this is it that below this
is my
is my
code let's just start cutting where we
code let's just start cutting where we
can I know I'm not using this thing
and just replace this with a
dict I know I'm going to have to have
dict I know I'm going to have to have
some sort of
some sort of
fit for the gaussian process
see
see
x
x
y colel
it goes here actually so yeah you'll see
it goes here actually so yeah you'll see
me deleting um typing information very
me deleting um typing information very
often from
often from
python do not like types in Python
python do not like types in Python
because they're not actually
enforced we're going to get actually get
enforced we're going to get actually get
a few of Kernel this time
a few of Kernel this time
this
this
is you don't need this on GPU it's
is you don't need this on GPU it's
actually slower on GPU I tested it that
actually slower on GPU I tested it that
will probably be true for everything
will probably be true for everything
that we are
that we are
doing so this is now a oneliner with a
doing so this is now a oneliner with a
reasonable line
reasonable line
length and
length and
then
noise
noise
uhhuh tells train
there we
go now we can get rid
go now we can get rid
of that
move these up for now
as basic as what I what I'm doing right
as basic as what I what I'm doing right
now is this is literally been the best
now is this is literally been the best
tool in my Arsenal for like making RL
tool in my Arsenal for like making RL
work is just taking like academic code
work is just taking like academic code
bases with good ideas and cleaning them
bases with good ideas and cleaning them
up substantially until like all the bugs
up substantially until like all the bugs
and errors fall out
bit Target
Transformers all right
so since this is called there then this
so since this is called there then this
goes here and then we delete this
I'm looking for like code that looks
I'm looking for like code that looks
like it does
like it does
something in the rest of
this most of this doesn't look like it
this most of this doesn't look like it
does something
clamp the variance computation does
something wait what self
Target
variance ah okay so this is I was using
variance ah okay so this is I was using
this at some
point so apparently that's not even
point so apparently that's not even
correct good to know
let me take a crack at just integrating
let me take a crack at just integrating
this now
this now
into cuz I think that this whole
into cuz I think that this whole
block right this is what we care
block right this is what we care
about and this
goes this goes right here
cuz it's basically a ranker on the
suggestions let see raw outputs
ah I
ah I
see so we have to retrain fit and
see so we have to retrain fit and
retrain the
retrain the
model which is very
obnoxious so
maybe hold on
we'll figure this
we'll figure this
out
fantile
fit clost transformer.
fit clost transformer.
fit okay I want to see the original
fit okay I want to see the original
here I'm just going to pull it up on the
here I'm just going to pull it up on the
side
I want to see how they were doing this
originally cuz the logic here is just
originally cuz the logic here is just
very convoluted for what it
very convoluted for what it
is get
is get
model so this is them training a
model okay here it is
input in
basic and then we have output in
surrogate and then the cost one is log
surrogate and then the cost one is log
costed
Target to
surette Output Transformer
call this
first okay so I see the logic
first okay so I see the logic
here and this is all just for the
fit so all I have to do is essentially
fit so all I have to do is essentially
un is just
un is just
take it serg it to
take it serg it to
Target Target to so most of these
Target Target to so most of these
functions just get all compressed
functions just get all compressed
as best I can here there's a bunch of
as best I can here there's a bunch of
junk it's very hard to
understand so okay
understand so okay
here this here
this is
this is
nope this is fit Target Transformers
nope this is fit Target Transformers
this block
here and then this
here and then this
is this block here is fit observations
and we shouldn't need any of this data
and we shouldn't need any of this data
until down here but this is going to
be uh we'll also probably find we'll
be uh we'll also probably find we'll
also probably like put all this in one
also probably like put all this in one
separate function at least CU they'll
separate function at least CU they'll
this is in this big elves
block success observations
Square Ro
using more distance information
okay output Transformer
so they want this to be raw
outputs they're doing something very
outputs they're doing something very
weird here that I have to actually
weird here that I have to actually
understand with these transforms because
understand with these transforms because
this doesn't seem like it Mak sense the
this doesn't seem like it Mak sense the
way it's written and maybe it
way it's written and maybe it
doesn't so let me let me go back
this oh also let me reply
this oh also let me reply
to D and put it on my
calendar 4 p.m.
holy looks like we got some new people
holy looks like we got some new people
in here
little dock mess up
ah I don't actually see what he's
ah I don't actually see what he's
talking
about
e e
that kind of interrupted my train of
thought but I was trying to figure out
thought but I was trying to figure out
how they're dealing with the data here
how they're dealing with the data here
um okay okay so they do Target to
um okay okay so they do Target to
surrogate what's Target to
surrogate goes from Target function
space space of the score function is a
space space of the score function is a
well- behaved Gan
space okay
output transformer.
transform hold
on output transformer. transform
I
see so these things are all just done in
see so these things are all just done in
a weird order essentially
a weird order essentially
um these are useful they're just done in
um these are useful they're just done in
a weird
order with a bunch of extra
order with a bunch of extra
stuff so that's fix that oh let's fix
stuff so that's fix that oh let's fix
let me fix this
first
but e
so somebody got link the 10 docs off of
so somebody got link the 10 docs off of
Google thank you Google
it's kind of
funny I'll put this over here
so this is Success observations this is
so this is Success observations this is
raw
scores e
okay here's our output Transformer
do fit
cost
cost
Transformer Transformer
fit see if we need
fit see if we need
these but there's still some weird stuff
these but there's still some weird stuff
going on here
as you fit
this target to Sur
again ah okay then we need this
function we need this
so transform
okay it's actually transformed on the
raw what the
hell and this is so convoluted it's like
hell and this is so convoluted it's like
you make all these damn functions and
you make all these damn functions and
then you end up going in
then you end up going in
circles like cuz you can't think
anymore cuz okay they do fit Target
anymore cuz okay they do fit Target
right and then they call this raw
right and then they call this raw
outputs but then they do the same Loop
outputs but then they do the same Loop
right here so they do Target to
right here so they do Target to
surrogate on Raw
surrogate on Raw
outputs and then Target to surrogate
does this transform
and then wait they fit the
transform can somebody please explain to
transform can somebody please explain to
me why the heck there's a thing here
me why the heck there's a thing here
where you fit a model to some train data
where you fit a model to some train data
and then you use the same model on the
and then you use the same model on the
train
train
data is there not just a function
data is there not just a function
version of this where the heck does this
version of this where the heck does this
come
come
from sklearn preprocessing
from sklearn preprocessing
what is this
function fre can SK
learn quantile transform
holy what on Earth
jeez what does a quantal what does this
jeez what does a quantal what does this
even
do where's the actual
logic e
there's a numpy
wrapper n
percentile computes
quants are
quants are
monotonically increasing
this get
fixed okay so this was never
fixed
wait question
mark is this function literally just a
mark is this function literally just a
numpy
what I'm trying to do now is not use S
what I'm trying to do now is not use S
kit learn look at this code do you want
kit learn look at this code do you want
to use this code do you want this code
to use this code do you want this code
in your code base
in your code base
no this is a multi thousand line numpy
no this is a multi thousand line numpy
wrapper for functions that literally
wrapper for functions that literally
exist in
exist in
numpy that makes it like
Java e
there's a second one as well right min
there's a second one as well right min
max scaler that's easy to that's easy to
max scaler that's easy to that's easy to
replace I'm sure so I guess the easiest
replace I'm sure so I guess the easiest
way to do this is going to
be do I have this yes
be do I have this yes
uh
I hope pyro doesn't look like this as
I hope pyro doesn't look like this as
well be so funny if I end up making
well be so funny if I end up making
making an implementation half the length
making an implementation half the length
of the original that doesn't have the
dependencies it's how it happens though
dependencies it's how it happens though
people just wrap stuff and wrap stuff
people just wrap stuff and wrap stuff
and then everything ends up 10 layers
deep oops forget I'm not in
deep oops forget I'm not in
pdb no attribute
pdb no attribute
references
references
underscore okay
ah check
inputs damn it I actually have to read a
inputs damn it I actually have to read a
substantial portion of this
substantial portion of this
garbage
garbage
um check inputs validate
data copy
form is this the actual
function no this is oh that's so gross
function no this is oh that's so gross
they did it
they did it
backwards they made their function like
backwards they made their function like
their procedural API a wrapper over
their procedural API a wrapper over
their object object API
their object object API
God
okay that's
okay that's
crazy the funny thing is that this is
crazy the funny thing is that this is
probably like well tested code as well
probably like well tested code as well
it's just written like very big
it's just written like very big
Tech it's like very big Tech
Tech it's like very big Tech
where it's like you're not ever intended
where it's like you're not ever intended
to read this because look what happens
to read this because look what happens
when you have to read it
okay so n
quantiles yeah so they just make it it's
quantiles yeah so they just make it it's
literally just a Lin
literally just a Lin
space and what's this end point
and then they
and then they
call then they call this
call then they call this
so X
references a okay so this is the same
references a okay so this is the same
signature this is the same
signature this is the same
thing
thing
AQ it's X references X is just your
data
data
sample you don't need to subsample I
sample you don't need to subsample I
don't think
don't think
times
100 that's the same as 0 to
100 that's the same as 0 to
100 and
100 and
[Music]
[Music]
then this is just nonp percent nonp
quantile so we just do
do that's the same thing
then let's see they this is their
then let's see they this is their
quantiles and then what do they
do return
do return
self
okay and then what do they do with this
okay and then what do they do with this
they
they
call transform
transform
transform
call so they do this no Loop for some
call so they do this no Loop for some
reason
why did they have to do all this
I think they do all this because this is
I think they do all this because this is
like
like
[Music]
interpolation this is like if you fit on
interpolation this is like if you fit on
some data and transform other data but
some data and transform other data but
we're literally fitting on the same
we're literally fitting on the same
data
right hello
yeah every single time you fit you make
yeah every single time you fit you make
a new one of
these okay
and then what's this min max
scaler trans scaling each feature to a
scaler trans scaling each feature to a
given
range no
they use this
dependency with all this freaking code
to avoid doing
this I will never
this I will never
understand big textile
understand big textile
code I
code I
swear I will never understand and at
swear I will never understand and at
this point I no longer want
to uh now the one thing is I think that
to uh now the one thing is I think that
you do have to multiply this
yeah you do have to multiply this
by you do have to do
by you do have to do
this and I think I want to do it the
this and I think I want to do it the
other
way so let's not forget that that' be
bad I mean you see how insane this is
bad I mean you see how insane this is
though right like as I just go through
though right like as I just go through
here and I just like keep pulling the
here and I just like keep pulling the
thread pulling the thread you see how
thread pulling the thread you see how
insane this is right you add a very
insane this is right you add a very
heavy dependency that's doing some weird
heavy dependency that's doing some weird
transform and then you go look at it and
transform and then you go look at it and
it's like two lines of code that's
it's like two lines of code that's
included with
numpy and you go try to read the code
numpy and you go try to read the code
and it takes a while to even figure that
and it takes a while to even figure that
out because it's like some Fang engineer
out because it's like some Fang engineer
has like un WRA and onion wrapped and
has like un WRA and onion wrapped and
onion wrapped this thing to make sure
onion wrapped this thing to make sure
it's like fully abstracted so it'll be
it's like fully abstracted so it'll be
very very safe from anybody trying to
very very safe from anybody trying to
understand
understand
it Christ my
gosh like honestly if that's how I had
gosh like honestly if that's how I had
to write
code I've done some pretty bad stuff
code I've done some pretty bad stuff
with class messing like objectoriented
with class messing like objectoriented
mess but like if I had to write code
mess but like if I had to write code
like that I don't think I would have
like that I don't think I would have
lasted as a as a like a software
lasted as a as a like a software
engineer I think I would have just
engineer I think I would have just
gotten bored and gone and done something
else to be fair uh a lot of like the
else to be fair uh a lot of like the
first many years of learning stuff was
first many years of learning stuff was
like really boring because it would go
like really boring because it would go
too slow because like this is how you're
too slow because like this is how you're
taught to write code you don't have to
taught to write code you don't have to
write code that
write code that
way God
of course I say this and then it's going
of course I say this and then it's going
to be real stupid if I mess it
up lot clost so it's got to be
then the cost
I also I generally prefer to do
I also I generally prefer to do
this and this is not
this and this is not
self this
self this
is lost
there we
go so there's normalized log
pause and what did they call this
pause and what did they call this
thing min max
scale
for e
okay we're starting to get to a
okay we're starting to get to a
reasonable amount of code
oh shoot do I have to apply the same
oh shoot do I have to apply the same
quantile transform to
quantile transform to
uh to the surrogates as
well maybe there was something hang on
well maybe there was something hang on
maybe I did something stupid let me look
maybe I did something stupid let me look
I don't think so but
output
Transformer so then we
Transformer so then we
do outputs in
do outputs in
surrogate we do Target to
surrogate so we fit
this we fit this on
outputs oh wait and then we do Target to
outputs oh wait and then we do Target to
suret out
puts
okay you just removed a 600
okay you just removed a 600
yeah I don't know I've done some stuff
yeah I don't know I've done some stuff
man I've seen some
[ __ ] generally I suggest like here's the
[ __ ] generally I suggest like here's the
thing you can save yourself a lot of
thing you can save yourself a lot of
time just by as a general rule you don't
time just by as a general rule you don't
use SK learn you don't use SK image you
use SK learn you don't use SK image you
don't use any of the SK libraries maybe
don't use any of the SK libraries maybe
once in a while you use scipi if you're
once in a while you use scipi if you're
doing stat stuff all right but for the
doing stat stuff all right but for the
most part you don't touch these
libraries like you can save yourself a
libraries like you can save yourself a
lot of time just by knowing what
lot of time just by knowing what
libraries like you generally don't want
libraries like you generally don't want
to invest time in learning open CV is
to invest time in learning open CV is
another one if you're not doing very
another one if you're not doing very
specific CV stuff that needs it don't
specific CV stuff that needs it don't
touch open CV
I almost don't want to look at the
I almost don't want to look at the
source code for numpy for fear that like
source code for numpy for fear that like
you know the illusion of what I hold up
you know the illusion of what I hold up
is one of the best ever made pack
is one of the best ever made pack
packages the implementation is not going
packages the implementation is not going
to hold
to hold
up it's probably pretty good but I have
up it's probably pretty good but I have
no
idea I mean it's probably littered with
idea I mean it's probably littered with
so many tests and things so that they uh
so many tests and things so that they uh
CU it's like so heavily relied
upon
e e
observe
surrogate stuff on Discord I'm missing
is there new stuff on support I don't
is there new stuff on support I don't
see
anything I mean the reason I'm doing all
anything I mean the reason I'm doing all
of this right is cuz I want to get
of this right is cuz I want to get
something that's very simple where I can
something that's very simple where I can
actually inspect each component easily
actually inspect each component easily
for
for
errors and like try each component to
errors and like try each component to
see if it actually matters
okay so when you do fit observations
right where's the other one of these I
right where's the other one of these I
only see
one I guess this is what you call do you
one I guess this is what you call do you
call fit observations from
yeah so every time you
yeah so every time you
call you Call fit observations and then
call you Call fit observations and then
suggestions and then failures so you're
suggestions and then failures so you're
literally refitting these models every
literally refitting these models every
single
time uh oh are they using the same model
time uh oh are they using the same model
hold on this could be
bad fit observations before
suggestions inputs in basic
suggestions inputs in basic
okay and
okay and
[Music]
[Music]
then output model. it
then output model. it
sample self out okay but this output
sample self out okay but this output
model this is the Gan process so we're
model this is the Gan process so we're
still
still
okay and then they can cat and then they
okay and then they can cat and then they
call get
model wait they
model wait they
call output model
call output model
dox the
hell and then they call get model
do it or
sample oh wait cuz then they make the
sample oh wait cuz then they make the
output model with
this is
this is
insane this is truly
deranged truly truly drin I'm going to
deranged truly truly drin I'm going to
be right back use a restroom and grab a
be right back use a restroom and grab a
drink be back in a couple minutes we'll
drink be back in a couple minutes we'll
keep on this this is
nuts
e
e
e
e
e e
okay let's see if I can figure this
okay let's see if I can figure this
thing
out self output model
out self output model
let's we're going to need the double for
this okay
this okay
so they call get followed by fit
right get surrogate
model wait no no they call self get
model wait no no they call self get
survey get surrogate
survey get surrogate
model
model
okay so what this does is this
okay so what this does is this
instantiates this whole
class I didn't miss anything here
class I didn't miss anything here
right no this is all it is this doesn't
right no this is all it is this doesn't
do anything else good
okay and then they call fit observations
this is where you create the
model wait what okay they make two
model wait what okay they make two
different models fine and then they call
different models fine and then they call
fit
observations wait fit no no hold on they
observations wait fit no no hold on they
call fit
observations okay fine this is what
observations okay fine this is what
creates the models and they use the data
creates the models and they use the data
for this
for this
so they use the data on the
so they use the data on the
fifth which of course they do
fine and then they fit the
suggestions and how do they fit the
suggestions and how do they fit the
suggestions
output
model where's output
model where's output
model get to
model get to
find output model
okay oh okay here so they fit
okay oh okay here so they fit
this wait real number
this wait real number
input okay yeah but this is inputs and
input okay yeah but this is inputs and
base so fine there's no transform on
base so fine there's no transform on
this they just use the raw they they use
this they just use the raw they they use
the uh the already
the uh the already
existing transform
space
fine and then they call get model okay
fine and then they call get model okay
this makes
this makes
sense and
then I don't know what the sampler is
output
predictions iter
predictions iter
sample
iter nuts
okay
it Forward set
D are you kidding
me you don't have to remake the model
me you don't have to remake the model
every time there is a set
every time there is a set
data
stupid
yeah it sample iteratively constructs a
yeah it sample iteratively constructs a
sample from the Gin process pest
sample from the Gin process pest
interior
what samples
lerate later query points can depend
lerate later query points can depend
upon earlier
upon earlier
ones quering is to be done by an
ones quering is to be done by an
optimization routine
which it
is samples
from Christ
almighty wait a second
made this code's breaking my freaking
head this is output model okay
self. output model
self. output model
equal this is a new
model what
okay so at least you're not passing the
okay so at least you're not passing the
sampler you're just using the sampler
here why are you doing this
we erate the
we erate the
real both mean and Thompson the output
real both mean and Thompson the output
model is used to estimate the outputs of
model is used to estimate the outputs of
the
the
suggestions this is necessary to
suggestions this is necessary to
do as we await the real outputs
wait
fit
suggestions find
inputs oh outstanding suggestions
wait
what this is the most confused I've been
what this is the most confused I've been
on one of
on one of
these
so they fit OB they
so they fit OB they
fit the past data right and then these
fit the past data right and then these
are data points for which they don't
are data points for which they don't
have any labels because you're waiting
have any labels because you're waiting
to score
to score
them and they're retraining the model on
them and they're retraining the model on
the suggestions that don't have
labels where where do you even get
labels where where do you even get
outstanding suggestions hold on
remember suggestion
number of outstanding
what in the
hell standing
isn't this whole thing
redundant do
values I I don't know why they're
values I I don't know why they're
storing these
separately but this doesn't make any
separately but this doesn't make any
sense
sense
because they just fit the model to the
because they just fit the model to the
success observations this is what you
success observations this is what you
want
want
right and then what they do from
right and then what they do from
there no target outputs are passed in
there no target outputs are passed in
and they have to be estimated using the
and they have to be estimated using the
circuit they're training a model on the
circuit they're training a model on the
outputs of the same model so they have a
outputs of the same model so they have a
model that they just fit with this okay
model that they just fit with this okay
and then they have some data that they
and then they have some data that they
don't have labeled with it so they use
don't have labeled with it so they use
this model to fit that
this model to fit that
data and then they train a new model on
both that's insane right
I love how my main use case for freaking
I love how my main use case for freaking
language models is checking whether I'm
language models is checking whether I'm
insane or the other researcher
insane
e
e e
yes
ucing the
ucing the
incentive to sample near them
again well that's not
true I think this is wrong
I don't even see where there would be
I don't even see where there would be
outstanding
suggestion yeah that assumes you have a
suggestion yeah that assumes you have a
good model and these models suck as well
good model and these models suck as well
we're ripping this thing out this is
insane so we don't need to do either of
insane so we don't need to do either of
these
jeez yeah this makes no sense in this
jeez yeah this makes no sense in this
context at
context at
all obervations
there the original
output model right here
output model right here
so fit Target yeah and then this is fit
so fit Target yeah and then this is fit
observations so all I have to
observations so all I have to
do these lines I don't know why people
do these lines I don't know why people
break up code that way these lines go
break up code that way these lines go
here these lines go
here these lines go
here now
success
observations wait for X in success
oh it's just input in my
case then they do Target to
surrogate which is this literally
surrogate which is this literally
this normalized Force
then get model will be uh different as
then get model will be uh different as
well
now what about the cost
model cost to log
model cost to log
cost this is just log right
for.log wait hold on cost to log cost
for.log wait hold on cost to log cost
they do log and then they transform so
they do log and then they transform so
yeah I did this
correctly so this is just normalized log
correctly so this is just normalized log
cost
and then inputs in basic is just
and then inputs in basic is just
pams that can go here this is
pams crazy man crazy
I actually want to now get rid of all of
I actually want to now get rid of all of
this cuz we don't need most of this and
this cuz we don't need most of this and
it's just cluttering
it's just cluttering
my my field of view
here
okay this now these can go at the bottom
here we do need torch
oops do these Colonels have pams
well we only have two models to make
or do we have
three oh we only have two and they use
three oh we only have two and they use
the same
the same
kernel hang on
okay let's
just put this up
just put this up
top we'll move this if we need
top we'll move this if we need
to getting rid of this and this for sure
do you have to create it with
do you have to create it with
data is that API just really awkward
you do that's so
silly
e
e
e
e
e e
okay
okay
that looks
better so now you create
GP need to pass it to
dim and scale
length which I don't even have for
now Rams real dims this is self. n for
now Rams real dims this is self. n for
Rams it's all this
is GP
is GP
opt then GP
cost cost
cost cost
op
op
GPU
oops L
oops L
op very good
here a
here a
second and now we get to
second and now we get to
do BP or is it was it self
dot
data okay
and they fit they train it here as
and they fit they train it here as
well so we'll
well so we'll
do
dot there's no dot fit is
there dot fit
this doesn't have
this doesn't have
that stupid
BP
util and we do the same thing
here okay set data
here okay set data
train set data train
train set data train
eval for
zerve surrogate
so self. output
model and the output space of that is
model and the output space of that is
already quanti
transformed actually this might be a
transformed actually this might be a
decent transform to use because this is
decent transform to use because this is
kind of what I was looking for in the
kind of what I was looking for in the
first
first
place
um yeah
would be good to be able to undo the
transform we'll handle
that but
that but
first we do
minized
minized
score
score
s GP
score
suggestions cost estimate
and
now do I even have to technically undo
now do I even have to technically undo
these I do have to undo the cost one
these I do have to undo the cost one
because I don't want to have cost on a
because I don't want to have cost on a
log
log
scale to cost they're just going to use
scale to cost they're just going to use
the stupid model
right yeah
cost
T let's just undo the operation
T let's just undo the operation
right normalize log
cost equals
normalized log
cost minus
divided
byv wait was is it
hold on this
is now you want to recover log cost
is now you want to recover log cost
STD so it's divided by Max minus men
and
then there we
then there we
go and then we do
go and then we do
cost
cost
test there we go undo the transform
now I think I got to look at my own code
this is some heavy duty
work digging through this code I did not
work digging through this code I did not
expect
expect
um I did not expect this today
do
our parito observations will be in basic
our parito observations will be in basic
space so this won't be an
issue and that'll give us a better
issue and that'll give us a better
estimate as
well you don't need this
well you don't need this
either yeah is going to get way
simpler so
r divided by cost estimate
Max
cost there's no actually don't even need
cost there's no actually don't even need
any of
any of
this perfect
then we
do I forgot about y
nearest I will have to do y nearest as
nearest I will have to do y nearest as
well I may as well do it now
burrito
costs uh I think we'll do that
costs uh I think we'll do that
after CU there's going to be some more
after CU there's going to be some more
stuff
stuff
there just want to get the basic version
there just want to get the basic version
of it for
you need to apply the clipping above
you need to apply the clipping above
here
here
so hold
on okay we'll clip
here and
here and
then these ones are already
fine this one has to be clipped
that's the basic algorithm I
think normal
so we'll clean this little bit up but I
so we'll clean this little bit up but I
mean even if I have to add a little bit
mean even if I have to add a little bit
back this is replacing like thousand
back this is replacing like thousand
lines of code this little snippet
lines of code this little snippet
here so I think that's pretty good
I guess we just try to make it work
now it's
now it's
4:45 I'm going to take a
4:45 I'm going to take a
second my brain hurts from that
second my brain hurts from that
jeez that was a lot of logic to
jeez that was a lot of logic to
unwrap so we'll have to debug this a
unwrap so we'll have to debug this a
little bit I'm
sure once I get this working
sure once I get this working
we will have a dramatically simplified
we will have a dramatically simplified
version of
version of
carbs um not simplified algorithm it's
carbs um not simplified algorithm it's
our version I think we add like an extra
our version I think we add like an extra
five or 10 lines for the one term I
five or 10 lines for the one term I
didn't compute yet but this is 259 up
didn't compute yet but this is 259 up
to yeah it's like 30 lines of code
to yeah it's like 30 lines of code
instead
instead
of I there was at least like five or 600
of I there was at least like five or 600
lines devoted to this with an additional
lines devoted to this with an additional
600 lines of useless dependencies
this min max scale thing is interesting
this min max scale thing is interesting
actually I'm kind of interested to see
actually I'm kind of interested to see
um we might want to use that for our
um we might want to use that for our
parameter spaces
actually okay
so we're just going to speed debug
this search
centers what the heck is this
duplicated
s better Direction sign
quantiles must be 0 to one
okay so apparently
BP
score no attribute GP ah
in is not callable
uhoh
well this didn't do what I
well this didn't do what I
wanted let me
say
say
accumulate let me go look at the
accumulate let me go look at the
reference for this
I guess it's a me special that I had to
I guess it's a me special that I had to
reimplement this but like come on this
reimplement this but like come on this
code is so
bad numpy maximum
accumulate this is already done here for
accumulate this is already done here for
us I
think D
fit ah you have to apply this I see
interpolate in one
let me just
I want to make sure I'm not
I want to make sure I'm not
misunderstanding
this was in their paper I believe
okay
okay
so parameter free method
so parameter free method
quantile
transform so what I'm going to do here
transform so what I'm going to do here
in order to figure this mess
out um
going I do
going I do
this Target to
surrogate
surrogate
okay this is your X I can see that this
okay this is your X I can see that this
is looks to be raw
is looks to be raw
cost this looks to be raw cost to me yep
cost this looks to be raw cost to me yep
raw
raw
cost and
okay so this is
okay so this is
Benning I think this is binning yeah you
Benning I think this is binning yeah you
can see it is binning
this is screwed up though because
this is screwed up though because
look
five e
I guess it just gets mapped
I guess it just gets mapped
to doesn't just get mapped to a standard
to doesn't just get mapped to a standard
normal though
it's very
it's very
weird box
and for transer match the output
and for transer match the output
distribution
transform data so it more closely
transform data so it more closely
follows a normal distribution
when it clearly
doesn't does that make any sense
wait no this is score okay no no this is
wait no this is score okay no no this is
valid this is
score well score still shouldn't follow
score well score still shouldn't follow
a
a
normal distribution
confusing math coupled with confusing
confusing math coupled with confusing
code
actually shifted to follow a normal
okay e
why do you have to
interpolate e Earth
in
in
yes impure IAL cumulative
yes impure IAL cumulative
probability for any new data
probability for any new data
point we want to know its empirical
point we want to know its empirical
cumulative
cumulative
probability the proportion of data below
X you can use numpy inter turp to
X you can use numpy inter turp to
determine this probability
map the cumulative
probability inverse
okay so that's actually not that
bad e
interesting I think this is still worth
interesting I think this is still worth
doing though because this is four lines
doing though because this is four lines
of code compared to the 600 from the
of code compared to the 600 from the
freaking dependency who knows what
freaking dependency who knows what
that's
that's
doing for
wait length of
wait length of
quantile that's just
Q so you have your quantiles
this is just quantiles
confusing stuff
C
let's see about
let's see about
this ah it's broke my
terminal does n not have if I swear if
terminal does n not have if I swear if
GPD hallucinated this whole function
side
side
pie well whatever
noxious
okay this is correct right we got 50
points and then here are normalized
points and then here are normalized
scores why the hell are some of these
Infinity that's
dumb we'll fix that in
clipping that's
clipping that's
where this stuff has been St for years
where this stuff has been St for years
it's straight up
hallucinating that function did not
hallucinating that function did not
exist and never existed
okay that's better
ah oh it just needs to be n obviously
yeah try that
yeah try that
on claw I wonder what it gives I mean
on claw I wonder what it gives I mean
it's a whole long
it's a whole long
conversation i' I use both of them you
conversation i' I use both of them you
know because Claude has the uh PDF you
know because Claude has the uh PDF you
can drop in PDFs you can't drop in PDFs
can drop in PDFs you can't drop in PDFs
on the new open AI models
and then right here we get the same
and then right here we get the same
thing so we
thing so we
get
Rams
Rams
nope not yet
m
e
e
e e
LMS don't really read the
inputs you know what we call that right
inputs you know what we call that right
kind of freaking useless
injects the files into the
context I mean it seems like it at least
context I mean it seems like it at least
kind of read some stuff like it'll
kind of read some stuff like it'll
reference formulas and
reference formulas and
things it definitely doesn't read it
things it definitely doesn't read it
closely but
um
e
e e
[Music]
[Music]
uh where is this
that's weird
where did this come from
again
again
[Music]
suggests look at that
it
it
runs looks like it's a bit faster than
before I'll be amazed if it's any good
before I'll be amazed if it's any good
on the first try but
on the first try but
um yeah there it goes predicting 200
um yeah there it goes predicting 200
cost
me actually just Commit This real quick
350 lines in the whole file
so I don't know if the samples are any
so I don't know if the samples are any
good but the predictive model is
good but the predictive model is
actually correct
now for the most part here the score and
now for the most part here the score and
the cost should be equal if your prams
the cost should be equal if your prams
are
optimal e
no idea how many points I ran this
no idea how many points I ran this
with might take
with might take
forever
forever
um you think in the meantime here
I do want to see
my will there be performance
my will there be performance
loss when running all environments that
loss when running all environments that
ially compared to using puffer Li
multiprocessing they can't be will they
multiprocessing they can't be will they
be performance
be performance
loss when
loss when
running my environment share large
running my environment share large
readon lookup tables so they can't be
readon lookup tables so they can't be
cloned
cloned
naively so most of our experiments we
naively so most of our experiments we
use like most of our new environments
use like most of our new environments
only use one core because the
only use one core because the
environments are just so fast that we we
environments are just so fast that we we
can run 4,000 copies uh and we can step
can run 4,000 copies uh and we can step
4,000 environments and the model won't
4,000 environments and the model won't
even notice it takes virtually no time
even notice it takes virtually no time
uh
uh
you'll there will it will if your
you'll there will it will if your
environment is slow then yes it will be
environment is slow then yes it will be
slower
slower
um so what you can do
um so what you can do
potentially and we do this as well for
potentially and we do this as well for
things that share uh that have to share
things that share uh that have to share
a large amount of data can you make like
a large amount of data can you make like
each process have a large group of those
each process have a large group of those
environments so one thing you can do
environments so one thing you can do
right is like each core can have a
right is like each core can have a
thousand copies of the environment and
thousand copies of the environment and
you have eight cores and then On Any
you have eight cores and then On Any
Given step you use four cores worth of
Given step you use four cores worth of
data that gives you 2x
data that gives you 2x
asynchronicity it gives you
asynchronicity it gives you
multiprocessing and that can work very
multiprocessing and that can work very
well
also we do we do have examples on using
also we do we do have examples on using
shared assets for C
environments same thing would work for
environments same thing would work for
python environments but if you're
python environments but if you're
running for Loops in Python things are
running for Loops in Python things are
probably
slow e
R to
scores
e
e e
which environment mobile pathf finding
which environment mobile pathf finding
works that wasn't scrapped as far as I
works that wasn't scrapped as far as I
know was it oh yeah I guess it was uh
know was it oh yeah I guess it was uh
here the current thing I just have
here the current thing I just have
uh I mean I literally do this in my
uh I mean I literally do this in my
latest
latest
thing if you just
thing if you just
check I'll link it to you
okay so this is my new procedural maze
okay so this is my new procedural maze
environment and it's got a shared level
environment and it's got a shared level
buffer and we sample from a shared level
buffer and we sample from a shared level
buffer
right
here this is the current Branch I'm
here this is the current Branch I'm
working on I me you can see though it's
working on I me you can see though it's
like it's not particularly complicated
like it's not particularly complicated
technically all of the environments have
technically all of the environments have
shared data because of the log buffer
shared data because of the log buffer
right it's the the same exact idea like
right it's the the same exact idea like
we pass the same log buffer into all of
we pass the same log buffer into all of
the different
environments right so they technically
environments right so they technically
they all
they all
do it's How We Do logs
cleanly hello how's it going I I just
cleanly hello how's it going I I just
realized I forgot to reply to my buddy
y r to
points e
okay now we got our Pito scores
ppcx so cost
minus
minus
one
normalize I want normalized parito cost
so this is cost
man this is actually unnormalized so
man this is actually unnormalized so
this is parito clost man
well miners no I need purito scores
stff all right we'll see how that goes
stff all right we'll see how that goes
is the thing still running nope we got
is the thing still running nope we got
it Neo carbs Neo
V2 holy
V2 holy
hell what
um hey guys I
uh
uh
oh I think we're going to
oh I think we're going to
solve I think we're going to solve hyper
solve I think we're going to solve hyper
parameter sweeps within the next couple
parameter sweeps within the next couple
weeks here
are you kidding
me the blue points are random samples
me the blue points are random samples
all right and then the red ones are from
all right and then the red ones are from
later on so it's just beines along the
optimal yeah
optimal yeah
okay
Jesus this is without the
Jesus this is without the
math this is with the math now it's not
math this is with the math now it's not
traveling fast enough we will get to
traveling fast enough we will get to
that but like what the
hell that's insane
that's actually
insane I'm glad I got up and did this
insane I'm glad I got up and did this
today I'm still blazing
today I'm still blazing
around have ample time for that in the
evening
for
e
e e
okay this seems to work
hey
I don't know if what I'm doing makes any
I don't know if what I'm doing makes any
sense yet hold
on we're going to read through this code
on we're going to read through this code
while this runs assuming that this
while this runs assuming that this
runs yep okay
um let me make sure that I did something
um let me make sure that I did something
that makes some sense here
that makes some sense here
so these come from the
successes no this is wrong
yeah because here with normalize SP
main they should just be normalized
main they should just be normalized
scores
yeah let's correct
yeah let's correct
this thing I did didn't make any
sense variable names to clean up and all
sense variable names to clean up and all
sorts of things yes but
sorts of things yes but
um we shall
see
for e
so these are two conservative I can
tell I wonder why they're too
conservative
for
e e
yeah so this has it looks like this has
yeah so this has it looks like this has
had the opposite effect
this is so
crazy what going on in
DMs e
look at
look at
this so our base
one need to go faster not
slower I think why this could be the
slower I think why this could be the
case normalize near burito score
do I have these in the same
space think so
oh hold
on yeah so this is this term is wrong as
on yeah so this is this term is wrong as
all so yeah it's going to mess it up
all so yeah it's going to mess it up
because this term is wrong
right e
be costs
like this and then what's our current
like this and then what's our current
look
like yeah okay
garbage this is where's it cost
me
for e
so the score prediction is in Norm space
so the score prediction is in Norm space
so we don't know how accurate it
so we don't know how accurate it
is um but judging by the cost prediction
is um but judging by the cost prediction
it should be very
accurate now this is still driving us
accurate now this is still driving us
down towards the bottom for some reason
have to figure that
out why would this drive it down
we'll wait for the cost to like kind of
we'll wait for the cost to like kind of
match before we
match before we
uh we look at it
uh we'll do one
more okay
lucky okay so it takes like 10 15
lucky okay so it takes like 10 15
samples to match up is not bad
use a restroom real quick I'll be right
back
e
e e
okay
D it's one crazy
algorithm yeah good
normalize and nearest
I don't think that should be possible
I don't think that should be possible
right let me see if I have a math
error normalized nearest parito
error normalized nearest parito
form it's going to be
cost wa
normalized oh no that is possible Right
hi new to ml
hi new to ml
welcome this is
welcome this is
currently attempting
currently attempting
to design a really really good
to design a really really good
hyperparameter optimization
algorithm and waiting through tons and
algorithm and waiting through tons and
tons of code and math in order to do so
what's going on this
what's going on this
is a complete
is a complete
deconstruction of the
deconstruction of the
carbs hyperparameter optimization
carbs hyperparameter optimization
algorithm for reinforcement
algorithm for reinforcement
learning uh complete rewrite of the code
learning uh complete rewrite of the code
that was open sourced for
that was open sourced for
this uh and a whole bunch of
this uh and a whole bunch of
mathematical optimizations on the
mathematical optimizations on the
original followed by a ton of synthetic
original followed by a ton of synthetic
testing and a bunch of testing on real
testing and a bunch of testing on real
RL
environments the goal here is that we
environments the goal here is that we
just end up with a really really good
just end up with a really really good
hyperparameter tuner for reinforcement
hyperparameter tuner for reinforcement
learning I think that's kind of the
learning I think that's kind of the
highest leverage thing in RL right now
highest leverage thing in RL right now
if we do this it will make all the
if we do this it will make all the
research that I do much
easier I got to run to dinner in a few
easier I got to run to dinner in a few
as well i' sort of been on here for the
as well i' sort of been on here for the
past I don't know I was on this morning
past I don't know I was on this morning
I've been on like the last 3 4 hours I
I've been on like the last 3 4 hours I
think but I'd like to at least have some
think but I'd like to at least have some
idea of what's going on here why is this
idea of what's going on here why is this
particular modification not working
sure so my theory
here the way that this works is it looks
here the way that this works is it looks
for the nearest lower cost optimal
point and then it takes the difference
point and then it takes the difference
between the estimated score of this
between the estimated score of this
proposed candidate
proposed candidate
point and the known score of that
point and the known score of that
nearest paredo
nearest paredo
Point uh in other
Point uh in other
words that's a whole bunch of fancy
jargon to mean something very
simple so if you have this you have some
simple so if you have this you have some
uh some
points and you pick a sample let's say
points and you pick a sample let's say
that you're going to choose a sample
that you're going to choose a sample
Point that's right
Point that's right
here then it just looks
at it looks at this distance
so this point to the left it looks at
so this point to the left it looks at
this distance to see how good this one
this distance to see how good this one
is so the idea is once you fill these in
is so the idea is once you fill these in
right so once you fill in the best set
right so once you fill in the best set
of points you can then there's not
of points you can then there's not
really any way to put a new Point that's
really any way to put a new Point that's
going to like give you a substantial
going to like give you a substantial
increment so then what you have to do is
increment so then what you have to do is
you go over here you know and you try
you go over here you know and you try
this so pushes you to explore
more that's what this is trying to do
more that's what this is trying to do
but it's for some reason it's doing the
but it's for some reason it's doing the
opposite I don't think I just flipped a
opposite I don't think I just flipped a
negative sign hardy hardy
negative sign hardy hardy
heart
um see this is obnoxious because
this looks
better what if I remove the cost mean
term oh wait hold on well I can see
term oh wait hold on well I can see
already that it's just it is doing
it oh you know what it might be
let me see if this works
let me see if this works
first if this works I think it's the
first if this works I think it's the
quanti
quanti
transform doesn't seem to be working
transform doesn't seem to be working
though
I wonder if it's the
clipping hang on normalize forine
clipping hang on normalize forine
normalize nearest parito
score normalized forine comes out of
score normalized forine comes out of
this
oh don't need to W any
oh don't need to W any
longer just took a second to figure it
out how many samples was that 20ish
it's crazy that it can jump that
much I guess the model just has to had
much I guess the model just has to had
to get good enough and then it went and
to get good enough and then it went and
selected
selected
um one of the other random
samples now the thing is that this
samples now the thing is that this
should fill in the front it shouldn't
should fill in the front it shouldn't
just chill out at
200 so if it's just going to chill out
200 so if it's just going to chill out
at 200 then that's not good
either push the latest
version getting hungry here
oh wait is
it okay there is there is a glitch
here is
there no there shouldn't be a glitch
there no there shouldn't be a glitch
anymore actually cuz it's filled in
now for
it might be the quantal transform
we'll have to check
that I'm happy with the progress here
that I'm happy with the progress here
though
there's a lot of good progress
today is the nearby scort at least
today is the nearby scort at least
decreasing over
decreasing over
time yes it
is this is a resample I
assume yeah
so what knows that this is getting less
so what knows that this is getting less
appealing I
think but there will still have to be
think but there will still have to be
some fixes to
this I'm going to have to think about
this I'm going to have to think about
how
I think the quanti transform is going to
I think the quanti transform is going to
mess
up it's going to mess up the cost
penalty I think that's
likely you need something that's at
likely you need something that's at
least linearly better like a linear
least linearly better like a linear
increase in cost I mean in score to
increase in cost I mean in score to
justify the cost
and we'll look at
it okay I'm going to go get food
it okay I'm going to go get food
um was
um was
exhausting so I'm going to get some food
exhausting so I'm going to get some food
check some emails and then just chill
check some emails and then just chill
out for the rest of the evening most
out for the rest of the evening most
likely be back tomorrow think I've got
likely be back tomorrow think I've got
some other stuff to work on other than
some other stuff to work on other than
this tomorrow really want to finish this
this tomorrow really want to finish this
though this is going to be so so good
though this is going to be so so good
when it's
when it's
done when I get this thing working
done when I get this thing working
properly like it's going to be really
properly like it's going to be really
good but in the time being thanks for
good but in the time being thanks for
tuning in if you're interested in
tuning in if you're interested in
following all this work everything you
following all this work everything you
see here is free and open source can
see here is free and open source can
check out puffer doai got all of our
check out puffer doai got all of our
demos right here on Ocean and play all
demos right here on Ocean and play all
of these online as well very simple up
of these online as well very simple up
to very
to very
complex if you're looking to get into RL
complex if you're looking to get into RL
looking for Cutting Edge RL improvements
looking for Cutting Edge RL improvements
got a whole bunch of stuff on our blog
got a whole bunch of stuff on our blog
also got a community Discord you can
also got a community Discord you can
start the repository to help us out that
start the repository to help us out that
really really helps and if you're
really really helps and if you're
looking for even more content you can
looking for even more content you can
follow me on X I post a ton of RL stuff
follow me on X I post a ton of RL stuff
including some articles you can't find
including some articles you can't find
anywhere else so thank you and
