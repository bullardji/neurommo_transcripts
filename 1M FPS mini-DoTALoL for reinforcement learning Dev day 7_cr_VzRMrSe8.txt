Kind: captions
Language: en
I think we're back
on this is so obnoxious
I think the stream is back up
super obnoxious
I think we're
I think we're
back it's going to take uh it a second
back it's going to take uh it a second
to refresh on all the platforms before I
to refresh on all the platforms before I
continue with this I'm going to take um
continue with this I'm going to take um
I'm going to try tonight after the
I'm going to try tonight after the
stream maybe I'll I'll stop like 20 30
stream maybe I'll I'll stop like 20 30
minutes early uh and then I will uh I'll
minutes early uh and then I will uh I'll
like update OBS and try some stuff and
like update OBS and try some stuff and
hopefully that'll be
hopefully that'll be
better um I
better um I
this is not happening consistently but
this is not happening consistently but
it's been happening enough that this is
it's been happening enough that this is
like really obnoxious because it cuts my
like really obnoxious because it cuts my
vods into chunks as well so like I don't
vods into chunks as well so like I don't
get like the full day VOD just Auto
get like the full day VOD just Auto
posted on all the
posted on all the
platforms really obnoxious and then it
platforms really obnoxious and then it
like spams my uh my X feed as well with
like spams my uh my X feed as well with
like post of the
reconnects
reconnects
so whatever I'm going to continue with
so whatever I'm going to continue with
this
this
with this like walkthrough of stuff
with this like walkthrough of stuff
because this is partially for my own
because this is partially for my own
thoughts and hopefully people catch the
thoughts and hopefully people catch the
majority of it and ask if uh if they
majority of it and ask if uh if they
miss part of it but basically if you're
miss part of it but basically if you're
in this chunk here if you split the map
in this chunk here if you split the map
into chunks and you're in this chunk
into chunks and you're in this chunk
then all you need to do in order to find
then all you need to do in order to find
uh every possible agent that you need to
uh every possible agent that you need to
be able to see is you look through the
be able to see is you look through the
entities and the surrounding
chunks as well as in your own chunk and
chunks as well as in your own chunk and
this is because like if you're at the
this is because like if you're at the
corner over here right you still need to
corner over here right you still need to
be able to see uh you need to be able to
be able to see uh you need to be able to
see potentially this
see potentially this
far and then you do distance checks and
far and then you do distance checks and
filter based on
filter based on
that so this is how the algorithm is
that so this is how the algorithm is
supposed to
work uh and if it by the way if the
work uh and if it by the way if the
connection drops again I'm just going to
connection drops again I'm just going to
take however long it does to just update
take however long it does to just update
OBS immediately if not I'll just stay on
OBS immediately if not I'll just stay on
and until we're done
and until we're done
um so
there are a few issues with this though
there are a few issues with this though
especially
especially
because I hate to say it but this is
because I hate to say it but this is
kind of where like we start to need
kind of where like we start to need
C++ uh data structures which I didn't
C++ uh data structures which I didn't
want to include in syon I do have access
want to include in syon I do have access
to them I didn't want to include
to them I didn't want to include
them
them
but the reason for
but the reason for
this uh is that let's say that I look
this uh is that let's say that I look
into this chunk here right well this
Chunk we kind of need a list of like
Chunk we kind of need a list of like
agent right agent
agent right agent
One agent
two and this
two and this
list we need to get into this for this
list we need to get into this for this
list we we need o of
list we we need o of
one
access not look
access not look
up we need o of one add and delete is
up we need o of one add and delete is
what we need for this
what we need for this
right yeah so we need o of
right yeah so we need o of
one actually we
one actually we
need I don't know why I wrote it like
need I don't know why I wrote it like
that we need o of one look up
[Music]
[Music]
add and
add and
delete is what we
delete is what we
need uh we can do this
need uh we can do this
so if this structure
so if this structure
is so we use a linked
list and this is actually a 2X it's a
list and this is actually a 2X it's a
double link
list then this gives
list then this gives
us add and
delete but not look
up so then in order to get look
up so then in order to get look
up we need to
up we need to
store we would need to store the pointer
store we would need to store the pointer
to the entry in the
to the entry in the
list we need like agent
we would need like node uh we need to
we would need like node uh we need to
know the node index or
chunk IX maybe and then we need to
know oh this is now on my camera hold
on so we need to know the chunk index
on so we need to know the chunk index
and we also need a
and we also need a
pointer to the
pointer to the
node and the reason for that
node and the reason for that
is like think about it when you move the
is like think about it when you move the
agent from one from one tile to the next
agent from one from one tile to the next
we basically what we need to do is we
we basically what we need to do is we
need to look up whether we're moving at
need to look up whether we're moving at
chunks so we look up our current chunk
chunks so we look up our current chunk
index we look up the index of the chunk
index we look up the index of the chunk
that we're moving to that's just
that we're moving to that's just
math and then if we do move to a
math and then if we do move to a
different chunk then what we need to be
different chunk then what we need to be
able to do is O of one look it up in
able to do is O of one look it up in
that list which if we just have a
that list which if we just have a
pointer to the node in the list that
pointer to the node in the list that
gives us it and if it's a doubly linked
gives us it and if it's a doubly linked
list then we can snip it out of the list
list then we can snip it out of the list
in O of
one this works it's just really freaking
complicated to do this correctly
because this is now also
like if you're doing this with the link
like if you're doing this with the link
list then you also have dynamic memory
list then you also have dynamic memory
allocations
potentially you don't
want like this is totally doable it's
want like this is totally doable it's
just is it worth it
I'm trying to think how much this buys
us this still doesn't trivialize stuff
us this still doesn't trivialize stuff
right even with this fancy data
right even with this fancy data
structure
structure
structure
freaking this web UI is
bad this still doesn't even if we have
bad this still doesn't even if we have
this it doesn't trivialize it because
this it doesn't trivialize it because
you'd still want to like filter what
you'd still want to like filter what
agents are near you when what agents are
agents are near you when what agents are
far away
far away
right which is still going to be slow
you're also doing this chunk lookup
you're also doing this chunk lookup
stuff now which
stuff now which
means instead of just going through a
means instead of just going through a
simple array you're going through linked
lists which we're going to assume that
lists which we're going to assume that
has a decent constant Factor on it as
has a decent constant Factor on it as
well
well
right you're doing iteration through
right you're doing iteration through
nine linked
lists I think that in principle this
lists I think that in principle this
makes sense and this could work and this
makes sense and this could work and this
would make this essentially would solve
would make this essentially would solve
the problem of having an engine that is
the problem of having an engine that is
capable of doing
capable of doing
um really good entity based
learning this would solve that
problem this ain't trivial
though I wonder if there there's like
though I wonder if there there's like
some existing C++ library or something
some existing C++ library or something
that does
this there's probably like a C++ like
this there's probably like a C++ like
chunk system I don't know if there's a
chunk system I don't know if there's a
one that's as high perf as I would want
one that's as high perf as I would want
though you could totally just like get
though you could totally just like get
one of these things though and then plug
one of these things though and then plug
it into any game you
it into any game you
want cuz this is fully
want cuz this is fully
generic this is like completely
generic this is like completely
generic is there like a C++ chunk
implementation like
map I don't know what it would be uh
map I don't know what it would be uh
that you'd look
for but that's totally something that I
for but that's totally something that I
could
could
build um that would make this type of
build um that would make this type of
stuff work
it' be a little tricky as well because
it' be a little tricky as well because
you need to do like Vision stuff maybe
you need to do like Vision stuff maybe
well maybe
not I think this is a fun exercise and I
not I think this is a fun exercise and I
think that this actually gives us a
think that this actually gives us a
valid solution to like doing Ultra fast
valid solution to like doing Ultra fast
entity based
processing but this would need a much
processing but this would need a much
more compelling use case I think than
more compelling use case I think than
this
yeah it is somewhat annoying that the
yeah it is somewhat annoying that the
vision range is so limited at the moment
vision range is so limited at the moment
though
right only five tiles of vision is
right only five tiles of vision is
really not a lot to work
really not a lot to work
with like five in in any
with like five in in any
direction I think that's what we have it
direction I think that's what we have it
set to
which is I think what we did with snake
which is I think what we did with snake
that we figured out we could handle we
that we figured out we could handle we
could comfortably handle
that I mean that basically just gives
that I mean that basically just gives
you local obstacle detection
right I think it'll still be enough to
right I think it'll still be enough to
give you interesting training results
which is what we're
after if we were like 10x off of the
after if we were like 10x off of the
performance
performance
goal I would probably try to do
this because like this is the type of
this because like this is the type of
thing that gets you your your
thing that gets you your your
performance it's very hard to implement
performance it's very hard to implement
something like this but when you do it
something like this but when you do it
right this is what gives you your perf
right this is what gives you your perf
goal but I think for what I have now I
goal but I think for what I have now I
probably can get
probably can get
there more
easily with the current structure and a
easily with the current structure and a
few
few
changes though it does mean I'm probably
changes though it does mean I'm probably
going to have to copy paste some code
going to have to copy paste some code
because we're going to have to get rid
because we're going to have to get rid
of this double iteration thing that's
of this double iteration thing that's
going
on some limitations for
on some limitations for
sure but I think this will be good
sure but I think this will be good
enough if I tried to do this thing this
enough if I tried to do this thing this
would
would
be this would be potentially multiple
be this would be potentially multiple
additional days of
additional days of
work for this and
work for this and
uh I'm going to keep this in mind
uh I'm going to keep this in mind
though because this is a good Standalone
though because this is a good Standalone
project right there this is like this is
project right there this is like this is
the type of thing that you would
the type of thing that you would
actually do in Native uh Native C or C++
actually do in Native uh Native C or C++
by the way like this thing here this is
by the way like this thing here this is
what you would have you would implement
what you would have you would implement
this in C or C++ and then you would plug
this in C or C++ and then you would plug
it into every single like game sim that
it into every single like game sim that
you write thereafter and you'd have like
you write thereafter and you'd have like
really good entity based
really good entity based
processing uh lots of games have
processing uh lots of games have
something like
something like
this lots of games have something like
this lots of games have something like
this with the chunk
system but I would wager that the vast
system but I would wager that the vast
vast majority of them are not as
vast majority of them are not as
optimized as I would need it to be for
optimized as I would need it to be for
this like you need a really optimal
this like you need a really optimal
chunk
chunk
implementation let's take a look at what
implementation let's take a look at what
we have going on
we have going on
currently oh and I mentioned this before
currently oh and I mentioned this before
folks but if the stream goes down again
folks but if the stream goes down again
I'm just going to take however long it
I'm just going to take however long it
takes to update OBS and see if that
takes to update OBS and see if that
fixes it because the internet I think is
fixes it because the internet I think is
blipping but the internet's blipping for
blipping but the internet's blipping for
like a second and then OBS is blipping
like a second and then OBS is blipping
for two minutes
for two minutes
so I don't know what's
wrong
okay SE MOA
PX uh right we were looking at the HTML
PX uh right we were looking at the HTML
version Let's do let's go back to
that so
the plan right now so I can do this in a
the plan right now so I can do this in a
reasonable time
frame I actually should probably go make
frame I actually should probably go make
my shake
my shake
first so I'm going to go outline I'm
first so I'm going to go outline I'm
going to outline the plan take the three
going to outline the plan take the three
minutes or whatever to make myself a
minutes or whatever to make myself a
shake and then we're going to implement
shake and then we're going to implement
it we're going to do a little bit of
it we're going to do a little bit of
caching I'll go through the plan we're
caching I'll go through the plan we're
going to do that it should take about an
going to do that it should take about an
hour and then we'll have you know an
hour and then we'll have you know an
hour hour and a half maybe two hours
hour hour and a half maybe two hours
left for uh reinforcement learning
left for uh reinforcement learning
policies tonight which is about on track
policies tonight which is about on track
with what I wanted that where I wanted
with what I wanted that where I wanted
the project to be anyways so this is the
the project to be anyways so this is the
performance critical piece of code uh
performance critical piece of code uh
one very very minor optimization is I'm
one very very minor optimization is I'm
going to get rid of this
going to get rid of this
addition right here by uh doing this as
addition right here by uh doing this as
like y minus radius y Plus radius so on
like y minus radius y Plus radius so on
and so forth so that we don't have the
and so forth so that we don't have the
addition in the Inner
addition in the Inner
Loop then I'm going to
Loop then I'm going to
do uh is there anything else that can be
do uh is there anything else that can be
pre-computed
pre-computed
here no so I'm going to do that let me
here no so I'm going to do that let me
see if there's any other places for
see if there's any other places for
obvious
obvious
optimization into player y player
X this is fully discreet so I'm going to
X this is fully discreet so I'm going to
allow you to pass
allow you to pass
in no this is
in no this is
fine yeah so
I'm going to move this target type
I'm going to move this target type
down because you don't need it
immediately I'm going to maybe reorder
immediately I'm going to maybe reorder
these a little
these a little
bit in terms of how common they
bit in terms of how common they
are we're going to see what we get out
are we're going to see what we get out
of
of
that and then what I'm going to do and
that and then what I'm going to do and
this is the part that pains me a little
this is the part that pains me a little
bit but I don't think that we can have
bit but I don't think that we can have
this structured the way it is I think
this structured the way it is I think
I'm going to make a code commit first
I'm going to make a code commit first
before I mess with it because uh this
before I mess with it because uh this
could potentially just screw up a bunch
could potentially just screw up a bunch
of the nice code that we have here
of the nice code that we have here
but this like scanning idea was
but this like scanning idea was
cute but the way that we're scanning
cute but the way that we're scanning
doesn't allow us to Cache anyways
doesn't allow us to Cache anyways
without making a massive data
structure well hold on maybe it does
structure well hold on maybe it does
maybe it
does what if I change
does what if I change
this what if I made those optimizations
this what if I made those optimizations
I just said
and I just made it so that every player
and I just made it so that every player
has its own scan
has its own scan
map or every entity has its own scan
map that's a decent amount of
map that's a decent amount of
data not a huge amount though not too
data not a huge amount though not too
bad if we give every player its own scan
bad if we give every player its own scan
map then what that means is
map then what that means is
that scan map is automatically cached
that scan map is automatically cached
until you call this function
until you call this function
again are you going to do scan map and
again are you going to do scan map and
then intersect with entity
then intersect with entity
positions uh the scan function does give
positions uh the scan function does give
you entity POS like this does give you
you entity POS like this does give you
that
that
already because it gives you all the
already because it gives you all the
agents that are within a chubby Chev
agents that are within a chubby Chev
square around you so will what we were
square around you so will what we were
doing before is I was looking at this uh
doing before is I was looking at this uh
I found there is a way to do a really
I found there is a way to do a really
hyper efficient chunk system uh that
hyper efficient chunk system uh that
would then scale to like it would let
would then scale to like it would let
you scale to much larger Vision ranges
you scale to much larger Vision ranges
and um it would really it would let you
and um it would really it would let you
scale to much larger Vision ranges is
scale to much larger Vision ranges is
the main thing and it would be really
the main thing and it would be really
snazzy but I think it would be like
snazzy but I think it would be like
multiple days of work and it would be
multiple days of work and it would be
the type of thing that I would probably
the type of thing that I would probably
have to build in like C or C++ native
have to build in like C or C++ native
because it's got memory allocations
because it's got memory allocations
maybe I could cize it but it would have
maybe I could cize it but it would have
to be like a standalone module that's
to be like a standalone module that's
perf tested alone and then integrated
perf tested alone and then integrated
into this as like a like an engine
into this as like a like an engine
add-on it's not
add-on it's not
simple it's it's just a chunking system
simple it's it's just a chunking system
but it has to be an ultra high
but it has to be an ultra high
performance chunking system like you
performance chunking system like you
need a data structure that has all of
need a data structure that has all of
One everything and the constant Factor
One everything and the constant Factor
on that matters a lot so it's a little
on that matters a lot so it's a little
bit
bit
rough but what I I was kind of looking
rough but what I I was kind of looking
at is I think that the easier way to hit
at is I think that the easier way to hit
a million steps per second right now uh
a million steps per second right now uh
we can hit a million steps per second
we can hit a million steps per second
per core right now if I think all I have
per core right now if I think all I have
to
to
do is there are a couple obvious
do is there are a couple obvious
optimizations on this that'll get me
optimizations on this that'll get me
like 5 10% more out of this function and
like 5 10% more out of this function and
then I think all I have to do is um if I
then I think all I have to do is um if I
make it so that every player has their
make it so that every player has their
own cash of
own cash of
scanning
scanning
then I make them I I make call this scan
then I make them I I make call this scan
AOE function like the creeps can call
AOE function like the creeps can call
this once every uh once per second
this once every uh once per second
instead of five times per
instead of five times per
second and that is a 80% reduction in
second and that is a 80% reduction in
the bottleneck step it should be at
the bottleneck step it should be at
least like um a 2X performance gain
least like um a 2X performance gain
overall and then that gives me
overall and then that gives me
immediately that gives me my 1 million
immediately that gives me my 1 million
SPS single
SPS single
thread without even doing anything else
thread without even doing anything else
and that's actually what DOTA does I'm
and that's actually what DOTA does I'm
pretty sure the DOTA creeps don't scan
pretty sure the DOTA creeps don't scan
every frame they Scan they scan like
every frame they Scan they scan like
once per second
once per second
for targeting
purposes so I'm pretty sure that will
purposes so I'm pretty sure that will
just do it for
us why does the step function say 4
us why does the step function say 4
seconds total time
oh that's fine
oh that's fine
yeah
yeah
so we're at 189,000 steps per second
so we're at 189,000 steps per second
right
now the step function looks super slow
now the step function looks super slow
but I think that this is just function
but I think that this is just function
call
call
Overhead because it's just calling [ __ ]
Overhead because it's just calling [ __ ]
tons of internal
tons of internal
functions um this because this has been
functions um this because this has been
lower ratio
lower ratio
before the creep Ai and neutral AI are
before the creep Ai and neutral AI are
dominant ated by which are the the main
dominant ated by which are the the main
sources these are dominated by the scan
sources these are dominated by the scan
AOE
AOE
function so I think if I just make the
function so I think if I just make the
scan AOE function 5x Faster by caching
scan AOE function 5x Faster by caching
80% of
80% of
it I think we just get our we get this
it I think we just get our we get this
to like say 400 or
to like say 400 or
500k uh and this is on my local desktop
500k uh and this is on my local desktop
which is at least or at most twice as uh
which is at least or at most twice as uh
half the speed of the other
half the speed of the other
one uh of the like the main
one uh of the like the main
machine so that's what we're going to do
machine so that's what we're going to do
we're going to make those
we're going to make those
optimizations and uh we're going
optimizations and uh we're going
to get our million steps per second and
to get our million steps per second and
then we're going to move on to the uh
then we're going to move on to the uh
the initial RL stuff uh there's one
the initial RL stuff uh there's one
additional optimization that we're going
additional optimization that we're going
to have to make which is actually going
to have to make which is actually going
to funny enough make this be much faster
to funny enough make this be much faster
uh and maybe this will even be more
uh and maybe this will even be more
impactful than all the stuff I'm doing
impactful than all the stuff I'm doing
now but we're going to do
now but we're going to do
multi-environment
multi-environment
vectorization maybe not ini we'll decide
vectorization maybe not ini we'll decide
but we're going to make it so that like
but we're going to make it so that like
you can batch run lots of different
you can batch run lots of different
environments while without going back to
environments while without going back to
python we're going to batch in
python we're going to batch in
scyon um
scyon um
yeah between those two we definitely get
yeah between those two we definitely get
over a million
over a million
SPS okay uh I'm going to go make my
SPS okay uh I'm going to go make my
shake that'll take me I don't know three
shake that'll take me I don't know three
or five minutes we're going to come back
or five minutes we're going to come back
we're going to get our million steps per
we're going to get our million steps per
second we're going to pass go we're
second we're going to pass go we're
going to collect $200
going to collect $200
uh and then we are going to hopefully
uh and then we are going to hopefully
have a bit of time to start on the RL
have a bit of time to start on the RL
today I'll be right
back
e
e
e
e
e
e
e
e e
okay cheers
let's go claim our million steps per
let's go claim our million steps per
second
so what we're going to do for
this it's not going to be that
this it's not going to be that
hard really not going to be that
hard really not going to be that
hard let me fix the AC real quick as
hard let me fix the AC real quick as
well one
sec is always trying to freeze me
okay
so we need to find the data structure
so we need to find the data structure
that we're using which is scanned
that we're using which is scanned
targets right here so we have this is a
targets right here so we have this is a
200 length struct struct
do
do
Max
and can't assign this here can
and can't assign this here can
you yeah we can't do that we have to do
you yeah we can't do that we have to do
Max scan targets is going to
Max scan targets is going to
be up here I
be up here I
think let's just do let's just do it as
think let's just do let's just do it as
a CA
uh it's Vision times V we can save a
uh it's Vision times V we can save a
little bit of memory here so it's it's
little bit of memory here so it's it's
11 * 11
121 I think technically for algorithms
it's yeah this is fine this works
and then what we're going to do is we're
and then what we're going to do is we're
just going to do
just going to do
um and where is
um and where is
it I don't initialize it do I I
it I don't initialize it do I I
should
should
scanned
Targets this gets initialized somewhere
Targets this gets initialized somewhere
doesn't it self. scan targets
huh oh no of course it doesn't get
huh oh no of course it doesn't get
initialized because it's not
initialized because it's not
uh it's not a 2d okay that's
uh it's not a 2d okay that's
fine
so we need Max
so we need Max
entities and Max G
entities and Max G
targets uh we're going to make this 256
targets uh we're going to make this 256
for
for
now and then we're just going to add a
now and then we're just going to add a
little Asser in to just catch ourselves
little Asser in to just catch ourselves
for when we inevitably forget this and
for when we inevitably forget this and
out of bounds this because this is one
out of bounds this because this is one
of those janky uh non checked
of those janky uh non checked
Cays so what we're going to do is we're
Cays so what we're going to do is we're
going to
going to
assert
assert
uh num agents
uh num agents
plus this has got to be less than equal
plus this has got to be less than equal
Max entities
uh and then it's going to be self.
uh and then it's going to be self.
obiz times self. obiz is got to be less
obiz times self. obiz is got to be less
than
than
Max
Max
scanned
okay so
okay so
now with the scan targets we just have
now with the scan targets we just have
to update this
to update this
function to scan by uh PID and entities
function to scan by uh PID and entities
do have a PID associated with them so as
do have a PID associated with them so as
long as I've remember remembered to set
long as I've remember remembered to set
it
it
correctly which hopefully I have we will
see let me just check yeah Towers got
see let me just check yeah Towers got
PID and spawn neutral got a PID spawn
PID and spawn neutral got a PID spawn
Reep has a pit and then obviously I know
Reep has a pit and then obviously I know
the players have a pit perfect
the players have a pit perfect
so this actually sets this up very nice
so this actually sets this up very nice
so uh
so uh
scan scan
what we're going to
do we just need int
do we just need int
PID
PID
PID play. PID and this is actually PID
PID play. PID and this is actually PID
idx is equal to Target
this is PID
this is PID
idx and that's
idx and that's
it now wherever we use a when we
it now wherever we use a when we
wherever we use the scan targets we of
wherever we use the scan targets we of
course we have to update this as
course we have to update this as
well PID equal player.
well PID equal player.
PID Target equal scan Target PID
PID Target equal scan Target PID
idx scan targets we just have to update
idx scan targets we just have to update
this everywhere we use it PID
this everywhere we use it PID
l. PID
PID and right
here
P
PID this is also uh inefficient we
PID this is also uh inefficient we
should cache
should cache
this target is scan Target and then if
this target is scan Target and then if
Target
break and that's a little
better scan
targets that's
targets that's
it I think these are the oh right here
it I think these are the oh right here
we missed
one we do Target
Target is equal to
null so let's see if we broke
anything this is a big
anything this is a big
change we broke lots of things of
change we broke lots of things of
course cannot convert python
object 886
push player
push player
Target oh that's
Target oh that's
weird uh we
do well this is I guess we just copied
do well this is I guess we just copied
this or something because this doesn't
this or something because this doesn't
make any
make any
sense
sense
um yeah so we we do
um yeah so we we do
entity start
Target we don't need
Target we don't need
this xit this is
this xit this is
good that do
it invalid index type in in oh right
it invalid index type in in oh right
this is not
this is not
the can I make this a memory View
I can't make this a memory view
right no I can't it's
obnoxious I can make a 2d entity right
obnoxious I can make a 2d entity right
though
though
right let me
see not
see not
allowed wait not allowed in a constant
expression array Dimension not
expression array Dimension not
integer incomplete well let's make sure
integer incomplete well let's make sure
I'm allowed to do this first
then Max entities Max scan
Targets this looks correct to
Targets this looks correct to
me uh maybe there you're not allowed to
me uh maybe there you're not allowed to
do this cuz it's not like a constant or
something and do like a pound
ofine
ofine
nope well that's
nope well that's
fine we'll just hard code Max
Max entities Max G
targets I know can you initialize stuff
targets I know can you initialize stuff
here like
this guess we'll find out
cannot
assign
assign
oh hold
oh hold
on I'm just getting a ray syntax
on I'm just getting a ray syntax
confused I believe
confused I believe
it's is the syntax right
does that get rid of one
bug yes it does so let's see now if I go
back maybe I'm allowed to use
back maybe I'm allowed to use
this I should be able to
this I should be able to
right unless it's like hey this isn't a
right unless it's like hey this isn't a
constant what if I do constant
I don't know if it ignores it or not
I don't know if it ignores it or not
we'll
see Max enity is Max scan targets
okay we can do it we just don't need the
const which is
fine const correct code is
fine const correct code is
stupid
stupid
anyways o not allowed in a constant
expression what's wrong with this
I guess we are not allowed to do it
I guess we are not allowed to do it
after all
after all
huh that
sucks so we were write the first time I
sucks so we were write the first time I
think it's because you don't have
think it's because you don't have
constants and like pound
constants and like pound
defines that you're not allowed to do
defines that you're not allowed to do
this because it it doesn't know that
this because it it doesn't know that
this is going to not it doesn't know
this is going to not it doesn't know
that this is a constant at compile time
that this is a constant at compile time
right so it's like hey this [ __ ] might
right so it's like hey this [ __ ] might
change um so I think we're like you
change um so I think we're like you
can't even
can't even
this I think you just put a comment here
Max this is like
Max this is like
right and then you just hope that this
right and then you just hope that this
you can't even do these asserts you just
you can't even do these asserts you just
hope you don't screw it
hope you don't screw it
up actually there is one thing we can
do we can at least give
ourselves so this is real dumb but it
ourselves so this is real dumb but it
gives us the same don't shoot ourselves
gives us the same don't shoot ourselves
in the foot
protection now we rebuild
and perfect all we have are index
errors I do wonder if we
errors I do wonder if we
should
Alias I actually don't know how that
Alias I actually don't know how that
works if you can pass or
works if you can pass or
raise um we're going to just swap the
raise um we're going to just swap the
syntax like this for now and if it's
syntax like this for now and if it's
really slow we'll change it it should
really slow we'll change it it should
not be really slow though
let's see if this actually runs now or a
let's see if this actually runs now or a
perf
test it should be same speed but you
test it should be same speed but you
never
know yeah same
speed pretty much spot on same speed so
speed pretty much spot on same speed so
now the thing is the reason we just did
now the thing is the reason we just did
that is so we can cache
right let me figure out uh well there's
right let me figure out uh well there's
one other optimization we can do first
one other optimization we can do first
that's a little easier so let's do
that here it
that here it
is so what we're going to do this is no
is so what we're going to do this is no
longer going to be Y and X
player
player
Y is player
Y is player
X
X
right and what we're going to do is now
right and what we're going to do is now
we're going to do int
y x it's now y this is X this is layer
y x it's now y this is X this is layer
Yus radius player y +
Yus radius player y +
radius player xus
radius like this now this PID map
radius like this now this PID map
doesn't have to do any math on the
doesn't have to do any math on the
index which is very
index which is very
nice we also move this target
nice we also move this target
type down to
type down to
here because we don't need
here because we don't need
it um
it um
exclude friendly before exclude
exclude friendly before exclude
hostile the most commonly excluded type
hostile the most commonly excluded type
I believe
is it's the creep
is it's the creep
targeting creeps don't Target
neutrals and neutrals don't Target each
neutrals and neutrals don't Target each
other though I think that this is fine
other though I think that this is fine
either
either
way uh and then we do scan targets
way uh and then we do scan targets
perfect return idx greater than zero so
perfect return idx greater than zero so
this should be the exact same thing it
this should be the exact same thing it
may or may not make a performance
may or may not make a performance
difference this is a very small
difference this is a very small
optimization but this is the most
optimization but this is the most
performance critical piece of code in
performance critical piece of code in
the entire project so it is possible
it is faster than before but it's
it is faster than before but it's
potentially within the
potentially within the
noise I mean it's definitely faster we
noise I mean it's definitely faster we
don't know how by how much if it's
don't know how by how much if it's
substantial or not but who cares we have
substantial or not but who cares we have
it as fast as it can reach reasonably be
it as fast as it can reach reasonably be
now uh and the only thing we have left
now uh and the only thing we have left
to do is implement the caching so let's
to do is implement the caching so let's
do
that scan
AOE and and how do we do this found
AOE and and how do we do this found
Target
thing so what you do is you go
through scan targets pit is equal to
through scan targets pit is equal to
null so this actually doesn't even have
null so this actually doesn't even have
to return
anything because it sets this null right
here like
this so there are like a few places
this so there are like a few places
where we call the scan
where we call the scan
AOE let's start with the
AOE let's start with the
uh the creep
AI okay so we have we scan
AOE and then we do if self.
AOE and then we do if self.
scanned is not equal to
scanned is not equal to
null zero
null zero
in
in
PID
PID now there's some follow-up logic
PID now there's some follow-up logic
we're going to probably have to do once
we're going to probably have to do once
we implement this because the caching is
we implement this because the caching is
going to make a few things a little bit
going to make a few things a little bit
weird but um we have self. tick anywhere
weird but um we have self. tick anywhere
yeah we do have self.
yeah we do have self.
tick if self.
tick if self.
tick percent
tick percent
5 is equal to zero we
scan and that's literally
scan and that's literally
it and now let's do the neutral one
player AOE attack can still have a
player AOE attack can still have a
updated scam AOE push can have an up
updated scam AOE push can have an up
these are all
these are all
simple I think the towers can even have
simple I think the towers can even have
uh
well they're probably kind of slow right
we'll do like every three
ticks for the
ticks for the
tower in 6 seconds it's a little
faster this fast
enough and
uh and then this is the last place right
uh and then this is the last place right
here
let's see if it
works we forgot to Define
weot to Define
weot to Define
PID
PID
PID we actually don't need found Target
PID we actually don't need found Target
creep AI we probably don't need it in
creep AI we probably don't need it in
creep AI either
right uh is there a found
right uh is there a found
Target oh guess
not so if this works this is the last
not so if this works this is the last
piece of the puzzle I think to get us
piece of the puzzle I think to get us
the the perf we need
so we get
m.p not as big as a uh as an increase as
m.p not as big as a uh as an increase as
I would have
thought but now actually like almost
thought but now actually like almost
this so much of this time is in the step
this so much of this time is in the step
function that you almost don't
know I think we should here we should
know I think we should here we should
compile we should compile this without
compile we should compile this without
um without C profile on or without uh
um without C profile on or without uh
what is
what is
it we should compile this without
it we should compile this without
profile director on directive
profile director on directive
on because I still don't know how much
on because I still don't know how much
overhead the function calls are
overhead the function calls are
so scon profile false
right there's still some stuff that we
right there's still some stuff that we
probably need to be uh caching in the
probably need to be uh caching in the
the attack
the attack
functions let's see how close we are
functions let's see how close we are
though
oh we're there we
oh we're there we
win
win
cool
um that's well let's see if this
um that's well let's see if this
actually hold on before I say we're
actually hold on before I say we're
there
oh look it's the exact same game we
oh look it's the exact same game we
didn't break anything that's
amazing at least nothing critical it
amazing at least nothing critical it
looks the exact
looks the exact
same okay so there you have it guys um
same okay so there you have it guys um
this is
this is
680,000 steps per
680,000 steps per
second uh we started today at
second uh we started today at
70,000 so we got a 10x
70,000 so we got a 10x
Improvement and uh as I've said several
Improvement and uh as I've said several
times this is my local desktop here
times this is my local desktop here
which is an old machine the puffer boxes
which is an old machine the puffer boxes
which are the target Hardware uh which
which are the target Hardware uh which
is just a higher-end desktop those cores
is just a higher-end desktop those cores
are at least twice as fast so this is
are at least twice as fast so this is
well over a million steps per second and
well over a million steps per second and
mind you this is with um where is
mind you this is with um where is
it well you can't even see the total
it well you can't even see the total
amount of overhead because it's not
amount of overhead because it's not
showing you but um this is uh a low-end
showing you but um this is uh a low-end
estimate as well because we're also
estimate as well because we're also
going to vectorize this so we can do
going to vectorize this so we can do
multiple copies of the environment at
multiple copies of the environment at
the on the same scon
the on the same scon
process so that's going to bump this up
process so that's going to bump this up
a whole bunch as
a whole bunch as
well so there you
well so there you
go we hit
it 10x perf Improvement in a
it 10x perf Improvement in a
day I think that's pretty good that's
day I think that's pretty good that's
pretty good
pretty good
progress um
progress um
could it be faster yeah it could be
could it be faster yeah it could be
faster it could definitely be faster but
faster it could definitely be faster but
uh this is going to allow us to do
uh this is going to allow us to do
pretty much everything we
pretty much everything we
need uh yeah they're going to be allow
need uh yeah they're going to be allow
us to do pretty much everything we need
us to do pretty much everything we need
so it's a little bit awkward for uh the
so it's a little bit awkward for uh the
reinforcement learning side at the
reinforcement learning side at the
moment because I do kind of need to
moment because I do kind of need to
write that binding don't
write that binding don't
I I do kind of need to write the binding
I I do kind of need to write the binding
for
for
that you not really going to be able to
that you not really going to be able to
do RL until I have the multi uh the
do RL until I have the multi uh the
multiprocess not the multiprocess
multiprocess not the multiprocess
multiple environments uh
multiple environments uh
per per scon process because right now
per per scon process because right now
there's a there's a 250 some odd
there's a there's a 250 some odd
megabyte map that needs to be shared and
megabyte map that needs to be shared and
if you don't share it properly if you
if you don't share it properly if you
just like make a bunch of different
just like make a bunch of different
processes and all load it up uh then
processes and all load it up uh then
it's going to be way too
it's going to be way too
slow
slow
256 258 I don't know what it was
256 258 I don't know what it was
megabyte pathing data
I'm going to commit this for now though
I'm going to commit this for now though
and uh we're going to run it on maybe
and uh we're going to run it on maybe
we'll run it on one of the bigger boxes
we'll run it on one of the bigger boxes
just for
fun want this data
fun want this data
file this mobile
file this mobile
file want this pre-computation
file want this pre-computation
file and we want the setup file anything
else looks like that's
it oh do we want this MOBA per
it oh do we want this MOBA per
file maybe just for
now e
five hours or so of work
on set up
build come
on this just weird we had this before
on this just weird we had this before
this is just weird pip
Shenanigans I think you just have to run
Shenanigans I think you just have to run
these a couple times until
these a couple times until
it I don't know it's
it I don't know it's
weird how about now
how about
now you can see it's building something
now you can see it's building something
even though I just built it because it's
even though I just built it because it's
taking that long
I'm
bizarre it was literally what I did last
bizarre it was literally what I did last
time and it
time and it
worked is
worked is
dumb okay what the hell is there a file
dumb okay what the hell is there a file
missing
here there is an underscore underscore
here there is an underscore underscore
knit that I forgot to commit
I think that's what it was it was just
I think that's what it was it was just
the inet
the inet
file I don't know if it was the PIP
file I don't know if it was the PIP
install or the build that made it work
install or the build that made it work
though obviously these things that will
though obviously these things that will
be worked out before
be worked out before
release but this is the type of boring
release but this is the type of boring
thing where if I were to get it
thing where if I were to get it
understand exactly what's happening and
understand exactly what's happening and
now I'd be scratching my head for three
hours there we
hours there we
go it was just the init file
let me just make sure this is
correct multiply and it should be
correct multiply and it should be
multiplied by 10 right number of ticks
multiplied by 10 right number of ticks
times 10 because there are 10
agents
right this can obviously shift by a
right this can obviously shift by a
reasonable Factor depending on what's
reasonable Factor depending on what's
going on in the game but I think is an
going on in the game but I think is an
initial perf test
initial perf test
we are
set
set
30 4 million function
30 4 million function
calls
cool oops
let us
post thank you Stars much
appreciated I this is so stupid how the
appreciated I this is so stupid how the
internet works this stupid post of mine
internet works this stupid post of mine
has a thousand likes on it
32,000
views so ridiculous how that works and
views so ridiculous how that works and
it doesn't get you like it doesn't
it doesn't get you like it doesn't
convert anything it's just like
convert anything it's just like
congratulations on your internet points
congratulations on your internet points
you made a funny
you made a funny
joke all
right do I post the GIF again or do I
right do I post the GIF again or do I
just post the perf screenshot I probably
just post the perf screenshot I probably
post the GIF again right even though
post the GIF again right even though
it's repetitive
I think you have to reexport a gift
I think you have to reexport a gift
though so that it gives you a
though so that it gives you a
different you doesn't record you as like
different you doesn't record you as like
posting the same Media or whatever let's
posting the same Media or whatever let's
do that real
quick and then uh we actually will get
quick and then uh we actually will get
to do the the multi like the multi
to do the the multi like the multi
whatever multi environment thing that I
whatever multi environment thing that I
was talking about and then we get to do
was talking about and then we get to do
a little RL
a little RL
just a little bit
just a little bit
today I said Thursday at the latest
today I said Thursday at the latest
we'll get to start it you know Wednesday
we'll get to start it you know Wednesday
evening that's on
evening that's on
track gives us all day tomorrow to work
track gives us all day tomorrow to work
out good policy
out good policy
stuff obviously we're not going to have
stuff obviously we're not going to have
like the game being solved immediately
like the game being solved immediately
but oh hello there let me I didn't see
but oh hello there let me I didn't see
your message because the thing was oh no
your message because the thing was oh no
that's just will that was from earlier
that's just will that was from earlier
this thing covers the transparent whoop
this thing covers the transparent whoop
transparent
UI I think we screwed up here as well
UI I think we screwed up here as well
hold
on I hate the windows thing that just
on I hate the windows thing that just
like yeah let me minimize all your stuff
like yeah let me minimize all your stuff
on where did everything
on where did everything
go uh here here this is
fine okay
I
right we needed
this we need self this is self. outcome
this we need self this is self. outcome
now it should work it needs to just be
now it should work it needs to just be
able to know when the game's over
and we should see this takes like 14,000
steps uh oh is it behaving
steps uh oh is it behaving
differently we getting no radiant just
differently we getting no radiant just
took tier
three dire took tier three as well dire
three dire took tier three as well dire
just took tier four radian has taking
just took tier four radian has taking
tier four it's very close
tier four it's very close
game long game as
game long game as
well and there you
well and there you
go that looks like a radiant
go that looks like a radiant
Victory radiant victory
Docker dire Victory so this is actually
Docker dire Victory so this is actually
radiant
radiant
Victory right
single
red e
where is
where is
it my file
go that's pretty
cool it's actually radiant victory
cool it's actually radiant victory
there we
go how much data is that
gigabyte a second I'd say
that's better this
way that's
nice okay
nice okay
so that's
so that's
fun I promised 1 million steps per
fun I promised 1 million steps per
second I delivered 1 million steps per
second I delivered 1 million steps per
second um now it's mostly just what can
second um now it's mostly just what can
we train with this and know a few more
we train with this and know a few more
Integrations we obviously like there's a
Integrations we obviously like there's a
whole bunch of stuff that's not fully
whole bunch of stuff that's not fully
implemented in the game that we're going
implemented in the game that we're going
to have to do but uh this is kind of
to have to do but uh this is kind of
enough to get
enough to get
started it's pretty
started it's pretty
stable I think that there's
stable I think that there's
um I mean even with this like there's
um I mean even with this like there's
probably some cool stuff the agents
probably some cool stuff the agents
could learn
could learn
right now whether they're smart enough
right now whether they're smart enough
to learn it who
to learn it who
knows they kind of actually have to at
knows they kind of actually have to at
least go down the
lane but probably if you give them some
lane but probably if you give them some
like really basic objective function
like really basic objective function
like if you just give them a reward for
like if you just give them a reward for
going for getting to the enemy Tower or
going for getting to the enemy Tower or
the enemy
the enemy
Fountain they'll probably learn to do
Fountain they'll probably learn to do
something
right with this much data
yeah they'll learn to do something
yeah they'll learn to do something
cool I have no idea how cool but I'll be
fun
okay so the one other thing that we have
okay so the one other thing that we have
to figure out how to do here which is
is it
non-trivial no it's pretty
trivial we just have to figure out how
trivial we just have to figure out how
to run these things in a loop
basically I did this in
basically I did this in
uh I think I did this in snake didn't I
on the continuous
grid see
grid see
grid
oops oh did I not do it
oops oh did I not do it
here maybe I did it in snake
yeah right
yeah right
here
so I have this step all
so I have this step all
function that takes a list of
function that takes a list of
M yeah okay I remember so this is
M yeah okay I remember so this is
actually pretty
actually pretty
easy so what you do is you make a list
easy so what you do is you make a list
of you just make a list of these
of you just make a list of these
environments on the python
environments on the python
side and
side and
this isn't perfectly
this isn't perfectly
scyon um it's not
scyon um it's not
perfect but uh it's better than vanilla
perfect but uh it's better than vanilla
for calling steps in a
for calling steps in a
loop um by a substantial
loop um by a substantial
margin and it'll it'll still uh break up
margin and it'll it'll still uh break up
a little bit of call
a little bit of call
Overhead
Overhead
and I think the main thing was the way I
and I think the main thing was the way I
was splitting up actions right
was splitting up actions right
step where is it get m.
step where is it get m.
step oh no was the way that I was
step oh no was the way that I was
populating the action vectors I
populating the action vectors I
believe so if you look at like snake
believe so if you look at like snake
here if you look at the uh the coal it's
here if you look at the uh the coal it's
kind of clever how it
works so you get this pointer through
works so you get this pointer through
end like this and this is why I always
end like this and this is why I always
Point people to this snake example it
Point people to this snake example it
has everything so you have a pointer and
has everything so you have a pointer and
you have the end
you have the end
and you're just giving each environment
and you're just giving each environment
a slice into this buffer but this is
a slice into this buffer but this is
this slice is a memory view so you
this slice is a memory view so you
basically just have everything in one
basically just have everything in one
giant tensor and then you just give
giant tensor and then you just give
different slices to different sub
different slices to different sub
environments and that means that when
environments and that means that when
you populate you know you vectorize
you populate you know you vectorize
populate all your data and numpy on the
populate all your data and numpy on the
python side it's immediately updated for
python side it's immediately updated for
all the scyon
all the scyon
MS so that's pretty cool
yeah let's let's do
yeah let's let's do
this I actually kind of want to leave
this I actually kind of want to leave
this up as a reference for myself
this up as a reference for myself
somewhere
here there we
go oh yeah we also have to handle resets
go oh yeah we also have to handle resets
fast because I just straight up didn't
fast because I just straight up didn't
do that
that's almost more important but we'll
that's almost more important but we'll
get to
[Music]
it want to get to some
RL what did we do here like num
RL what did we do here like num
Ms yeah
Ms yeah
we gave a lot of parameters for this
we gave a lot of parameters for this
one a DOTA is actually simpler in this
one a DOTA is actually simpler in this
sense because it's like not procedural
sense because it's like not procedural
it's
it's
fixed num
fixed num
M's equals I don't know four
M's equals I don't know four
M's
M's
okay
okay
num num M's it's num M's like
num num M's it's num M's like
this and uh how do we do
this and uh how do we do
it we make the buffer flat
it we make the buffer flat
yeah we made it flatten gave
yeah we made it flatten gave
slices why did we do that
again do I remember why I did
that
uh I did it because it makes sense with
uh I did it because it makes sense with
the observation spaces to do it that way
the observation spaces to do it that way
so you may as well do everything that
way it does make it
way it does make it
slightly more Awkward to do some
slightly more Awkward to do some
stuff but I think it's
fine not really is
it oh no I remember why I did it that
it oh no I remember why I did it that
way the reason I did it in the snake
way the reason I did it in the snake
doesn't apply here
doesn't apply here
we're
fine we can do this more reasonably so
fine we can do this more reasonably so
we get the game map we get the
we get the game map we get the
grid we get um pids like
this I think this grid has to be a copy
this I think this grid has to be a copy
doesn't it
doesn't it
yeah grid totally has to be a
yeah grid totally has to be a
copy remind me to do
copy remind me to do
that pids is going to be
that pids is going to be
zeros we add
zeros we add
num num M's to
num num M's to
this C
entities
entities
Okay C OBS player self. numm comma
Okay C OBS player self. numm comma
then
then
observations we can get total agents
observations we can get total agents
here right num
agents
times I think this is actually has to be
times I think this is actually has to be
like this
num is
10 yeah this is 10
10 yeah this is 10
it's always
10 m agents
10 m agents
is
is
correct correct correct
correct it's
correct and we don't use this
correct and we don't use this
okay now we get to the interesting part
here c
here c
m
m
okay
okay
CM like
CM like
so and we do four I in range num
so and we do four I in range num
Ms we need um
Ms we need um
pointer we actually don't need pointer
pointer we actually don't need pointer
because we did it way easier this time
because we did it way easier this time
didn't we
didn't we
so it's going to
so it's going to
be I
be I
comma reshape numb agents OB
size wait that's weird isn't
size wait that's weird isn't
it oh no it's not this
it oh no it's not this
is we we had it right but it's lowered
is we we had it right but it's lowered
down this so This goes down here this
down this so This goes down here this
goes down here
right this is
colon
colon
observations uh what is observations
observations uh what is observations
buff
buff
observations numb agents nope this is
observations numb agents nope this is
correct over here
correct over here
so I I'm just doing like various like
so I I'm just doing like various like
little tiny annoying bits of
little tiny annoying bits of
tensor uh manipulation in my head they
tensor uh manipulation in my head they
they're kind of hard to explain but
they're kind of hard to explain but
they're very basic I'm just basically
they're very basic I'm just basically
I'm figuring out if data needs to be uh
I'm figuring out if data needs to be uh
three dimens dial tensors or two
three dimens dial tensors or two
dimensional tensors and the difference
dimensional tensors and the difference
would be that the threedimensional
would be that the threedimensional
tensors have number of environments
tensors have number of environments
comma number of Agents comma whatever
comma number of Agents comma whatever
and the two-dimensional ones are just
and the two-dimensional ones are just
going to be like numb agents times
going to be like numb agents times
number environment so you roll them
together that's
all yes we got self. agents we've got
all yes we got self. agents we've got
um entities
um entities
do
entities which we did uh OBS
entities which we did uh OBS
players we did num
M's
M's
what no we're fine um we're we're fine
what no we're fine um we're we're fine
so this is self grid. this needs a
so this is self grid. this needs a
copy self. AI pass this is not a copy it
copy self. AI pass this is not a copy it
doesn't get modified it's
doesn't get modified it's
mutable well not really immutable but be
mutable well not really immutable but be
nice this gets
I okay
I okay
VI
VI
append self. C entities I entity data is
append self. C entities I entity data is
shared OBS players is not
shared OBS players is not
shared uh OBS View
maybe this
you know it's still it you end up having
you know it's still it you end up having
to slice anyways because these rewards
to slice anyways because these rewards
and stuff are
flat I think it's probably better to
flat I think it's probably better to
just do everything flat huh
just do everything flat huh
it's really obnoxious because otherwise
it's really obnoxious because otherwise
you have to have a whole bunch of
you have to have a whole bunch of
different views
different views
yeah
yeah
yeah
okay we'll do it that way I'm losing I
okay we'll do it that way I'm losing I
I'm losing a bit of steam here but I
I'm losing a bit of steam here but I
want to at least get this to work I want
want to at least get this to work I want
to have it so that we can run multiple
to have it so that we can run multiple
environments without blowing up
environments without blowing up
memory um though actually it did I do
memory um though actually it did I do
recall memory blowing up anyways but
recall memory blowing up anyways but
we're going to see about this um if we
we're going to see about this um if we
don't do this we definitely blow up
don't do this we definitely blow up
memory because we don't share the the
memory because we don't share the the
pathing maps and the pathing map is 200
pathing maps and the pathing map is 200
uh 200 some odd Megs and we're going to
uh 200 some odd Megs and we're going to
need like a 100 of these
need like a 100 of these
environments more 400 of these
environments more 400 of these
environments per
environments per
core we're probably going to be running
core we're probably going to be running
like 800 some odd
like 800 some odd
environments so that's a lot of
environments so that's a lot of
memory 800 copies of do is pretty
memory 800 copies of do is pretty
fun did they actually tell you in open5
fun did they actually tell you in open5
how many copies of DOTA they
ran was it one per
core I don't think they told you how
core I don't think they told you how
many
um how many
um how many
copies but uh if they were using 128,000
copies but uh if they were using 128,000
cores I are they running the game single
cores I are they running the game single
threaded I would assume the game just
threaded I would assume the game just
runs single threaded doesn't it
well actually no the game shouldn't run
well actually no the game shouldn't run
single threaded right but still they're
single threaded right but still they're
running
running
like they're probably running tens of
like they're probably running tens of
thousands of copies of the game at
thousands of copies of the game at
least I could ask him that oh they also
least I could ask him that oh they also
give you that they have 20,000 numbers
give you that they have 20,000 numbers
so that's like 80 KB observations which
so that's like 80 KB observations which
is Big so give you their observation
is Big so give you their observation
size they have a lot of data they're
size they have a lot of data they're
pushing lots and lots of data they're
pushing lots and lots of data they're
crazy project
this pit map is fine like
this actually what am I talking about
this actually what am I talking about
this is all fine I literally all I have
this is all fine I literally all I have
to do is compute um some pointers
it's literally just
10 there 10
each um
each um
agents OBS
agents OBS
view that's it I
view that's it I
guess
guess
creeps this numb agents is wrong this is
creeps this numb agents is wrong this is
be 10 I'm neutrals Towers Vision
be 10 I'm neutrals Towers Vision
whatever this is
whatever this is
fine it's
fine you reset
this turn buff
this turn buff
observations what's this the step thing
observations what's this the step thing
we'll do the step in Python to start
we'll do the step in Python to start
we'll save a little bit when we oops
we'll save a little bit when we oops
when we move to
scyon uh you need
scyon uh you need
pointer do you need pointer
here well this is the big spot you're
here well this is the big spot you're
losing a lot as well we're going to do
losing a lot as well we're going to do
it this way for now but there's an
it this way for now but there's an
optimization here n plus equal 10
okay so you just do like
okay so you just do like
this pointer colon
this pointer colon
end
end
okay this is
fine I think the render just takes the
fine I think the render just takes the
first one
right self. client. render grid
right self. client. render grid
oh but because you're giving it a
oh but because you're giving it a
copy uh this is going to be kind of
copy uh this is going to be kind of
awkward
right here we're going to
do if
do if
I zero grid equal
so like render and gets true good render
so like render and gets true good render
and gets
and gets
true
true
grid
grid
grid otherwise the grid gets updated in
grid otherwise the grid gets updated in
place and you can't have all the
place and you can't have all the
environments updating the same end but
environments updating the same end but
you'll just give it this
grid
grid
uh this is
uh this is
may be
may be
fine
yeah
yeah
okay and then when you do render let me
okay and then when you do render let me
see where's
render self. client render grid
render self. client render grid
pids
pids
zero
zero
[Music]
[Music]
zero
zero
zero um uh star
zero um uh star
10 this probably going to take a second
10 this probably going to take a second
to get correct I'm assuming
right but basically as soon as this
right but basically as soon as this
works oh yeah we didn't change that demo
works oh yeah we didn't change that demo
en mode
en mode
eal
eal
remote as soon as this
remote as soon as this
uh as soon as this Works we're pretty
uh as soon as this Works we're pretty
much set I we have to still do past
much set I we have to still do past
resets but uh other than
resets but uh other than
that that's pretty much like complete
that that's pretty much like complete
Loop argument
Loop argument
[Music]
[Music]
zeros right so we have to add some
zeros right so we have to add some
parentheses
here num
here num
environments probably num M's right
okay appears to
work do we do a perf test again
I think it's probably about the
I think it's probably about the
same but we'll do a perf test before and
same but we'll do a perf test before and
after we add the step function in I
guess we have to pass uh M's here don't
guess we have to pass uh M's here don't
we
we 10
M's okay and then we'll
M's okay and then we'll
pass is it
pass is it
I'm we'll just do num Ms like this
[Music]
[Music]
environments we'll see if this gives us
environments we'll see if this gives us
something that makes sense or
not we're expecting it to be the same as
not we're expecting it to be the same as
before
before
roughly maybe a little
faster we haven't really done the op
faster we haven't really done the op
optimizations that let you take
optimizations that let you take
advantage of this yeah same
advantage of this yeah same
speed same
speed same
speed there's some optimizations we can
speed there's some optimizations we can
make of course um let's make a very
make of course um let's make a very
small one right now
this is
this is
[Music]
environment okay
environment okay
and then
death and all we do
death and all we do
is oh I haven't implemented this action
is oh I haven't implemented this action
thingy
thingy
yet how obnoxious is
yet how obnoxious is
that it's going to take me like five
that it's going to take me like five
minutes it's not that hard I'm just
minutes it's not that hard I'm just
tired let's uh let's just do
tired let's uh let's just do
it it not that hard
actions all we have to do so this is a
actions all we have to do so this is a
fun trick you just cheat your actions
fun trick you just cheat your actions
into the environment as a mem copied
into the environment as a mem copied
buffer um so we have
buffer um so we have
Rewards well self. buff.
Rewards well self. buff.
actions pointer through
end right so all we just did is we just
end right so all we just did is we just
cheated the actions in
Here and Now
Here and Now
all we have to do is
um is it buff actions or actions hold
on self dot
actions
yeah it's just self-d actions these are
yeah it's just self-d actions these are
separate
separate
and then when you do step this is pretty
and then when you do step this is pretty
cool
actions and then because you've cheated
actions and then because you've cheated
actions in you don't have to pass them
actions in you don't have to pass them
as an argument anymore so there's no
as an argument anymore so there's no
data transfer there it's just in place
data transfer there it's just in place
and then you just do step all self.
and then you just do step all self.
CMS you comment this because this thing
CMS you comment this because this thing
does not need it you don't need this
does not need it you don't need this
anymore you edit uh simoa
words because we have to add float uh
words because we have to add float uh
actions here
actions here
float actions like
float actions like
this
this
CNP bad suggestion there CNP ND
CNP bad suggestion there CNP ND
array
rewards okay so now we get Rewards
rewards okay so now we get Rewards
uh nope not rewards that's what we had
uh nope not rewards that's what we had
before
before
actions
rewards self. actions equal to
rewards self. actions equal to
actions very nice
right now we
can all right we no longer need step
uh this is kind of cool actually
uh this is kind of cool actually
because step there was it B
int well how's this
function yeah this is allowed to stay
function yeah this is allowed to stay
aan but this is kind of cool because
aan but this is kind of cool because
what this lets you do this was a CP def
what this lets you do this was a CP def
before right which means this calls back
before right which means this calls back
to python when you call call it this is
to python when you call call it this is
now a
now a
CDE that takes no
arguments so now you have this def
arguments so now you have this def
function that's
function that's
python but it's really fast because this
python but it's really fast because this
is this Loop
here oh
I how did I mess this up
going type this
going type this
index
index
I yeah there we
go numpy
actions oh this is actually even
actions oh this is actually even
funnier but this is self. actions here
there going to be an opportunity to make
there going to be an opportunity to make
this even
faster memory
view right this is actually a 2d array
view right this is actually a 2d array
the actions are uh two-
the actions are uh two-
dimensional no big
deal
deal
float unsigned int
self
self
actions
um we have discretise on right now don't
um we have discretise on right now don't
we or don't we do we or don't we I think
we or don't we do we or don't we I think
it's I think we have it not right
now we'll have to figure this out
but I think it's like this right actions
but I think it's like this right actions
continuous
py list get item yeah we need this from
py list get item yeah we need this from
SE snake or was it what we have this
SE snake or was it what we have this
in snake SE
snake this import
solid well we got that now let's see
solid well we got that now let's see
does
it probably not a huge performance
it probably not a huge performance
difference ooh expected float got
difference ooh expected float got
unsigned
unsigned
integer that's not good
expected float got unsigned
integer this is float
integer this is float
32 I
believe actions
input array from shape
106 into shape
well hold
well hold
on some shenanigans
on some shenanigans
this is definitely supposed to be a
six
and why is it only
and why is it only
10 should be num agents
right 10 times num then self.
agents uh this ought to
agents uh this ought to
be this actions should be
bigger transactions temp should be
bigger soft
dots No
dots No
Sol but
okay this is
okay this is
weird this looks
weird this looks
good but for some
good but for some
reason we don't have the right number of
reason we don't have the right number of
Agents being
registered agent seems to be
good what is it that makes this pick up
good what is it that makes this pick up
the number of AG
agents would think it would just be
agents would think it would just be
agents
right when you do
right when you do
agents per M yeah it's numb
agents per M yeah it's numb
agents self.
agents self.
Ms so this numb agents should be
Ms so this numb agents should be
correct I'm just trying to figure out
correct I'm just trying to figure out
why it's not it doesn't it's not
why it's not it doesn't it's not
registering that I have 10 environments
registering that I have 10 environments
correctly I'm passing to the norl
correctly I'm passing to the norl
net
um oh it is registering I'm just is dumb
here how much memor this take up
okay that's up a little bit right that's
okay that's up a little bit right that's
a little bit of performance we're now at
a little bit of performance we're now at
600 uh 700k
right and I'm going to risk running
right and I'm going to risk running
100 uh if my computer explodes see you
100 uh if my computer explodes see you
when I get a new one
it's actually nice in memory
it's actually nice in memory
performant that was stable I guess it's
performant that was stable I guess it's
the renderer that has a weird leak in
it funny that that decreases depths per
it funny that that decreases depths per
second
though assumedly it's just like
though assumedly it's just like
different parts in the game or
different parts in the game or
whatever we'll leave it at
10 don't worry we'll we'll have
10 don't worry we'll we'll have
consistent 1 million because we have a
consistent 1 million because we have a
few additional like vector uh
few additional like vector uh
optimizations we can make along the way
optimizations we can make along the way
so the 1.3 million I posted I it'll be a
so the 1.3 million I posted I it'll be a
nice consistent at least a
million there you go there's your seven
million there you go there's your seven
709k with 10 environments so 100
709k with 10 environments so 100
agents and like I don't know 2,000
agents and like I don't know 2,000
minions or
whatever and the 700k remember it gets
whatever and the 700k remember it gets
more than double on the other box so
more than double on the other box so
that's like 1.5 million now probably 1.4
that's like 1.5 million now probably 1.4
at
at
least okay so uh there we go there's our
least okay so uh there we go there's our
VC
implementation multi-m I guess You' call
implementation multi-m I guess You' call
it
CF
M uh mobile
uh optimize for
multiple so this is technically enough
multiple so this is technically enough
that I could start on the network or I
that I could start on the network or I
could make the reset function be more
reasonable I kind of want to start on
reasonable I kind of want to start on
the network
the network
design just a little
bit CU it's kind of
tricky at least it's going to be tricky
tricky at least it's going to be tricky
to do
well let me see what perf Clemen City
got so Clemens has this real cool
got so Clemens has this real cool
blog we does this entity neural
networks 100,000 steps per second on a
networks 100,000 steps per second on a
single GPU I'm going to assume that I
single GPU I'm going to assume that I
have a better GPU so let's say I get
have a better GPU so let's say I get
200,000 but that's still too
slow this is a criminally underrated
slow this is a criminally underrated
project by the way I thought this was
project by the way I thought this was
way bigger he kind of just quietly
way bigger he kind of just quietly
released this with one blog post and
released this with one blog post and
didn't promote it too much um this is
didn't promote it too much um this is
like an awesome awesome project why the
like an awesome awesome project why the
hell don't I have this star give him a
hell don't I have this star give him a
star main one at
star main one at
least
um oh this is so funny I forgot that he
um oh this is so funny I forgot that he
did snake as
did snake as
well I should message him on this
it didn't document this it doesn't think
it didn't document this it doesn't think
it has a nice renderer on
it oh but his m is in
it oh but his m is in
Python isn't
Python isn't
it yeah he did all this like efficient
it yeah he did all this like efficient
stuff but then the uh the M logic is in
stuff but then the uh the M logic is in
Python
I should tell him he'll be
happy this was like a cool demo as well
happy this was like a cool demo as well
I should chat with him about this stuff
I should chat with him about this stuff
he's around an SF I
he's around an SF I
know he does like really high per
know he does like really high per
engineering on this side um what I'm
engineering on this side um what I'm
basically just trying to figure out
basically just trying to figure out
is if his neural network architecture is
is if his neural network architecture is
remotely reasonable for the level of
remotely reasonable for the level of
perf I'm going for
he's got this ragged attention thing
he's got this ragged attention thing
which I don't need it to be ragged I
which I don't need it to be ragged I
just need
just need
attention
um I don't know if he did multi-headed
um I don't know if he did multi-headed
attention or if he just did attention
attention or if he just did attention
either oh it is a multi-headed attention
so he said he has a proc experiment
so he said he has a proc experiment
thing as
well this is his Rogue
architecture by attention I think he
architecture by attention I think he
means multiple multi-headed attention
means multiple multi-headed attention
because he mentions it before let me
see Matrix he projecting each
feature 10 so these are really
feature 10 so these are really
small so he's using like 10,000
small so he's using like 10,000
parameters but the thing is if you're
parameters but the thing is if you're
only getting 100,000 steps per second
only getting 100,000 steps per second
with 10,000 parameters like our
with 10,000 parameters like our
implementation on the snake environment
implementation on the snake environment
is way faster than this because on our
is way faster than this because on our
snake end we have 150k and we get a
snake end we have 150k and we get a
million steps per second
I should definitely catch up with
I should definitely catch up with
Clemens though he does really awesome
Clemens though he does really awesome
work and uh before I like the
work and uh before I like the
engineering I was doing was like
engineering I was doing was like
relatively low perf by comparison but
relatively low perf by comparison but
now now with the latest stuff it's
now now with the latest stuff it's
actually like really fast and you know I
actually like really fast and you know I
can I can play ball with these numbers
can I can play ball with these numbers
uh with the latest Sim stuff which is
uh with the latest Sim stuff which is
really cool
really cool
is really
cool version of Impala used in proc
gen okay so this is them using
uh this is them like doing some
uh this is them like doing some
comparisons
okay I still don't know if this
okay I still don't know if this
attention block is
attention block is
reasonable because if this attention
reasonable because if this attention
block is limiting you to 100 KPS with
block is limiting you to 100 KPS with
that little data then I'm pretty sure
that little data then I'm pretty sure
that you're just straight up not going
that you're just straight up not going
to be able to use it in uh in our
to be able to use it in uh in our
setting it scales
setting it scales
quadratically
and quadratic
and quadratic
among yeah you can't do like well if you
among yeah you can't do like well if you
had like 20 agent like 20 entities 20 by
had like 20 agent like 20 entities 20 by
20 is 400 400 times 32 I think that's
20 is 400 400 times 32 I think that's
already too
already too
big
big
oh I forgot that he credited me for the
oh I forgot that he credited me for the
review I did not contribute very much to
review I did not contribute very much to
this whatsoever this was really his
this whatsoever this was really his
project he did awesome awesome work with
project he did awesome awesome work with
this but uh this list of like reviewers
this but uh this list of like reviewers
is awesome Chris bamford's awesome cost
is awesome Chris bamford's awesome cost
is
is
awesome is a really cracked project
I remember telling him I wasn't sure
I remember telling him I wasn't sure
about the handdrawn uh like the
about the handdrawn uh like the
handdrawn style like this but I was
handdrawn style like this but I was
totally wrong this is
awesome
awesome
well this kind of tells
well this kind of tells
us
us
the this kind of tells us though right
the this kind of tells us though right
that we're not going to be able to do
that we're not going to be able to do
this so
this so
let's look at the DOTA architecture for
let's look at the DOTA architecture for
other
other
inspiration if it's not clear the point
inspiration if it's not clear the point
of what I'm doing now is I'm looking for
of what I'm doing now is I'm looking for
like feasible architectures for this
like feasible architectures for this
thing um I can draw it out maybe that'll
thing um I can draw it out maybe that'll
help me and that'll be interesting there
help me and that'll be interesting there
are a couple people still watching this
are a couple people still watching this
so I'll draw it
out not this one this one sucks
sketchpad
so the way that you uh you look at
so the way that you uh you look at
this you have 2D map
data okay you have 2D map data that you
data okay you have 2D map data that you
get this is like if you
get this is like if you
are yeah if you're
are yeah if you're
here you're like this agent
oops what the heck that's
oops what the heck that's
weird why would you ever
want let's just refresh this
page oh jeez it saves it okay
so you have this type of a thing here
so you have this type of a thing here
this is like your
this is like your
vision and you have your I drew it like
vision and you have your I drew it like
an even size it should be an odd
an even size it should be an odd
size but let's say you have your agent
size but let's say you have your agent
like here
like here
right and then you have
you have like some walls here
right and like maybe you have a wall
right and like maybe you have a wall
here okay so you get like your terrain
here okay so you get like your terrain
map and maybe you
map and maybe you
have orange maybe you have like another
have orange maybe you have like another
agent over here that you can see
agent over here that you can see
right so this just gets interpreted as
right so this just gets interpreted as
one hot so this gets
one hot so this gets
so this basically
so this basically
like say this becomes zero this becomes
like say this becomes zero this becomes
one uh or more likely this becomes here
one uh or more likely this becomes here
this becomes
this becomes
one this becomes two and like this
one this becomes two and like this
becomes three
becomes three
okay and then you put this into your
okay and then you put this into your
convet which I'm going to attempt to
convet which I'm going to attempt to
draw like this
right this is a compet kind
of and then you get this into a flat
of and then you get this into a flat
vector and then the architecture for
vector and then the architecture for
this is that you put this into an lstm
this is that you put this into an lstm
and then you put this into an action
and then you put this into an action
head this is your classic architecture
head this is your classic architecture
this is what I use on snake it runs a
this is what I use on snake it runs a
million steps per second as long as you
million steps per second as long as you
use small
use small
comps but the thing is with
comps but the thing is with
uh with this project the thing that's
uh with this project the thing that's
difficult is you also get
difficult is you also get
these these like entity
vectors so this is like
map and this is
entity all right
entity all right
and this is the thing I need an
and this is the thing I need an
architecture for and this is hard
architecture for and this is hard
because like this is set data and it's
because like this is set data and it's
kind of a lot of set data we're going to
kind of a lot of set data we're going to
assume this is like
20 20 X20
20 20 X20
maybe um mix mixed discreet and
maybe um mix mixed discreet and
continuous though we might be able to S
continuous though we might be able to S
side step
that
that
so this is 400
this is almost already too big just
this is almost already too big just
looking at this though we can probably
looking at this though we can probably
limit this to be like
limit this to be like
um if we limit this to be bytes it's not
um if we limit this to be bytes it's not
that
that
bad if this is like 20 x 20 bytes that's
bad if this is like 20 x 20 bytes that's
not
terrible though if we're making this
terrible though if we're making this
float
float
data Maybe if it's fp16 data it's
data Maybe if it's fp16 data it's
okay it's kind of a lot
okay it's kind of a lot
we're going to have to figure some stuff
out we're also going to have to think
out we're also going to have to think
about like what you get from these
about like what you get from these
entities that you can't get
normally you know it's possible that we
normally you know it's possible that we
could just encode all this [ __ ] into the
could just encode all this [ __ ] into the
map that might be
map that might be
better let's look at some architect to
better let's look at some architect to
see if we have some reasonable weight so
see if we have some reasonable weight so
basically it's just like you have a
basically it's just like you have a
bunch of different agents around you
bunch of different agents around you
right that have different
right that have different
properties and that's a lot of data to
properties and that's a lot of data to
encode so the two different options I
encode so the two different options I
have are try to stick this into the map
have are try to stick this into the map
somehow which I have ways of doing it's
somehow which I have ways of doing it's
not
not
impossible um and I even have ways to
impossible um and I even have ways to
compress that data if I need
compress that data if I need
to the it is kind of continuous data
to the it is kind of continuous data
which is a little
which is a little
wonk uh but that's one
wonk uh but that's one
option it's a little awkward to do it
option it's a little awkward to do it
that way because then you still have to
that way because then you still have to
like you have to Output a Target on the
like you have to Output a Target on the
map which is
hard maybe it's not that
hard maybe it's not that
hard it might not be that hard honestly
you have to do like a
Decon the the thing is the entity based
Decon the the thing is the entity based
architecture is just really
architecture is just really
cool and it's a really nice opportunity
cool and it's a really nice opportunity
to do
to do
it but I don't know how fast it'll be
it but I don't know how fast it'll be
let me look at opening
I5 this this image
let me just fix the heat real
quick we might even want to just time
quick we might even want to just time
some different architectures you know
okay so this is the hard thing right
okay so this is the hard thing right
here you see how they have unit one
here you see how they have unit one
through
N I guess you can't see this on the
N I guess you can't see this on the
screen here so this is here this is unit
screen here so this is here this is unit
one through n they've got like a big
one through n they've got like a big
stack of units same thing as we have
stack of units same thing as we have
they've got a really fancy encoder but
they've got a really fancy encoder but
ignore it this is just like an MLP
ignore it this is just like an MLP
basically um you have all these
basically um you have all these
different units and you need to pick one
different units and you need to pick one
so again they have fancy architecture
so again they have fancy architecture
yada yada it doesn't matter the key
yada yada it doesn't matter the key
thing is that you eventually you get an
thing is that you eventually you get an
embedding for each of these so if
embedding for each of these so if
they're like 20 units you're going to
they're like 20 units you're going to
get 20 32 dimensional vectors or
get 20 32 dimensional vectors or
something and then you have these as
something and then you have these as
unit attention Keys you dot product them
unit attention Keys you dot product them
with the output of an lstm and then you
with the output of an lstm and then you
use this for
targeting it's a pretty reasonable way
targeting it's a pretty reasonable way
of doing uh targeting to be
honest I don't know if it's the best way
at least for the small scale
stuff the thing that's really obnoxious
stuff the thing that's really obnoxious
about entity data like
about entity data like
this is like you can kind of do
this is like you can kind of do
everything with 2D Maps right like if
everything with 2D Maps right like if
you think about it the thing that I just
you think about it the thing that I just
drew I can kind of do everything with 2D
drew I can kind of do everything with 2D
Maps like if I just output a 2d map of
Maps like if I just output a 2d map of
like hey these are where I want to
like hey these are where I want to
attack then I I don't have to even think
attack then I I don't have to even think
about this
about this
information but the thing is the the
information but the thing is the the
reverse is not
reverse is not
true I can't just do everything in terms
true I can't just do everything in terms
of entity data because you still need
of entity data because you still need
the freaking 2D map because you need to
the freaking 2D map because you need to
know that you're not pathing into
know that you're not pathing into
obstacles you need to know the
obstacles you need to know the
terrain so it's essentially like either
terrain so it's essentially like either
do everything in 2D map and try to make
do everything in 2D map and try to make
that as good as possible or you have to
that as good as possible or you have to
split it and now you have two things to
split it and now you have two things to
optimize and optimizing The Entity one
optimize and optimizing The Entity one
is not easy because like there's an
is not easy because like there's an
existing architecture that works
existing architecture that works
perfectly for this it's a Transformer
perfectly for this it's a Transformer
but it's too
big I mean the fact that um
the fact that
the fact that
like image gen models exist like DC
like image gen models exist like DC
again generative image
again generative image
models even the really early
models even the really early
ones that kind of tells me
ones that kind of tells me
that it's reasonable to
that it's reasonable to
do map data in map data
do map data in map data
out
out
right so the architecture I'm imag now
right so the architecture I'm imag now
is you have an input that's like a big
is you have an input that's like a big
stack of channels it's like a very many
stack of channels it's like a very many
ched image where like some of the
ched image where like some of the
channels are map data but the other
channels are map data but the other
channels are for entity data and you get
channels are for entity data and you get
it to be like some reasonable number
it to be like some reasonable number
maybe you compress it right
maybe you compress it right
whatever uh you do whatever you need to
whatever uh you do whatever you need to
do
do
there but the idea is like at the end of
there but the idea is like at the end of
the day you're going to end up with some
the day you're going to end up with some
number some reasonable number of
number some reasonable number of
channels of data it's all one data type
channels of data it's all one data type
it's just like a 3D thing 3D block of
it's just like a 3D thing 3D block of
numbers you do like a con
layer you do like one or two con layers
layer you do like one or two con layers
and a fully connected you put it through
and a fully connected you put it through
your
your
lstm and then the the decoder head is
lstm and then the the decoder head is
going to be the
going to be the
opposite so the decoder head will
opposite so the decoder head will
do hidden Dimension
projected into this
there are a lot of basic architectures
there are a lot of basic architectures
you could use for this actually now I'm
you could use for this actually now I'm
thinking about it
you could even do like one by one coms
you could even do like one by one coms
or
or
whatever that's essentially an entity
network was probably pretty fast as
well
well
yeah I think we need to probably code up
yeah I think we need to probably code up
one of these little architectures though
one of these little architectures though
and see how fast it is don't we
I've got an
I've got an
hour that'd probably be kind of fun to
hour that'd probably be kind of fun to
watch right we code up uh we're not
watch right we code up uh we're not
going to integrate it or anything but
going to integrate it or anything but
like we can code up a little test
like we can code up a little test
architecture just to see how reasonable
architecture just to see how reasonable
it is and like if this thing runs a
it is and like if this thing runs a
million steps per second then all we
million steps per second then all we
have to do is optimize the rest of the
have to do is optimize the rest of the
data Pipeline and it'll train it a
data Pipeline and it'll train it a
million steps per second or
whatever I mean I guess we have to like
whatever I mean I guess we have to like
estimate the train versus the forward
estimate the train versus the forward
pass and stuff
but it's pretty reasonable
overall how could this screw
overall how could this screw
up well the one way that I see if this
up well the one way that I see if this
screws up is
screws up is
like the action Space is really big
right yeah your action space is like 20s
right yeah your action space is like 20s
something
dimensional well that's like a discreet
dimensional well that's like a discreet
of
121 it's kind of rough isn't
it but like if you do an entity based
it but like if you do an entity based
one and you say like let's say you limit
one and you say like let's say you limit
it to 20 nearby Target targets you have
it to 20 nearby Target targets you have
a discreet of
20 you don't get any positional
20 you don't get any positional
awareness you have to learn
it I think we try
it I think we try
it I think we try it I mean
it I think we try it I mean
is there anything else we could
do the other thing we could do that
do the other thing we could do that
would be way
would be way
Jank but uh would let us actually get
Jank but uh would let us actually get
something working
something working
initially and this is probably where we
initially and this is probably where we
should start to be honest though it's a
should start to be honest though it's a
lot less
lot less
fun is let's say we just load up all the
fun is let's say we just load up all the
data that we want into this uh this
data that we want into this uh this
image format right we prepare all the
image format right we prepare all the
data we make a reasonable
data we make a reasonable
Network and then we just totally punt on
Network and then we just totally punt on
targeting right we just like script
targeting right we just like script
which agent you're going to hit and then
which agent you're going to hit and then
we let the agents learn uh they learn
we let the agents learn uh they learn
the movement they learn their button
presses
presses
right that'd probably be way easier to
right that'd probably be way easier to
get started
with in terms of scope here like
I bet you if I go that
I bet you if I go that
route I can have something
route I can have something
training on somewhat reasonable data at
training on somewhat reasonable data at
somewhat reasonable perf by the end of
somewhat reasonable perf by the end of
the day tomorrow if I go that
the day tomorrow if I go that
route whereas if I do this this is like
route whereas if I do this this is like
Uncharted
Uncharted
Territory and the thing is if I do the
Territory and the thing is if I do the
safe version of this I have a pretty
safe version of this I have a pretty
darn easy way to like try to
expand cuz like yeah there's no world in
expand cuz like yeah there's no world in
which
which
it's pretty much in every possible case
it's pretty much in every possible case
doing the first one makes the second one
doing the first one makes the second one
easier and doing the second one first is
easier and doing the second one first is
like really really really
hard okay so let's try
this let's just try it this way let's
this let's just try it this way let's
figure
figure
out how we're going to mess
out how we're going to mess
with all this map
with all this map
data it's a pretty safe format as well
data it's a pretty safe format as well
it keeps the network architectures very
it keeps the network architectures very
uniform
uniform
um
yeah I mean technically all we need is
yeah I mean technically all we need is
the map data to start with
right yeah we we just need the map data
right yeah we we just need the map data
to start with technically all
right let's see what what [ __ ] we
right let's see what what [ __ ] we
have in here that we can
adjust
adjust
[Music]
[Music]
observations what is
this oh this is kind of
this oh this is kind of
fine uh this function is
fine uh this function is
slow so what we're going to do is
we're going to want to do this and
see yeah we're going to want to do this
see yeah we're going to want to do this
and see
that's pretty easy to do isn't
it don't I have like a slice of this
somewhere buff.
somewhere buff.
observations yeah so right
observations yeah so right
here you can see this is self. obiz
here you can see this is self. obiz
self.size plus three
self.size plus three
right so
right so
it's actually pretty easy for me to know
it's actually pretty easy for me to know
how to structure
this see OBS player C OBS
this see OBS player C OBS
view self. OBS
view let's do this is M OBS view
view let's do this is M OBS view
map obs view
extra oh this was fine
right OB size times OB size
onward and we'll do OBS
onward and we'll do OBS
view uh OBS view of I
oh is this I correct wait OBS
oh is this I correct wait OBS
view re yeah this is fine so OBS view
view re yeah this is fine so OBS view
I OBS view extra of
I this self
dot
dot
Okay so
so this here
so this here
is unsigned Char
is unsigned Char
observations this is actually going to
be uh map
be uh map
observations or
observations or
observations map and then unsign Char
observations map and then unsign Char
observations
observations
extra
extra
map and then
map and then
CNP Ray wordss and we'll leave this
CNP Ray wordss and we'll leave this
hanging no let's fix it there we go
so so this is observations map extra
so so this is observations map extra
self.
self.
observations I think this is the only
observations I think this is the only
place we use it
place we use it
right
right
map okay and then we do self.
map okay and then we do self.
observations
observations
extra
extra
hid
zero
zero
playerx and this is a
uint this is a uent
uint this is a uent
here which is fine because the player uh
here which is fine because the player uh
position can only go
position can only go
from
from
Char I think I can do this maybe no
I do
this
this
reward we'll do player.
reward we'll do player.
reward do we do player.
reward or we do
reward or we do
rewards of
rewards of
PID sub. rewards of PID
that's probably good
right I think this is a decent
right I think this is a decent
architecture we have ability to add
architecture we have ability to add
stuff here we have a 2d map basic basic
stuff here we have a 2d map basic basic
basic starter
basic starter
architecture
architecture
right super
basic uh let's see if it compiles
they pretty
nice okay so far so
good e
uh okay so we have a few little bugs it
uh okay so we have a few little bugs it
looks
looks
like cannot reshape array of size
30 into 1 10 and
30 into 1 10 and
11 let's see what the heck is happening
11 let's see what the heck is happening
here
yeah oh I know what's happening that's
yeah oh I know what's happening that's
fine that's
dumb this is like three
dumb this is like three
right uh other way
around right here this one's three
bada bing bada
bada bing bada
boom this
works let's get
works let's get
uh well the network is actually probably
uh well the network is actually probably
kind of like minutes away from being
kind of like minutes away from being
valid with this frankly We'll add the
valid with this frankly We'll add the
config for
it unig slash
uh
voba
MOA
current we'll just like go add a s
current we'll just like go add a s
MOA we'll go add us like aoba
MOA we'll go add us like aoba
thingy which is it going to be like the
thingy which is it going to be like the
grid
grid
one it probably going to be pretty darn
one it probably going to be pretty darn
close to the grid one right
and then hold
on there
on there
[Music]
[Music]
are eight different
things so the grid policy it's very very
things so the grid policy it's very very
very similar to grid policy we've got
very similar to grid policy we've got
eight different channels on a
eight different channels on a
knit and then it gets
flattened there's our
P 32
P 32
plus yeah here's your flat right
plus yeah here's your flat right
here there's the continuous
here there's the continuous
[ __ ] here your features your
[ __ ] here your features your
features
features
5 by two Yep this
5 by two Yep this
identical so pretty much an identical
identical so pretty much an identical
architecture um there's one thing right
architecture um there's one thing right
here this seven has to be changed for an
here this seven has to be changed for an
eight big deal otherwise literally
eight big deal otherwise literally
identical architecture until we start
identical architecture until we start
messing with
messing with
it uh we should probably actually try to
it uh we should probably actually try to
make this run just to
see oh we should we should also adjust
see oh we should we should also adjust
the
the
uh we should adjust the batch size and
uh we should adjust the batch size and
[ __ ] to not be like
[ __ ] to not be like
insane uh we'll do like a
thousand 100
thousand 100
maybe mess with the BPT
Horizon we'll do like a th000 and 10,000
Horizon we'll do like a th000 and 10,000
maybe that's
maybe that's
reasonable
reasonable
um yeah that's fine
um yeah that's fine
and num M's num
and num M's num
workers prob be
good 157k is what we
good 157k is what we
expect it just works first
expect it just works first
pry that's so
pry that's so
funny that's so
funny that's so
funny okay so uh this thing just like it
funny okay so uh this thing just like it
works uh the main thing is that we don't
works uh the main thing is that we don't
have a way to reset the environment now
have a way to reset the environment now
so we need to wait for the environment
so we need to wait for the environment
to efficiently reset
to efficiently reset
itself uh and then as soon as we have
itself uh and then as soon as we have
that basically we can like well we can
that basically we can like well we can
absolutely tune this to be high
absolutely tune this to be high
performance so we can like tune this to
performance so we can like tune this to
make sure we're getting a million steps
make sure we're getting a million steps
per second train through put and then we
per second train through put and then we
get this very very tight feedback loop
get this very very tight feedback loop
where we like design reward function
where we like design reward function
train model in 3 minutes or whatever uh
train model in 3 minutes or whatever uh
plot one plot on WB see if anything
plot one plot on WB see if anything
happens log images to WB uh so we're
happens log images to WB uh so we're
going to have like it gets old fast when
going to have like it gets old fast when
you've been doing it for long enough but
you've been doing it for long enough but
if you haven't seen this type of work
if you haven't seen this type of work
before it's pretty cool because like you
before it's pretty cool because like you
get the model to do a lot of cool stuff
get the model to do a lot of cool stuff
very cool quickly and you fix like
very cool quickly and you fix like
dozens and dozens of bugs very very
dozens and dozens of bugs very very
quickly
quickly
um so I've got an hour or so no I don't
um so I've got an hour or so no I don't
have an hour I've got I've got 40
have an hour I've got I've got 40
minutes uh before I'm going to go for
minutes uh before I'm going to go for
dinner so I'm going to go use the
dinner so I'm going to go use the
restroom real quick and then when we
restroom real quick and then when we
come back here I'm going to make this
come back here I'm going to make this
environment have fast resets that's a
environment have fast resets that's a
very important simulation design aspect
very important simulation design aspect
it's actually probably one of the most
it's actually probably one of the most
common failure cases I see with RL
common failure cases I see with RL
environments out there is people put
environments out there is people put
tons and tons of effort into making
tons and tons of effort into making
their environments fast and then their
their environments fast and then their
resets are like a thousand times slower
resets are like a thousand times slower
or something and they totally lose all
or something and they totally lose all
their performance and then because of
their performance and then because of
the way they do their multiprocessing
the way they do their multiprocessing
they lose even more performance than
they lose even more performance than
they should off of that so we're going
they should off of that so we're going
to go through that I'm going to show you
to go through that I'm going to show you
how we cannot lose perf on reset and uh
how we cannot lose perf on reset and uh
we're going to go from there so I will
we're going to go from there so I will
be right back and then we will do that
be right back and then we will do that
and that'll set us up very very nicely
and that'll set us up very very nicely
for experimental side work tomorrow be
for experimental side work tomorrow be
right back
sh
e e
okay
let's close this out with
let's close this out with
um really really fast resets on this
m
m
relatively relatively easy to accomplish
relatively relatively easy to accomplish
usually it's possible I've made some
usually it's possible I've made some
design oversights that are going to make
design oversights that are going to make
this harder than I expect but I think it
this harder than I expect but I think it
shouldn't be that bad
what do we currently do in
what do we currently do in
reset we reset a bunch of players we set
reset we reset a bunch of players we set
some Lanes we call compute observations
some Lanes we call compute observations
nothing here is
nothing here is
hard nothing there is
hard nothing there is
hard um in fact it doesn't even really
hard um in fact it doesn't even really
need to be
need to be
there well I guess it
there well I guess it
does what about in it
where is
this okay
this okay
so the way points only need to be
so the way points only need to be
calculated once we don't need to do this
calculated once we don't need to do this
again on
reset uh the
reset uh the
towers everything can be pre-computed
towers everything can be pre-computed
for the towers when they're spawned we
for the towers when they're spawned we
just need to make sure that they're to
just need to make sure that they're to
respawn reset them we might need to add
respawn reset them we might need to add
like a couple attributes for like
like a couple attributes for like
default or base or
default or base or
something that's no big
something that's no big
deal ancients exact same thing no big
deal neutral camps same exact okay no
deal neutral camps same exact okay no
big deal easy easy
easy uh
the one thing
the one thing
is do you move on the
is do you move on the
grid you do move on the grid don't
you we have to reset the game
you we have to reset the game
board which is kind of
gross
gross
yeah so
technically when you spawn stuff in like
technically when you spawn stuff in like
this
right this isn't going to be that bad
right this isn't going to be that bad
though though cuz the games are so long
though though cuz the games are so long
that this is going to be
negligible yeah so this move to
function yeah we made it so that you
function yeah we made it so that you
move on the
grid I mean no matter what we do we'd
grid I mean no matter what we do we'd
have to have we'd have to reset a
have to have we'd have to reset a
grid also PID map has to be
grid also PID map has to be
reset so these two things have to be
reset so these two things have to be
reset I
guess that's no big deal
though let me
uh let's go fix this
we just reset
we just reset
um we just have to store the original
um we just have to store the original
grid
grid
right
right
Star Rig PID
map and then all we got to do no it's
map and then all we got to do no it's
not PID map right it was a r
not PID map right it was a r
grid uh where's
grid uh where's
grid grid yeah
here rig grid so we need this because it
here rig grid so we need this because it
has the uh well it has the original data
has the uh well it has the original data
I don't know rig grid grid.
I don't know rig grid grid.
copy copy the
copy copy the
original then on reset
spawn
spawn
Tower this sets like spawn X spawn y
Tower this sets like spawn X spawn y
right spawn
Tower
oops Yeah so it needs to set spawn X and
oops Yeah so it needs to set spawn X and
spawn Y no big deal
though they're just like a few variables
though they're just like a few variables
we basically have to make sure don't get
we basically have to make sure don't get
screwed up
that's all this
is way points are fine by
is way points are fine by
default so it's the spawn
Tower oh wait we literally the way we
Tower oh wait we literally the way we
did neutral spawns here is perfect we
did neutral spawns here is perfect we
kind of already did this for ourselves
yeah we should just do this for Towers
right do we do it for
right do we do it for
creeps I guess we don't do it for creeps
yeah let's just make uh so we have this
yeah let's just make uh so we have this
array neutral spawns right
here let's just do Tower
spawns Tower spawns
spawns
spawns
and we'll just
do um Towers
right power
right power
spawns and what we'll just do is
instead of doing spawn Tower
here oh we actually we need it all the
here oh we actually we need it all the
way up here yeah so Tower spawns the
way up here yeah so Tower spawns the
zeros here prefix suffix yada yada and
zeros here prefix suffix yada yada and
then we do self. Tower
then we do self. Tower
spawns idx0 is y and is X we no
spawns idx0 is y and is X we no
longer need to care about the team and
longer need to care about the team and
the tier idx team
the tier idx team
tier we do need to make a
tier we do need to make a
spawn Towers function
and let's just go grab all this code
and let's just go grab all this code
that we're going to
that we're going to
need uh we're not going to actually use
need uh we're not going to actually use
all of
this
so idx team
tier team
tier let's just
tier let's just
do oops Tower spawns we're going to make
do oops Tower spawns we're going to make
this for
this for
dim we're just going to do that this is
dim we're just going to do that this is
like YX team tier or
whatever easy
spawn
spawn
all so this is literally just like C
all so this is literally just like C
death int idx equals z int idx and then
death int idx equals z int idx and then
like four idx in range num
like four idx in range num
Towers spawn Tower like this that's
Towers spawn Tower like this that's
literally it
once we've extracted the data
once we've extracted the data
right
right
yeah idx team
yeah idx team
tier yeah it's
tier yeah it's
team idx team tier why yeah this is
team idx team tier why yeah this is
correct it's Jank but it's correct and
correct it's Jank but it's correct and
this will get us this will get us in the
this will get us this will get us in the
uh the ball game uh whatever in the ball
uh the ball game uh whatever in the ball
game this will get us on the playing
game this will get us on the playing
field at least for
field at least for
I don't know insert
I don't know insert
dumb thing here we need this so that we
dumb thing here we need this so that we
can reset [ __ ] fast that's all there is
can reset [ __ ] fast that's all there is
to it uh we no longer need this spawn
to it uh we no longer need this spawn
Tower we do
Tower we do
need self.
Tower team zero tier five we're just
Tower team zero tier five we're just
treating the ancient as a tier five and
treating the ancient as a tier five and
know it's kind of
know it's kind of
weird uh and then we just do
team one tier five
team one tier five
perfect okay
so now we're not actually spawning
so now we're not actually spawning
anything here if you look at
anything here if you look at
it we're just like setting up a bunch of
it we're just like setting up a bunch of
data so when we do reset
data so when we do reset
here we can just
here we can just
do self.
do self.
grid of everything is equal to the
grid of everything is equal to the
original grid and then we can do self.
original grid and then we can do self.
PID map of everything is equal
PID map of everything is equal
to1
to1
right and then we can just go
right and then we can just go
through the
through the
agents and we just respawn all these
agents and we just respawn all these
players they get their health damage XP
players they get their health damage XP
everything gets
everything gets
reset
reset
um and I'm sure that we're missing some
um and I'm sure that we're missing some
like variables so we're going to have
like variables so we're going to have
like horrible issues with this
like horrible issues with this
but that should be all we need
so yeah that should be all we
need what reward do we want to give them
I think we probably want to give them
um I don't know if XP reward will be
um I don't know if XP reward will be
enough yeah because they need to go
enough yeah because they need to go
towards the minions in order to get that
towards the minions in order to get that
XP
XP
reward which they're not going to do on
reward which they're not going to do on
their
their
own that's going to be hard so we'll
own that's going to be hard so we'll
give them a reward for going to the
give them a reward for going to the
uh for going to the other side and we'll
uh for going to the other side and we'll
give them a reward
give them a reward
for uh
XP so technically we should make this a
XP so technically we should make this a
four component
reward where we have
this uh
compute little bit hard to do that
that we'll just do a joint reward for
now for
both
both
so on kill
um this needs to
um this needs to
be
be
CD
CD
P
P
int
int
z p equals
and then what we do
and then what we do
is
is
XP and then we get the player has a
XP and then we get the player has a
reward so we do player.
reward how much xp do we give them for
reward how much xp do we give them for
this I mean how much reward do we give
this I mean how much reward do we give
per
per
XP on kill what's like the max
XP on kill what's like the max
here we give them a lot
do we divide by a
thousand you only get 35 for a neutral
though we probably don't want to just
though we probably don't want to just
give him one for killing
something we'll do p over a
th000 all
th000 all
right
and we also need to remember to reset at
and we also need to remember to reset at
the start of
Step player. reward is zero it's a big
Step player. reward is zero it's a big
common
mistake very easy to catch but common
mistake very easy to catch but common
mistake um so we gave them a reward for
mistake um so we gave them a reward for
kill we actually have to add it to the
kill we actually have to add it to the
player struct
player struct
right the float
reward no big
deal and we also have to give them a uh
deal and we also have to give them a uh
distance reward right
so instead of reward equals
zero we
zero we
do player. reward plus
do player. reward plus
equals or minus
equals we need to get like the fountain
equals we need to get like the fountain
position right it's
position right it's
obnoxious reward based on
obnoxious reward based on
distance
to oh distance from your own spawn is
interesting that scals better with the
interesting that scals better with the
other lanes doesn't it versus just going
other lanes doesn't it versus just going
down
mid a little
bit but then it doesn't drive you
bit but then it doesn't drive you
to the enemy base I think we do it B
to the enemy base I think we do it B
distance to
distance to
enemy uh
enemy uh
ancient so if player. team is
ancient so if player. team is
zero ancient should be get Tower
zero ancient should be get Tower
23 is the enemy
23 is the enemy
Tower
player
player
minus
minus
okay e def uh float dist
ancient dist to ancient is going to be
ancient dist to ancient is going to be
the absolute value
the absolute value
of this
distance
distance
yeah else get
yeah else get
22 and we can just even simplify
22 and we can just even simplify
this CA
this CA
float then this is going to be minus
float then this is going to be minus
equal
uh divided
by the maximum is 255 in
by the maximum is 255 in
L1 I think giving a crazy big reward is
L1 I think giving a crazy big reward is
going to
be we're going to do like this negative
be we're going to do like this negative
point1
I think this
works um compute
observations self. rewards of PID so
observations self. rewards of PID so
let's just make sure that we do
let's just make sure that we do
um self. rewards PID yeah there we go
um self. rewards PID yeah there we go
so that ought to give us something like
reward now we need to get the summary
reward now we need to get the summary
metrics I think
working because I kind of uh punted on a
working because I kind of uh punted on a
lot of the summary
lot of the summary
metrics
so yesh
so yesh
this is fine we get rid of this I don't
this is fine we get rid of this I don't
need
need
this
uh we still don't need this
uh we still don't need this
[ __ ] for now this is going to be random
[ __ ] for now this is going to be random
until we like Implement proper action
until we like Implement proper action
stuff or it's going to be the scripted
stuff or it's going to be the scripted
thing until we Implement proper action
thing until we Implement proper action
stuff uh we don't need this reward fill
stuff uh we don't need this reward fill
zero we do it on
zero we do it on
cide we don't need self. actions equal
cide we don't need self. actions equal
actions
we don't have um the reset thing
we don't have um the reset thing
right
outcome I think we just Auto
reset reset
C equals
zero I don't know it's not even
seated
seated
okay so this is now resetting correctly
okay so this is now resetting correctly
I
think
and what the hell happened
and what the hell happened
here oh I just
here oh I just
have the what happened to my client oh
have the what happened to my client oh
it just loaded
it just loaded
weird I actually don't know what the
weird I actually don't know what the
hell happened
hell happened
here oh I just commented a bunch of [ __ ]
here oh I just commented a bunch of [ __ ]
that's
fine or did I leave I think I left
fine or did I leave I think I left
something half commented Maybe
okay this is
okay this is
fine yeah fix
fine yeah fix
that uh rewards. suum this is fine
that uh rewards. suum this is fine
reward you get this radiant
reward you get this radiant
level Min radiant level this this thing
level Min radiant level this this thing
is not going to help us
is not going to help us
now um because it's like flat
I guess this tells us for the first
I guess this tells us for the first
environment which is
fine but we can leave this for now I
suppose and uh this needs to this return
suppose and uh this needs to this return
function is probably needed as well
function is probably needed as well
right bu rewards truncations yeah this
right bu rewards truncations yeah this
is
is
fine uh
let's let's see if we can get this thing
let's let's see if we can get this thing
to report a nonzero
reward where is this
1295 C def not allow oh yeah cuz
1295 C def not allow oh yeah cuz
it's let's just Define it up top who
it's let's just Define it up top who
cares
hopefully my mic is filtering the
hopefully my mic is filtering the
background noise
outside
365 um cannot assign float to
int
int
oh um
oh um
yeah that's
fine we'll just throw int on these
right there's going to be so much code
right there's going to be so much code
clean up on this project
team and tier cannot assign type float
team and tier cannot assign type float
to int
uh
uh
well this is
definitely oh
definitely oh
that'll do
it there's some stuff that looks like it
it there's some stuff that looks like it
needs to be
needs to be
typed
typed
but this does
but this does
build uh does it
eval nope
this needs to be uint or int
32 none type has
32 none type has
no that's fine
self. CN we don't need
this
cool dire level
Min what's going on here
so it's not spawning anything which is
so it's not spawning anything which is
probably
bads
yes entities.
shape
shape
1206 entities
C entities.
C entities.
view numpy Rec
array
array
um that's weird
maybe
this not convert
this not convert
shape to size 110
why is this 1 by
why is this 1 by
206 oh m is one duh that's
206 oh m is one duh that's
fine
um so this doesn't need to be reshaped
um so this doesn't need to be reshaped
right that's
fine probably doesn't need to be
fine probably doesn't need to be
reshaped either
step let's figure out what's going on
step let's figure out what's going on
here I think that it's just that you
here I think that it's just that you
need to do entities of zero or whatever
need to do entities of zero or whatever
cuz the environments are stored
cuz the environments are stored
separately let's figure that out I think
separately let's figure that out I think
what's happening is just like I have
what's happening is just like I have
this structured element where uh it's
this structured element where uh it's
expecting me to
expecting me to
go here
okay
okay
zero
zero
of 5 col
of 5 col
10 do
levels what the hell attributes does it
have oh dot yeah Dot
yeah there we
yeah there we
go that's not
bad no big deal so the bigger thing now
bad no big deal so the bigger thing now
is that the uh the just stuff is not
is that the uh the just stuff is not
spawning I'll show
spawning I'll show
you so nothing is spawning
you so nothing is spawning
here so let's figure out that
so when we call reset what
happens self. ticket set to
happens self. ticket set to
zero
and is it resetting every tick or
and is it resetting every tick or
something
dumb this is
dire
Victory let's just see if it's resetting
Victory let's just see if it's resetting
constantly before it can spawn
anything
possible I don't think so
though oh I'm
though oh I'm
right that's real funny
right that's real funny
get Tower 22. health so I guess when we
get Tower 22. health so I guess when we
spawn the
spawn the
towers oh we forgot to spawn all the
towers oh we forgot to spawn all the
towers
de spawn all
de spawn all
towers and now if we run
this hopefully stuff works Maybe
okay I suspect it's not going to reset
okay I suspect it's not going to reset
fully cleanly
fully cleanly
but there's your EnV
dire
dire
victory that actually looks like it
victory that actually looks like it
reset relatively cleanly
reset relatively cleanly
right maybe there were leftover creeps
right maybe there were leftover creeps
or something I don't know but scheme of
or something I don't know but scheme of
things that was a relatively clean reset
cool let's add like games played or
cool let's add like games played or
something well we'll do that later let's
something well we'll do that later let's
let's just get this thing to to
let's just get this thing to to
freaking uh to run so we'll rebuild this
freaking uh to run so we'll rebuild this
let's see if we run
let's see if we run
train I want to see if we get rewards
train I want to see if we get rewards
now mind you uh this is actually not
now mind you uh this is actually not
taking into account the neuronet actions
taking into account the neuronet actions
at the moment
at the moment
I just want to see if we can run the
I just want to see if we can run the
data through the
pipeline and get some
stats oh there you
stats oh there you
go radiant level Max radiant level
Min runs
this is running uh I think 20 copies of
this is running uh I think 20 copies of
DOTA
DOTA
now it's very slow we haven't done any
now it's very slow we haven't done any
form of optimization on
this none
whatsoever on the environment obviously
whatsoever on the environment obviously
we have
we have
you can see the forward pass is taking
you can see the forward pass is taking
up 71% of the
compute
compute
so um how's our memory usage on this
so um how's our memory usage on this
it's a good question if this is leaking
it's a good question if this is leaking
then we're going to have issues if
then we're going to have issues if
not stable
2.49 okay well we can do a little bit of
2.49 okay well we can do a little bit of
optimization on this this will be fun to
optimization on this this will be fun to
see we'll see how quickly we can get
see we'll see how quickly we can get
this to be uh stupidly stupidly
this to be uh stupidly stupidly
optimized
right I'm actually going to commit all
right I'm actually going to commit all
this code up and start this on the big
machine config ocean
it's actually really cool though that uh
it's actually really cool though that uh
it has not crashed the environment
it has not crashed the environment
through that whole time that's pretty
through that whole time that's pretty
impressive stability out of this
thing
thing
670,000 steps of D I think that's
670,000 steps of D I think that's
um this thing just played like three
um this thing just played like three
hours of
DOTA now it's going to play three hours
DOTA now it's going to play three hours
of DOTA per second let's get it to
that so here is our bigger box
that so here is our bigger box
right this has uh this is in the puffer
right this has uh this is in the puffer
cluster which I like to show off for the
cluster which I like to show off for the
stream
stream
so we are running this now on this
so we are running this now on this
Hardware this box right
Hardware this box right
here the puff rayi mini
cluster just literally a bunch of
cluster just literally a bunch of
desktops in a
garage uh pip install machine n we just
garage uh pip install machine n we just
set up p
we'll get ourselves a baseline since
we'll get ourselves a baseline since
this machine's way faster and then we'll
this machine's way faster and then we'll
optimize from here it'll be
fun the time zones for the stream are
fun the time zones for the stream are
funny it always gets uh more people
funny it always gets uh more people
looking at it at like 7 p.m. Pacific so
looking at it at like 7 p.m. Pacific so
welcome
folks mode to train in V
multiprocessing okay so our Baseline is
multiprocessing okay so our Baseline is
this trains at 14,000 steps per
this trains at 14,000 steps per
second uh this is like the worst
second uh this is like the worst
optimized possible uh many researchers
optimized possible uh many researchers
would be very happy to have their Atari
would be very happy to have their Atari
thing running at this
thing running at this
speed now let's
speed now let's
see config ocean
we should probably just grab some arcs
we should probably just grab some arcs
from like snake
right or
right or
grid
8192 this batch size is really
8192 this batch size is really
large let's do 8192 though or 4096 to
large let's do 8192 though or 4096 to
start is fine um I think you don't quite
start is fine um I think you don't quite
do
do
4096 because and it's 4090 which is
4096 because and it's 4090 which is
funny because it's the number on the
funny because it's the number on the
GPU um then we have to do o the thing's
GPU um then we have to do o the thing's
kind of made for powers of
kind of made for powers of
two little
two little
awkward not a big
awkward not a big
deal 4090 times I don't know
deal 4090 times I don't know
16 time
16 time
16 65 440
440 okay and so uh what we're going to
440 okay and so uh what we're going to
do is we're going to
run this is
run this is
49 copies of
49 copies of
DOTA per
DOTA per
core hopefully we have memory for this I
core hopefully we have memory for this I
think we
do but we're just going to set this numm
do but we're just going to set this numm
is going to be
is going to be
M's let's hopefully not crash my
M's let's hopefully not crash my
box
uh okay well that works I forgot to
uh okay well that works I forgot to
increase the uh the the config uh so we
increase the uh the the config uh so we
just did the amount of training we did
just did the amount of training we did
before in like a second
uh I told you this was going to be
fast billion
fast billion
steps a million there we
go okay so we're at 500,000 train
go okay so we're at 500,000 train
steps uh we should be able to get a
steps uh we should be able to get a
million
I'm a little curious as to why the m is
I'm a little curious as to why the m is
running that
slow
slow
24% it should be way faster than
24% it should be way faster than
this based on our
profile I mean we could always just
profile I mean we could always just
increase the core count and stuff
it's possible we made it a little slower
it's possible we made it a little slower
and might have to do a little bit more
and might have to do a little bit more
optimization based on the reset stuff we
optimization based on the reset stuff we
did uh let's do this MOBA perf
did uh let's do this MOBA perf
thing num m
thing num m
is
is
49 we'll run this
49 we'll run this
for 20 seconds
it's possible it's just substantially
slower in which case you know we can do
slower in which case you know we can do
more optimization on
it we have more cores than two for
it we have more cores than two for
now yeah so this is now only getting a
now yeah so this is now only getting a
700,000 steps per
700,000 steps per
second which you would still think would
second which you would still think would
be enough
[Music]
[Music]
maybe
maybe
not let's just uh let me try a few
not let's just uh let me try a few
little things real
quick uh just to make the math easier on
quick uh just to make the math easier on
myself I'm going to do this it's going
myself I'm going to do this it's going
to be 100 environments
exactly uh ocean was it
so we're going to do number of
so we're going to do number of
environments this is per
environments this is per
100 uh so let's
100 uh so let's
do we need 400
do we need 400
environments the triple
buffered no reason not to do this right
buffered no reason not to do this right
I guess there kind of
I guess there kind of
is
12 and then you need four environments
we do
we do
24 24m something like
24 24m something like
this ah this might be too
this ah this might be too
much we'll
much we'll
see we can do 8,000 mini batch size
see we can do 8,000 mini batch size
now oh actually we should do eight yeah
now oh actually we should do eight yeah
this is this gives us better scaling I
this is this gives us better scaling I
think and then uh we can do 160k
think and then uh we can do 160k
maybe six is this 16,000 no we want
maybe six is this 16,000 no we want
160k or actually 8 *
160k or actually 8 *
16 is uh
16 is uh
64 so
64 so
128 th like yeah like
128 th like yeah like
this let's try this oops not mob
this let's try this oops not mob
perf do we have anything running on this
perf do we have anything running on this
machine
machine
no oh wait this grid continuous thing is
no oh wait this grid continuous thing is
still training isn't
it is
it yeah okay this thing is good now it's
it yeah okay this thing is good now it's
no longer eating my
CPUs so we just run it like
CPUs so we just run it like
this like multiprocessing
is the chat working by the way uh nobody
is the chat working by the way uh nobody
said anything in forever I'm assuming
said anything in forever I'm assuming
it's not
broken okay that gives us 600,000 and
broken okay that gives us 600,000 and
the m is down to 1% which means we're no
the m is down to 1% which means we're no
longer bottlenecking on the end
longer bottlenecking on the end
whatsoever this is very
whatsoever this is very
good I see we have very high
good I see we have very high
MK test yep it's good thank you
welcome uh okay
welcome uh okay
so I think we just need to match some
so I think we just need to match some
train settings now because this should
train settings now because this should
be pretty much one to one the same with
be pretty much one to one the same with
everything else I guess maybe the
everything else I guess maybe the
uh maybe the continuous actions or
uh maybe the continuous actions or
something
something
weren't handled
correctly let's run it with discretise
correctly let's run it with discretise
on I might have to fix something
do I have a disc res setting yeah puffer
do I have a disc res setting yeah puffer
lib environments ocean
lib environments ocean
MOA oops
MOA oops
[Music]
[Music]
MOA uh
MOA let's see whether I uh I broke this
MOA let's see whether I uh I broke this
or not python
or not python
demo just run it like this screw it
good not
broadcast action space
could not bro broadcast from shape
could not bro broadcast from shape
two and
shape fix this real
quick if is
continuous got the mobile model it looks
continuous got the mobile model it looks
like this is good
where is it getting
where is it getting
actions of this shape
actions of this shape
from be getting them from the model
from be getting them from the model
right the actor gives
right the actor gives
you linear to
six oh right because this is not yeah
six oh right because this is not yeah
yeah this not remotely correct uh we
yeah this not remotely correct uh we
need to compute this
need to compute this
then uh
it's number of actions should be the sum
it's number of actions should be the sum
of this Vector up
of this Vector up
here so 3 + 3 this is
here so 3 + 3 this is
six plus 10
six plus 10
16 21 22
TCH 22 I think right here
six it's not six colon 9 at six
six it's not six colon 9 at six
colon 16 I
colon 16 I
think yeah that's like 0 to 10
think yeah that's like 0 to 10
perfect and then uh come on auto
perfect and then uh come on auto
complete
there we
go this work
now right I forgot to do
oops
torch we just need to comment this a
torch we just need to comment this a
little bit at the
little bit at the
end cool so now this
end cool so now this
network should be relatively uh
network should be relatively uh
reasonable this stack is not doing me
reasonable this stack is not doing me
any
any
favors stack expects tensors to be equal
favors stack expects tensors to be equal
size well that's not
size well that's not
good
good
um the thing is since I'm not using
um the thing is since I'm not using
these
these
anyways I can probably make my life way
anyways I can probably make my life way
easier for the just for the time being
easier for the just for the time being
we'll comment this we'll put this
we'll comment this we'll put this
back and we'll
back and we'll
do Moa
not broadcast from eight into three into
not broadcast from eight into three into
six I do it
six I do it
wrong so I'm basically here I have this
wrong so I'm basically here I have this
annoying uh action space I just need to
annoying uh action space I just need to
massage a little
bit right I forgot to update the other
bit right I forgot to update the other
thing so this is six plus this is uh
MOA or uh
MOA or uh
torch so this
torch so this
is this is 12
here
here
really I thought I had this
right oh I'm just dumb I just literally
right oh I'm just dumb I just literally
literally can't yeah 3 * 6 is 18 okay
arithmetic
cool looks like it
cool looks like it
runs I do VEC
runs I do VEC
multi that should be faster not slower
I do remember there being some weird
I do remember there being some weird
bugs though in uh P
bugs though in uh P
torch like some of the optimization
torch like some of the optimization
operations so if this is way slower it's
operations so if this is way slower it's
just a janky loss we can fix
that something's bull [ __ ]
here we're making the action space
here we're making the action space
discreet for
discreet for
now CBA with
this making it a discreet of
this making it a discreet of
18 that'll at least let us I want to
18 that'll at least let us I want to
just perf optimize this tonight is all I
just perf optimize this tonight is all I
want to do
I don't want to be dealing with annoying
I don't want to be dealing with annoying
pie torch like
pie torch like
quirks okay look this is just going to
quirks okay look this is just going to
go to a
go to a
discreet rate
discreet rate
18 or whatever and then this line has to
18 or whatever and then this line has to
get
get
commented right here
if this still doesn't work we've got
if this still doesn't work we've got
something
screwy very
possible be screw in the model
didn't take this long to start up before
right okay
right okay
so I'm assuming there's just something
so I'm assuming there's just something
weird with like the
weird with like the
way like we coded this with the
way like we coded this with the
continuous actions and then probably we
continuous actions and then probably we
just forgot
just forgot
something I'm going to put the
something I'm going to put the
continuous ones
continuous ones
back I'm going to hope that we can just
back I'm going to hope that we can just
optimize around it anyways
there really shouldn't be a perf
there really shouldn't be a perf
difference between the
difference between the
two if they're both done
two if they're both done
correctly okay I see I didn't even I
correctly okay I see I didn't even I
don't even know if we changed anything
don't even know if we changed anything
and now we're
and now we're
at okay so it slowed down a little
at okay so it slowed down a little
that's funny but like
that's funny but like
600k with the end being
600k with the end being
fast I'm seeing relatively High volumes
fast I'm seeing relatively High volumes
of MK
of MK
traffic uh some of that can be infos
traffic uh some of that can be infos
I don't see any info whatsoever though
I don't see any info whatsoever though
so I'm
assuming I I set the in I set the info
assuming I I set the in I set the info
reporting inal to be very
long yeah there we go that's the first
batch got very high forward pass
batch got very high forward pass
percentage time
very high misk
time that's like nearly 30% of the
time that's like nearly 30% of the
performance just in probably Cuda
performance just in probably Cuda
transfers or something
weird perf to grades a little over time
weird perf to grades a little over time
as
as
well onto optimization
well onto optimization
looks like it's going well too yeah this
looks like it's going well too yeah this
is just the start it's not actually
is just the start it's not actually
learning anything right now it it is
learning anything right now it it is
running the policy um but we're just
running the policy um but we're just
kind of ignoring the actions and running
kind of ignoring the actions and running
a scripted thing behind the scenes we're
a scripted thing behind the scenes we're
just trying to see if we run the policy
just trying to see if we run the policy
to get actions in the loop with the
to get actions in the loop with the
environments this is currently
environments this is currently
simulating um 2400 copies of DOTA at
simulating um 2400 copies of DOTA at
10,000 times and it's training at 10,000
10,000 times and it's training at 10,000
times real time uh the goal is to train
times real time uh the goal is to train
it 20,000 times real time so needs to
it 20,000 times real time so needs to
double
this GPU utilization is atrocious right
this GPU utilization is atrocious right
now to
35% take a look at some observation
35% take a look at some observation
spaces Maybe
uh well this is also the weird
uh well this is also the weird
continuous version which we haven't
continuous version which we haven't
tested as well I think
so what do you attribute low uh GPU
so what do you attribute low uh GPU
utilization to Demons you know
utilization to Demons you know
demons what you got to do the RL
demons what you got to do the RL
exorcisms for got to make sure that you
exorcisms for got to make sure that you
uh you know you pay your tithe to your
uh you know you pay your tithe to your
reinforcement learning priest
it it's mostly Cuda transfers and other
it it's mostly Cuda transfers and other
[ __ ]
though the old Goblins the old
Gins Ah that's funny the old
Gins Ah that's funny the old
gorlin oh funny let so
um did we allocate this buffer
um did we allocate this buffer
stupid were we stupid with this
stupid were we stupid with this
buffer observations no we got un and8
here so we have un 8
here so we have un 8
data and then when we Define the OB
data and then when we Define the OB
space what do we Define it as
you and eight so this is
correct we probably need to just get it
correct we probably need to just get it
working with the
working with the
discrete action
first since that's like the thing that's
first since that's like the thing that's
more likely to be stable
more likely to be stable
we just have to like redo
[Music]
oops these numbers are actually fine if
oops these numbers are actually fine if
we just take
we just take
like the zero off
maybe um
maybe um
just do 10 per core is a little
test
so oops mile
mile [ __ ] it's
mile [ __ ] it's
7:25 I got got to I got to get going
7:25 I got got to I got to get going
soon I hate to leave when the stream is
soon I hate to leave when the stream is
like doing so well
like doing so well
though but I am pretty
though but I am pretty
tired I'll get this one last thing to
tired I'll get this one last thing to
work thanks for uh for checking this out
work thanks for uh for checking this out
though always nice to see you drop by on
though always nice to see you drop by on
this we got lots of cool stuff
working I don't know if you saw we perf
working I don't know if you saw we perf
optimized uh single thread to uh
optimized uh single thread to uh
13 no 1.3 million steps per second
13 no 1.3 million steps per second
single
single
thread which is what I promised million
thread which is what I promised million
steps per second
right where the heck is this stupid
right where the heck is this stupid
thing
stuck that took most of the day though
this thing is just
this thing is just
stuck
stuck
right thing is just stuck being stupid
are you implying it's running
are you implying it's running
multi-threaded now
multi-threaded now
yeah and if so how are SPS
yeah and if so how are SPS
lower well they're not what you're
lower well they're not what you're
you're looking at training throughput
you're looking at training throughput
now so yeah if you're going to look at
now so yeah if you're going to look at
training through put that's going to be
training through put that's going to be
lower
lower
um that's going to be GP pu bottleneck
um that's going to be GP pu bottleneck
or Cuda bottleneck or
or Cuda bottleneck or
whatever but and there's some
whatever but and there's some
circumstances under which the the frames
circumstances under which the the frames
it'll drop lower as well because we
it'll drop lower as well because we
can't just have one copy of the
can't just have one copy of the
environment we need to have way more
environment we need to have way more
than one copy of the environment um so I
than one copy of the environment um so I
think like when I was running 400 copies
think like when I was running 400 copies
it was going down to like 700,000 steps
it was going down to like 700,000 steps
per second uh which is slightly too slow
per second uh which is slightly too slow
for what I wanted to do so I started
for what I wanted to do so I started
doing some other fancy things on 24
doing some other fancy things on 24
processes with 24 100 environments
processes with 24 100 environments
there's a whole thing that's going on U
there's a whole thing that's going on U
but basically like you want to have the
but basically like you want to have the
minimum number of environments that you
minimum number of environments that you
need usually uh when you're using this
need usually uh when you're using this
many of course and you want the thing to
many of course and you want the thing to
run such that the environment is using
run such that the environment is using
like z%
like z%
CPU well not 0% CPU it's you're waiting
CPU well not 0% CPU it's you're waiting
on the environment 0% of the time so
on the environment 0% of the time so
you're basically you're never
you're basically you're never
bottlenecking on the CPU it always has
bottlenecking on the CPU it always has
data prepared for when you want
data prepared for when you want
it and that you can reason
do what in the hell is wrong with this
do what in the hell is wrong with this
environment
though I mean puffer lib's vectorization
though I mean puffer lib's vectorization
is Dro in so like once it it literally
is Dro in so like once it it literally
took me five seconds to go from it being
took me five seconds to go from it being
single thread to multi- thread cuz
single thread to multi- thread cuz
puffer just does it for you and it's
puffer just does it for you and it's
fast now the thing that we're dealing
fast now the thing that we're dealing
with now is I don't know if it's a torch
with now is I don't know if it's a torch
issue or like a thing that I coded with
issue or like a thing that I coded with
the N weird um
yeah but something's
yeah but something's
Jank
so you get this
so you get this
thing you return the
thing you return the
action
continuous this should be fine
it getting stuck on the environment it
it getting stuck on the environment it
shouldn't be doing anything with these
shouldn't be doing anything with these
actions it literally shouldn't care what
actions it literally shouldn't care what
it's getting for
actions step
actions step
all
render I need
render I need
this infos
this is
dumb and
dumb and
discreet we got this thing running
discreet we got this thing running
discreet yep
one two
three it runs a few steps and then just
three it runs a few steps and then just
gets
gets
stuck doesn't make
stuck doesn't make
sense why the hell would the difference
sense why the hell would the difference
of actions make it get
stuck or is it even getting stuck is it
stuck or is it even getting stuck is it
getting stuck on receive
yeah it's stuck on the V environment
yeah it's stuck on the V environment
which is very
weird so the environment is hanging I
guess what if we do it single
thread
thread
one does it hang instantly
one does it hang instantly
then seg Vault
yay oh I
yay oh I
know I think I
know no wait I don't know thought I
know no wait I don't know thought I
knows I thought I knows
one
one
idea one idea and then I'm going to um
idea one idea and then I'm going to um
I'll answer a couple questions if
I'll answer a couple questions if
anybody has any cool stuff but then I'm
anybody has any cool stuff but then I'm
going to go get food because that's
going to go get food because that's
probably a thing that you need to
do action
space where do I make self-d actions
right
right
here this is float
32 self.
discretize okay
let's
do this is false self. discretize this
do this is false self. discretize this
has got to be
has got to be
false I bet it's just doing something
false I bet it's just doing something
weird with the underlying
end I just pass
end I just pass
false I leave the actions
let's
see Works
instantly hold
on it was just like a weird a typing
on it was just like a weird a typing
issue with a thing I was passing to the
issue with a thing I was passing to the
end breaking
it CNN not supported that's
it CNN not supported that's
weird okay let's actually set this thing
weird okay let's actually set this thing
to use a reasonable batch size
now for
live 100 m per core
usually you want like eight uh what it
usually you want like eight uh what it
like 8192 mini
like 8192 mini
batch DOTA doesn't divide by powers of
batch DOTA doesn't divide by powers of
two we try
this there you go
so it does like to dip a little bit
so it does like to dip a little bit
after a second of
after a second of
training I don't quite know why but
training I don't quite know why but
that's up to
that's up to
800 I'm sure we can get that stable it
800 I'm sure we can get that stable it
looks actually pretty well of course as
looks actually pretty well of course as
I say that it uh it
Flags very very weird actually that it
Flags very very weird actually that it
dips in steps per second like
dips in steps per second like
that because um the environment is not
that because um the environment is not
taking up any time you can see
taking up any time you can see
it
so I don't actually there's nothing here
so I don't actually there's nothing here
that should be variable
speed do I have something else running
speed do I have something else running
on this
machine like
machine like
that's pretty weird the way that that
that's pretty weird the way that that
just
happens could technically be infos could
happens could technically be infos could
be a number of
things we'll figure that out I'm
things we'll figure that out I'm
sure uh whatever that is there should be
sure uh whatever that is there should be
no instability so if we see 800k we
no instability so if we see 800k we
should be able to get
should be able to get
800k uh and then with some addition
800k uh and then with some addition
optimizations let me
see what do we do here batch side BPT
see what do we do here batch side BPT
Horizon
Horizon
16 update
EPO uh
config I don't see anything here that's
config I don't see anything here that's
bad
bad
there shouldn't be
two now nothing there looks obviously
two now nothing there looks obviously
bad except the BPT Horizon which isn't
bad except the BPT Horizon which isn't
going to help
going to help
us yeah
but 600k we saw 800 we'll be able to get
but 600k we saw 800 we'll be able to get
it it's the same exact architecture as
it it's the same exact architecture as
the grid
the grid
environment so there's there's actually
environment so there's there's actually
no reason that we wouldn't be able to
no reason that we wouldn't be able to
match it there's like some Jank under
match it there's like some Jank under
the hood that we'll have to debug I'm
the hood that we'll have to debug I'm
going to commit all this up so you guys
going to commit all this up so you guys
can play with it if you want uh reminder
can play with it if you want uh reminder
it's not actually like learning stuff
it's not actually like learning stuff
yet it is running it's not learning
yet it is running it's not learning
stuff yet
okay it's in any
okay it's in any
config
config
um tomorrow I'm going to try to actually
um tomorrow I'm going to try to actually
get models training on this
get models training on this
properly so we're going to probably set
properly so we're going to probably set
up like a proper or reasonable multi-
up like a proper or reasonable multi-
discreet
discreet
space to start with um we're going to
space to start with um we're going to
set
set
up the actions to actually control the
up the actions to actually control the
agents we're probably going to set up
agents we're probably going to set up
some sort of scripting thing for
some sort of scripting thing for
targeting because targeting is going to
targeting because targeting is going to
be really janky to represent early
be really janky to represent early
on um but they're going to be able to
on um but they're going to be able to
control movement uh qwe all that
control movement uh qwe all that
and we will see if we can actually get
and we will see if we can actually get
the models to like do something
the models to like do something
reasonable that'll be pretty cool to
reasonable that'll be pretty cool to
do uh and yeah other than
do uh and yeah other than
that I think it's pretty much set
that I think it's pretty much set
um technically we could probably even
um technically we could probably even
mix in like some semi-supervised data
mix in like some semi-supervised data
which would be
which would be
fun but yeah that's that's pretty much
fun but yeah that's that's pretty much
what we have for today let me show off
what we have for today let me show off
for folks that missed
for folks that missed
it we posted a few good
it we posted a few good
things yeah 13 1.3 million steps per
things yeah 13 1.3 million steps per
second single thread which is like over
second single thread which is like over
a gigabyte a second of data simulation
a gigabyte a second of data simulation
data we started at 150k took about 6
data we started at 150k took about 6
hours it was a mix of uh lowl C
hours it was a mix of uh lowl C
optimizations or scyon to C conversion
optimizations or scyon to C conversion
optimizations uh a few algorithmic
optimizations uh a few algorithmic
things and then one big one was a little
things and then one big one was a little
bit of caching that we
bit of caching that we
did we fixed a whole bunch of bugs along
did we fixed a whole bunch of bugs along
the way with this thing we got it uh
the way with this thing we got it uh
integrated with the neural network
integrated with the neural network
policy just in the last little bit we
policy just in the last little bit we
got the N resetting relatively
got the N resetting relatively
cleanly and this is now all committed up
cleanly and this is now all committed up
so the goal for the next couple days is
so the goal for the next couple days is
going to be to try to get some
going to be to try to get some
reasonable policies uh I I've done this
reasonable policies uh I I've done this
type of a thing before
type of a thing before
and the biggest problem is usually just
and the biggest problem is usually just
tons of of game bugs and figuring out
tons of of game bugs and figuring out
all the stuff that's broken with the
all the stuff that's broken with the
game and broken with the observations of
game and broken with the observations of
the game uh we also don't have a full we
the game uh we also don't have a full we
don't really have good high quality
don't really have good high quality
observation data yet either so I have
observation data yet either so I have
some methods of getting better
some methods of getting better
observation data that aren't going to be
observation data that aren't going to be
too hard we'll probably play with that a
too hard we'll probably play with that a
little bit as well um but I think that
little bit as well um but I think that
at the time being like we should
at the time being like we should
probably be able to learn
probably be able to learn
uh to learn a policy that will play and
uh to learn a policy that will play and
win the
win the
game high quality observation data it's
game high quality observation data it's
just really hard to extract this
just really hard to extract this
portions of local state data you want
portions of local state data you want
from the game uh and put them
from the game uh and put them
efficiently into data structure that
efficiently into data structure that
goes into a neural network so like the
goes into a neural network so like the
ways I did a whole segment on this where
ways I did a whole segment on this where
I was like looking at different data
I was like looking at different data
structures um yeah
structures um yeah
the the thing that you have to do is you
the the thing that you have to do is you
have to find a way to represent the data
have to find a way to represent the data
in a like in a way that you have a fast
in a like in a way that you have a fast
neuronet that can process it and not
neuronet that can process it and not
everything is fast hello and uh welcome
everything is fast hello and uh welcome
this is the little uh the tail end of
this is the little uh the tail end of
the stream 7:40 I got to go grab dinner
the stream 7:40 I got to go grab dinner
um I will be back on this
um I will be back on this
tomorrow I've been streaming the dev on
tomorrow I've been streaming the dev on
this project pretty much every weekday I
this project pretty much every weekday I
just pushed all the code so needs a
just pushed all the code so needs a
little bit of cleaning up but it's in
little bit of cleaning up but it's in
this any config branch in puffer lib it
this any config branch in puffer lib it
is all open source
is all open source
go ahead and start the repo on your way
go ahead and start the repo on your way
in it helps me up a whole bunch and uh
in it helps me up a whole bunch and uh
yeah I will I hate to end the stream on
yeah I will I hate to end the stream on
uh when we have actually pretty nice
uh when we have actually pretty nice
viewership but uh I got to get food so
viewership but uh I got to get food so
thanks all I'll be back tomorrow

Kind: captions
Language: en
I think we're back
on this is so obnoxious
I think the stream is back up
super obnoxious
I think we're
I think we're
back it's going to take uh it a second
back it's going to take uh it a second
to refresh on all the platforms before I
to refresh on all the platforms before I
continue with this I'm going to take um
continue with this I'm going to take um
I'm going to try tonight after the
I'm going to try tonight after the
stream maybe I'll I'll stop like 20 30
stream maybe I'll I'll stop like 20 30
minutes early uh and then I will uh I'll
minutes early uh and then I will uh I'll
like update OBS and try some stuff and
like update OBS and try some stuff and
hopefully that'll be
hopefully that'll be
better um I
better um I
this is not happening consistently but
this is not happening consistently but
it's been happening enough that this is
it's been happening enough that this is
like really obnoxious because it cuts my
like really obnoxious because it cuts my
vods into chunks as well so like I don't
vods into chunks as well so like I don't
get like the full day VOD just Auto
get like the full day VOD just Auto
posted on all the
posted on all the
platforms really obnoxious and then it
platforms really obnoxious and then it
like spams my uh my X feed as well with
like spams my uh my X feed as well with
like post of the
reconnects
reconnects
so whatever I'm going to continue with
so whatever I'm going to continue with
this
this
with this like walkthrough of stuff
with this like walkthrough of stuff
because this is partially for my own
because this is partially for my own
thoughts and hopefully people catch the
thoughts and hopefully people catch the
majority of it and ask if uh if they
majority of it and ask if uh if they
miss part of it but basically if you're
miss part of it but basically if you're
in this chunk here if you split the map
in this chunk here if you split the map
into chunks and you're in this chunk
into chunks and you're in this chunk
then all you need to do in order to find
then all you need to do in order to find
uh every possible agent that you need to
uh every possible agent that you need to
be able to see is you look through the
be able to see is you look through the
entities and the surrounding
chunks as well as in your own chunk and
chunks as well as in your own chunk and
this is because like if you're at the
this is because like if you're at the
corner over here right you still need to
corner over here right you still need to
be able to see uh you need to be able to
be able to see uh you need to be able to
see potentially this
see potentially this
far and then you do distance checks and
far and then you do distance checks and
filter based on
filter based on
that so this is how the algorithm is
that so this is how the algorithm is
supposed to
work uh and if it by the way if the
work uh and if it by the way if the
connection drops again I'm just going to
connection drops again I'm just going to
take however long it does to just update
take however long it does to just update
OBS immediately if not I'll just stay on
OBS immediately if not I'll just stay on
and until we're done
and until we're done
um so
there are a few issues with this though
there are a few issues with this though
especially
especially
because I hate to say it but this is
because I hate to say it but this is
kind of where like we start to need
kind of where like we start to need
C++ uh data structures which I didn't
C++ uh data structures which I didn't
want to include in syon I do have access
want to include in syon I do have access
to them I didn't want to include
to them I didn't want to include
them
them
but the reason for
but the reason for
this uh is that let's say that I look
this uh is that let's say that I look
into this chunk here right well this
Chunk we kind of need a list of like
Chunk we kind of need a list of like
agent right agent
agent right agent
One agent
two and this
two and this
list we need to get into this for this
list we need to get into this for this
list we we need o of
list we we need o of
one
access not look
access not look
up we need o of one add and delete is
up we need o of one add and delete is
what we need for this
what we need for this
right yeah so we need o of
right yeah so we need o of
one actually we
one actually we
need I don't know why I wrote it like
need I don't know why I wrote it like
that we need o of one look up
[Music]
[Music]
add and
add and
delete is what we
delete is what we
need uh we can do this
need uh we can do this
so if this structure
so if this structure
is so we use a linked
list and this is actually a 2X it's a
list and this is actually a 2X it's a
double link
list then this gives
list then this gives
us add and
delete but not look
up so then in order to get look
up so then in order to get look
up we need to
up we need to
store we would need to store the pointer
store we would need to store the pointer
to the entry in the
to the entry in the
list we need like agent
we would need like node uh we need to
we would need like node uh we need to
know the node index or
chunk IX maybe and then we need to
know oh this is now on my camera hold
on so we need to know the chunk index
on so we need to know the chunk index
and we also need a
and we also need a
pointer to the
pointer to the
node and the reason for that
node and the reason for that
is like think about it when you move the
is like think about it when you move the
agent from one from one tile to the next
agent from one from one tile to the next
we basically what we need to do is we
we basically what we need to do is we
need to look up whether we're moving at
need to look up whether we're moving at
chunks so we look up our current chunk
chunks so we look up our current chunk
index we look up the index of the chunk
index we look up the index of the chunk
that we're moving to that's just
that we're moving to that's just
math and then if we do move to a
math and then if we do move to a
different chunk then what we need to be
different chunk then what we need to be
able to do is O of one look it up in
able to do is O of one look it up in
that list which if we just have a
that list which if we just have a
pointer to the node in the list that
pointer to the node in the list that
gives us it and if it's a doubly linked
gives us it and if it's a doubly linked
list then we can snip it out of the list
list then we can snip it out of the list
in O of
one this works it's just really freaking
complicated to do this correctly
because this is now also
like if you're doing this with the link
like if you're doing this with the link
list then you also have dynamic memory
list then you also have dynamic memory
allocations
potentially you don't
want like this is totally doable it's
want like this is totally doable it's
just is it worth it
I'm trying to think how much this buys
us this still doesn't trivialize stuff
us this still doesn't trivialize stuff
right even with this fancy data
right even with this fancy data
structure
structure
structure
freaking this web UI is
bad this still doesn't even if we have
bad this still doesn't even if we have
this it doesn't trivialize it because
this it doesn't trivialize it because
you'd still want to like filter what
you'd still want to like filter what
agents are near you when what agents are
agents are near you when what agents are
far away
far away
right which is still going to be slow
you're also doing this chunk lookup
you're also doing this chunk lookup
stuff now which
stuff now which
means instead of just going through a
means instead of just going through a
simple array you're going through linked
lists which we're going to assume that
lists which we're going to assume that
has a decent constant Factor on it as
has a decent constant Factor on it as
well
well
right you're doing iteration through
right you're doing iteration through
nine linked
lists I think that in principle this
lists I think that in principle this
makes sense and this could work and this
makes sense and this could work and this
would make this essentially would solve
would make this essentially would solve
the problem of having an engine that is
the problem of having an engine that is
capable of doing
capable of doing
um really good entity based
learning this would solve that
problem this ain't trivial
though I wonder if there there's like
though I wonder if there there's like
some existing C++ library or something
some existing C++ library or something
that does
this there's probably like a C++ like
this there's probably like a C++ like
chunk system I don't know if there's a
chunk system I don't know if there's a
one that's as high perf as I would want
one that's as high perf as I would want
though you could totally just like get
though you could totally just like get
one of these things though and then plug
one of these things though and then plug
it into any game you
it into any game you
want cuz this is fully
want cuz this is fully
generic this is like completely
generic this is like completely
generic is there like a C++ chunk
implementation like
map I don't know what it would be uh
map I don't know what it would be uh
that you'd look
for but that's totally something that I
for but that's totally something that I
could
could
build um that would make this type of
build um that would make this type of
stuff work
it' be a little tricky as well because
it' be a little tricky as well because
you need to do like Vision stuff maybe
you need to do like Vision stuff maybe
well maybe
not I think this is a fun exercise and I
not I think this is a fun exercise and I
think that this actually gives us a
think that this actually gives us a
valid solution to like doing Ultra fast
valid solution to like doing Ultra fast
entity based
processing but this would need a much
processing but this would need a much
more compelling use case I think than
more compelling use case I think than
this
yeah it is somewhat annoying that the
yeah it is somewhat annoying that the
vision range is so limited at the moment
vision range is so limited at the moment
though
right only five tiles of vision is
right only five tiles of vision is
really not a lot to work
really not a lot to work
with like five in in any
with like five in in any
direction I think that's what we have it
direction I think that's what we have it
set to
which is I think what we did with snake
which is I think what we did with snake
that we figured out we could handle we
that we figured out we could handle we
could comfortably handle
that I mean that basically just gives
that I mean that basically just gives
you local obstacle detection
right I think it'll still be enough to
right I think it'll still be enough to
give you interesting training results
which is what we're
after if we were like 10x off of the
after if we were like 10x off of the
performance
performance
goal I would probably try to do
this because like this is the type of
this because like this is the type of
thing that gets you your your
thing that gets you your your
performance it's very hard to implement
performance it's very hard to implement
something like this but when you do it
something like this but when you do it
right this is what gives you your perf
right this is what gives you your perf
goal but I think for what I have now I
goal but I think for what I have now I
probably can get
probably can get
there more
easily with the current structure and a
easily with the current structure and a
few
few
changes though it does mean I'm probably
changes though it does mean I'm probably
going to have to copy paste some code
going to have to copy paste some code
because we're going to have to get rid
because we're going to have to get rid
of this double iteration thing that's
of this double iteration thing that's
going
on some limitations for
on some limitations for
sure but I think this will be good
sure but I think this will be good
enough if I tried to do this thing this
enough if I tried to do this thing this
would
would
be this would be potentially multiple
be this would be potentially multiple
additional days of
additional days of
work for this and
work for this and
uh I'm going to keep this in mind
uh I'm going to keep this in mind
though because this is a good Standalone
though because this is a good Standalone
project right there this is like this is
project right there this is like this is
the type of thing that you would
the type of thing that you would
actually do in Native uh Native C or C++
actually do in Native uh Native C or C++
by the way like this thing here this is
by the way like this thing here this is
what you would have you would implement
what you would have you would implement
this in C or C++ and then you would plug
this in C or C++ and then you would plug
it into every single like game sim that
it into every single like game sim that
you write thereafter and you'd have like
you write thereafter and you'd have like
really good entity based
really good entity based
processing uh lots of games have
processing uh lots of games have
something like
something like
this lots of games have something like
this lots of games have something like
this with the chunk
system but I would wager that the vast
system but I would wager that the vast
vast majority of them are not as
vast majority of them are not as
optimized as I would need it to be for
optimized as I would need it to be for
this like you need a really optimal
this like you need a really optimal
chunk
chunk
implementation let's take a look at what
implementation let's take a look at what
we have going on
we have going on
currently oh and I mentioned this before
currently oh and I mentioned this before
folks but if the stream goes down again
folks but if the stream goes down again
I'm just going to take however long it
I'm just going to take however long it
takes to update OBS and see if that
takes to update OBS and see if that
fixes it because the internet I think is
fixes it because the internet I think is
blipping but the internet's blipping for
blipping but the internet's blipping for
like a second and then OBS is blipping
like a second and then OBS is blipping
for two minutes
for two minutes
so I don't know what's
wrong
okay SE MOA
PX uh right we were looking at the HTML
PX uh right we were looking at the HTML
version Let's do let's go back to
that so
the plan right now so I can do this in a
the plan right now so I can do this in a
reasonable time
frame I actually should probably go make
frame I actually should probably go make
my shake
my shake
first so I'm going to go outline I'm
first so I'm going to go outline I'm
going to outline the plan take the three
going to outline the plan take the three
minutes or whatever to make myself a
minutes or whatever to make myself a
shake and then we're going to implement
shake and then we're going to implement
it we're going to do a little bit of
it we're going to do a little bit of
caching I'll go through the plan we're
caching I'll go through the plan we're
going to do that it should take about an
going to do that it should take about an
hour and then we'll have you know an
hour and then we'll have you know an
hour hour and a half maybe two hours
hour hour and a half maybe two hours
left for uh reinforcement learning
left for uh reinforcement learning
policies tonight which is about on track
policies tonight which is about on track
with what I wanted that where I wanted
with what I wanted that where I wanted
the project to be anyways so this is the
the project to be anyways so this is the
performance critical piece of code uh
performance critical piece of code uh
one very very minor optimization is I'm
one very very minor optimization is I'm
going to get rid of this
going to get rid of this
addition right here by uh doing this as
addition right here by uh doing this as
like y minus radius y Plus radius so on
like y minus radius y Plus radius so on
and so forth so that we don't have the
and so forth so that we don't have the
addition in the Inner
addition in the Inner
Loop then I'm going to
Loop then I'm going to
do uh is there anything else that can be
do uh is there anything else that can be
pre-computed
pre-computed
here no so I'm going to do that let me
here no so I'm going to do that let me
see if there's any other places for
see if there's any other places for
obvious
obvious
optimization into player y player
X this is fully discreet so I'm going to
X this is fully discreet so I'm going to
allow you to pass
allow you to pass
in no this is
in no this is
fine yeah so
I'm going to move this target type
I'm going to move this target type
down because you don't need it
immediately I'm going to maybe reorder
immediately I'm going to maybe reorder
these a little
these a little
bit in terms of how common they
bit in terms of how common they
are we're going to see what we get out
are we're going to see what we get out
of
of
that and then what I'm going to do and
that and then what I'm going to do and
this is the part that pains me a little
this is the part that pains me a little
bit but I don't think that we can have
bit but I don't think that we can have
this structured the way it is I think
this structured the way it is I think
I'm going to make a code commit first
I'm going to make a code commit first
before I mess with it because uh this
before I mess with it because uh this
could potentially just screw up a bunch
could potentially just screw up a bunch
of the nice code that we have here
of the nice code that we have here
but this like scanning idea was
but this like scanning idea was
cute but the way that we're scanning
cute but the way that we're scanning
doesn't allow us to Cache anyways
doesn't allow us to Cache anyways
without making a massive data
structure well hold on maybe it does
structure well hold on maybe it does
maybe it
does what if I change
does what if I change
this what if I made those optimizations
this what if I made those optimizations
I just said
and I just made it so that every player
and I just made it so that every player
has its own scan
has its own scan
map or every entity has its own scan
map that's a decent amount of
map that's a decent amount of
data not a huge amount though not too
data not a huge amount though not too
bad if we give every player its own scan
bad if we give every player its own scan
map then what that means is
map then what that means is
that scan map is automatically cached
that scan map is automatically cached
until you call this function
until you call this function
again are you going to do scan map and
again are you going to do scan map and
then intersect with entity
then intersect with entity
positions uh the scan function does give
positions uh the scan function does give
you entity POS like this does give you
you entity POS like this does give you
that
that
already because it gives you all the
already because it gives you all the
agents that are within a chubby Chev
agents that are within a chubby Chev
square around you so will what we were
square around you so will what we were
doing before is I was looking at this uh
doing before is I was looking at this uh
I found there is a way to do a really
I found there is a way to do a really
hyper efficient chunk system uh that
hyper efficient chunk system uh that
would then scale to like it would let
would then scale to like it would let
you scale to much larger Vision ranges
you scale to much larger Vision ranges
and um it would really it would let you
and um it would really it would let you
scale to much larger Vision ranges is
scale to much larger Vision ranges is
the main thing and it would be really
the main thing and it would be really
snazzy but I think it would be like
snazzy but I think it would be like
multiple days of work and it would be
multiple days of work and it would be
the type of thing that I would probably
the type of thing that I would probably
have to build in like C or C++ native
have to build in like C or C++ native
because it's got memory allocations
because it's got memory allocations
maybe I could cize it but it would have
maybe I could cize it but it would have
to be like a standalone module that's
to be like a standalone module that's
perf tested alone and then integrated
perf tested alone and then integrated
into this as like a like an engine
into this as like a like an engine
add-on it's not
add-on it's not
simple it's it's just a chunking system
simple it's it's just a chunking system
but it has to be an ultra high
but it has to be an ultra high
performance chunking system like you
performance chunking system like you
need a data structure that has all of
need a data structure that has all of
One everything and the constant Factor
One everything and the constant Factor
on that matters a lot so it's a little
on that matters a lot so it's a little
bit
bit
rough but what I I was kind of looking
rough but what I I was kind of looking
at is I think that the easier way to hit
at is I think that the easier way to hit
a million steps per second right now uh
a million steps per second right now uh
we can hit a million steps per second
we can hit a million steps per second
per core right now if I think all I have
per core right now if I think all I have
to
to
do is there are a couple obvious
do is there are a couple obvious
optimizations on this that'll get me
optimizations on this that'll get me
like 5 10% more out of this function and
like 5 10% more out of this function and
then I think all I have to do is um if I
then I think all I have to do is um if I
make it so that every player has their
make it so that every player has their
own cash of
own cash of
scanning
scanning
then I make them I I make call this scan
then I make them I I make call this scan
AOE function like the creeps can call
AOE function like the creeps can call
this once every uh once per second
this once every uh once per second
instead of five times per
instead of five times per
second and that is a 80% reduction in
second and that is a 80% reduction in
the bottleneck step it should be at
the bottleneck step it should be at
least like um a 2X performance gain
least like um a 2X performance gain
overall and then that gives me
overall and then that gives me
immediately that gives me my 1 million
immediately that gives me my 1 million
SPS single
SPS single
thread without even doing anything else
thread without even doing anything else
and that's actually what DOTA does I'm
and that's actually what DOTA does I'm
pretty sure the DOTA creeps don't scan
pretty sure the DOTA creeps don't scan
every frame they Scan they scan like
every frame they Scan they scan like
once per second
once per second
for targeting
purposes so I'm pretty sure that will
purposes so I'm pretty sure that will
just do it for
us why does the step function say 4
us why does the step function say 4
seconds total time
oh that's fine
oh that's fine
yeah
yeah
so we're at 189,000 steps per second
so we're at 189,000 steps per second
right
now the step function looks super slow
now the step function looks super slow
but I think that this is just function
but I think that this is just function
call
call
Overhead because it's just calling [ __ ]
Overhead because it's just calling [ __ ]
tons of internal
tons of internal
functions um this because this has been
functions um this because this has been
lower ratio
lower ratio
before the creep Ai and neutral AI are
before the creep Ai and neutral AI are
dominant ated by which are the the main
dominant ated by which are the the main
sources these are dominated by the scan
sources these are dominated by the scan
AOE
AOE
function so I think if I just make the
function so I think if I just make the
scan AOE function 5x Faster by caching
scan AOE function 5x Faster by caching
80% of
80% of
it I think we just get our we get this
it I think we just get our we get this
to like say 400 or
to like say 400 or
500k uh and this is on my local desktop
500k uh and this is on my local desktop
which is at least or at most twice as uh
which is at least or at most twice as uh
half the speed of the other
half the speed of the other
one uh of the like the main
one uh of the like the main
machine so that's what we're going to do
machine so that's what we're going to do
we're going to make those
we're going to make those
optimizations and uh we're going
optimizations and uh we're going
to get our million steps per second and
to get our million steps per second and
then we're going to move on to the uh
then we're going to move on to the uh
the initial RL stuff uh there's one
the initial RL stuff uh there's one
additional optimization that we're going
additional optimization that we're going
to have to make which is actually going
to have to make which is actually going
to funny enough make this be much faster
to funny enough make this be much faster
uh and maybe this will even be more
uh and maybe this will even be more
impactful than all the stuff I'm doing
impactful than all the stuff I'm doing
now but we're going to do
now but we're going to do
multi-environment
multi-environment
vectorization maybe not ini we'll decide
vectorization maybe not ini we'll decide
but we're going to make it so that like
but we're going to make it so that like
you can batch run lots of different
you can batch run lots of different
environments while without going back to
environments while without going back to
python we're going to batch in
python we're going to batch in
scyon um
scyon um
yeah between those two we definitely get
yeah between those two we definitely get
over a million
over a million
SPS okay uh I'm going to go make my
SPS okay uh I'm going to go make my
shake that'll take me I don't know three
shake that'll take me I don't know three
or five minutes we're going to come back
or five minutes we're going to come back
we're going to get our million steps per
we're going to get our million steps per
second we're going to pass go we're
second we're going to pass go we're
going to collect $200
going to collect $200
uh and then we are going to hopefully
uh and then we are going to hopefully
have a bit of time to start on the RL
have a bit of time to start on the RL
today I'll be right
back
e
e
e
e
e
e
e
e e
okay cheers
let's go claim our million steps per
let's go claim our million steps per
second
so what we're going to do for
this it's not going to be that
this it's not going to be that
hard really not going to be that
hard really not going to be that
hard let me fix the AC real quick as
hard let me fix the AC real quick as
well one
sec is always trying to freeze me
okay
so we need to find the data structure
so we need to find the data structure
that we're using which is scanned
that we're using which is scanned
targets right here so we have this is a
targets right here so we have this is a
200 length struct struct
do
do
Max
and can't assign this here can
and can't assign this here can
you yeah we can't do that we have to do
you yeah we can't do that we have to do
Max scan targets is going to
Max scan targets is going to
be up here I
be up here I
think let's just do let's just do it as
think let's just do let's just do it as
a CA
uh it's Vision times V we can save a
uh it's Vision times V we can save a
little bit of memory here so it's it's
little bit of memory here so it's it's
11 * 11
121 I think technically for algorithms
it's yeah this is fine this works
and then what we're going to do is we're
and then what we're going to do is we're
just going to do
just going to do
um and where is
um and where is
it I don't initialize it do I I
it I don't initialize it do I I
should
should
scanned
Targets this gets initialized somewhere
Targets this gets initialized somewhere
doesn't it self. scan targets
huh oh no of course it doesn't get
huh oh no of course it doesn't get
initialized because it's not
initialized because it's not
uh it's not a 2d okay that's
uh it's not a 2d okay that's
fine
so we need Max
so we need Max
entities and Max G
entities and Max G
targets uh we're going to make this 256
targets uh we're going to make this 256
for
for
now and then we're just going to add a
now and then we're just going to add a
little Asser in to just catch ourselves
little Asser in to just catch ourselves
for when we inevitably forget this and
for when we inevitably forget this and
out of bounds this because this is one
out of bounds this because this is one
of those janky uh non checked
of those janky uh non checked
Cays so what we're going to do is we're
Cays so what we're going to do is we're
going to
going to
assert
assert
uh num agents
uh num agents
plus this has got to be less than equal
plus this has got to be less than equal
Max entities
uh and then it's going to be self.
uh and then it's going to be self.
obiz times self. obiz is got to be less
obiz times self. obiz is got to be less
than
than
Max
Max
scanned
okay so
okay so
now with the scan targets we just have
now with the scan targets we just have
to update this
to update this
function to scan by uh PID and entities
function to scan by uh PID and entities
do have a PID associated with them so as
do have a PID associated with them so as
long as I've remember remembered to set
long as I've remember remembered to set
it
it
correctly which hopefully I have we will
see let me just check yeah Towers got
see let me just check yeah Towers got
PID and spawn neutral got a PID spawn
PID and spawn neutral got a PID spawn
Reep has a pit and then obviously I know
Reep has a pit and then obviously I know
the players have a pit perfect
the players have a pit perfect
so this actually sets this up very nice
so this actually sets this up very nice
so uh
so uh
scan scan
what we're going to
do we just need int
do we just need int
PID
PID
PID play. PID and this is actually PID
PID play. PID and this is actually PID
idx is equal to Target
this is PID
this is PID
idx and that's
idx and that's
it now wherever we use a when we
it now wherever we use a when we
wherever we use the scan targets we of
wherever we use the scan targets we of
course we have to update this as
course we have to update this as
well PID equal player.
well PID equal player.
PID Target equal scan Target PID
PID Target equal scan Target PID
idx scan targets we just have to update
idx scan targets we just have to update
this everywhere we use it PID
this everywhere we use it PID
l. PID
PID and right
here
P
PID this is also uh inefficient we
PID this is also uh inefficient we
should cache
should cache
this target is scan Target and then if
this target is scan Target and then if
Target
break and that's a little
better scan
targets that's
targets that's
it I think these are the oh right here
it I think these are the oh right here
we missed
one we do Target
Target is equal to
null so let's see if we broke
anything this is a big
anything this is a big
change we broke lots of things of
change we broke lots of things of
course cannot convert python
object 886
push player
push player
Target oh that's
Target oh that's
weird uh we
do well this is I guess we just copied
do well this is I guess we just copied
this or something because this doesn't
this or something because this doesn't
make any
make any
sense
sense
um yeah so we we do
um yeah so we we do
entity start
Target we don't need
Target we don't need
this xit this is
this xit this is
good that do
it invalid index type in in oh right
it invalid index type in in oh right
this is not
this is not
the can I make this a memory View
I can't make this a memory view
right no I can't it's
obnoxious I can make a 2d entity right
obnoxious I can make a 2d entity right
though
though
right let me
see not
see not
allowed wait not allowed in a constant
expression array Dimension not
expression array Dimension not
integer incomplete well let's make sure
integer incomplete well let's make sure
I'm allowed to do this first
then Max entities Max scan
Targets this looks correct to
Targets this looks correct to
me uh maybe there you're not allowed to
me uh maybe there you're not allowed to
do this cuz it's not like a constant or
something and do like a pound
ofine
ofine
nope well that's
nope well that's
fine we'll just hard code Max
Max entities Max G
targets I know can you initialize stuff
targets I know can you initialize stuff
here like
this guess we'll find out
cannot
assign
assign
oh hold
oh hold
on I'm just getting a ray syntax
on I'm just getting a ray syntax
confused I believe
confused I believe
it's is the syntax right
does that get rid of one
bug yes it does so let's see now if I go
back maybe I'm allowed to use
back maybe I'm allowed to use
this I should be able to
this I should be able to
right unless it's like hey this isn't a
right unless it's like hey this isn't a
constant what if I do constant
I don't know if it ignores it or not
I don't know if it ignores it or not
we'll
see Max enity is Max scan targets
okay we can do it we just don't need the
const which is
fine const correct code is
fine const correct code is
stupid
stupid
anyways o not allowed in a constant
expression what's wrong with this
I guess we are not allowed to do it
I guess we are not allowed to do it
after all
after all
huh that
sucks so we were write the first time I
sucks so we were write the first time I
think it's because you don't have
think it's because you don't have
constants and like pound
constants and like pound
defines that you're not allowed to do
defines that you're not allowed to do
this because it it doesn't know that
this because it it doesn't know that
this is going to not it doesn't know
this is going to not it doesn't know
that this is a constant at compile time
that this is a constant at compile time
right so it's like hey this [ __ ] might
right so it's like hey this [ __ ] might
change um so I think we're like you
change um so I think we're like you
can't even
can't even
this I think you just put a comment here
Max this is like
Max this is like
right and then you just hope that this
right and then you just hope that this
you can't even do these asserts you just
you can't even do these asserts you just
hope you don't screw it
hope you don't screw it
up actually there is one thing we can
do we can at least give
ourselves so this is real dumb but it
ourselves so this is real dumb but it
gives us the same don't shoot ourselves
gives us the same don't shoot ourselves
in the foot
protection now we rebuild
and perfect all we have are index
errors I do wonder if we
errors I do wonder if we
should
Alias I actually don't know how that
Alias I actually don't know how that
works if you can pass or
works if you can pass or
raise um we're going to just swap the
raise um we're going to just swap the
syntax like this for now and if it's
syntax like this for now and if it's
really slow we'll change it it should
really slow we'll change it it should
not be really slow though
let's see if this actually runs now or a
let's see if this actually runs now or a
perf
test it should be same speed but you
test it should be same speed but you
never
know yeah same
speed pretty much spot on same speed so
speed pretty much spot on same speed so
now the thing is the reason we just did
now the thing is the reason we just did
that is so we can cache
right let me figure out uh well there's
right let me figure out uh well there's
one other optimization we can do first
one other optimization we can do first
that's a little easier so let's do
that here it
that here it
is so what we're going to do this is no
is so what we're going to do this is no
longer going to be Y and X
player
player
Y is player
Y is player
X
X
right and what we're going to do is now
right and what we're going to do is now
we're going to do int
y x it's now y this is X this is layer
y x it's now y this is X this is layer
Yus radius player y +
Yus radius player y +
radius player xus
radius like this now this PID map
radius like this now this PID map
doesn't have to do any math on the
doesn't have to do any math on the
index which is very
index which is very
nice we also move this target
nice we also move this target
type down to
type down to
here because we don't need
here because we don't need
it um
it um
exclude friendly before exclude
exclude friendly before exclude
hostile the most commonly excluded type
hostile the most commonly excluded type
I believe
is it's the creep
is it's the creep
targeting creeps don't Target
neutrals and neutrals don't Target each
neutrals and neutrals don't Target each
other though I think that this is fine
other though I think that this is fine
either
either
way uh and then we do scan targets
way uh and then we do scan targets
perfect return idx greater than zero so
perfect return idx greater than zero so
this should be the exact same thing it
this should be the exact same thing it
may or may not make a performance
may or may not make a performance
difference this is a very small
difference this is a very small
optimization but this is the most
optimization but this is the most
performance critical piece of code in
performance critical piece of code in
the entire project so it is possible
it is faster than before but it's
it is faster than before but it's
potentially within the
potentially within the
noise I mean it's definitely faster we
noise I mean it's definitely faster we
don't know how by how much if it's
don't know how by how much if it's
substantial or not but who cares we have
substantial or not but who cares we have
it as fast as it can reach reasonably be
it as fast as it can reach reasonably be
now uh and the only thing we have left
now uh and the only thing we have left
to do is implement the caching so let's
to do is implement the caching so let's
do
that scan
AOE and and how do we do this found
AOE and and how do we do this found
Target
thing so what you do is you go
through scan targets pit is equal to
through scan targets pit is equal to
null so this actually doesn't even have
null so this actually doesn't even have
to return
anything because it sets this null right
here like
this so there are like a few places
this so there are like a few places
where we call the scan
where we call the scan
AOE let's start with the
AOE let's start with the
uh the creep
AI okay so we have we scan
AOE and then we do if self.
AOE and then we do if self.
scanned is not equal to
scanned is not equal to
null zero
null zero
in
in
PID
PID now there's some follow-up logic
PID now there's some follow-up logic
we're going to probably have to do once
we're going to probably have to do once
we implement this because the caching is
we implement this because the caching is
going to make a few things a little bit
going to make a few things a little bit
weird but um we have self. tick anywhere
weird but um we have self. tick anywhere
yeah we do have self.
yeah we do have self.
tick if self.
tick if self.
tick percent
tick percent
5 is equal to zero we
scan and that's literally
scan and that's literally
it and now let's do the neutral one
player AOE attack can still have a
player AOE attack can still have a
updated scam AOE push can have an up
updated scam AOE push can have an up
these are all
these are all
simple I think the towers can even have
simple I think the towers can even have
uh
well they're probably kind of slow right
we'll do like every three
ticks for the
ticks for the
tower in 6 seconds it's a little
faster this fast
enough and
uh and then this is the last place right
uh and then this is the last place right
here
let's see if it
works we forgot to Define
weot to Define
weot to Define
PID
PID
PID we actually don't need found Target
PID we actually don't need found Target
creep AI we probably don't need it in
creep AI we probably don't need it in
creep AI either
right uh is there a found
right uh is there a found
Target oh guess
not so if this works this is the last
not so if this works this is the last
piece of the puzzle I think to get us
piece of the puzzle I think to get us
the the perf we need
so we get
m.p not as big as a uh as an increase as
m.p not as big as a uh as an increase as
I would have
thought but now actually like almost
thought but now actually like almost
this so much of this time is in the step
this so much of this time is in the step
function that you almost don't
know I think we should here we should
know I think we should here we should
compile we should compile this without
compile we should compile this without
um without C profile on or without uh
um without C profile on or without uh
what is
what is
it we should compile this without
it we should compile this without
profile director on directive
profile director on directive
on because I still don't know how much
on because I still don't know how much
overhead the function calls are
overhead the function calls are
so scon profile false
right there's still some stuff that we
right there's still some stuff that we
probably need to be uh caching in the
probably need to be uh caching in the
the attack
the attack
functions let's see how close we are
functions let's see how close we are
though
oh we're there we
oh we're there we
win
win
cool
um that's well let's see if this
um that's well let's see if this
actually hold on before I say we're
actually hold on before I say we're
there
oh look it's the exact same game we
oh look it's the exact same game we
didn't break anything that's
amazing at least nothing critical it
amazing at least nothing critical it
looks the exact
looks the exact
same okay so there you have it guys um
same okay so there you have it guys um
this is
this is
680,000 steps per
680,000 steps per
second uh we started today at
second uh we started today at
70,000 so we got a 10x
70,000 so we got a 10x
Improvement and uh as I've said several
Improvement and uh as I've said several
times this is my local desktop here
times this is my local desktop here
which is an old machine the puffer boxes
which is an old machine the puffer boxes
which are the target Hardware uh which
which are the target Hardware uh which
is just a higher-end desktop those cores
is just a higher-end desktop those cores
are at least twice as fast so this is
are at least twice as fast so this is
well over a million steps per second and
well over a million steps per second and
mind you this is with um where is
mind you this is with um where is
it well you can't even see the total
it well you can't even see the total
amount of overhead because it's not
amount of overhead because it's not
showing you but um this is uh a low-end
showing you but um this is uh a low-end
estimate as well because we're also
estimate as well because we're also
going to vectorize this so we can do
going to vectorize this so we can do
multiple copies of the environment at
multiple copies of the environment at
the on the same scon
the on the same scon
process so that's going to bump this up
process so that's going to bump this up
a whole bunch as
a whole bunch as
well so there you
well so there you
go we hit
it 10x perf Improvement in a
it 10x perf Improvement in a
day I think that's pretty good that's
day I think that's pretty good that's
pretty good
pretty good
progress um
progress um
could it be faster yeah it could be
could it be faster yeah it could be
faster it could definitely be faster but
faster it could definitely be faster but
uh this is going to allow us to do
uh this is going to allow us to do
pretty much everything we
pretty much everything we
need uh yeah they're going to be allow
need uh yeah they're going to be allow
us to do pretty much everything we need
us to do pretty much everything we need
so it's a little bit awkward for uh the
so it's a little bit awkward for uh the
reinforcement learning side at the
reinforcement learning side at the
moment because I do kind of need to
moment because I do kind of need to
write that binding don't
write that binding don't
I I do kind of need to write the binding
I I do kind of need to write the binding
for
for
that you not really going to be able to
that you not really going to be able to
do RL until I have the multi uh the
do RL until I have the multi uh the
multiprocess not the multiprocess
multiprocess not the multiprocess
multiple environments uh
multiple environments uh
per per scon process because right now
per per scon process because right now
there's a there's a 250 some odd
there's a there's a 250 some odd
megabyte map that needs to be shared and
megabyte map that needs to be shared and
if you don't share it properly if you
if you don't share it properly if you
just like make a bunch of different
just like make a bunch of different
processes and all load it up uh then
processes and all load it up uh then
it's going to be way too
it's going to be way too
slow
slow
256 258 I don't know what it was
256 258 I don't know what it was
megabyte pathing data
I'm going to commit this for now though
I'm going to commit this for now though
and uh we're going to run it on maybe
and uh we're going to run it on maybe
we'll run it on one of the bigger boxes
we'll run it on one of the bigger boxes
just for
fun want this data
fun want this data
file this mobile
file this mobile
file want this pre-computation
file want this pre-computation
file and we want the setup file anything
else looks like that's
it oh do we want this MOBA per
it oh do we want this MOBA per
file maybe just for
now e
five hours or so of work
on set up
build come
on this just weird we had this before
on this just weird we had this before
this is just weird pip
Shenanigans I think you just have to run
Shenanigans I think you just have to run
these a couple times until
these a couple times until
it I don't know it's
it I don't know it's
weird how about now
how about
now you can see it's building something
now you can see it's building something
even though I just built it because it's
even though I just built it because it's
taking that long
I'm
bizarre it was literally what I did last
bizarre it was literally what I did last
time and it
time and it
worked is
worked is
dumb okay what the hell is there a file
dumb okay what the hell is there a file
missing
here there is an underscore underscore
here there is an underscore underscore
knit that I forgot to commit
I think that's what it was it was just
I think that's what it was it was just
the inet
the inet
file I don't know if it was the PIP
file I don't know if it was the PIP
install or the build that made it work
install or the build that made it work
though obviously these things that will
though obviously these things that will
be worked out before
be worked out before
release but this is the type of boring
release but this is the type of boring
thing where if I were to get it
thing where if I were to get it
understand exactly what's happening and
understand exactly what's happening and
now I'd be scratching my head for three
hours there we
hours there we
go it was just the init file
let me just make sure this is
correct multiply and it should be
correct multiply and it should be
multiplied by 10 right number of ticks
multiplied by 10 right number of ticks
times 10 because there are 10
agents
right this can obviously shift by a
right this can obviously shift by a
reasonable Factor depending on what's
reasonable Factor depending on what's
going on in the game but I think is an
going on in the game but I think is an
initial perf test
initial perf test
we are
set
set
30 4 million function
30 4 million function
calls
cool oops
let us
post thank you Stars much
appreciated I this is so stupid how the
appreciated I this is so stupid how the
internet works this stupid post of mine
internet works this stupid post of mine
has a thousand likes on it
32,000
views so ridiculous how that works and
views so ridiculous how that works and
it doesn't get you like it doesn't
it doesn't get you like it doesn't
convert anything it's just like
convert anything it's just like
congratulations on your internet points
congratulations on your internet points
you made a funny
you made a funny
joke all
right do I post the GIF again or do I
right do I post the GIF again or do I
just post the perf screenshot I probably
just post the perf screenshot I probably
post the GIF again right even though
post the GIF again right even though
it's repetitive
I think you have to reexport a gift
I think you have to reexport a gift
though so that it gives you a
though so that it gives you a
different you doesn't record you as like
different you doesn't record you as like
posting the same Media or whatever let's
posting the same Media or whatever let's
do that real
quick and then uh we actually will get
quick and then uh we actually will get
to do the the multi like the multi
to do the the multi like the multi
whatever multi environment thing that I
whatever multi environment thing that I
was talking about and then we get to do
was talking about and then we get to do
a little RL
a little RL
just a little bit
just a little bit
today I said Thursday at the latest
today I said Thursday at the latest
we'll get to start it you know Wednesday
we'll get to start it you know Wednesday
evening that's on
evening that's on
track gives us all day tomorrow to work
track gives us all day tomorrow to work
out good policy
out good policy
stuff obviously we're not going to have
stuff obviously we're not going to have
like the game being solved immediately
like the game being solved immediately
but oh hello there let me I didn't see
but oh hello there let me I didn't see
your message because the thing was oh no
your message because the thing was oh no
that's just will that was from earlier
that's just will that was from earlier
this thing covers the transparent whoop
this thing covers the transparent whoop
transparent
UI I think we screwed up here as well
UI I think we screwed up here as well
hold
on I hate the windows thing that just
on I hate the windows thing that just
like yeah let me minimize all your stuff
like yeah let me minimize all your stuff
on where did everything
on where did everything
go uh here here this is
fine okay
I
right we needed
this we need self this is self. outcome
this we need self this is self. outcome
now it should work it needs to just be
now it should work it needs to just be
able to know when the game's over
and we should see this takes like 14,000
steps uh oh is it behaving
steps uh oh is it behaving
differently we getting no radiant just
differently we getting no radiant just
took tier
three dire took tier three as well dire
three dire took tier three as well dire
just took tier four radian has taking
just took tier four radian has taking
tier four it's very close
tier four it's very close
game long game as
game long game as
well and there you
well and there you
go that looks like a radiant
go that looks like a radiant
Victory radiant victory
Docker dire Victory so this is actually
Docker dire Victory so this is actually
radiant
radiant
Victory right
single
red e
where is
where is
it my file
go that's pretty
cool it's actually radiant victory
cool it's actually radiant victory
there we
go how much data is that
gigabyte a second I'd say
that's better this
way that's
nice okay
nice okay
so that's
so that's
fun I promised 1 million steps per
fun I promised 1 million steps per
second I delivered 1 million steps per
second I delivered 1 million steps per
second um now it's mostly just what can
second um now it's mostly just what can
we train with this and know a few more
we train with this and know a few more
Integrations we obviously like there's a
Integrations we obviously like there's a
whole bunch of stuff that's not fully
whole bunch of stuff that's not fully
implemented in the game that we're going
implemented in the game that we're going
to have to do but uh this is kind of
to have to do but uh this is kind of
enough to get
enough to get
started it's pretty
started it's pretty
stable I think that there's
stable I think that there's
um I mean even with this like there's
um I mean even with this like there's
probably some cool stuff the agents
probably some cool stuff the agents
could learn
could learn
right now whether they're smart enough
right now whether they're smart enough
to learn it who
to learn it who
knows they kind of actually have to at
knows they kind of actually have to at
least go down the
lane but probably if you give them some
lane but probably if you give them some
like really basic objective function
like really basic objective function
like if you just give them a reward for
like if you just give them a reward for
going for getting to the enemy Tower or
going for getting to the enemy Tower or
the enemy
the enemy
Fountain they'll probably learn to do
Fountain they'll probably learn to do
something
right with this much data
yeah they'll learn to do something
yeah they'll learn to do something
cool I have no idea how cool but I'll be
fun
okay so the one other thing that we have
okay so the one other thing that we have
to figure out how to do here which is
is it
non-trivial no it's pretty
trivial we just have to figure out how
trivial we just have to figure out how
to run these things in a loop
basically I did this in
basically I did this in
uh I think I did this in snake didn't I
on the continuous
grid see
grid see
grid
oops oh did I not do it
oops oh did I not do it
here maybe I did it in snake
yeah right
yeah right
here
so I have this step all
so I have this step all
function that takes a list of
function that takes a list of
M yeah okay I remember so this is
M yeah okay I remember so this is
actually pretty
actually pretty
easy so what you do is you make a list
easy so what you do is you make a list
of you just make a list of these
of you just make a list of these
environments on the python
environments on the python
side and
side and
this isn't perfectly
this isn't perfectly
scyon um it's not
scyon um it's not
perfect but uh it's better than vanilla
perfect but uh it's better than vanilla
for calling steps in a
for calling steps in a
loop um by a substantial
loop um by a substantial
margin and it'll it'll still uh break up
margin and it'll it'll still uh break up
a little bit of call
a little bit of call
Overhead
Overhead
and I think the main thing was the way I
and I think the main thing was the way I
was splitting up actions right
was splitting up actions right
step where is it get m.
step where is it get m.
step oh no was the way that I was
step oh no was the way that I was
populating the action vectors I
populating the action vectors I
believe so if you look at like snake
believe so if you look at like snake
here if you look at the uh the coal it's
here if you look at the uh the coal it's
kind of clever how it
works so you get this pointer through
works so you get this pointer through
end like this and this is why I always
end like this and this is why I always
Point people to this snake example it
Point people to this snake example it
has everything so you have a pointer and
has everything so you have a pointer and
you have the end
you have the end
and you're just giving each environment
and you're just giving each environment
a slice into this buffer but this is
a slice into this buffer but this is
this slice is a memory view so you
this slice is a memory view so you
basically just have everything in one
basically just have everything in one
giant tensor and then you just give
giant tensor and then you just give
different slices to different sub
different slices to different sub
environments and that means that when
environments and that means that when
you populate you know you vectorize
you populate you know you vectorize
populate all your data and numpy on the
populate all your data and numpy on the
python side it's immediately updated for
python side it's immediately updated for
all the scyon
all the scyon
MS so that's pretty cool
yeah let's let's do
yeah let's let's do
this I actually kind of want to leave
this I actually kind of want to leave
this up as a reference for myself
this up as a reference for myself
somewhere
here there we
go oh yeah we also have to handle resets
go oh yeah we also have to handle resets
fast because I just straight up didn't
fast because I just straight up didn't
do that
that's almost more important but we'll
that's almost more important but we'll
get to
[Music]
it want to get to some
RL what did we do here like num
RL what did we do here like num
Ms yeah
Ms yeah
we gave a lot of parameters for this
we gave a lot of parameters for this
one a DOTA is actually simpler in this
one a DOTA is actually simpler in this
sense because it's like not procedural
sense because it's like not procedural
it's
it's
fixed num
fixed num
M's equals I don't know four
M's equals I don't know four
M's
M's
okay
okay
num num M's it's num M's like
num num M's it's num M's like
this and uh how do we do
this and uh how do we do
it we make the buffer flat
it we make the buffer flat
yeah we made it flatten gave
yeah we made it flatten gave
slices why did we do that
again do I remember why I did
that
uh I did it because it makes sense with
uh I did it because it makes sense with
the observation spaces to do it that way
the observation spaces to do it that way
so you may as well do everything that
way it does make it
way it does make it
slightly more Awkward to do some
slightly more Awkward to do some
stuff but I think it's
fine not really is
it oh no I remember why I did it that
it oh no I remember why I did it that
way the reason I did it in the snake
way the reason I did it in the snake
doesn't apply here
doesn't apply here
we're
fine we can do this more reasonably so
fine we can do this more reasonably so
we get the game map we get the
we get the game map we get the
grid we get um pids like
this I think this grid has to be a copy
this I think this grid has to be a copy
doesn't it
doesn't it
yeah grid totally has to be a
yeah grid totally has to be a
copy remind me to do
copy remind me to do
that pids is going to be
that pids is going to be
zeros we add
zeros we add
num num M's to
num num M's to
this C
entities
entities
Okay C OBS player self. numm comma
Okay C OBS player self. numm comma
then
then
observations we can get total agents
observations we can get total agents
here right num
agents
times I think this is actually has to be
times I think this is actually has to be
like this
num is
10 yeah this is 10
10 yeah this is 10
it's always
10 m agents
10 m agents
is
is
correct correct correct
correct it's
correct and we don't use this
correct and we don't use this
okay now we get to the interesting part
here c
here c
m
m
okay
okay
CM like
CM like
so and we do four I in range num
so and we do four I in range num
Ms we need um
Ms we need um
pointer we actually don't need pointer
pointer we actually don't need pointer
because we did it way easier this time
because we did it way easier this time
didn't we
didn't we
so it's going to
so it's going to
be I
be I
comma reshape numb agents OB
size wait that's weird isn't
size wait that's weird isn't
it oh no it's not this
it oh no it's not this
is we we had it right but it's lowered
is we we had it right but it's lowered
down this so This goes down here this
down this so This goes down here this
goes down here
right this is
colon
colon
observations uh what is observations
observations uh what is observations
buff
buff
observations numb agents nope this is
observations numb agents nope this is
correct over here
correct over here
so I I'm just doing like various like
so I I'm just doing like various like
little tiny annoying bits of
little tiny annoying bits of
tensor uh manipulation in my head they
tensor uh manipulation in my head they
they're kind of hard to explain but
they're kind of hard to explain but
they're very basic I'm just basically
they're very basic I'm just basically
I'm figuring out if data needs to be uh
I'm figuring out if data needs to be uh
three dimens dial tensors or two
three dimens dial tensors or two
dimensional tensors and the difference
dimensional tensors and the difference
would be that the threedimensional
would be that the threedimensional
tensors have number of environments
tensors have number of environments
comma number of Agents comma whatever
comma number of Agents comma whatever
and the two-dimensional ones are just
and the two-dimensional ones are just
going to be like numb agents times
going to be like numb agents times
number environment so you roll them
together that's
all yes we got self. agents we've got
all yes we got self. agents we've got
um entities
um entities
do
entities which we did uh OBS
entities which we did uh OBS
players we did num
M's
M's
what no we're fine um we're we're fine
what no we're fine um we're we're fine
so this is self grid. this needs a
so this is self grid. this needs a
copy self. AI pass this is not a copy it
copy self. AI pass this is not a copy it
doesn't get modified it's
doesn't get modified it's
mutable well not really immutable but be
mutable well not really immutable but be
nice this gets
I okay
I okay
VI
VI
append self. C entities I entity data is
append self. C entities I entity data is
shared OBS players is not
shared OBS players is not
shared uh OBS View
maybe this
you know it's still it you end up having
you know it's still it you end up having
to slice anyways because these rewards
to slice anyways because these rewards
and stuff are
flat I think it's probably better to
flat I think it's probably better to
just do everything flat huh
just do everything flat huh
it's really obnoxious because otherwise
it's really obnoxious because otherwise
you have to have a whole bunch of
you have to have a whole bunch of
different views
different views
yeah
yeah
yeah
okay we'll do it that way I'm losing I
okay we'll do it that way I'm losing I
I'm losing a bit of steam here but I
I'm losing a bit of steam here but I
want to at least get this to work I want
want to at least get this to work I want
to have it so that we can run multiple
to have it so that we can run multiple
environments without blowing up
environments without blowing up
memory um though actually it did I do
memory um though actually it did I do
recall memory blowing up anyways but
recall memory blowing up anyways but
we're going to see about this um if we
we're going to see about this um if we
don't do this we definitely blow up
don't do this we definitely blow up
memory because we don't share the the
memory because we don't share the the
pathing maps and the pathing map is 200
pathing maps and the pathing map is 200
uh 200 some odd Megs and we're going to
uh 200 some odd Megs and we're going to
need like a 100 of these
need like a 100 of these
environments more 400 of these
environments more 400 of these
environments per
environments per
core we're probably going to be running
core we're probably going to be running
like 800 some odd
like 800 some odd
environments so that's a lot of
environments so that's a lot of
memory 800 copies of do is pretty
memory 800 copies of do is pretty
fun did they actually tell you in open5
fun did they actually tell you in open5
how many copies of DOTA they
ran was it one per
core I don't think they told you how
core I don't think they told you how
many
um how many
um how many
copies but uh if they were using 128,000
copies but uh if they were using 128,000
cores I are they running the game single
cores I are they running the game single
threaded I would assume the game just
threaded I would assume the game just
runs single threaded doesn't it
well actually no the game shouldn't run
well actually no the game shouldn't run
single threaded right but still they're
single threaded right but still they're
running
running
like they're probably running tens of
like they're probably running tens of
thousands of copies of the game at
thousands of copies of the game at
least I could ask him that oh they also
least I could ask him that oh they also
give you that they have 20,000 numbers
give you that they have 20,000 numbers
so that's like 80 KB observations which
so that's like 80 KB observations which
is Big so give you their observation
is Big so give you their observation
size they have a lot of data they're
size they have a lot of data they're
pushing lots and lots of data they're
pushing lots and lots of data they're
crazy project
this pit map is fine like
this actually what am I talking about
this actually what am I talking about
this is all fine I literally all I have
this is all fine I literally all I have
to do is compute um some pointers
it's literally just
10 there 10
each um
each um
agents OBS
agents OBS
view that's it I
view that's it I
guess
guess
creeps this numb agents is wrong this is
creeps this numb agents is wrong this is
be 10 I'm neutrals Towers Vision
be 10 I'm neutrals Towers Vision
whatever this is
whatever this is
fine it's
fine you reset
this turn buff
this turn buff
observations what's this the step thing
observations what's this the step thing
we'll do the step in Python to start
we'll do the step in Python to start
we'll save a little bit when we oops
we'll save a little bit when we oops
when we move to
scyon uh you need
scyon uh you need
pointer do you need pointer
here well this is the big spot you're
here well this is the big spot you're
losing a lot as well we're going to do
losing a lot as well we're going to do
it this way for now but there's an
it this way for now but there's an
optimization here n plus equal 10
okay so you just do like
okay so you just do like
this pointer colon
this pointer colon
end
end
okay this is
fine I think the render just takes the
fine I think the render just takes the
first one
right self. client. render grid
right self. client. render grid
oh but because you're giving it a
oh but because you're giving it a
copy uh this is going to be kind of
copy uh this is going to be kind of
awkward
right here we're going to
do if
do if
I zero grid equal
so like render and gets true good render
so like render and gets true good render
and gets
and gets
true
true
grid
grid
grid otherwise the grid gets updated in
grid otherwise the grid gets updated in
place and you can't have all the
place and you can't have all the
environments updating the same end but
environments updating the same end but
you'll just give it this
grid
grid
uh this is
uh this is
may be
may be
fine
yeah
yeah
okay and then when you do render let me
okay and then when you do render let me
see where's
render self. client render grid
render self. client render grid
pids
pids
zero
zero
[Music]
[Music]
zero
zero
zero um uh star
zero um uh star
10 this probably going to take a second
10 this probably going to take a second
to get correct I'm assuming
right but basically as soon as this
right but basically as soon as this
works oh yeah we didn't change that demo
works oh yeah we didn't change that demo
en mode
en mode
eal
eal
remote as soon as this
remote as soon as this
uh as soon as this Works we're pretty
uh as soon as this Works we're pretty
much set I we have to still do past
much set I we have to still do past
resets but uh other than
resets but uh other than
that that's pretty much like complete
that that's pretty much like complete
Loop argument
Loop argument
[Music]
[Music]
zeros right so we have to add some
zeros right so we have to add some
parentheses
here num
here num
environments probably num M's right
okay appears to
work do we do a perf test again
I think it's probably about the
I think it's probably about the
same but we'll do a perf test before and
same but we'll do a perf test before and
after we add the step function in I
guess we have to pass uh M's here don't
guess we have to pass uh M's here don't
we
we 10
M's okay and then we'll
M's okay and then we'll
pass is it
pass is it
I'm we'll just do num Ms like this
[Music]
[Music]
environments we'll see if this gives us
environments we'll see if this gives us
something that makes sense or
not we're expecting it to be the same as
not we're expecting it to be the same as
before
before
roughly maybe a little
faster we haven't really done the op
faster we haven't really done the op
optimizations that let you take
optimizations that let you take
advantage of this yeah same
advantage of this yeah same
speed same
speed same
speed there's some optimizations we can
speed there's some optimizations we can
make of course um let's make a very
make of course um let's make a very
small one right now
this is
this is
[Music]
environment okay
environment okay
and then
death and all we do
death and all we do
is oh I haven't implemented this action
is oh I haven't implemented this action
thingy
thingy
yet how obnoxious is
yet how obnoxious is
that it's going to take me like five
that it's going to take me like five
minutes it's not that hard I'm just
minutes it's not that hard I'm just
tired let's uh let's just do
tired let's uh let's just do
it it not that hard
actions all we have to do so this is a
actions all we have to do so this is a
fun trick you just cheat your actions
fun trick you just cheat your actions
into the environment as a mem copied
into the environment as a mem copied
buffer um so we have
buffer um so we have
Rewards well self. buff.
Rewards well self. buff.
actions pointer through
end right so all we just did is we just
end right so all we just did is we just
cheated the actions in
Here and Now
Here and Now
all we have to do is
um is it buff actions or actions hold
on self dot
actions
yeah it's just self-d actions these are
yeah it's just self-d actions these are
separate
separate
and then when you do step this is pretty
and then when you do step this is pretty
cool
actions and then because you've cheated
actions and then because you've cheated
actions in you don't have to pass them
actions in you don't have to pass them
as an argument anymore so there's no
as an argument anymore so there's no
data transfer there it's just in place
data transfer there it's just in place
and then you just do step all self.
and then you just do step all self.
CMS you comment this because this thing
CMS you comment this because this thing
does not need it you don't need this
does not need it you don't need this
anymore you edit uh simoa
words because we have to add float uh
words because we have to add float uh
actions here
actions here
float actions like
float actions like
this
this
CNP bad suggestion there CNP ND
CNP bad suggestion there CNP ND
array
rewards okay so now we get Rewards
rewards okay so now we get Rewards
uh nope not rewards that's what we had
uh nope not rewards that's what we had
before
before
actions
rewards self. actions equal to
rewards self. actions equal to
actions very nice
right now we
can all right we no longer need step
uh this is kind of cool actually
uh this is kind of cool actually
because step there was it B
int well how's this
function yeah this is allowed to stay
function yeah this is allowed to stay
aan but this is kind of cool because
aan but this is kind of cool because
what this lets you do this was a CP def
what this lets you do this was a CP def
before right which means this calls back
before right which means this calls back
to python when you call call it this is
to python when you call call it this is
now a
now a
CDE that takes no
arguments so now you have this def
arguments so now you have this def
function that's
function that's
python but it's really fast because this
python but it's really fast because this
is this Loop
here oh
I how did I mess this up
going type this
going type this
index
index
I yeah there we
go numpy
actions oh this is actually even
actions oh this is actually even
funnier but this is self. actions here
there going to be an opportunity to make
there going to be an opportunity to make
this even
faster memory
view right this is actually a 2d array
view right this is actually a 2d array
the actions are uh two-
the actions are uh two-
dimensional no big
deal
deal
float unsigned int
self
self
actions
um we have discretise on right now don't
um we have discretise on right now don't
we or don't we do we or don't we I think
we or don't we do we or don't we I think
it's I think we have it not right
now we'll have to figure this out
but I think it's like this right actions
but I think it's like this right actions
continuous
py list get item yeah we need this from
py list get item yeah we need this from
SE snake or was it what we have this
SE snake or was it what we have this
in snake SE
snake this import
solid well we got that now let's see
solid well we got that now let's see
does
it probably not a huge performance
it probably not a huge performance
difference ooh expected float got
difference ooh expected float got
unsigned
unsigned
integer that's not good
expected float got unsigned
integer this is float
integer this is float
32 I
believe actions
input array from shape
106 into shape
well hold
well hold
on some shenanigans
on some shenanigans
this is definitely supposed to be a
six
and why is it only
and why is it only
10 should be num agents
right 10 times num then self.
agents uh this ought to
agents uh this ought to
be this actions should be
bigger transactions temp should be
bigger soft
dots No
dots No
Sol but
okay this is
okay this is
weird this looks
weird this looks
good but for some
good but for some
reason we don't have the right number of
reason we don't have the right number of
Agents being
registered agent seems to be
good what is it that makes this pick up
good what is it that makes this pick up
the number of AG
agents would think it would just be
agents would think it would just be
agents
right when you do
right when you do
agents per M yeah it's numb
agents per M yeah it's numb
agents self.
agents self.
Ms so this numb agents should be
Ms so this numb agents should be
correct I'm just trying to figure out
correct I'm just trying to figure out
why it's not it doesn't it's not
why it's not it doesn't it's not
registering that I have 10 environments
registering that I have 10 environments
correctly I'm passing to the norl
correctly I'm passing to the norl
net
um oh it is registering I'm just is dumb
here how much memor this take up
okay that's up a little bit right that's
okay that's up a little bit right that's
a little bit of performance we're now at
a little bit of performance we're now at
600 uh 700k
right and I'm going to risk running
right and I'm going to risk running
100 uh if my computer explodes see you
100 uh if my computer explodes see you
when I get a new one
it's actually nice in memory
it's actually nice in memory
performant that was stable I guess it's
performant that was stable I guess it's
the renderer that has a weird leak in
it funny that that decreases depths per
it funny that that decreases depths per
second
though assumedly it's just like
though assumedly it's just like
different parts in the game or
different parts in the game or
whatever we'll leave it at
10 don't worry we'll we'll have
10 don't worry we'll we'll have
consistent 1 million because we have a
consistent 1 million because we have a
few additional like vector uh
few additional like vector uh
optimizations we can make along the way
optimizations we can make along the way
so the 1.3 million I posted I it'll be a
so the 1.3 million I posted I it'll be a
nice consistent at least a
million there you go there's your seven
million there you go there's your seven
709k with 10 environments so 100
709k with 10 environments so 100
agents and like I don't know 2,000
agents and like I don't know 2,000
minions or
whatever and the 700k remember it gets
whatever and the 700k remember it gets
more than double on the other box so
more than double on the other box so
that's like 1.5 million now probably 1.4
that's like 1.5 million now probably 1.4
at
at
least okay so uh there we go there's our
least okay so uh there we go there's our
VC
implementation multi-m I guess You' call
implementation multi-m I guess You' call
it
CF
M uh mobile
uh optimize for
multiple so this is technically enough
multiple so this is technically enough
that I could start on the network or I
that I could start on the network or I
could make the reset function be more
reasonable I kind of want to start on
reasonable I kind of want to start on
the network
the network
design just a little
bit CU it's kind of
tricky at least it's going to be tricky
tricky at least it's going to be tricky
to do
well let me see what perf Clemen City
got so Clemens has this real cool
got so Clemens has this real cool
blog we does this entity neural
networks 100,000 steps per second on a
networks 100,000 steps per second on a
single GPU I'm going to assume that I
single GPU I'm going to assume that I
have a better GPU so let's say I get
have a better GPU so let's say I get
200,000 but that's still too
slow this is a criminally underrated
slow this is a criminally underrated
project by the way I thought this was
project by the way I thought this was
way bigger he kind of just quietly
way bigger he kind of just quietly
released this with one blog post and
released this with one blog post and
didn't promote it too much um this is
didn't promote it too much um this is
like an awesome awesome project why the
like an awesome awesome project why the
hell don't I have this star give him a
hell don't I have this star give him a
star main one at
star main one at
least
um oh this is so funny I forgot that he
um oh this is so funny I forgot that he
did snake as
did snake as
well I should message him on this
it didn't document this it doesn't think
it didn't document this it doesn't think
it has a nice renderer on
it oh but his m is in
it oh but his m is in
Python isn't
Python isn't
it yeah he did all this like efficient
it yeah he did all this like efficient
stuff but then the uh the M logic is in
stuff but then the uh the M logic is in
Python
I should tell him he'll be
happy this was like a cool demo as well
happy this was like a cool demo as well
I should chat with him about this stuff
I should chat with him about this stuff
he's around an SF I
he's around an SF I
know he does like really high per
know he does like really high per
engineering on this side um what I'm
engineering on this side um what I'm
basically just trying to figure out
basically just trying to figure out
is if his neural network architecture is
is if his neural network architecture is
remotely reasonable for the level of
remotely reasonable for the level of
perf I'm going for
he's got this ragged attention thing
he's got this ragged attention thing
which I don't need it to be ragged I
which I don't need it to be ragged I
just need
just need
attention
um I don't know if he did multi-headed
um I don't know if he did multi-headed
attention or if he just did attention
attention or if he just did attention
either oh it is a multi-headed attention
so he said he has a proc experiment
so he said he has a proc experiment
thing as
well this is his Rogue
architecture by attention I think he
architecture by attention I think he
means multiple multi-headed attention
means multiple multi-headed attention
because he mentions it before let me
see Matrix he projecting each
feature 10 so these are really
feature 10 so these are really
small so he's using like 10,000
small so he's using like 10,000
parameters but the thing is if you're
parameters but the thing is if you're
only getting 100,000 steps per second
only getting 100,000 steps per second
with 10,000 parameters like our
with 10,000 parameters like our
implementation on the snake environment
implementation on the snake environment
is way faster than this because on our
is way faster than this because on our
snake end we have 150k and we get a
snake end we have 150k and we get a
million steps per second
I should definitely catch up with
I should definitely catch up with
Clemens though he does really awesome
Clemens though he does really awesome
work and uh before I like the
work and uh before I like the
engineering I was doing was like
engineering I was doing was like
relatively low perf by comparison but
relatively low perf by comparison but
now now with the latest stuff it's
now now with the latest stuff it's
actually like really fast and you know I
actually like really fast and you know I
can I can play ball with these numbers
can I can play ball with these numbers
uh with the latest Sim stuff which is
uh with the latest Sim stuff which is
really cool
really cool
is really
cool version of Impala used in proc
gen okay so this is them using
uh this is them like doing some
uh this is them like doing some
comparisons
okay I still don't know if this
okay I still don't know if this
attention block is
attention block is
reasonable because if this attention
reasonable because if this attention
block is limiting you to 100 KPS with
block is limiting you to 100 KPS with
that little data then I'm pretty sure
that little data then I'm pretty sure
that you're just straight up not going
that you're just straight up not going
to be able to use it in uh in our
to be able to use it in uh in our
setting it scales
setting it scales
quadratically
and quadratic
and quadratic
among yeah you can't do like well if you
among yeah you can't do like well if you
had like 20 agent like 20 entities 20 by
had like 20 agent like 20 entities 20 by
20 is 400 400 times 32 I think that's
20 is 400 400 times 32 I think that's
already too
already too
big
big
oh I forgot that he credited me for the
oh I forgot that he credited me for the
review I did not contribute very much to
review I did not contribute very much to
this whatsoever this was really his
this whatsoever this was really his
project he did awesome awesome work with
project he did awesome awesome work with
this but uh this list of like reviewers
this but uh this list of like reviewers
is awesome Chris bamford's awesome cost
is awesome Chris bamford's awesome cost
is
is
awesome is a really cracked project
I remember telling him I wasn't sure
I remember telling him I wasn't sure
about the handdrawn uh like the
about the handdrawn uh like the
handdrawn style like this but I was
handdrawn style like this but I was
totally wrong this is
awesome
awesome
well this kind of tells
well this kind of tells
us
us
the this kind of tells us though right
the this kind of tells us though right
that we're not going to be able to do
that we're not going to be able to do
this so
this so
let's look at the DOTA architecture for
let's look at the DOTA architecture for
other
other
inspiration if it's not clear the point
inspiration if it's not clear the point
of what I'm doing now is I'm looking for
of what I'm doing now is I'm looking for
like feasible architectures for this
like feasible architectures for this
thing um I can draw it out maybe that'll
thing um I can draw it out maybe that'll
help me and that'll be interesting there
help me and that'll be interesting there
are a couple people still watching this
are a couple people still watching this
so I'll draw it
out not this one this one sucks
sketchpad
so the way that you uh you look at
so the way that you uh you look at
this you have 2D map
data okay you have 2D map data that you
data okay you have 2D map data that you
get this is like if you
get this is like if you
are yeah if you're
are yeah if you're
here you're like this agent
oops what the heck that's
oops what the heck that's
weird why would you ever
want let's just refresh this
page oh jeez it saves it okay
so you have this type of a thing here
so you have this type of a thing here
this is like your
this is like your
vision and you have your I drew it like
vision and you have your I drew it like
an even size it should be an odd
an even size it should be an odd
size but let's say you have your agent
size but let's say you have your agent
like here
like here
right and then you have
you have like some walls here
right and like maybe you have a wall
right and like maybe you have a wall
here okay so you get like your terrain
here okay so you get like your terrain
map and maybe you
map and maybe you
have orange maybe you have like another
have orange maybe you have like another
agent over here that you can see
agent over here that you can see
right so this just gets interpreted as
right so this just gets interpreted as
one hot so this gets
one hot so this gets
so this basically
so this basically
like say this becomes zero this becomes
like say this becomes zero this becomes
one uh or more likely this becomes here
one uh or more likely this becomes here
this becomes
this becomes
one this becomes two and like this
one this becomes two and like this
becomes three
becomes three
okay and then you put this into your
okay and then you put this into your
convet which I'm going to attempt to
convet which I'm going to attempt to
draw like this
right this is a compet kind
of and then you get this into a flat
of and then you get this into a flat
vector and then the architecture for
vector and then the architecture for
this is that you put this into an lstm
this is that you put this into an lstm
and then you put this into an action
and then you put this into an action
head this is your classic architecture
head this is your classic architecture
this is what I use on snake it runs a
this is what I use on snake it runs a
million steps per second as long as you
million steps per second as long as you
use small
use small
comps but the thing is with
comps but the thing is with
uh with this project the thing that's
uh with this project the thing that's
difficult is you also get
difficult is you also get
these these like entity
vectors so this is like
map and this is
entity all right
entity all right
and this is the thing I need an
and this is the thing I need an
architecture for and this is hard
architecture for and this is hard
because like this is set data and it's
because like this is set data and it's
kind of a lot of set data we're going to
kind of a lot of set data we're going to
assume this is like
20 20 X20
20 20 X20
maybe um mix mixed discreet and
maybe um mix mixed discreet and
continuous though we might be able to S
continuous though we might be able to S
side step
that
that
so this is 400
this is almost already too big just
this is almost already too big just
looking at this though we can probably
looking at this though we can probably
limit this to be like
limit this to be like
um if we limit this to be bytes it's not
um if we limit this to be bytes it's not
that
that
bad if this is like 20 x 20 bytes that's
bad if this is like 20 x 20 bytes that's
not
terrible though if we're making this
terrible though if we're making this
float
float
data Maybe if it's fp16 data it's
data Maybe if it's fp16 data it's
okay it's kind of a lot
okay it's kind of a lot
we're going to have to figure some stuff
out we're also going to have to think
out we're also going to have to think
about like what you get from these
about like what you get from these
entities that you can't get
normally you know it's possible that we
normally you know it's possible that we
could just encode all this [ __ ] into the
could just encode all this [ __ ] into the
map that might be
map that might be
better let's look at some architect to
better let's look at some architect to
see if we have some reasonable weight so
see if we have some reasonable weight so
basically it's just like you have a
basically it's just like you have a
bunch of different agents around you
bunch of different agents around you
right that have different
right that have different
properties and that's a lot of data to
properties and that's a lot of data to
encode so the two different options I
encode so the two different options I
have are try to stick this into the map
have are try to stick this into the map
somehow which I have ways of doing it's
somehow which I have ways of doing it's
not
not
impossible um and I even have ways to
impossible um and I even have ways to
compress that data if I need
compress that data if I need
to the it is kind of continuous data
to the it is kind of continuous data
which is a little
which is a little
wonk uh but that's one
wonk uh but that's one
option it's a little awkward to do it
option it's a little awkward to do it
that way because then you still have to
that way because then you still have to
like you have to Output a Target on the
like you have to Output a Target on the
map which is
hard maybe it's not that
hard maybe it's not that
hard it might not be that hard honestly
you have to do like a
Decon the the thing is the entity based
Decon the the thing is the entity based
architecture is just really
architecture is just really
cool and it's a really nice opportunity
cool and it's a really nice opportunity
to do
to do
it but I don't know how fast it'll be
it but I don't know how fast it'll be
let me look at opening
I5 this this image
let me just fix the heat real
quick we might even want to just time
quick we might even want to just time
some different architectures you know
okay so this is the hard thing right
okay so this is the hard thing right
here you see how they have unit one
here you see how they have unit one
through
N I guess you can't see this on the
N I guess you can't see this on the
screen here so this is here this is unit
screen here so this is here this is unit
one through n they've got like a big
one through n they've got like a big
stack of units same thing as we have
stack of units same thing as we have
they've got a really fancy encoder but
they've got a really fancy encoder but
ignore it this is just like an MLP
ignore it this is just like an MLP
basically um you have all these
basically um you have all these
different units and you need to pick one
different units and you need to pick one
so again they have fancy architecture
so again they have fancy architecture
yada yada it doesn't matter the key
yada yada it doesn't matter the key
thing is that you eventually you get an
thing is that you eventually you get an
embedding for each of these so if
embedding for each of these so if
they're like 20 units you're going to
they're like 20 units you're going to
get 20 32 dimensional vectors or
get 20 32 dimensional vectors or
something and then you have these as
something and then you have these as
unit attention Keys you dot product them
unit attention Keys you dot product them
with the output of an lstm and then you
with the output of an lstm and then you
use this for
targeting it's a pretty reasonable way
targeting it's a pretty reasonable way
of doing uh targeting to be
honest I don't know if it's the best way
at least for the small scale
stuff the thing that's really obnoxious
stuff the thing that's really obnoxious
about entity data like
about entity data like
this is like you can kind of do
this is like you can kind of do
everything with 2D Maps right like if
everything with 2D Maps right like if
you think about it the thing that I just
you think about it the thing that I just
drew I can kind of do everything with 2D
drew I can kind of do everything with 2D
Maps like if I just output a 2d map of
Maps like if I just output a 2d map of
like hey these are where I want to
like hey these are where I want to
attack then I I don't have to even think
attack then I I don't have to even think
about this
about this
information but the thing is the the
information but the thing is the the
reverse is not
reverse is not
true I can't just do everything in terms
true I can't just do everything in terms
of entity data because you still need
of entity data because you still need
the freaking 2D map because you need to
the freaking 2D map because you need to
know that you're not pathing into
know that you're not pathing into
obstacles you need to know the
obstacles you need to know the
terrain so it's essentially like either
terrain so it's essentially like either
do everything in 2D map and try to make
do everything in 2D map and try to make
that as good as possible or you have to
that as good as possible or you have to
split it and now you have two things to
split it and now you have two things to
optimize and optimizing The Entity one
optimize and optimizing The Entity one
is not easy because like there's an
is not easy because like there's an
existing architecture that works
existing architecture that works
perfectly for this it's a Transformer
perfectly for this it's a Transformer
but it's too
big I mean the fact that um
the fact that
the fact that
like image gen models exist like DC
like image gen models exist like DC
again generative image
again generative image
models even the really early
models even the really early
ones that kind of tells me
ones that kind of tells me
that it's reasonable to
that it's reasonable to
do map data in map data
do map data in map data
out
out
right so the architecture I'm imag now
right so the architecture I'm imag now
is you have an input that's like a big
is you have an input that's like a big
stack of channels it's like a very many
stack of channels it's like a very many
ched image where like some of the
ched image where like some of the
channels are map data but the other
channels are map data but the other
channels are for entity data and you get
channels are for entity data and you get
it to be like some reasonable number
it to be like some reasonable number
maybe you compress it right
maybe you compress it right
whatever uh you do whatever you need to
whatever uh you do whatever you need to
do
do
there but the idea is like at the end of
there but the idea is like at the end of
the day you're going to end up with some
the day you're going to end up with some
number some reasonable number of
number some reasonable number of
channels of data it's all one data type
channels of data it's all one data type
it's just like a 3D thing 3D block of
it's just like a 3D thing 3D block of
numbers you do like a con
layer you do like one or two con layers
layer you do like one or two con layers
and a fully connected you put it through
and a fully connected you put it through
your
your
lstm and then the the decoder head is
lstm and then the the decoder head is
going to be the
going to be the
opposite so the decoder head will
opposite so the decoder head will
do hidden Dimension
projected into this
there are a lot of basic architectures
there are a lot of basic architectures
you could use for this actually now I'm
you could use for this actually now I'm
thinking about it
you could even do like one by one coms
you could even do like one by one coms
or
or
whatever that's essentially an entity
network was probably pretty fast as
well
well
yeah I think we need to probably code up
yeah I think we need to probably code up
one of these little architectures though
one of these little architectures though
and see how fast it is don't we
I've got an
I've got an
hour that'd probably be kind of fun to
hour that'd probably be kind of fun to
watch right we code up uh we're not
watch right we code up uh we're not
going to integrate it or anything but
going to integrate it or anything but
like we can code up a little test
like we can code up a little test
architecture just to see how reasonable
architecture just to see how reasonable
it is and like if this thing runs a
it is and like if this thing runs a
million steps per second then all we
million steps per second then all we
have to do is optimize the rest of the
have to do is optimize the rest of the
data Pipeline and it'll train it a
data Pipeline and it'll train it a
million steps per second or
whatever I mean I guess we have to like
whatever I mean I guess we have to like
estimate the train versus the forward
estimate the train versus the forward
pass and stuff
but it's pretty reasonable
overall how could this screw
overall how could this screw
up well the one way that I see if this
up well the one way that I see if this
screws up is
screws up is
like the action Space is really big
right yeah your action space is like 20s
right yeah your action space is like 20s
something
dimensional well that's like a discreet
dimensional well that's like a discreet
of
121 it's kind of rough isn't
it but like if you do an entity based
it but like if you do an entity based
one and you say like let's say you limit
one and you say like let's say you limit
it to 20 nearby Target targets you have
it to 20 nearby Target targets you have
a discreet of
20 you don't get any positional
20 you don't get any positional
awareness you have to learn
it I think we try
it I think we try
it I think we try it I mean
it I think we try it I mean
is there anything else we could
do the other thing we could do that
do the other thing we could do that
would be way
would be way
Jank but uh would let us actually get
Jank but uh would let us actually get
something working
something working
initially and this is probably where we
initially and this is probably where we
should start to be honest though it's a
should start to be honest though it's a
lot less
lot less
fun is let's say we just load up all the
fun is let's say we just load up all the
data that we want into this uh this
data that we want into this uh this
image format right we prepare all the
image format right we prepare all the
data we make a reasonable
data we make a reasonable
Network and then we just totally punt on
Network and then we just totally punt on
targeting right we just like script
targeting right we just like script
which agent you're going to hit and then
which agent you're going to hit and then
we let the agents learn uh they learn
we let the agents learn uh they learn
the movement they learn their button
presses
presses
right that'd probably be way easier to
right that'd probably be way easier to
get started
with in terms of scope here like
I bet you if I go that
I bet you if I go that
route I can have something
route I can have something
training on somewhat reasonable data at
training on somewhat reasonable data at
somewhat reasonable perf by the end of
somewhat reasonable perf by the end of
the day tomorrow if I go that
the day tomorrow if I go that
route whereas if I do this this is like
route whereas if I do this this is like
Uncharted
Uncharted
Territory and the thing is if I do the
Territory and the thing is if I do the
safe version of this I have a pretty
safe version of this I have a pretty
darn easy way to like try to
expand cuz like yeah there's no world in
expand cuz like yeah there's no world in
which
which
it's pretty much in every possible case
it's pretty much in every possible case
doing the first one makes the second one
doing the first one makes the second one
easier and doing the second one first is
easier and doing the second one first is
like really really really
hard okay so let's try
this let's just try it this way let's
this let's just try it this way let's
figure
figure
out how we're going to mess
out how we're going to mess
with all this map
with all this map
data it's a pretty safe format as well
data it's a pretty safe format as well
it keeps the network architectures very
it keeps the network architectures very
uniform
uniform
um
yeah I mean technically all we need is
yeah I mean technically all we need is
the map data to start with
right yeah we we just need the map data
right yeah we we just need the map data
to start with technically all
right let's see what what [ __ ] we
right let's see what what [ __ ] we
have in here that we can
adjust
adjust
[Music]
[Music]
observations what is
this oh this is kind of
this oh this is kind of
fine uh this function is
fine uh this function is
slow so what we're going to do is
we're going to want to do this and
see yeah we're going to want to do this
see yeah we're going to want to do this
and see
that's pretty easy to do isn't
it don't I have like a slice of this
somewhere buff.
somewhere buff.
observations yeah so right
observations yeah so right
here you can see this is self. obiz
here you can see this is self. obiz
self.size plus three
self.size plus three
right so
right so
it's actually pretty easy for me to know
it's actually pretty easy for me to know
how to structure
this see OBS player C OBS
this see OBS player C OBS
view self. OBS
view let's do this is M OBS view
view let's do this is M OBS view
map obs view
extra oh this was fine
right OB size times OB size
onward and we'll do OBS
onward and we'll do OBS
view uh OBS view of I
oh is this I correct wait OBS
oh is this I correct wait OBS
view re yeah this is fine so OBS view
view re yeah this is fine so OBS view
I OBS view extra of
I this self
dot
dot
Okay so
so this here
so this here
is unsigned Char
is unsigned Char
observations this is actually going to
be uh map
be uh map
observations or
observations or
observations map and then unsign Char
observations map and then unsign Char
observations
observations
extra
extra
map and then
map and then
CNP Ray wordss and we'll leave this
CNP Ray wordss and we'll leave this
hanging no let's fix it there we go
so so this is observations map extra
so so this is observations map extra
self.
self.
observations I think this is the only
observations I think this is the only
place we use it
place we use it
right
right
map okay and then we do self.
map okay and then we do self.
observations
observations
extra
extra
hid
zero
zero
playerx and this is a
uint this is a uent
uint this is a uent
here which is fine because the player uh
here which is fine because the player uh
position can only go
position can only go
from
from
Char I think I can do this maybe no
I do
this
this
reward we'll do player.
reward we'll do player.
reward do we do player.
reward or we do
reward or we do
rewards of
rewards of
PID sub. rewards of PID
that's probably good
right I think this is a decent
right I think this is a decent
architecture we have ability to add
architecture we have ability to add
stuff here we have a 2d map basic basic
stuff here we have a 2d map basic basic
basic starter
basic starter
architecture
architecture
right super
basic uh let's see if it compiles
they pretty
nice okay so far so
good e
uh okay so we have a few little bugs it
uh okay so we have a few little bugs it
looks
looks
like cannot reshape array of size
30 into 1 10 and
30 into 1 10 and
11 let's see what the heck is happening
11 let's see what the heck is happening
here
yeah oh I know what's happening that's
yeah oh I know what's happening that's
fine that's
dumb this is like three
dumb this is like three
right uh other way
around right here this one's three
bada bing bada
bada bing bada
boom this
works let's get
works let's get
uh well the network is actually probably
uh well the network is actually probably
kind of like minutes away from being
kind of like minutes away from being
valid with this frankly We'll add the
valid with this frankly We'll add the
config for
it unig slash
uh
voba
MOA
current we'll just like go add a s
current we'll just like go add a s
MOA we'll go add us like aoba
MOA we'll go add us like aoba
thingy which is it going to be like the
thingy which is it going to be like the
grid
grid
one it probably going to be pretty darn
one it probably going to be pretty darn
close to the grid one right
and then hold
on there
on there
[Music]
[Music]
are eight different
things so the grid policy it's very very
things so the grid policy it's very very
very similar to grid policy we've got
very similar to grid policy we've got
eight different channels on a
eight different channels on a
knit and then it gets
flattened there's our
P 32
P 32
plus yeah here's your flat right
plus yeah here's your flat right
here there's the continuous
here there's the continuous
[ __ ] here your features your
[ __ ] here your features your
features
features
5 by two Yep this
5 by two Yep this
identical so pretty much an identical
identical so pretty much an identical
architecture um there's one thing right
architecture um there's one thing right
here this seven has to be changed for an
here this seven has to be changed for an
eight big deal otherwise literally
eight big deal otherwise literally
identical architecture until we start
identical architecture until we start
messing with
messing with
it uh we should probably actually try to
it uh we should probably actually try to
make this run just to
see oh we should we should also adjust
see oh we should we should also adjust
the
the
uh we should adjust the batch size and
uh we should adjust the batch size and
[ __ ] to not be like
[ __ ] to not be like
insane uh we'll do like a
thousand 100
thousand 100
maybe mess with the BPT
Horizon we'll do like a th000 and 10,000
Horizon we'll do like a th000 and 10,000
maybe that's
maybe that's
reasonable
reasonable
um yeah that's fine
um yeah that's fine
and num M's num
and num M's num
workers prob be
good 157k is what we
good 157k is what we
expect it just works first
expect it just works first
pry that's so
pry that's so
funny that's so
funny that's so
funny okay so uh this thing just like it
funny okay so uh this thing just like it
works uh the main thing is that we don't
works uh the main thing is that we don't
have a way to reset the environment now
have a way to reset the environment now
so we need to wait for the environment
so we need to wait for the environment
to efficiently reset
to efficiently reset
itself uh and then as soon as we have
itself uh and then as soon as we have
that basically we can like well we can
that basically we can like well we can
absolutely tune this to be high
absolutely tune this to be high
performance so we can like tune this to
performance so we can like tune this to
make sure we're getting a million steps
make sure we're getting a million steps
per second train through put and then we
per second train through put and then we
get this very very tight feedback loop
get this very very tight feedback loop
where we like design reward function
where we like design reward function
train model in 3 minutes or whatever uh
train model in 3 minutes or whatever uh
plot one plot on WB see if anything
plot one plot on WB see if anything
happens log images to WB uh so we're
happens log images to WB uh so we're
going to have like it gets old fast when
going to have like it gets old fast when
you've been doing it for long enough but
you've been doing it for long enough but
if you haven't seen this type of work
if you haven't seen this type of work
before it's pretty cool because like you
before it's pretty cool because like you
get the model to do a lot of cool stuff
get the model to do a lot of cool stuff
very cool quickly and you fix like
very cool quickly and you fix like
dozens and dozens of bugs very very
dozens and dozens of bugs very very
quickly
quickly
um so I've got an hour or so no I don't
um so I've got an hour or so no I don't
have an hour I've got I've got 40
have an hour I've got I've got 40
minutes uh before I'm going to go for
minutes uh before I'm going to go for
dinner so I'm going to go use the
dinner so I'm going to go use the
restroom real quick and then when we
restroom real quick and then when we
come back here I'm going to make this
come back here I'm going to make this
environment have fast resets that's a
environment have fast resets that's a
very important simulation design aspect
very important simulation design aspect
it's actually probably one of the most
it's actually probably one of the most
common failure cases I see with RL
common failure cases I see with RL
environments out there is people put
environments out there is people put
tons and tons of effort into making
tons and tons of effort into making
their environments fast and then their
their environments fast and then their
resets are like a thousand times slower
resets are like a thousand times slower
or something and they totally lose all
or something and they totally lose all
their performance and then because of
their performance and then because of
the way they do their multiprocessing
the way they do their multiprocessing
they lose even more performance than
they lose even more performance than
they should off of that so we're going
they should off of that so we're going
to go through that I'm going to show you
to go through that I'm going to show you
how we cannot lose perf on reset and uh
how we cannot lose perf on reset and uh
we're going to go from there so I will
we're going to go from there so I will
be right back and then we will do that
be right back and then we will do that
and that'll set us up very very nicely
and that'll set us up very very nicely
for experimental side work tomorrow be
for experimental side work tomorrow be
right back
sh
e e
okay
let's close this out with
let's close this out with
um really really fast resets on this
m
m
relatively relatively easy to accomplish
relatively relatively easy to accomplish
usually it's possible I've made some
usually it's possible I've made some
design oversights that are going to make
design oversights that are going to make
this harder than I expect but I think it
this harder than I expect but I think it
shouldn't be that bad
what do we currently do in
what do we currently do in
reset we reset a bunch of players we set
reset we reset a bunch of players we set
some Lanes we call compute observations
some Lanes we call compute observations
nothing here is
nothing here is
hard nothing there is
hard nothing there is
hard um in fact it doesn't even really
hard um in fact it doesn't even really
need to be
need to be
there well I guess it
there well I guess it
does what about in it
where is
this okay
this okay
so the way points only need to be
so the way points only need to be
calculated once we don't need to do this
calculated once we don't need to do this
again on
reset uh the
reset uh the
towers everything can be pre-computed
towers everything can be pre-computed
for the towers when they're spawned we
for the towers when they're spawned we
just need to make sure that they're to
just need to make sure that they're to
respawn reset them we might need to add
respawn reset them we might need to add
like a couple attributes for like
like a couple attributes for like
default or base or
default or base or
something that's no big
something that's no big
deal ancients exact same thing no big
deal neutral camps same exact okay no
deal neutral camps same exact okay no
big deal easy easy
easy uh
the one thing
the one thing
is do you move on the
is do you move on the
grid you do move on the grid don't
you we have to reset the game
you we have to reset the game
board which is kind of
gross
gross
yeah so
technically when you spawn stuff in like
technically when you spawn stuff in like
this
right this isn't going to be that bad
right this isn't going to be that bad
though though cuz the games are so long
though though cuz the games are so long
that this is going to be
negligible yeah so this move to
function yeah we made it so that you
function yeah we made it so that you
move on the
grid I mean no matter what we do we'd
grid I mean no matter what we do we'd
have to have we'd have to reset a
have to have we'd have to reset a
grid also PID map has to be
grid also PID map has to be
reset so these two things have to be
reset so these two things have to be
reset I
guess that's no big deal
though let me
uh let's go fix this
we just reset
we just reset
um we just have to store the original
um we just have to store the original
grid
grid
right
right
Star Rig PID
map and then all we got to do no it's
map and then all we got to do no it's
not PID map right it was a r
not PID map right it was a r
grid uh where's
grid uh where's
grid grid yeah
here rig grid so we need this because it
here rig grid so we need this because it
has the uh well it has the original data
has the uh well it has the original data
I don't know rig grid grid.
I don't know rig grid grid.
copy copy the
copy copy the
original then on reset
spawn
spawn
Tower this sets like spawn X spawn y
Tower this sets like spawn X spawn y
right spawn
Tower
oops Yeah so it needs to set spawn X and
oops Yeah so it needs to set spawn X and
spawn Y no big deal
though they're just like a few variables
though they're just like a few variables
we basically have to make sure don't get
we basically have to make sure don't get
screwed up
that's all this
is way points are fine by
is way points are fine by
default so it's the spawn
Tower oh wait we literally the way we
Tower oh wait we literally the way we
did neutral spawns here is perfect we
did neutral spawns here is perfect we
kind of already did this for ourselves
yeah we should just do this for Towers
right do we do it for
right do we do it for
creeps I guess we don't do it for creeps
yeah let's just make uh so we have this
yeah let's just make uh so we have this
array neutral spawns right
here let's just do Tower
spawns Tower spawns
spawns
spawns
and we'll just
do um Towers
right power
right power
spawns and what we'll just do is
instead of doing spawn Tower
here oh we actually we need it all the
here oh we actually we need it all the
way up here yeah so Tower spawns the
way up here yeah so Tower spawns the
zeros here prefix suffix yada yada and
zeros here prefix suffix yada yada and
then we do self. Tower
then we do self. Tower
spawns idx0 is y and is X we no
spawns idx0 is y and is X we no
longer need to care about the team and
longer need to care about the team and
the tier idx team
the tier idx team
tier we do need to make a
tier we do need to make a
spawn Towers function
and let's just go grab all this code
and let's just go grab all this code
that we're going to
that we're going to
need uh we're not going to actually use
need uh we're not going to actually use
all of
this
so idx team
tier team
tier let's just
tier let's just
do oops Tower spawns we're going to make
do oops Tower spawns we're going to make
this for
this for
dim we're just going to do that this is
dim we're just going to do that this is
like YX team tier or
whatever easy
spawn
spawn
all so this is literally just like C
all so this is literally just like C
death int idx equals z int idx and then
death int idx equals z int idx and then
like four idx in range num
like four idx in range num
Towers spawn Tower like this that's
Towers spawn Tower like this that's
literally it
once we've extracted the data
once we've extracted the data
right
right
yeah idx team
yeah idx team
tier yeah it's
tier yeah it's
team idx team tier why yeah this is
team idx team tier why yeah this is
correct it's Jank but it's correct and
correct it's Jank but it's correct and
this will get us this will get us in the
this will get us this will get us in the
uh the ball game uh whatever in the ball
uh the ball game uh whatever in the ball
game this will get us on the playing
game this will get us on the playing
field at least for
field at least for
I don't know insert
I don't know insert
dumb thing here we need this so that we
dumb thing here we need this so that we
can reset [ __ ] fast that's all there is
can reset [ __ ] fast that's all there is
to it uh we no longer need this spawn
to it uh we no longer need this spawn
Tower we do
Tower we do
need self.
Tower team zero tier five we're just
Tower team zero tier five we're just
treating the ancient as a tier five and
treating the ancient as a tier five and
know it's kind of
know it's kind of
weird uh and then we just do
team one tier five
team one tier five
perfect okay
so now we're not actually spawning
so now we're not actually spawning
anything here if you look at
anything here if you look at
it we're just like setting up a bunch of
it we're just like setting up a bunch of
data so when we do reset
data so when we do reset
here we can just
here we can just
do self.
do self.
grid of everything is equal to the
grid of everything is equal to the
original grid and then we can do self.
original grid and then we can do self.
PID map of everything is equal
PID map of everything is equal
to1
to1
right and then we can just go
right and then we can just go
through the
through the
agents and we just respawn all these
agents and we just respawn all these
players they get their health damage XP
players they get their health damage XP
everything gets
everything gets
reset
reset
um and I'm sure that we're missing some
um and I'm sure that we're missing some
like variables so we're going to have
like variables so we're going to have
like horrible issues with this
like horrible issues with this
but that should be all we need
so yeah that should be all we
need what reward do we want to give them
I think we probably want to give them
um I don't know if XP reward will be
um I don't know if XP reward will be
enough yeah because they need to go
enough yeah because they need to go
towards the minions in order to get that
towards the minions in order to get that
XP
XP
reward which they're not going to do on
reward which they're not going to do on
their
their
own that's going to be hard so we'll
own that's going to be hard so we'll
give them a reward for going to the
give them a reward for going to the
uh for going to the other side and we'll
uh for going to the other side and we'll
give them a reward
give them a reward
for uh
XP so technically we should make this a
XP so technically we should make this a
four component
reward where we have
this uh
compute little bit hard to do that
that we'll just do a joint reward for
now for
both
both
so on kill
um this needs to
um this needs to
be
be
CD
CD
P
P
int
int
z p equals
and then what we do
and then what we do
is
is
XP and then we get the player has a
XP and then we get the player has a
reward so we do player.
reward how much xp do we give them for
reward how much xp do we give them for
this I mean how much reward do we give
this I mean how much reward do we give
per
per
XP on kill what's like the max
XP on kill what's like the max
here we give them a lot
do we divide by a
thousand you only get 35 for a neutral
though we probably don't want to just
though we probably don't want to just
give him one for killing
something we'll do p over a
th000 all
th000 all
right
and we also need to remember to reset at
and we also need to remember to reset at
the start of
Step player. reward is zero it's a big
Step player. reward is zero it's a big
common
mistake very easy to catch but common
mistake very easy to catch but common
mistake um so we gave them a reward for
mistake um so we gave them a reward for
kill we actually have to add it to the
kill we actually have to add it to the
player struct
player struct
right the float
reward no big
deal and we also have to give them a uh
deal and we also have to give them a uh
distance reward right
so instead of reward equals
zero we
zero we
do player. reward plus
do player. reward plus
equals or minus
equals we need to get like the fountain
equals we need to get like the fountain
position right it's
position right it's
obnoxious reward based on
obnoxious reward based on
distance
to oh distance from your own spawn is
interesting that scals better with the
interesting that scals better with the
other lanes doesn't it versus just going
other lanes doesn't it versus just going
down
mid a little
bit but then it doesn't drive you
bit but then it doesn't drive you
to the enemy base I think we do it B
to the enemy base I think we do it B
distance to
distance to
enemy uh
enemy uh
ancient so if player. team is
ancient so if player. team is
zero ancient should be get Tower
zero ancient should be get Tower
23 is the enemy
23 is the enemy
Tower
player
player
minus
minus
okay e def uh float dist
ancient dist to ancient is going to be
ancient dist to ancient is going to be
the absolute value
the absolute value
of this
distance
distance
yeah else get
yeah else get
22 and we can just even simplify
22 and we can just even simplify
this CA
this CA
float then this is going to be minus
float then this is going to be minus
equal
uh divided
by the maximum is 255 in
by the maximum is 255 in
L1 I think giving a crazy big reward is
L1 I think giving a crazy big reward is
going to
be we're going to do like this negative
be we're going to do like this negative
point1
I think this
works um compute
observations self. rewards of PID so
observations self. rewards of PID so
let's just make sure that we do
let's just make sure that we do
um self. rewards PID yeah there we go
um self. rewards PID yeah there we go
so that ought to give us something like
reward now we need to get the summary
reward now we need to get the summary
metrics I think
working because I kind of uh punted on a
working because I kind of uh punted on a
lot of the summary
lot of the summary
metrics
so yesh
so yesh
this is fine we get rid of this I don't
this is fine we get rid of this I don't
need
need
this
uh we still don't need this
uh we still don't need this
[ __ ] for now this is going to be random
[ __ ] for now this is going to be random
until we like Implement proper action
until we like Implement proper action
stuff or it's going to be the scripted
stuff or it's going to be the scripted
thing until we Implement proper action
thing until we Implement proper action
stuff uh we don't need this reward fill
stuff uh we don't need this reward fill
zero we do it on
zero we do it on
cide we don't need self. actions equal
cide we don't need self. actions equal
actions
we don't have um the reset thing
we don't have um the reset thing
right
outcome I think we just Auto
reset reset
C equals
zero I don't know it's not even
seated
seated
okay so this is now resetting correctly
okay so this is now resetting correctly
I
think
and what the hell happened
and what the hell happened
here oh I just
here oh I just
have the what happened to my client oh
have the what happened to my client oh
it just loaded
it just loaded
weird I actually don't know what the
weird I actually don't know what the
hell happened
hell happened
here oh I just commented a bunch of [ __ ]
here oh I just commented a bunch of [ __ ]
that's
fine or did I leave I think I left
fine or did I leave I think I left
something half commented Maybe
okay this is
okay this is
fine yeah fix
fine yeah fix
that uh rewards. suum this is fine
that uh rewards. suum this is fine
reward you get this radiant
reward you get this radiant
level Min radiant level this this thing
level Min radiant level this this thing
is not going to help us
is not going to help us
now um because it's like flat
I guess this tells us for the first
I guess this tells us for the first
environment which is
fine but we can leave this for now I
suppose and uh this needs to this return
suppose and uh this needs to this return
function is probably needed as well
function is probably needed as well
right bu rewards truncations yeah this
right bu rewards truncations yeah this
is
is
fine uh
let's let's see if we can get this thing
let's let's see if we can get this thing
to report a nonzero
reward where is this
1295 C def not allow oh yeah cuz
1295 C def not allow oh yeah cuz
it's let's just Define it up top who
it's let's just Define it up top who
cares
hopefully my mic is filtering the
hopefully my mic is filtering the
background noise
outside
365 um cannot assign float to
int
int
oh um
oh um
yeah that's
fine we'll just throw int on these
right there's going to be so much code
right there's going to be so much code
clean up on this project
team and tier cannot assign type float
team and tier cannot assign type float
to int
uh
uh
well this is
definitely oh
definitely oh
that'll do
it there's some stuff that looks like it
it there's some stuff that looks like it
needs to be
needs to be
typed
typed
but this does
but this does
build uh does it
eval nope
this needs to be uint or int
32 none type has
32 none type has
no that's fine
self. CN we don't need
this
cool dire level
Min what's going on here
so it's not spawning anything which is
so it's not spawning anything which is
probably
bads
yes entities.
shape
shape
1206 entities
C entities.
C entities.
view numpy Rec
array
array
um that's weird
maybe
this not convert
this not convert
shape to size 110
why is this 1 by
why is this 1 by
206 oh m is one duh that's
206 oh m is one duh that's
fine
um so this doesn't need to be reshaped
um so this doesn't need to be reshaped
right that's
fine probably doesn't need to be
fine probably doesn't need to be
reshaped either
step let's figure out what's going on
step let's figure out what's going on
here I think that it's just that you
here I think that it's just that you
need to do entities of zero or whatever
need to do entities of zero or whatever
cuz the environments are stored
cuz the environments are stored
separately let's figure that out I think
separately let's figure that out I think
what's happening is just like I have
what's happening is just like I have
this structured element where uh it's
this structured element where uh it's
expecting me to
expecting me to
go here
okay
okay
zero
zero
of 5 col
of 5 col
10 do
levels what the hell attributes does it
have oh dot yeah Dot
yeah there we
yeah there we
go that's not
bad no big deal so the bigger thing now
bad no big deal so the bigger thing now
is that the uh the just stuff is not
is that the uh the just stuff is not
spawning I'll show
spawning I'll show
you so nothing is spawning
you so nothing is spawning
here so let's figure out that
so when we call reset what
happens self. ticket set to
happens self. ticket set to
zero
and is it resetting every tick or
and is it resetting every tick or
something
dumb this is
dire
Victory let's just see if it's resetting
Victory let's just see if it's resetting
constantly before it can spawn
anything
possible I don't think so
though oh I'm
though oh I'm
right that's real funny
right that's real funny
get Tower 22. health so I guess when we
get Tower 22. health so I guess when we
spawn the
spawn the
towers oh we forgot to spawn all the
towers oh we forgot to spawn all the
towers
de spawn all
de spawn all
towers and now if we run
this hopefully stuff works Maybe
okay I suspect it's not going to reset
okay I suspect it's not going to reset
fully cleanly
fully cleanly
but there's your EnV
dire
dire
victory that actually looks like it
victory that actually looks like it
reset relatively cleanly
reset relatively cleanly
right maybe there were leftover creeps
right maybe there were leftover creeps
or something I don't know but scheme of
or something I don't know but scheme of
things that was a relatively clean reset
cool let's add like games played or
cool let's add like games played or
something well we'll do that later let's
something well we'll do that later let's
let's just get this thing to to
let's just get this thing to to
freaking uh to run so we'll rebuild this
freaking uh to run so we'll rebuild this
let's see if we run
let's see if we run
train I want to see if we get rewards
train I want to see if we get rewards
now mind you uh this is actually not
now mind you uh this is actually not
taking into account the neuronet actions
taking into account the neuronet actions
at the moment
at the moment
I just want to see if we can run the
I just want to see if we can run the
data through the
pipeline and get some
stats oh there you
stats oh there you
go radiant level Max radiant level
Min runs
this is running uh I think 20 copies of
this is running uh I think 20 copies of
DOTA
DOTA
now it's very slow we haven't done any
now it's very slow we haven't done any
form of optimization on
this none
whatsoever on the environment obviously
whatsoever on the environment obviously
we have
we have
you can see the forward pass is taking
you can see the forward pass is taking
up 71% of the
compute
compute
so um how's our memory usage on this
so um how's our memory usage on this
it's a good question if this is leaking
it's a good question if this is leaking
then we're going to have issues if
then we're going to have issues if
not stable
2.49 okay well we can do a little bit of
2.49 okay well we can do a little bit of
optimization on this this will be fun to
optimization on this this will be fun to
see we'll see how quickly we can get
see we'll see how quickly we can get
this to be uh stupidly stupidly
this to be uh stupidly stupidly
optimized
right I'm actually going to commit all
right I'm actually going to commit all
this code up and start this on the big
machine config ocean
it's actually really cool though that uh
it's actually really cool though that uh
it has not crashed the environment
it has not crashed the environment
through that whole time that's pretty
through that whole time that's pretty
impressive stability out of this
thing
thing
670,000 steps of D I think that's
670,000 steps of D I think that's
um this thing just played like three
um this thing just played like three
hours of
DOTA now it's going to play three hours
DOTA now it's going to play three hours
of DOTA per second let's get it to
that so here is our bigger box
that so here is our bigger box
right this has uh this is in the puffer
right this has uh this is in the puffer
cluster which I like to show off for the
cluster which I like to show off for the
stream
stream
so we are running this now on this
so we are running this now on this
Hardware this box right
Hardware this box right
here the puff rayi mini
cluster just literally a bunch of
cluster just literally a bunch of
desktops in a
garage uh pip install machine n we just
garage uh pip install machine n we just
set up p
we'll get ourselves a baseline since
we'll get ourselves a baseline since
this machine's way faster and then we'll
this machine's way faster and then we'll
optimize from here it'll be
fun the time zones for the stream are
fun the time zones for the stream are
funny it always gets uh more people
funny it always gets uh more people
looking at it at like 7 p.m. Pacific so
looking at it at like 7 p.m. Pacific so
welcome
folks mode to train in V
multiprocessing okay so our Baseline is
multiprocessing okay so our Baseline is
this trains at 14,000 steps per
this trains at 14,000 steps per
second uh this is like the worst
second uh this is like the worst
optimized possible uh many researchers
optimized possible uh many researchers
would be very happy to have their Atari
would be very happy to have their Atari
thing running at this
thing running at this
speed now let's
speed now let's
see config ocean
we should probably just grab some arcs
we should probably just grab some arcs
from like snake
right or
right or
grid
8192 this batch size is really
8192 this batch size is really
large let's do 8192 though or 4096 to
large let's do 8192 though or 4096 to
start is fine um I think you don't quite
start is fine um I think you don't quite
do
do
4096 because and it's 4090 which is
4096 because and it's 4090 which is
funny because it's the number on the
funny because it's the number on the
GPU um then we have to do o the thing's
GPU um then we have to do o the thing's
kind of made for powers of
kind of made for powers of
two little
two little
awkward not a big
awkward not a big
deal 4090 times I don't know
deal 4090 times I don't know
16 time
16 time
16 65 440
440 okay and so uh what we're going to
440 okay and so uh what we're going to
do is we're going to
run this is
run this is
49 copies of
49 copies of
DOTA per
DOTA per
core hopefully we have memory for this I
core hopefully we have memory for this I
think we
do but we're just going to set this numm
do but we're just going to set this numm
is going to be
is going to be
M's let's hopefully not crash my
M's let's hopefully not crash my
box
uh okay well that works I forgot to
uh okay well that works I forgot to
increase the uh the the config uh so we
increase the uh the the config uh so we
just did the amount of training we did
just did the amount of training we did
before in like a second
uh I told you this was going to be
fast billion
fast billion
steps a million there we
go okay so we're at 500,000 train
go okay so we're at 500,000 train
steps uh we should be able to get a
steps uh we should be able to get a
million
I'm a little curious as to why the m is
I'm a little curious as to why the m is
running that
slow
slow
24% it should be way faster than
24% it should be way faster than
this based on our
profile I mean we could always just
profile I mean we could always just
increase the core count and stuff
it's possible we made it a little slower
it's possible we made it a little slower
and might have to do a little bit more
and might have to do a little bit more
optimization based on the reset stuff we
optimization based on the reset stuff we
did uh let's do this MOBA perf
did uh let's do this MOBA perf
thing num m
thing num m
is
is
49 we'll run this
49 we'll run this
for 20 seconds
it's possible it's just substantially
slower in which case you know we can do
slower in which case you know we can do
more optimization on
it we have more cores than two for
it we have more cores than two for
now yeah so this is now only getting a
now yeah so this is now only getting a
700,000 steps per
700,000 steps per
second which you would still think would
second which you would still think would
be enough
[Music]
[Music]
maybe
maybe
not let's just uh let me try a few
not let's just uh let me try a few
little things real
quick uh just to make the math easier on
quick uh just to make the math easier on
myself I'm going to do this it's going
myself I'm going to do this it's going
to be 100 environments
exactly uh ocean was it
so we're going to do number of
so we're going to do number of
environments this is per
environments this is per
100 uh so let's
100 uh so let's
do we need 400
do we need 400
environments the triple
buffered no reason not to do this right
buffered no reason not to do this right
I guess there kind of
I guess there kind of
is
12 and then you need four environments
we do
we do
24 24m something like
24 24m something like
this ah this might be too
this ah this might be too
much we'll
much we'll
see we can do 8,000 mini batch size
see we can do 8,000 mini batch size
now oh actually we should do eight yeah
now oh actually we should do eight yeah
this is this gives us better scaling I
this is this gives us better scaling I
think and then uh we can do 160k
think and then uh we can do 160k
maybe six is this 16,000 no we want
maybe six is this 16,000 no we want
160k or actually 8 *
160k or actually 8 *
16 is uh
16 is uh
64 so
64 so
128 th like yeah like
128 th like yeah like
this let's try this oops not mob
this let's try this oops not mob
perf do we have anything running on this
perf do we have anything running on this
machine
machine
no oh wait this grid continuous thing is
no oh wait this grid continuous thing is
still training isn't
it is
it yeah okay this thing is good now it's
it yeah okay this thing is good now it's
no longer eating my
CPUs so we just run it like
CPUs so we just run it like
this like multiprocessing
is the chat working by the way uh nobody
is the chat working by the way uh nobody
said anything in forever I'm assuming
said anything in forever I'm assuming
it's not
broken okay that gives us 600,000 and
broken okay that gives us 600,000 and
the m is down to 1% which means we're no
the m is down to 1% which means we're no
longer bottlenecking on the end
longer bottlenecking on the end
whatsoever this is very
whatsoever this is very
good I see we have very high
good I see we have very high
MK test yep it's good thank you
welcome uh okay
welcome uh okay
so I think we just need to match some
so I think we just need to match some
train settings now because this should
train settings now because this should
be pretty much one to one the same with
be pretty much one to one the same with
everything else I guess maybe the
everything else I guess maybe the
uh maybe the continuous actions or
uh maybe the continuous actions or
something
something
weren't handled
correctly let's run it with discretise
correctly let's run it with discretise
on I might have to fix something
do I have a disc res setting yeah puffer
do I have a disc res setting yeah puffer
lib environments ocean
lib environments ocean
MOA oops
MOA oops
[Music]
[Music]
MOA uh
MOA let's see whether I uh I broke this
MOA let's see whether I uh I broke this
or not python
or not python
demo just run it like this screw it
good not
broadcast action space
could not bro broadcast from shape
could not bro broadcast from shape
two and
shape fix this real
quick if is
continuous got the mobile model it looks
continuous got the mobile model it looks
like this is good
where is it getting
where is it getting
actions of this shape
actions of this shape
from be getting them from the model
from be getting them from the model
right the actor gives
right the actor gives
you linear to
six oh right because this is not yeah
six oh right because this is not yeah
yeah this not remotely correct uh we
yeah this not remotely correct uh we
need to compute this
need to compute this
then uh
it's number of actions should be the sum
it's number of actions should be the sum
of this Vector up
of this Vector up
here so 3 + 3 this is
here so 3 + 3 this is
six plus 10
six plus 10
16 21 22
TCH 22 I think right here
six it's not six colon 9 at six
six it's not six colon 9 at six
colon 16 I
colon 16 I
think yeah that's like 0 to 10
think yeah that's like 0 to 10
perfect and then uh come on auto
perfect and then uh come on auto
complete
there we
go this work
now right I forgot to do
oops
torch we just need to comment this a
torch we just need to comment this a
little bit at the
little bit at the
end cool so now this
end cool so now this
network should be relatively uh
network should be relatively uh
reasonable this stack is not doing me
reasonable this stack is not doing me
any
any
favors stack expects tensors to be equal
favors stack expects tensors to be equal
size well that's not
size well that's not
good
good
um the thing is since I'm not using
um the thing is since I'm not using
these
these
anyways I can probably make my life way
anyways I can probably make my life way
easier for the just for the time being
easier for the just for the time being
we'll comment this we'll put this
we'll comment this we'll put this
back and we'll
back and we'll
do Moa
not broadcast from eight into three into
not broadcast from eight into three into
six I do it
six I do it
wrong so I'm basically here I have this
wrong so I'm basically here I have this
annoying uh action space I just need to
annoying uh action space I just need to
massage a little
bit right I forgot to update the other
bit right I forgot to update the other
thing so this is six plus this is uh
MOA or uh
MOA or uh
torch so this
torch so this
is this is 12
here
here
really I thought I had this
right oh I'm just dumb I just literally
right oh I'm just dumb I just literally
literally can't yeah 3 * 6 is 18 okay
arithmetic
cool looks like it
cool looks like it
runs I do VEC
runs I do VEC
multi that should be faster not slower
I do remember there being some weird
I do remember there being some weird
bugs though in uh P
bugs though in uh P
torch like some of the optimization
torch like some of the optimization
operations so if this is way slower it's
operations so if this is way slower it's
just a janky loss we can fix
that something's bull [ __ ]
here we're making the action space
here we're making the action space
discreet for
discreet for
now CBA with
this making it a discreet of
this making it a discreet of
18 that'll at least let us I want to
18 that'll at least let us I want to
just perf optimize this tonight is all I
just perf optimize this tonight is all I
want to do
I don't want to be dealing with annoying
I don't want to be dealing with annoying
pie torch like
pie torch like
quirks okay look this is just going to
quirks okay look this is just going to
go to a
go to a
discreet rate
discreet rate
18 or whatever and then this line has to
18 or whatever and then this line has to
get
get
commented right here
if this still doesn't work we've got
if this still doesn't work we've got
something
screwy very
possible be screw in the model
didn't take this long to start up before
right okay
right okay
so I'm assuming there's just something
so I'm assuming there's just something
weird with like the
weird with like the
way like we coded this with the
way like we coded this with the
continuous actions and then probably we
continuous actions and then probably we
just forgot
just forgot
something I'm going to put the
something I'm going to put the
continuous ones
continuous ones
back I'm going to hope that we can just
back I'm going to hope that we can just
optimize around it anyways
there really shouldn't be a perf
there really shouldn't be a perf
difference between the
difference between the
two if they're both done
two if they're both done
correctly okay I see I didn't even I
correctly okay I see I didn't even I
don't even know if we changed anything
don't even know if we changed anything
and now we're
and now we're
at okay so it slowed down a little
at okay so it slowed down a little
that's funny but like
that's funny but like
600k with the end being
600k with the end being
fast I'm seeing relatively High volumes
fast I'm seeing relatively High volumes
of MK
of MK
traffic uh some of that can be infos
traffic uh some of that can be infos
I don't see any info whatsoever though
I don't see any info whatsoever though
so I'm
assuming I I set the in I set the info
assuming I I set the in I set the info
reporting inal to be very
long yeah there we go that's the first
batch got very high forward pass
batch got very high forward pass
percentage time
very high misk
time that's like nearly 30% of the
time that's like nearly 30% of the
performance just in probably Cuda
performance just in probably Cuda
transfers or something
weird perf to grades a little over time
weird perf to grades a little over time
as
as
well onto optimization
well onto optimization
looks like it's going well too yeah this
looks like it's going well too yeah this
is just the start it's not actually
is just the start it's not actually
learning anything right now it it is
learning anything right now it it is
running the policy um but we're just
running the policy um but we're just
kind of ignoring the actions and running
kind of ignoring the actions and running
a scripted thing behind the scenes we're
a scripted thing behind the scenes we're
just trying to see if we run the policy
just trying to see if we run the policy
to get actions in the loop with the
to get actions in the loop with the
environments this is currently
environments this is currently
simulating um 2400 copies of DOTA at
simulating um 2400 copies of DOTA at
10,000 times and it's training at 10,000
10,000 times and it's training at 10,000
times real time uh the goal is to train
times real time uh the goal is to train
it 20,000 times real time so needs to
it 20,000 times real time so needs to
double
this GPU utilization is atrocious right
this GPU utilization is atrocious right
now to
35% take a look at some observation
35% take a look at some observation
spaces Maybe
uh well this is also the weird
uh well this is also the weird
continuous version which we haven't
continuous version which we haven't
tested as well I think
so what do you attribute low uh GPU
so what do you attribute low uh GPU
utilization to Demons you know
utilization to Demons you know
demons what you got to do the RL
demons what you got to do the RL
exorcisms for got to make sure that you
exorcisms for got to make sure that you
uh you know you pay your tithe to your
uh you know you pay your tithe to your
reinforcement learning priest
it it's mostly Cuda transfers and other
it it's mostly Cuda transfers and other
[ __ ]
though the old Goblins the old
Gins Ah that's funny the old
Gins Ah that's funny the old
gorlin oh funny let so
um did we allocate this buffer
um did we allocate this buffer
stupid were we stupid with this
stupid were we stupid with this
buffer observations no we got un and8
here so we have un 8
here so we have un 8
data and then when we Define the OB
data and then when we Define the OB
space what do we Define it as
you and eight so this is
correct we probably need to just get it
correct we probably need to just get it
working with the
working with the
discrete action
first since that's like the thing that's
first since that's like the thing that's
more likely to be stable
more likely to be stable
we just have to like redo
[Music]
oops these numbers are actually fine if
oops these numbers are actually fine if
we just take
we just take
like the zero off
maybe um
maybe um
just do 10 per core is a little
test
so oops mile
mile [ __ ] it's
mile [ __ ] it's
7:25 I got got to I got to get going
7:25 I got got to I got to get going
soon I hate to leave when the stream is
soon I hate to leave when the stream is
like doing so well
like doing so well
though but I am pretty
though but I am pretty
tired I'll get this one last thing to
tired I'll get this one last thing to
work thanks for uh for checking this out
work thanks for uh for checking this out
though always nice to see you drop by on
though always nice to see you drop by on
this we got lots of cool stuff
working I don't know if you saw we perf
working I don't know if you saw we perf
optimized uh single thread to uh
optimized uh single thread to uh
13 no 1.3 million steps per second
13 no 1.3 million steps per second
single
single
thread which is what I promised million
thread which is what I promised million
steps per second
right where the heck is this stupid
right where the heck is this stupid
thing
stuck that took most of the day though
this thing is just
this thing is just
stuck
stuck
right thing is just stuck being stupid
are you implying it's running
are you implying it's running
multi-threaded now
multi-threaded now
yeah and if so how are SPS
yeah and if so how are SPS
lower well they're not what you're
lower well they're not what you're
you're looking at training throughput
you're looking at training throughput
now so yeah if you're going to look at
now so yeah if you're going to look at
training through put that's going to be
training through put that's going to be
lower
lower
um that's going to be GP pu bottleneck
um that's going to be GP pu bottleneck
or Cuda bottleneck or
or Cuda bottleneck or
whatever but and there's some
whatever but and there's some
circumstances under which the the frames
circumstances under which the the frames
it'll drop lower as well because we
it'll drop lower as well because we
can't just have one copy of the
can't just have one copy of the
environment we need to have way more
environment we need to have way more
than one copy of the environment um so I
than one copy of the environment um so I
think like when I was running 400 copies
think like when I was running 400 copies
it was going down to like 700,000 steps
it was going down to like 700,000 steps
per second uh which is slightly too slow
per second uh which is slightly too slow
for what I wanted to do so I started
for what I wanted to do so I started
doing some other fancy things on 24
doing some other fancy things on 24
processes with 24 100 environments
processes with 24 100 environments
there's a whole thing that's going on U
there's a whole thing that's going on U
but basically like you want to have the
but basically like you want to have the
minimum number of environments that you
minimum number of environments that you
need usually uh when you're using this
need usually uh when you're using this
many of course and you want the thing to
many of course and you want the thing to
run such that the environment is using
run such that the environment is using
like z%
like z%
CPU well not 0% CPU it's you're waiting
CPU well not 0% CPU it's you're waiting
on the environment 0% of the time so
on the environment 0% of the time so
you're basically you're never
you're basically you're never
bottlenecking on the CPU it always has
bottlenecking on the CPU it always has
data prepared for when you want
data prepared for when you want
it and that you can reason
do what in the hell is wrong with this
do what in the hell is wrong with this
environment
though I mean puffer lib's vectorization
though I mean puffer lib's vectorization
is Dro in so like once it it literally
is Dro in so like once it it literally
took me five seconds to go from it being
took me five seconds to go from it being
single thread to multi- thread cuz
single thread to multi- thread cuz
puffer just does it for you and it's
puffer just does it for you and it's
fast now the thing that we're dealing
fast now the thing that we're dealing
with now is I don't know if it's a torch
with now is I don't know if it's a torch
issue or like a thing that I coded with
issue or like a thing that I coded with
the N weird um
yeah but something's
yeah but something's
Jank
so you get this
so you get this
thing you return the
thing you return the
action
continuous this should be fine
it getting stuck on the environment it
it getting stuck on the environment it
shouldn't be doing anything with these
shouldn't be doing anything with these
actions it literally shouldn't care what
actions it literally shouldn't care what
it's getting for
actions step
actions step
all
render I need
render I need
this infos
this is
dumb and
dumb and
discreet we got this thing running
discreet we got this thing running
discreet yep
one two
three it runs a few steps and then just
three it runs a few steps and then just
gets
gets
stuck doesn't make
stuck doesn't make
sense why the hell would the difference
sense why the hell would the difference
of actions make it get
stuck or is it even getting stuck is it
stuck or is it even getting stuck is it
getting stuck on receive
yeah it's stuck on the V environment
yeah it's stuck on the V environment
which is very
weird so the environment is hanging I
guess what if we do it single
thread
thread
one does it hang instantly
one does it hang instantly
then seg Vault
yay oh I
yay oh I
know I think I
know no wait I don't know thought I
know no wait I don't know thought I
knows I thought I knows
one
one
idea one idea and then I'm going to um
idea one idea and then I'm going to um
I'll answer a couple questions if
I'll answer a couple questions if
anybody has any cool stuff but then I'm
anybody has any cool stuff but then I'm
going to go get food because that's
going to go get food because that's
probably a thing that you need to
do action
space where do I make self-d actions
right
right
here this is float
32 self.
discretize okay
let's
do this is false self. discretize this
do this is false self. discretize this
has got to be
has got to be
false I bet it's just doing something
false I bet it's just doing something
weird with the underlying
end I just pass
end I just pass
false I leave the actions
let's
see Works
instantly hold
on it was just like a weird a typing
on it was just like a weird a typing
issue with a thing I was passing to the
issue with a thing I was passing to the
end breaking
it CNN not supported that's
it CNN not supported that's
weird okay let's actually set this thing
weird okay let's actually set this thing
to use a reasonable batch size
now for
live 100 m per core
usually you want like eight uh what it
usually you want like eight uh what it
like 8192 mini
like 8192 mini
batch DOTA doesn't divide by powers of
batch DOTA doesn't divide by powers of
two we try
this there you go
so it does like to dip a little bit
so it does like to dip a little bit
after a second of
after a second of
training I don't quite know why but
training I don't quite know why but
that's up to
that's up to
800 I'm sure we can get that stable it
800 I'm sure we can get that stable it
looks actually pretty well of course as
looks actually pretty well of course as
I say that it uh it
Flags very very weird actually that it
Flags very very weird actually that it
dips in steps per second like
dips in steps per second like
that because um the environment is not
that because um the environment is not
taking up any time you can see
taking up any time you can see
it
so I don't actually there's nothing here
so I don't actually there's nothing here
that should be variable
speed do I have something else running
speed do I have something else running
on this
machine like
machine like
that's pretty weird the way that that
that's pretty weird the way that that
just
happens could technically be infos could
happens could technically be infos could
be a number of
things we'll figure that out I'm
things we'll figure that out I'm
sure uh whatever that is there should be
sure uh whatever that is there should be
no instability so if we see 800k we
no instability so if we see 800k we
should be able to get
should be able to get
800k uh and then with some addition
800k uh and then with some addition
optimizations let me
see what do we do here batch side BPT
see what do we do here batch side BPT
Horizon
Horizon
16 update
EPO uh
config I don't see anything here that's
config I don't see anything here that's
bad
bad
there shouldn't be
two now nothing there looks obviously
two now nothing there looks obviously
bad except the BPT Horizon which isn't
bad except the BPT Horizon which isn't
going to help
going to help
us yeah
but 600k we saw 800 we'll be able to get
but 600k we saw 800 we'll be able to get
it it's the same exact architecture as
it it's the same exact architecture as
the grid
the grid
environment so there's there's actually
environment so there's there's actually
no reason that we wouldn't be able to
no reason that we wouldn't be able to
match it there's like some Jank under
match it there's like some Jank under
the hood that we'll have to debug I'm
the hood that we'll have to debug I'm
going to commit all this up so you guys
going to commit all this up so you guys
can play with it if you want uh reminder
can play with it if you want uh reminder
it's not actually like learning stuff
it's not actually like learning stuff
yet it is running it's not learning
yet it is running it's not learning
stuff yet
okay it's in any
okay it's in any
config
config
um tomorrow I'm going to try to actually
um tomorrow I'm going to try to actually
get models training on this
get models training on this
properly so we're going to probably set
properly so we're going to probably set
up like a proper or reasonable multi-
up like a proper or reasonable multi-
discreet
discreet
space to start with um we're going to
space to start with um we're going to
set
set
up the actions to actually control the
up the actions to actually control the
agents we're probably going to set up
agents we're probably going to set up
some sort of scripting thing for
some sort of scripting thing for
targeting because targeting is going to
targeting because targeting is going to
be really janky to represent early
be really janky to represent early
on um but they're going to be able to
on um but they're going to be able to
control movement uh qwe all that
control movement uh qwe all that
and we will see if we can actually get
and we will see if we can actually get
the models to like do something
the models to like do something
reasonable that'll be pretty cool to
reasonable that'll be pretty cool to
do uh and yeah other than
do uh and yeah other than
that I think it's pretty much set
that I think it's pretty much set
um technically we could probably even
um technically we could probably even
mix in like some semi-supervised data
mix in like some semi-supervised data
which would be
which would be
fun but yeah that's that's pretty much
fun but yeah that's that's pretty much
what we have for today let me show off
what we have for today let me show off
for folks that missed
for folks that missed
it we posted a few good
it we posted a few good
things yeah 13 1.3 million steps per
things yeah 13 1.3 million steps per
second single thread which is like over
second single thread which is like over
a gigabyte a second of data simulation
a gigabyte a second of data simulation
data we started at 150k took about 6
data we started at 150k took about 6
hours it was a mix of uh lowl C
hours it was a mix of uh lowl C
optimizations or scyon to C conversion
optimizations or scyon to C conversion
optimizations uh a few algorithmic
optimizations uh a few algorithmic
things and then one big one was a little
things and then one big one was a little
bit of caching that we
bit of caching that we
did we fixed a whole bunch of bugs along
did we fixed a whole bunch of bugs along
the way with this thing we got it uh
the way with this thing we got it uh
integrated with the neural network
integrated with the neural network
policy just in the last little bit we
policy just in the last little bit we
got the N resetting relatively
got the N resetting relatively
cleanly and this is now all committed up
cleanly and this is now all committed up
so the goal for the next couple days is
so the goal for the next couple days is
going to be to try to get some
going to be to try to get some
reasonable policies uh I I've done this
reasonable policies uh I I've done this
type of a thing before
type of a thing before
and the biggest problem is usually just
and the biggest problem is usually just
tons of of game bugs and figuring out
tons of of game bugs and figuring out
all the stuff that's broken with the
all the stuff that's broken with the
game and broken with the observations of
game and broken with the observations of
the game uh we also don't have a full we
the game uh we also don't have a full we
don't really have good high quality
don't really have good high quality
observation data yet either so I have
observation data yet either so I have
some methods of getting better
some methods of getting better
observation data that aren't going to be
observation data that aren't going to be
too hard we'll probably play with that a
too hard we'll probably play with that a
little bit as well um but I think that
little bit as well um but I think that
at the time being like we should
at the time being like we should
probably be able to learn
probably be able to learn
uh to learn a policy that will play and
uh to learn a policy that will play and
win the
win the
game high quality observation data it's
game high quality observation data it's
just really hard to extract this
just really hard to extract this
portions of local state data you want
portions of local state data you want
from the game uh and put them
from the game uh and put them
efficiently into data structure that
efficiently into data structure that
goes into a neural network so like the
goes into a neural network so like the
ways I did a whole segment on this where
ways I did a whole segment on this where
I was like looking at different data
I was like looking at different data
structures um yeah
structures um yeah
the the thing that you have to do is you
the the thing that you have to do is you
have to find a way to represent the data
have to find a way to represent the data
in a like in a way that you have a fast
in a like in a way that you have a fast
neuronet that can process it and not
neuronet that can process it and not
everything is fast hello and uh welcome
everything is fast hello and uh welcome
this is the little uh the tail end of
this is the little uh the tail end of
the stream 7:40 I got to go grab dinner
the stream 7:40 I got to go grab dinner
um I will be back on this
um I will be back on this
tomorrow I've been streaming the dev on
tomorrow I've been streaming the dev on
this project pretty much every weekday I
this project pretty much every weekday I
just pushed all the code so needs a
just pushed all the code so needs a
little bit of cleaning up but it's in
little bit of cleaning up but it's in
this any config branch in puffer lib it
this any config branch in puffer lib it
is all open source
is all open source
go ahead and start the repo on your way
go ahead and start the repo on your way
in it helps me up a whole bunch and uh
in it helps me up a whole bunch and uh
yeah I will I hate to end the stream on
yeah I will I hate to end the stream on
uh when we have actually pretty nice
uh when we have actually pretty nice
viewership but uh I got to get food so
viewership but uh I got to get food so
thanks all I'll be back tomorrow
