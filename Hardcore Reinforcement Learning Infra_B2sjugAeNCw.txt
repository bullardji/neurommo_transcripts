Kind: captions
Language: en
okay we should be
live we've got some stuff to do
live we've got some stuff to do
today gotten some rest over the weekend
today gotten some rest over the weekend
and uh had some time to think about
puffer I've been making a ton of
puffer I've been making a ton of
progress lately on the environment side
progress lately on the environment side
with puffer
with puffer
um but there's this thing that's been
um but there's this thing that's been
bothering me with the infrastructure
bothering me with the infrastructure
it's gotten too complicated and a little
it's gotten too complicated and a little
clunky I think I found a way to fix
clunky I think I found a way to fix
that so the goal for the next few hours
that so the goal for the next few hours
here is to do that end to end get it
here is to do that end to end get it
working and ship it to Dev Branch it's a
working and ship it to Dev Branch it's a
lot of stuff to
lot of stuff to
do but I think I think it shouldn't be
do but I think I think it shouldn't be
too bad mainly I figured out the way
too bad mainly I figured out the way
that I want to deal with all the data
that I want to deal with all the data
storage for this stuff I think it's
storage for this stuff I think it's
going to be simpler than the way I have
going to be simpler than the way I have
it now it requires one additional API
it now it requires one additional API
call it saves subclassing you don't have
call it saves subclassing you don't have
to subass for this um so it saves a
to subass for this um so it saves a
bunch of API Shenanigans overhead I
bunch of API Shenanigans overhead I
think it's going to be
good so let me show you
good so let me show you
here what I was doing here is I was
here what I was doing here is I was
working on before I was working on on
working on before I was working on on
this puffer M
this puffer M
thing
thing
and the idea here was to have just like
and the idea here was to have just like
a base class for puffer uh for puffer
a base class for puffer uh for puffer
native
native
environments I hate this um yeah this is
environments I hate this um yeah this is
just
just
terrible
terrible
so what we're going to do
so what we're going to do
instead uh and the main reason that I
instead uh and the main reason that I
was doing this was because of this
was doing this was because of this
buffer thing right
buffer thing right
here I couldn't find a clean way
here I couldn't find a clean way
to have uh an environment be able to
to have uh an environment be able to
manage its own storage I think I figured
manage its own storage I think I figured
out a way to do that but it's going to
out a way to do that but it's going to
take a little bit of finagling
take a little bit of finagling
because the structure of puffer infra at
because the structure of puffer infra at
the moment it's a little unintuitive but
the moment it's a little unintuitive but
it's not that bad until you get into the
it's not that bad until you get into the
C environments so you have this serial
C environments so you have this serial
class right here this is for running
class right here this is for running
multiple environments in a loop very
multiple environments in a loop very
basic right except that it also has all
basic right except that it also has all
this like data buff injection nonsense
this like data buff injection nonsense
here which isn't very
here which isn't very
good um and then it's run inside of
good um and then it's run inside of
multiprocessing so you run
multiprocessing so you run
multiprocessing VC and then inside of it
multiprocessing VC and then inside of it
you run
you run
seral on its own that's kind of okay but
seral on its own that's kind of okay but
then the you get into problems when you
then the you get into problems when you
have these C environments that kind of
have these C environments that kind of
do their own loops and then you have to
do their own loops and then you have to
run multiprocessing serial python C
run multiprocessing serial python C
binding uh scyon wrapper thing and then
binding uh scyon wrapper thing and then
C environment under it's just too much
C environment under it's just too much
and I hate it
so yeah that's what we're going to look
so yeah that's what we're going to look
at right here um I'm trying to figure
at right here um I'm trying to figure
out where exactly I want to start on
this yeah cuz I don't actually I don't
this yeah cuz I don't actually I don't
like the way that I was doing this
like the way that I was doing this
before to be
honest yeah this puffer M
honest yeah this puffer M
thing it's got like this reset and this
thing it's got like this reset and this
step and
stuff let's open up an environment so we
stuff let's open up an environment so we
can
see uh poer lib
see uh poer lib
ocean let's take a look
ocean let's take a look
at let's take a look at a complex M
at let's take a look at a complex M
first and a simple
one where's the python mobile.
py okay so here's the python file you
py okay so here's the python file you
can see it sub classes this puffer M
can see it sub classes this puffer M
thing and what's the API
signature it's got render
I mean this is pretty much going to
I mean this is pretty much going to
match the gymnasium VC API
right
right
yeah this match is gymnasium VEC
yeah this match is gymnasium VEC
API and I think we can do that as well
right I think so
right I think so
so what we
so what we
do yeah I think what has happened before
do yeah I think what has happened before
is I had it confused this puffer M needs
is I had it confused this puffer M needs
to be not a vector class it needs to be
to be not a vector class it needs to be
our native environment
type and then we have to have a native
type and then we have to have a native
vectorization mode so it's going to go
vectorization mode so it's going to go
multiprocessing native
puffer I think that's it
yeah I think that
works okay
works okay
um let me see how we should go about
um let me see how we should go about
this
this
then let me
then let me
see change this back to Native right
[Music]
there's going to be a little bit of
there's going to be a little bit of
boiler
boiler
plate before we get to the
plate before we get to the
uh we get to the difficult decisions
uh we get to the difficult decisions
here I
think uh no this day is this puff R
think uh no this day is this puff R
there yeah there's going to be a little
there yeah there's going to be a little
bit of boiler plate before we get to
to
this back end this is going to be
native coer and gymnasium yeah this is
native coer and gymnasium yeah this is
it we've cracked it this is this is
it we've cracked it this is this is
going to be the design I can just I can
going to be the design I can just I can
just
tell and then this assigned buffers is
tell and then this assigned buffers is
not going to be needed
right is there ever a case where you
right is there ever a case where you
need to instantiate this
directly let me
see and
Creator yeah this API signature is just
Creator yeah this API signature is just
not
not
required
right I do think that you need num m
right I do think that you need num m
still
still
maybe I think you do need numb
Ms the lack of buff is also weird
right
yes I just want to make absolutely sure
yes I just want to make absolutely sure
I'm not getting something wrong here so
I'm not getting something wrong here so
the way that this works at the moment
the way that this works at the moment
with puffer's environments right is
with puffer's environments right is
vectorization runs multiple environments
vectorization runs multiple environments
either in parallel or serial or whatever
either in parallel or serial or whatever
and in order to do this efficiently data
and in order to do this efficiently data
buffers are in shared memory or they can
buffers are in shared memory or they can
be at least they're continuous tensor
be at least they're continuous tensor
you need to pass slices of these into
you need to pass slices of these into
each individ individual environment and
each individ individual environment and
the way I do that at the moment is with
the way I do that at the moment is with
this injection
technique you get this injection
technique this injection
technique this injection
technique is kind of nifty cuz you don't
technique is kind of nifty cuz you don't
have to
have to
modify the initialization signature at
modify the initialization signature at
all like you don't have to add this buff
all like you don't have to add this buff
thing
here
here
but I think it's going to be better to
but I think it's going to be better to
do it with it in the
do it with it in the
inette let me just think of any
inette let me just think of any
potential downsides of doing this
potential downsides of doing this
because this is going to be a lot of
because this is going to be a lot of
code changes right all at once I can do
code changes right all at once I can do
it all the day but it's going to be a
it all the day but it's going to be a
lot of changes and I really don't want
lot of changes and I really don't want
to get this wrong
let me check
emulation how do I handle it here
okay I set it to none here and then I
okay I set it to none here and then I
just assume that it's always
injected and then I have conditional
logic I see
oh I think I even have
um
wait self. m
it's a big
change I think it's better I'm not
change I think it's better I'm not
positive
though to be fair I do not have to make
though to be fair I do not have to make
this decision for everything right now I
this decision for everything right now I
only have to make the decision for
only have to make the decision for
Native
environments is it guaranteed
environments is it guaranteed
better the thing is okay
better the thing is okay
I'm being a bit incoherent here because
I'm being a bit incoherent here because
this is complicated but essentially what
this is complicated but essentially what
I'm trying to do is I'm trying to figure
I'm trying to do is I'm trying to figure
out how we get the data storage object
out how we get the data storage object
like the data storage arrays that we
like the data storage arrays that we
need for these environments into the
need for these environments into the
environments and right now let me give
environments and right now let me give
you a
you a
practical version of what is the thing
practical version of what is the thing
that's obnoxious right now
that's obnoxious right now
so this is the reset function for the
so this is the reset function for the
Moa every single environment has one
Moa every single environment has one
like this every custom environment you
like this every custom environment you
see how we're making these environments
see how we're making these environments
inside of the the reset function instead
inside of the the reset function instead
of making them when we make the
of making them when we make the
environment yeah this is
environment yeah this is
because uh this is
unfortunately because we do not have
unfortunately because we do not have
access to buff up here right we do not
access to buff up here right we do not
have access to data buffers it's not
have access to data buffers it's not
passed in here so what this
passed in here so what this
means is that we have to make them here
means is that we have to make them here
but we can't use them immediately
but we can't use them immediately
because vectorization might overwrite
because vectorization might overwrite
these and might not so not only do we
these and might not so not only do we
have to keep track of this gross thing
have to keep track of this gross thing
that should be able to be done
that should be able to be done
automatically for
automatically for
us but we also have to defer creating
us but we also have to defer creating
environments this drives me
insane so I think that at the very least
I think at the very least we do this for
I think at the very least we do this for
Native
environments to be fair there's
environments to be fair there's
probably there's probably no harm in
probably there's probably no harm in
doing this for uh emulated environments
doing this for uh emulated environments
as
well I'm not positive on that let's do
well I'm not positive on that let's do
it for Native environments let's lock
it for Native environments let's lock
that in
is buffer is not a reserve keyword or
is buffer is not a reserve keyword or
something
something
right yeah no we're
right yeah no we're
good uh it's going to be buffers anyways
right we'll name it later
right we'll name it later
let's just let's just get the initial
let's just let's just get the initial
implementation
implementation
so must
so must
Define num M's before
Define num M's before
init uh no right we're just going to do
init uh no right we're just going to do
num numm is a mandatory parameter
let's see the signature that we're using
let's see the signature that we're using
we don't need M creators right or do
we I think we just need
I think we can almost keep this
exactly we can almost keep this
exactly we can almost keep this
signature
signature
exactly the only thing that we need is
exactly the only thing that we need is
we need to
add I don't even think we need this star
add I don't even think we need this star
star quarks do
star quarks do
we we'll see about that so now we don't
we we'll see about that so now we don't
need this has Adder num M's thing
numb
agents we should not need numb agents
agents we should not need numb agents
either
right let's see how we do this in
right let's see how we do this in
serial I think I'm going to be able to
serial I think I'm going to be able to
copy the seral logic and just simplify
copy the seral logic and just simplify
it
yeah let's take all this
yeah let's take all this
garbage where it's going to be way uh
garbage where it's going to be way uh
way s simpler than
way s simpler than
this so first of all this is no longer
this so first of all this is no longer
this is not a list this is just m
cror star
cror star
args star quars
you have to pass no Ms like
this buff equal buff something I think
this buff equal buff something I think
it's something like
this and
this and
then driver environment
we never have emulation on for this
we never have emulation on for this
though technically we might end up doing
though technically we might end up doing
something with emulation
later uh check M's
sure agents per
M A lot of these things we should not
M A lot of these things we should not
need a lot of these things we should not
need a lot of these things we should not
need
let's go look at how this is
let's go look at how this is
um this is done inside
of multiprocessing I guess we don't
need agents per batch M's per
batch man I haven't looked at this code
batch man I haven't looked at this code
in too
long well we'll see if let's just Mark
long well we'll see if let's just Mark
let's just fill stuff out and see if
let's just fill stuff out and see if
it's
[Music]
redundant native does not support async
redundant native does not support async
on its
on its
own but you do get acing through
own but you do get acing through
multiprocessing is that
okay I think it's
okay we'll see about
that single observation space single
that single observation space single
action
action
space do we Define these things at the
moment I think that we
moment I think that we
do ah okay so this is why we needed
do ah okay so this is why we needed
agents per
batch we need to know the number of
Agents yeah
I think we can just
do this gives you a total number of
do this gives you a total number of
Agents I
Agents I
believe agent
IDs believe you have to expose numb
IDs believe you have to expose numb
agents as well right so you just do like
agents as well right so you just do like
at property
and this is kind of stupid isn't it
and this is kind of stupid isn't it
these
properties
whatever let's not nitpick for now
we can
we can
nitpick once this
works welcome
hello currently trying to fix all this
hello currently trying to fix all this
infra
infra
super inspired by your videos Library
super inspired by your videos Library
thank you if you haven't joined the uh
thank you if you haven't joined the uh
the Discord already it's where all the
the Discord already it's where all the
dev
dev
happens often in the evening I'll be
happens often in the evening I'll be
hanging out and there just chatting
hanging out and there just chatting
about Dev or whatever
else really trying to scale the open
else really trying to scale the open
source side of this been tinkering with
source side of this been tinkering with
poo and Tic Tac Toe plus
poo and Tic Tac Toe plus
shared
shared
memory cool wait tic-tac-toe were you
memory cool wait tic-tac-toe were you
the one doing tic taac toe in the
Discord let me
see been lurking okay that probably was
see been lurking okay that probably was
you then
right yeah I bet it'll I bet if you have
right yeah I bet it'll I bet if you have
the environment Dynamics right it'll
the environment Dynamics right it'll
just
just
work oh 600
work oh 600
members that's awesome
don't think so would be
interested I got distracted reading what
interested I got distracted reading what
would you be interested in I just
would you be interested in I just
uh I lost track a second my my bad
uh I lost track a second my my bad
there's been a lot of stuff going on
there's been a lot of stuff going on
lately we literally we have a hurricane
lately we literally we have a hurricane
coming in that we had to get all the
coming in that we had to get all the
servers to not get wiped out by
him the Tic Tac Toe end will should
him the Tic Tac Toe end will should
definitely just work um if you get the
definitely just work um if you get the
uh the Dynamics right someone messing
uh the Dynamics right someone messing
with tic tac toe
with tic tac toe
oh was that not you hold
on oh I guess is this not
on oh I guess is this not
you
you
tic-tac-toe yeah there were a couple
tic-tac-toe yeah there were a couple
people messing around I don't think I
people messing around I don't think I
saw anybody actually do
saw anybody actually do
it yeah are hurricane I can't imagine
it yeah are hurricane I can't imagine
ah it's kind of silly we're going to get
ah it's kind of silly we're going to get
the server out of there soon enough cuz
the server out of there soon enough cuz
it's just like
ridiculous yeah I don't think that
ridiculous yeah I don't think that
anybody if somebody did it they didn't
anybody if somebody did it they didn't
actually do it in a way that we can uh
actually do it in a way that we can uh
we can nicely bind so right now the
we can nicely bind so right now the
thing that we're trying to get a lot
thing that we're trying to get a lot
more environments to do and this is
more environments to do and this is
something we're definitely looking for
something we're definitely looking for
contributions
on so all all these run all of these
on so all all these run all of these
environments here they all run on web
environments here they all run on web
like I can open this and I can play it
like I can open this and I can play it
right and uh there's no JavaScript well
right and uh there's no JavaScript well
at least we haven't written any
at least we haven't written any
JavaScript for these this is all just
JavaScript for these this is all just
like uh wasm bindings for low-level
like uh wasm bindings for low-level
environments and we have a pretty clean
environments and we have a pretty clean
way of doing
way of doing
that it's a really good way to get into
that it's a really good way to get into
the project is to just like make a
the project is to just like make a
simple M like go through the end to
simple M like go through the end to
endend process and that process is
endend process and that process is
getting easier every day like literally
getting easier every day like literally
this infro that I'm building right
this infro that I'm building right
here is going to cut out like one of the
here is going to cut out like one of the
few final remaining annoyances with
few final remaining annoyances with
custom MS
cool can see how it would be a good yeah
cool can see how it would be a good yeah
we literally we have people with zero RL
we literally we have people with zero RL
experience that just have you know an
experience that just have you know an
engineering background that have made
engineering background that have made
and gotten those environments working
and gotten those environments working
online in a day like um the guy that did
online in a day like um the guy that did
the connect 4M that's on there pretty
the connect 4M that's on there pretty
much did that whole thing in a day
much did that whole thing in a day
because well to be fair Fair we kind of
because well to be fair Fair we kind of
try to meet people wherever they're at
try to meet people wherever they're at
like you can just write python
like you can just write python
environments and they will work they
environments and they will work they
just won't run on the web uh you can
just won't run on the web uh you can
push stuff into scon and then it'll be
push stuff into scon and then it'll be
faster but it still won't run on the web
faster but it still won't run on the web
or you can push stuff all the way into C
or you can push stuff all the way into C
which is not that
which is not that
hard um and then it does run on the web
hard um and then it does run on the web
and it's super fast and everything is
and it's super fast and everything is
nice we have lots of examples as well
plus I'm always around to
plus I'm always around to
help depending on your engineering
background that's this buffer in right
oh right there's like this extra layer
oh right there's like this extra layer
of thing that I have to deal with here
right let me think so you pass
in if I just run this on its own am I
in if I just run this on its own am I
going to be passing
going to be passing
in a
buffer what am I going to be doing
I think I'm just going to be
I think I'm just going to be
returning yeah wait this is easy
right yeah this is going to be the piece
right yeah this is going to be the piece
of code that we're going to
of code that we're going to
need pretty much I
need pretty much I
think it's going to be something like
this so we'll store
this so we'll store
that um
um yeah okay this is why we have
um yeah okay this is why we have
properties
and then action
and then action
space yeah this does get declared like
space yeah this does get declared like
this agent ID is
this agent ID is
okay now we can get rid of these
okay now we can get rid of these
obnoxious
obnoxious
checks because they this the property
checks because they this the property
will just get those for
will just get those for
us uh this one these two are good for
now this is just duplicate at and then
now this is just duplicate at and then
this is just duplicated as well right
this is just duplicated as well right
then we have num OBS okay this is all
then we have num OBS okay this is all
this code right
here so basically this is going to have
here so basically this is going to have
to go
to go
into puffer li. environment or something
right like probably
here and then if this is going to be
like death
like death
sign
sign
buffers
and
and
buffer none like
this and
this and
then
then
if
if
none then
observations
zeros so what I'm trying to figure out
zeros so what I'm trying to figure out
here is I'm trying to just figure out a
here is I'm trying to just figure out a
way for these environments to have like
way for these environments to have like
a convenient way to either take an input
a convenient way to either take an input
data storage structure whoops or uh
data storage structure whoops or uh
create their own if
needed and I think it's just going to
needed and I think it's just going to
be num
be num
agents Ms b type yeah like
agents Ms b type yeah like
this and then I should just be able to
this and then I should just be able to
like tab through all of this actions as
like tab through all of this actions as
well
there something like
this uh there's going to be there going
this uh there's going to be there going
to be some issues with that later but
to be some issues with that later but
we'll leave it for
we'll leave it for
now okay and now we do not
now okay and now we do not
need we in the right piece of code here
need we in the right piece of code here
yeah native Native does not need assign
buffers because they already do this for
buffers because they already do this for
themselves
right and then
right and then
here this becomes
infos get returned
here and close like this
so pretty much this is going to
so pretty much this is going to
be about the size of the piece of
be about the size of the piece of
code that we need
code that we need
here which is very
here which is very
slim when I have something this slim I
slim when I have something this slim I
actually question if this code even
actually question if this code even
needs to exist and probably we'll have
needs to exist and probably we'll have
some way eventually to not even require
some way eventually to not even require
this
this
maybe but this is pretty much what we
maybe but this is pretty much what we
want
uh let's see if I can get this working
uh let's see if I can get this working
with like breakout or
something or
pong why is this here
yeah so this is puffer Li Vector native
uper m not just
find put the puff for
here uh
okay driver
and also got to rename all is I don't
and also got to rename all is I don't
know that why it's like my pong and
such no attribute driver end
uh
oops where is
oops where is
this okay so
this okay so
yeah right here this needs to
yeah right here this needs to
change this is going to just
be oh this is a good thing to include
actually when we make the
environment we should
environment we should
assert that it's a puffer end
and then what we
do just return native
right oh back end
right oh back end
of all this stuff
let's just see if this does what this
let's just see if this does what this
does there's so much fluff to strip out
does there's so much fluff to strip out
here uh okay
so right this is actually this is a good
so right this is actually this is a good
thing that we're encountering this
because okay this is actually kind of a
because okay this is actually kind of a
thing that's a bit uh that we should
thing that's a bit uh that we should
think about here right
so when you import this
so when you import this
stuff the only reason that I have this
stuff the only reason that I have this
make
make
function is to do the import dynamically
right I think we're just going to say
right I think we're just going to say
that all the first party environments
that all the first party environments
will
will
build because we can pretty much cut
build because we can pretty much cut
out we can pretty much cut out all this
out we can pretty much cut out all this
nonsense if we just assume that we're
nonsense if we just assume that we're
not going to be stupid with our first
not going to be stupid with our first
party ends
so like right here right you don't need
so like right here right you don't need
this make pong
function you just return to class
and now here we have buff right like
and now here we have buff right like
this
and what we will do
let
see okay now there's there's additional
see okay now there's there's additional
keyword garbage that we just have to
keyword garbage that we just have to
strip out
are you familiar with tiny grad
are you familiar with tiny grad
yep cool
project you remind me of that
framework I'll take that
framework I'll take that
yeah some of the tiny grad stuff is a
yeah some of the tiny grad stuff is a
little bit too functional and too golfed
little bit too functional and too golfed
for me but the idea of trying to keep
for me but the idea of trying to keep
things simple as possible is absolutely
required like literally in my head once
required like literally in my head once
a project goes above a certain
a project goes above a certain
complexity threshold like it's more
complexity threshold like it's more
complex than it needs to be its value
complex than it needs to be its value
just drops to zero like literally if
just drops to zero like literally if
something is substantially more
something is substantially more
complicated than it needs to be I kind
complicated than it needs to be I kind
of don't care what it is it's just not
of don't care what it is it's just not
useful
proba like this
number of lines is slightly misaligned
number of lines is slightly misaligned
number of layers yeah it's kind of both
number of layers yeah it's kind of both
It's Tricky right it's very tricky
It's Tricky right it's very tricky
um cuz you don't actually have a you
um cuz you don't actually have a you
want Simplicity but you don't have a way
want Simplicity but you don't have a way
to measure it like shorter code is
to measure it like shorter code is
generally good fewer components is
generally good fewer components is
generally good fewer API is generally
generally good fewer API is generally
good fewer files often even generally
good fewer files often even generally
good it's just like you have to be very
good it's just like you have to be very
very dogmatic about simplifying
very dogmatic about simplifying
in my
view like you have to be almost
view like you have to be almost
fanatical about the Simplicity of stuff
fanatical about the Simplicity of stuff
like I literally didn't do this for a
like I literally didn't do this for a
week because I couldn't figure out a
week because I couldn't figure out a
clean way of doing this buffer injection
clean way of doing this buffer injection
thing that I'm doing at the moment
thing that I'm doing at the moment
without um making a super Class A base
without um making a super Class A base
class and I'm not willing to accept the
class and I'm not willing to accept the
complexity of a base
complexity of a base
class it's not even really taste as the
class it's not even really taste as the
thing because it's very very obviously
thing because it's very very obviously
like when you look at it it's like when
like when you look at it it's like when
something is simple it's obvious right
something is simple it's obvious right
it's just hard to make it
simple I generally find
simple I generally find
that one really good metric for this is
that one really good metric for this is
if the thing you're doing if the way you
if the thing you're doing if the way you
end up building it makes you feel clever
end up building it makes you feel clever
you're probably
wrong that's usually
correct what happened here
like honestly the best
like honestly the best
stuff like the best stuff I've built I
stuff like the best stuff I've built I
feel very very stupid while building it
feel very very stupid while building it
like you should feel incredibly stupid
like you should feel incredibly stupid
like it should feel like this is so
like it should feel like this is so
simple that it's
trivial doesn't matter how complicated
trivial doesn't matter how complicated
the thing you're working on
is the heck happened here
is the heck happened here
I just got didn't get past the buffer
huh oh I
see h
see h
we'll do like
this
reach it's usually brother but
sure uh
did I already Define this yes I
did
and yeah we don't need this cuz what's
and yeah we don't need this cuz what's
check again
do yeah this is for
do yeah this is for
Vector this is for this is alternative
Vector this is for this is alternative
we don't need
that okay what happened here with self
that okay what happened here with self
reset
async
async
reset I did something weird
here so here they Define or they I'm the
here so here they Define or they I'm the
one that wrote
one that wrote
it
it
um yeah so you actually have to Define
um yeah so you actually have to Define
this
this
as n reset
this
this
is
this and then
here this is very nice now because I
here this is very nice now because I
actually I can remove this garbage
actually I can remove this garbage
here and this one
so we get rid of buff completely I
so we get rid of buff completely I
believe
believe
right no buff just observations it's
right no buff just observations it's
cleaner
why is the self dot ready
it should be observations
it should be observations
right like
this and then this m
step I think it's like this isn't this
step I think it's like this isn't this
the API
there we
go so this
go so this
is this is the core of it
right is that we just have a simple pass
through we have this simple native
through we have this simple native
wrapper
thing instead of having a base
thing instead of having a base
class and then buffers get managed
class and then buffers get managed
through here instead of being like
through here instead of being like
weirdly
injected which lets us simplify our n
injected which lets us simplify our n
code also at the same time we remove
code also at the same time we remove
um make function
um make function
intermediates I suppose
we remove make function intermediates
we remove make function intermediates
for uh Native
ends this will have to be implemented
ends this will have to be implemented
with um multiprocessing as well we'll
with um multiprocessing as well we'll
have to do the same thing for
multiprocessing I'm trying to think if I
multiprocessing I'm trying to think if I
want to do that
first I kind of want to
first I kind of want to
do the multiprocessing thing first just
do the multiprocessing thing first just
to make
sure I think I started on it though
sure I think I started on it though
so I think it's actually not
bad don't I have the uh the type check
bad don't I have the uh the type check
in here or
something mhm right here
so you can see right here this is
where yeah this is
where yeah this is
where we want to do
this oh actually this works this works
this oh actually this works this works
incredibly well the way I've implemented
incredibly well the way I've implemented
this here I thought I was going to have
this here I thought I was going to have
to do some sort of loop over this but I
to do some sort of loop over this but I
don't I think I can literally just give
it right
yes how's
that I think you still need this
that I think you still need this
indexing
I think it's like this
maybe
okay Nam space has no attribute
okay Nam space has no attribute
truncations
really how is that
really how is that
possible observations
that's
silly okay this is legit
silly okay this is legit
was it legit that I didn't do actions
was it legit that I didn't do actions
let me think how I want to handle
let me think how I want to handle
actions
you can just put actions in here
right and did literally just do this
right and did literally just do this
can't I
look at
that I'm surprised this works
that I'm surprised this works
already
already
um these are not optimized parameters
um these are not optimized parameters
whatsoever but you see 0% time in the
whatsoever but you see 0% time in the
environment
zero now this is going to be about
zero now this is going to be about
environment Integrations cleaning this
environment Integrations cleaning this
up making sure I haven't screwed
up making sure I haven't screwed
anything up
anything up
horribly and so
horribly and so
on but this is going to be the thing I
on but this is going to be the thing I
think this was the last missing thing
think this was the last missing thing
for making all this
for making all this
easy because
easy because
now right now I have it it's very very
now right now I have it it's very very
easy now for people to add new
easy now for people to add new
environments at whatever level they want
environments at whatever level they want
this removes the last piece of annoying
this removes the last piece of annoying
like unintuitive redundant boiler plate
like unintuitive redundant boiler plate
I think
there might be one or two things left
there might be one or two things left
I'm not thinking of but this was by far
I'm not thinking of but this was by far
the worst of
it yeah like here you can see that this
it yeah like here you can see that this
Loop is in Python
yeah so I think I answered this question
yeah so I think I answered this question
this was um Nathan's question before
this was um Nathan's question before
that you can't do
this okay so now I think that this
this okay so now I think that this
should just work right
yep so I wasn't able to do that
yep so I wasn't able to do that
before because the buffer here might
before because the buffer here might
change I actually don't call assign
change I actually don't call assign
buffers yet do I
buffers yet do I
wait oh yeah I
wait oh yeah I
do you also don't need self.
do you also don't need self.
buff you can just do assign
buff you can just do assign
buffers like
buffers like
this and then this all goes away
let's see how much of this is now
let's see how much of this is now
redundant I bet a lot of this is now
redundant I bet a lot of this is now
redundant
render
render
mode do you need to Define render mode
mode do you need to Define render mode
is that
uh what happens if I delete
this nothing
yeah
yeah
so render mode has to be defined
still is that a gymnasium thing hold on
still is that a gymnasium thing hold on
let me just make sure I have not added
let me just make sure I have not added
that as a
requirement we want to really strip this
requirement we want to really strip this
down to be no more overhead than gy and
down to be no more overhead than gy and
eventually we're going to phase out a
eventually we're going to phase out a
lot of this stuff that is required by
lot of this stuff that is required by
GEM but not
yet where's their
API this like so they have all sorts of
API this like so they have all sorts of
stuff that's
stuff that's
never
never
used like this stuff for instance
it looks like oh it is it is part of
it looks like oh it is it is part of
it render mode is part of
it render mode is part of
it so we're not actually adding anything
it so we're not actually adding anything
by doing render mode so I think we're
by doing render mode so I think we're
good I think that we leave that as is
good I think that we leave that as is
for now um okay num M's and num agents
for now um okay num M's and num agents
this is stuff we've added
we do need to know num agents don't
we yeah I think we need to no num
we yeah I think we need to no num
agents I don't think we need num
agents I don't think we need num
M's let just start commenting stuff I
M's let just start commenting stuff I
don't think that
don't think that
we we need oh
um all these things
here yeah we're going to be able to
here yeah we're going to be able to
clean all this up a
lot observation space
and I think we use the
and I think we use the
vector the vector form of observation
vector the vector form of observation
space here which is the single
one let's try like this
see if this still
works um
M's yeah you're going to see a lot of
M's yeah you're going to see a lot of
this boiler plate was literally just
this boiler plate was literally just
there because it was needed um before in
there because it was needed um before in
the
the
reset m.
reset m.
single observation
space
enironment I think we can just call this
enironment I think we can just call this
observation
observation
space cleaner
num M's do we need
this this actually this will be num M
this this actually this will be num M
don't need the self variable
oh I guess this is why you would want to
oh I guess this is why you would want to
have a
have a
num num M's but it's not an API
num num M's but it's not an API
requirement
requirement
right the only thing that's an API
right the only thing that's an API
requirement you need to know the number
requirement you need to know the number
of Agents
in order to know how big of a buffer to
in order to know how big of a buffer to
make
right okay you can't see this because
right okay you can't see this because
it's off screen let me pull this so here
it's off screen let me pull this so here
is your random agent playing
pong eval now
pong eval now
works
works
and there are a few other things
right I'm going to try a couple things
right I'm going to try a couple things
here
so first of all let's just do this is
so first of all let's just do this is
width this is height paddle
width this is height paddle
width all these variables here these
width all these variables here these
don't need to be saved I assume
right let's see what happens if I just
right let's see what happens if I just
take all these out
okay so this still runs still running a
okay so this still runs still running a
random
policy by
policy by
train emulated
false if
false if
is native else
driver m.
emulated oh I
emulated oh I
see I messed up the API a little here
see I messed up the API a little here
didn't
I
uh let me think what I want to do about
this this is all stupid API
this this is all stupid API
compatibility stuff
right I think what I need to do is I do
right I think what I need to do is I do
need to go back to single spaces for now
need to go back to single spaces for now
um
um
but not
but not
permanently I only need this for as long
permanently I only need this for as long
as we want petting to API
as we want petting to API
petting zoo API
petting zoo API
compatibility eventually we'll just
compatibility eventually we'll just
subsume the other apis within a cleaner
subsume the other apis within a cleaner
and faster puffer
and faster puffer
API um but until then we'll just you
API um but until then we'll just you
know we'll keep it for
know we'll keep it for
compat which I hate doing but got to
compat which I hate doing but got to
start somewhere
so this is
so this is
now single observation
space Oh you know what I could do
alternatively I know what I'm going to
alternatively I know what I'm going to
do even
better uh watch this so we'll just
do no no I can't okay I thought I was
do no no I can't okay I thought I was
going to be able to wrapper it but I
going to be able to wrapper it but I
can't cuz you need the you need the raw
can't cuz you need the you need the raw
environment to have this
environment to have this
defined
defined
CL yeah I do have to do the gross
thing that's fine I don't mind doing
thing that's fine I don't mind doing
this gross thing when I know it's it's
this gross thing when I know it's it's
temporary and it's for like an external
temporary and it's for like an external
requirement that we're going to be able
requirement that we're going to be able
to delete pretty
to delete pretty
soon so I don't mind that much
no attribute observation space
no attribute observation
space that is crazy
space that is crazy
obnoxious but again we get to
obnoxious but again we get to
cheat we get to
cheat for
okay so we're back to having this
okay so we're back to having this
working
again we also have this num agents
thing uh
I guess we can put this like this
right cuz then what we'll just do is
right cuz then what we'll just do is
we'll just put it as a
property like
this I hate the
underscore we'll just do that for now
though okay now this works again
now there's a little bit more that we
now there's a little bit more that we
have to do I
have to do I
believe all
right so we've got eval
right so we've got eval
mode welcome YouTube
mode welcome YouTube
folks making puffer in for work
folks making puffer in for work
today make it work real
nice okay so here's something I
nice okay so here's something I
genuinely don't know um if I pass these
genuinely don't know um if I pass these
buffers to the
buffers to the
environment but then they go out of
environment but then they go out of
scope is python smart enough to keep
scope is python smart enough to keep
them
them
around I do not know
this how do I test this quickly
I'm trying to think how I test this
quickly oh I need these for logging
quickly oh I need these for logging
anyways though don't
I oh these don't even need to be in scon
I oh these don't even need to be in scon
at all I mean in in Python at
all
all
yeah he did all this from like Mis
yeah he did all this from like Mis
clogging which is fine
this is sketchy
this is sketchy
very sketchy
very sketchy
here yeah stuff needs a little work
here that's okay though I can do this
here that's okay though I can do this
right now this will be good
right now this will be good
um this will be good to do anyways
it's Mis logging
thing yeah I don't like this m logging
thing yeah I don't like this m logging
thing
thing
either it'll probably take me 30 minutes
either it'll probably take me 30 minutes
just to clean up pong if I want to clean
just to clean up pong if I want to clean
up just this one
M it's probably worth doing right yeahum
okay let's just let's start on
it so we've got scon pong here this is
it so we've got scon pong here this is
the rapper
this doesn't need to be called pong I
this doesn't need to be called pong I
mean c
mean c
pong so we just oops
leave this like this for
now these things
here yeah these are
nets for
wait why do we even have these things
wait why do we even have these things
allocated this way isn't this just
Jank this is just straight up Jank
right there's literally no reason to
right there's literally no reason to
have this
yeah there's no reason to have it this
way paddle
y I just replaced this with
y I just replaced this with
four values right for
oh this is not this contributor's fault
oh this is not this contributor's fault
either I should make
either I should make
clear uh it was actually kind of janky
clear uh it was actually kind of janky
before the way we were doing stuff
before the way we were doing stuff
you kind of had to pass in all your
you kind of had to pass in all your
memory allocations from
python did I just do that right yeah I
python did I just do that right yeah I
have to be very careful not to introduce
have to be very careful not to introduce
any bugs while I'm doing this let me
any bugs while I'm doing this let me
Focus up a
moment make sure I use the right
moment make sure I use the right
one in each case
going to have to do this for a few
going to have to do this for a few
different
variables um the code will be
variables um the code will be
substantially cleaner though and The
substantially cleaner though and The
Binding will be cleaner as well
not always going to be super fun stream
not always going to be super fun stream
doing like crazy random M's right but
doing like crazy random M's right but
this
this
is this is
is this is
important we having all our infra and
important we having all our infra and
all of our Baseline
all of our Baseline
M the way that they need to be this is
M the way that they need to be this is
ultimately like one of the most
ultimately like one of the most
important
things I have to do a little
things I have to do a little
refactoring it's perfectly
fine so I am going to need some more
fine so I am going to need some more
caffeine if I'm going to be doing
this score LR
kind of nice in some ways just watching
kind of nice in some ways just watching
this very rapidly become
this very rapidly become
simpler and knowing that this is going
simpler and knowing that this is going
to be for every single person
to be for every single person
writing custom RL environments going
forward I mean this is demo code that I
forward I mean this is demo code that I
point people to too contributor demo
point people to too contributor demo
codee but it's good I it was good for uh
codee but it's good I it was good for uh
the standards of two weeks
the standards of two weeks
ago
ago
now it's going to be much simpler
now it's going to be much simpler
there's going to be even less weird
there's going to be even less weird
stuff you have to
stuff you have to
do basically no weird stuff that you
do basically no weird stuff that you
have to do at this point this is kind of
have to do at this point this is kind of
the last of it gone you're literally
the last of it gone you're literally
just
just
writing standard uh like SIM code
and be careful talking because I have to
and be careful talking because I have to
not mess up the
indexing okay so this is all this stuff
indexing okay so this is all this stuff
here
build
local I missed one
okay
okay
so here is our pong
so here is our pong
game it still plays let me make sure I
game it still plays let me make sure I
can score a point
yep there it is
yep there it is
oops it's very difficult for a pawn game
oops it's very difficult for a pawn game
as well
huh okay it seems like it
works these are standard
works these are standard
is just rib or rib depths you can tell
is just rib or rib depths you can tell
that there's nothing in here that's uh
that there's nothing in here that's uh
none of these Arrow are in puffer it's
none of these Arrow are in puffer it's
just an internal
build what about this mis logging
build what about this mis logging
thing this probably still has to get
thing this probably still has to get
passed in
passed in
right but we're going to be able to do
right but we're going to be able to do
this for
now oh yeah I got a damn
it so much stuff
the uh the signature changed to be fair
the uh the signature changed to be fair
uh it should actually be completely
uh it should actually be completely
possible to
possible to
autogenerate most of this ithon almost
autogenerate most of this ithon almost
all of it
all of it
really I just haven't gotten that set up
really I just haven't gotten that set up
in a way that I like
in a way that I like
yet so doing it manually is slow but
yet so doing it manually is slow but
easy versus having like a broken autogen
easy versus having like a broken autogen
tool
okay and we
take this goes
away these lines go away
can we
can we
build LR
no
attribute right here this goes away as
well 17 args
well 17 args
given
shoot oh I bet it it's
shoot oh I bet it it's
uh right
there seg
fult b Vault really
servations rewards terminals oh cuz I'm
servations rewards terminals oh cuz I'm
uh I am
dumb did I forget VX and VY as
well for
almost done with this one I think the
almost done with this one I think the
other one should be
other one should be
um substantially easier as
um substantially easier as
well wait did I do this
well wait did I do this
right yeah I
did on the bright side we actually um we
did on the bright side we actually um we
simplified this quite a bit this code
okay does our pong game
okay does our pong game
work pong game still appears to work
work pong game still appears to work
right it's kind of fun to be
honest
honest
and then we have to do p.
and then we have to do p.
H BX v y
yeah and then we don't allocate all the
yeah and then we don't allocate all the
variables
right hopefully they get reset cleanly I
right hopefully they get reset cleanly I
actually didn't think about that
actually didn't think about that
we'll see if they
do okay so here is running through
do okay so here is running through
puffer random policy this appears to
work let's see
training training also works
training training also works
very
good
good
so this binding layer is kind of
so this binding layer is kind of
annoying that this has to exist still
annoying that this has to exist still
but not bad
overall we're going to actually just
overall we're going to actually just
Port real quick the um
just
just
do
do
um num M's width and height like
um num M's width and height like
this then this will just
be CMS equals what we're going to do is
be CMS equals what we're going to do is
we're going to Port the loop to
we're going to Port the loop to
BNC not strictly necessary because of
BNC not strictly necessary because of
how fast this thing is um but I do
how fast this thing is um but I do
believe it'll be
believe it'll be
cleaner like there won't be all this
cleaner like there won't be all this
indexing it'll just be in
scon like
this
this
oops dm.
reset and then the this is going to
reset and then the this is going to
be cm.
be cm.
[Music]
step
step
ends all right and then we will
ends all right and then we will
do I did this somewhere and I don't
do I did this somewhere and I don't
remember where maybe it was the Moa
me see if I did it
here I don't think I did it here did
I oh no I did right
no well whatever we'll just do it
here so what this is going to be is this
here so what this is going to be is this
is going to be
is going to be
pointer okay and then what we're going
pointer okay and then what we're going
to do
is m
size of
size of
pong and then we're just
do
do
I or rrange in Num M's like
this
I uh I
think I need to find this CU there was
think I need to find this CU there was
there were a little things a little
there were a little things a little
there were a couple things that were a
there were a couple things that were a
little tricky
the
grid star star
M was this it
this is very odd
yeah what is this
why the heck does it do I have it like
why the heck does it do I have it like
this m star star
M's that's really weird isn't it
oh it's probably because yeah that's
oh it's probably because yeah that's
fine we we don't have to do it that way
fine we we don't have to do it that way
here it'll be
here it'll be
easier so we have this calic like
easier so we have this calic like
this and then we make this
this and then we make this
pong and then this gets
pong and then this gets
enited like this
everything's coming together here
everything's coming together here
everything is coming together here
yeah this it thinks that this Python and
yeah this it thinks that this Python and
it's not um this is reset like this
there self.
there self.
m0 make
client
this for
there's really nothing allocated here is
there's really nothing allocated here is
there in the init
there in the init
here so I think it's
here so I think it's
literally I think we did it
right if this one works we'll do the
right if this one works we'll do the
whole rest of them like this as
whole rest of them like this as
well oops
okay this still
okay this still
[Music]
[Music]
runs and
then
then
see get some
errors cannot convert python
errors cannot convert python
object to
pong
star
um right so this was the obnoxious thing
um right so this was the obnoxious thing
I got to figure out
well wait this isn't
well wait this isn't
even not even
even not even
[Music]
[Music]
imported okay now we get a better error
imported okay now we get a better error
at least
now we get one
error and oh yeah we just need to cast
right what's good to me
not
subscriptable we get to even easier
here look at
that how was train
that how was train
bra still
work this should now go at literal
work this should now go at literal
millions of steps per second um not
millions of steps per second um not
training because we're bot necked by uh
training because we're bot necked by uh
bad pams but the M will go real
bad pams but the M will go real
fast okay so what did we do here we
fast okay so what did we do here we
pushed the loopings pretty much we push
pushed the loopings pretty much we push
all
all
looping from python to scyon and then
looping from python to scyon and then
that runs pure C the m is in C this is a
that runs pure C the m is in C this is a
very nice separation of things right
very nice separation of things right
where you have n code is in
where you have n code is in
C external
C external
Loop is in
Loop is in
scon since that's a binding
scon since that's a binding
anyways and uh then you have very simple
anyways and uh then you have very simple
very very simple wrapper code in Python
let's get the logging working real
let's get the logging working real
quick and clean this code up as
well
98. tick
h
so these sums
so these sums
um this should all just be done and
um this should all just be done and
see all these stats
what do I think about that
what do I think about that
actually you could very easily make like
actually you could very easily make like
a shared stats object that all these
a shared stats object that all these
things can
increment or shared stat struct rather
I like the idea of being able to easily
I like the idea of being able to easily
exfiltrate
exfiltrate
data uh from C and I know exactly how to
data uh from C and I know exactly how to
do it as
well there no reason not
to
right yeah I think I know we're going to
right yeah I think I know we're going to
do something kind of cool here
do something kind of cool here
um yeah we're going to do something kind
um yeah we're going to do something kind
of cool here uh I'm going to use a
of cool here uh I'm going to use a
restroom real
restroom real
quick remind me to unmute my mic when I
quick remind me to unmute my mic when I
come back if I forget I'm going to grab
come back if I forget I'm going to grab
a grab a quick drink and
a grab a quick drink and
we're going to do much better logging
we're going to do much better logging
than this it'll be faster it'll be
than this it'll be faster it'll be
simpler everything so I'll be right
back
e
e
e
e e
did not forget to unmute mik this
did not forget to unmute mik this
time hello
folks RL infra is going to be in such a
folks RL infra is going to be in such a
better place after
better place after
this I mean just like the M's are going
this I mean just like the M's are going
to be so much simpler for contributors
to be so much simpler for contributors
and such I I honestly really should just
and such I I honestly really should just
push to get this merged today that'd be
push to get this merged today that'd be
the best
thing cuz you guys really should have
thing cuz you guys really should have
this
this
[Music]
[Music]
already it's going to just be so nice
already it's going to just be so nice
for
everybody all this boiler plate okay
everybody all this boiler plate okay
we're going to do something really cool
we're going to do something really cool
now we going to do something really
now we going to do something really
really cool now
really cool now
um let me show you this
so type def struct
so type def struct
logs
logs
logs uh this is four integers
here and you can see that there's just
here and you can see that there's just
like this sort of
like this sort of
structure right
structure right
and this is unsigned
and this is unsigned
int no reason for it to be
unsigned this is actually a really cool
unsigned this is actually a really cool
thing for um for folks to
thing for um for folks to
learn one is round is
over but what if what numbers do they
over but what if what numbers do they
actually want they
actually want they
want reward
sum finished
rounds
tick and bounce
tick and bounce
is and
win okay so there are two things I can
win okay so there are two things I can
do here that are kind of cool one is
do here that are kind of cool one is
that I can have one shared logger
that I can have one shared logger
between across all the
between across all the
environments and I can have them update
environments and I can have them update
it without screwing each other up I can
it without screwing each other up I can
do that very very cleanly and easily or
do that very very cleanly and easily or
the other thing which I think is going
the other thing which I think is going
to be more appropriate
to be more appropriate
here is um
I can have one logger instance
I can have one logger instance
per
environment I don't really like either
environment I don't really like either
of these
options bounces
kind of want your episode returns right
give me a moment to figure this out I
give me a moment to figure this out I
want to make sure we do this in a way
want to make sure we do this in a way
that is
good logging is always a
good logging is always a
pain but the cool thing is that I have
pain but the cool thing is that I have
what I have is I have a really good way
what I have is I have a really good way
of sharing strs and arrays of strs uh
of sharing strs and arrays of strs uh
with named elements between Python and c
with named elements between Python and c
and scon as well so we're going to be
and scon as well so we're going to be
able to have very clean syntax I just
able to have very clean syntax I just
have to figure out the way I want to
have to figure out the way I want to
record this data and recaff
[Music]
finate let me double check one thing in
finate let me double check one thing in
the meantime
let me see
here I'm just trying to figure out a
here I'm just trying to figure out a
clean formulation for recording episode
clean formulation for recording episode
returns
right
right
um let me see the other stats
um let me see the other stats
recorded bounces wins
I could get fancy with
this I don't think I don't necessarily
this I don't think I don't necessarily
think that's the best
idea intuition tells me that it sounds
idea intuition tells me that it sounds
like like a good idea but isn't okay let
like like a good idea but isn't okay let
me let me just at least talk through
me let me just at least talk through
what's going through my head at the
what's going through my head at the
moment
moment
um so we need a nice way of recording
um so we need a nice way of recording
stats
stats
right I can make a log object which is
right I can make a log object which is
just destruct which can contain you know
just destruct which can contain you know
various elements I can very cleanly pass
various elements I can very cleanly pass
that uh to all the different C
that uh to all the different C
environments so that let's say that we
environments so that let's say that we
just want to record a total number of uh
just want to record a total number of uh
bounces or whatever across all the
bounces or whatever across all the
environments we can have them all
environments we can have them all
increment that same struct or we can
increment that same struct or we can
have all the environments increment
have all the environments increment
their own struct so we can see the
their own struct so we can see the
average number of bounces per
average number of bounces per
environment at any given time for
environment at any given time for
instance problem is that the
instance problem is that the
environments are going to reset at
environments are going to reset at
different times right so you either need
different times right so you either need
to when that data is reset from python
to when that data is reset from python
you extract out the information that you
you extract out the information that you
need into a
need into a
list or you would need like a similar
list or you would need like a similar
type of variable length data structure
type of variable length data structure
in
in
C so if I wanted to get
C so if I wanted to get
complicated not really that complicated
complicated not really that complicated
to be fair uh but I could just add like
to be fair uh but I could just add like
a simple stack type thing
a simple stack type thing
where the environments can just push end
where the environments can just push end
of episode logs onto a stack and then
of episode logs onto a stack and then
from python once in a while you just
from python once in a while you just
average everything out over the stack
average everything out over the stack
and clear it pretty pretty easy for me
and clear it pretty pretty easy for me
to do
that I don't know if that's worth it
that seems like a lot of complexity
that seems like a lot of complexity
overhead for something this
overhead for something this
simple but this has been a uh a
simple but this has been a uh a
persistent pain in the
ass
ass
maybe let me think about
this what would this actually require
I think it'll very quickly get more
I think it'll very quickly get more
complicated than I would
like you need some sort of internal log
like you need some sort of internal log
structure for the environment to keep
structure for the environment to keep
track of the stuff that it's going to
track of the stuff that it's going to
report at the end of episode and then at
report at the end of episode and then at
the end of the
the end of the
episode it's going to have to like stack
episode it's going to have to like stack
push it's
push it's
logs which is really just going to be an
array I could make a little scon
array I could make a little scon
function to record from there to clear
function to record from there to clear
the stack and return all the means or
whatever you don't always want means
whatever you don't always want means
sometimes you want sums and
such is there anything I can do that's
such is there anything I can do that's
simpler than this if I just
simpler than this if I just
ignore if I just say that this is this
ignore if I just say that this is this
is just going to be for
is just going to be for
pong
pong
so what's it need when a game is
so what's it need when a game is
finished you want to
know whether you won the
know whether you won the
game how many bounces there
game how many bounces there
were he
ticks maybe some reward or something
it seems like you need at least some
it seems like you need at least some
piece of machinery for
this the stack idea is really not
this the stack idea is really not
looking that bad
what if I think about it for a more
what if I think about it for a more
complex end like the
Moa not that bad
Moa not that bad
still even more complex
en actually works very nicely with
en actually works very nicely with
multi-agent
multi-agent
Ms depending on how you want to Define
Ms depending on how you want to Define
such
you can cap the buffer
size I kind of like
size I kind of like
it I kind of like
it you just make a log
struct the envir can maintain one or
struct the envir can maintain one or
several of these depending on the type
several of these depending on the type
of environment it
of environment it
is or it can maintain none of them if it
is or it can maintain none of them if it
doesn't need
doesn't need
to and then you need to have a
stack which is just an array just a few
stack which is just an array just a few
lines of
code are there any reason is not to do
this well if I ever want to do
this well if I ever want to do
multiprocessing in here that doesn't
multiprocessing in here that doesn't
work
right yeah
H well I guess a lot of stuff doesn't
H well I guess a lot of stuff doesn't
work anyways in that case though
work anyways in that case though
right and actually maybe we're still
right and actually maybe we're still
fine
I'm not going to be messing with that
I'm not going to be messing with that
for a while
for a while
anyways I think for the immediate
anyways I think for the immediate
term it's probably the simplest way of
term it's probably the simplest way of
doing some form of logging
basically eliminates all of the
basically eliminates all of the
remaining boiler plate
remaining boiler plate
code in
Python I think that's pretty
Python I think that's pretty
good I think that's worth doing we'll
good I think that's worth doing we'll
see if I'm horribly wrong
but I think it's a very small amount of
but I think it's a very small amount of
complexity
done it just needs to know tick and
bounce
pick you can even do multi-type like
pick you can even do multi-type like
this
and then watch this we can do type def
and then watch this we can do type def
struct we'll just do log
stack
index
length St
science there we go that's pretty good
right does this need to be allocated
right does this need to be allocated
like this
it might not need to even be allocated
it might not need to even be allocated
because scon will manage that won't
it well hold on
I think this is probably
right push
right push
[Music]
log also it probably shouldn't be a
log also it probably shouldn't be a
stack it should probably be a a circular
buffer yeah this will be better
circular buffer is actually going to be
circular buffer is actually going to be
harder
harder
though now I'm thinking about
it I think I had it right before with
it I think I had it right before with
this
stack
stack
yeah it's a little
yeah it's a little
awkward it is a little awkward
I think it's okay
though
though
log so then we have
we really don't need push and pop then
we really don't need push and pop then
do we
it will be a log buffer but it won't be
it will be a log buffer but it won't be
a circular buffer
let
let
say Okay Rel log
buffer this
log okay then we do
log okay then we do
if turn
and then the question is how
um we can do like
um we can do like
log
aggregate can you return a
aggregate can you return a
struct you can return a struct can't you
struct you can return a struct can't you
yeah
hold
hold
on
on
ah bad
okay I was unsure about the lifetime of
okay I was unsure about the lifetime of
this this is what we wanted yeah return
this this is what we wanted yeah return
by value
good glad I checked but we are safe
here and
here and
clear up for logs and then what we would
clear up for logs and then what we would
do is log
then okay
so we go through all the
so we go through all the
logs we do it like
this and then we do
this and then we do
for turn log but we also have to go
for turn log but we also have to go
through a second
through a second
time and we have to
time and we have to
do
do
log for slash
equal uh is that going to do integer
equal uh is that going to do integer
division
if I make them all floats it
works what do I think about
works what do I think about
this
this
so I added to
this like 45 lines of
code and this gets us oh no CU I also
code and this gets us oh no CU I also
have to include this so I added a screen
have to include this so I added a screen
of
of
code
code
um is this worth
it you add one screen of code and then
it you add one screen of code and then
what's going to happen here is we're
what's going to happen here is we're
going to be able to get this log from
scyon um
scyon um
and then we can literally just expose
and then we can literally just expose
this Aggregate and clear
function have to guard there
kind of a specific piece of
kind of a specific piece of
code I'd have to think about how if
code I'd have to think about how if
there were a nice way to write this
there were a nice way to write this
reusable I don't think that there is and
reusable I don't think that there is and
I don't think it really matters that
I don't think it really matters that
much
much
um but you have a
buffer this essentially gives you
buffer this essentially gives you
uh variable length
logging let's try it and let's see uh
logging let's try it and let's see uh
let's see how much stuff it adds to the
let's see how much stuff it adds to the
code base I think that's going to be the
code base I think that's going to be the
way to do
it uh so right away we need both of
it uh so right away we need both of
these type deaths I'm going to ignore
these type deaths I'm going to ignore
code added by type deaths though because
code added by type deaths though because
I think it's going to be able to be
autogen so we put right here C type def
autogen so we put right here C type def
struct
logs allocate log
buffer and
buffer and
log we do not need this one
I think that this is
good so we make log buffer star
logs and then we
do allocate log buffer
um num
logs
logs
fine can you pound Define in syon I
fine can you pound Define in syon I
think you
can like this
and then I will make like a def log I
guess
log turn log
this is actually kind of nice cuz now
this is actually kind of nice cuz now
that I'm looking at this you don't even
that I'm looking at this you don't even
have to pass in the
have to pass in the
memory from uh python to do
this you might want to it gives you
this you might want to it gives you
more access to it but you don't have to
oh we also I forgot that we get to
oh we also I forgot that we get to
delete a little bit of code for this as
delete a little bit of code for this as
well don't we we add a little we add a
well don't we we add a little we add a
couple things and we delete a couple
couple things and we delete a couple
things so we just get to do like
log you need to have the pointer to the
log you need to have the pointer to the
log buffer I believe
buer I think you can just
do I think you can just literally do
this give rid of Miss
logging oh we should put the log buffer
logging oh we should put the log buffer
size in here right
I think that this is
right feels like a lot of code for just
right feels like a lot of code for just
pong
some of these things I think we're going
some of these things I think we're going
to be able to uh remove
though all right so this is nice we get
though all right so this is nice we get
to do
n log buffer
I don't think any of this needs to get
I don't think any of this needs to get
changed I think
changed I think
actually let me
see
see
yeah I think that we we don't have to do
yeah I think that we we don't have to do
any of this in the reset of the
any of this in the reset of the
round we do this in the overall
round we do this in the overall
reset so we just get rid of this
and
and
tick zero is
weird is that the right syntax
weird is that the right syntax
I thought it's just like this I thought
I thought it's just like this I thought
it's just
this maybe with a cast needed we'll
this maybe with a cast needed we'll
see we do not need
this okay well it's not used anywhere
else so what did we want numb bounces
else so what did we want numb bounces
win
tick so some pick bounces score I think
tick so some pick bounces score I think
would make sense
we need DB
bounces I don't think
bounces I don't think
so some reward score and tick will do
so some reward score and tick will do
it we can easily add
stuff fine
and then I have to add stuff in there I
assume we add the log to the buffer
f
logs we do log
logs we do log
star
buffer clean some stuff up
buffer clean some stuff up
here
here
and want pass this
and want pass this
by I generally make it a rule to not
by I generally make it a rule to not
pass
pass
uh stru by value just cuz it leads to
uh stru by value just cuz it leads to
bad out outcomes so we'll just do
that okay so we got add log
that okay so we got add log
here and now all I have to do is figure
here and now all I have to do is figure
out where to
out where to
update some reward
update some reward
score and tick
log 4+
log 4+
equals
equals
n or plus
n or plus
equals agent wins hold
equals agent wins hold
on plus equals
1 to do duplicated code okay
well you don't get any points for
well you don't get any points for
this oh I see so this is yeah this just
this oh I see so this is yeah this just
the code doesn't
the code doesn't
Okay log
Okay log
this
reset 10.0
you get this bounce reward
here noticing some differences from the
here noticing some differences from the
original
collision with wall
lose or
L Endo Collision on
right log tick plus equal
one and some rewards qute I think we got
one and some rewards qute I think we got
everything I'm pretty sure we got
everything well we'll find out very soon
but then this will
be this will basically W with the
be this will basically W with the
additional info changes we
made uh this also doesn't need a name
made uh this also doesn't need a name
this is just
some W SC and
tick
logs and we have some genuine errors
logs and we have some genuine errors
here I believe
here I believe
we'll debug these in pure
we'll debug these in pure
c not
assignable not a
assignable not a
pointer H
53 expected expression
isn't this
isn't this
um I thought that this was
valid am I dumb
here tcgn
here tcgn
[Music]
equals I thought that I had that hold on
the
the
error expected
expression e
I think you can just cast
I think you can just cast
yeah well it's not a cast it's there's
yeah well it's not a cast it's there's
something weird going on but I think you
something weird going on but I think you
just have to
do if I just do like
do if I just do like
this yeah that
this yeah that
works and let's see if we can run
works and let's see if we can run
it it appears we can play the game
no
I don't know if we need all this here
I don't know if we need all this here
well but this is this is fine for now um
build M
logging after terminals
these should really be
autogenerated get rid of M logging
look at that we got rid of basically all
look at that we got rid of basically all
of the the Jank
things and we're literally going to be
things and we're literally going to be
able to just
do if self.
do if self.
tick then we do info
tick then we do info
equals this
okay
well it's
well it's
stuck so uh something is
weird why is it
stuck it's stuck
stuck it's stuck
there let's not do multiprocessing
look
that so there's something weird here but
that so there's something weird here but
um this so far is good
let me see what we call episodic
episode length and episode
episode length and episode
return is what we call
return is what we call
it episode
turn episode length and then we'll do
turn episode length and then we'll do
uh
uh
score cuz these can be different right
let's go
welcome this is going quite well I think
welcome this is going quite well I think
that we almost have this we almost have
that we almost have this we almost have
the end to end demo done without all the
the end to end demo done without all the
Jank which is going to be very very nice
Jank which is going to be very very nice
to have
I mean like we've had this working like
I mean like we've had this working like
we've had good infro for the last no
we've had good infro for the last no
months but um I think it's going to just
months but um I think it's going to just
get way way better
today of course it took me taking a
today of course it took me taking a
weekend off to clear my head in order to
weekend off to clear my head in order to
be able to figure this
be able to figure this
out but
uh results good
oops episode
length
length
for episode
return okay if we call train now what
happens we
happens we
freeze interesting do I have a while
freeze interesting do I have a while
anywhere like
fa interesting
well we can pretty easily
well we can pretty easily
um figure this out
right exra compile
right exra compile
[Music]
ARS uh
let's see where this egg bolts
there we
go
interesting did this not get allocated
oh I guess
not well that's
easy terminals
do logs
let's see if it uh if this
works
lovely now infos are not being
lovely now infos are not being
reported let's fix
reported let's fix
that we should definitely be reporting
that we should definitely be reporting
infos
like right here
right um
let's see fixing pong much much more
let's see fixing pong much much more
than that my guy much more than that
than that my guy much more than that
fixing puffer lib
fixing puffer lib
infrastructure you're going to love the
infrastructure you're going to love the
new
new
environment uh the new environment
environment uh the new environment
Integrations it's so easy it's like so
Integrations it's so easy it's like so
much easier welcome as well bet
I'll show you in a
second let me make sure it actually logs
correctly for some reason we're not
correctly for some reason we're not
getting we're not getting infos
back let's see why we're not getting
back let's see why we're not getting
infos
just got home completed
just got home completed
telling people
score completed all performance
reviews oh this is not puffer my bad
yeah you can be a boss but are you the
yeah you can be a boss but are you the
boss is the
boss is the
question show a little bit we're pretty
question show a little bit we're pretty
good I did a couple extra workouts this
good I did a couple extra workouts this
weekend my folks were in town so did a
weekend my folks were in town so did a
little training with my
dad shoulder we
ran up and down a ski hill that is hard
ran up and down a ski hill that is hard
work
indeed let me
indeed let me
see I'm trying to figure out why this
see I'm trying to figure out why this
inpost thing isn't getting logged
I'm tired I R
I'm tired I R
20 yeah
20 yeah
man the thing is you can actually just
man the thing is you can actually just
do that you can literally train to do
do that you can literally train to do
that within a few
that within a few
months I mean it's hard but you can do
it could do
it could do
it yeah but you can train to do it in a
it yeah but you can train to do it in a
way that you have a very low chance of
way that you have a very low chance of
injury there no excuse
injury there no excuse
right it's like if you want to do it you
right it's like if you want to do it you
just go do
it personally I think that like it's a
it personally I think that like it's a
good thing to train to do like do a
good thing to train to do like do a
marathon longer distance like the 50k
marathon longer distance like the 50k
actually the 50k actually did some like
actually the 50k actually did some like
more damage to me but uh like a flat
more damage to me but uh like a flat
Marathon or like a mostly flat Marathon
Marathon or like a mostly flat Marathon
totally achievable
what the heck is wrong with this
thing yeah no the thing was the the 50k
thing yeah no the thing was the the 50k
I did took me S and a half hours which
I did took me S and a half hours which
is at
is at
least probably like a good hour at least
least probably like a good hour at least
a good hour longer than it should have
a good hour longer than it should have
taken if it were flat
very weird that this is
very weird that this is
um I assume that I'm just forgetting the
um I assume that I'm just forgetting the
format
infos oh it's because it's uh a list
yeah it's a
list let's add a check actually for
that rip info steper with Enduro need
that rip info steper with Enduro need
the format right so the numbers
yep I add checks for this stuff in new
yep I add checks for this stuff in new
apis when I can like right here for
apis when I can like right here for
instance we're just going
instance we're just going
to seert his
instance info
stick list
there we go
few other issues yeah let me figure this
few other issues yeah let me figure this
right now while I'm on a roll this is uh
right now while I'm on a roll this is uh
this is going to be a huge huge
this is going to be a huge huge
difference for the library right
here you'll see how clean it is you can
here you'll see how clean it is you can
actually kind of see already look how
actually kind of see already look how
much less code is in the
much less code is in the
python in fact I'm going to be able to
python in fact I'm going to be able to
delete all this stuff up here as well
delete all this stuff up here as well
you'll
see observation out of
see observation out of
range yeah uninitialized most likely
range yeah uninitialized most likely
you're uh double check that your
you're uh double check that your
actually your observation types and
actually your observation types and
sizes are what they say cuz if you
sizes are what they say cuz if you
accidentally changed the OB size and you
accidentally changed the OB size and you
pass a pointer it's not going to check
pass a pointer it's not going to check
the bounds for
the bounds for
you ping pong
Dude Where's the stupid thing
Dude Where's the stupid thing
oh yeah infos is a v
format
format
yeah let's do this
do it show up
now so no idea if this is correct or not
now so no idea if this is correct or not
how easy this is to train if default
how easy this is to train if default
hypers are any good um info does show
up yeah we should probably check on on
up yeah we should probably check on on
to make sure like the end to end
to make sure like the end to end
training is good
training is good
but check this out so this is the pong
but check this out so this is the pong
environment in fact let's real quick you
environment in fact let's real quick you
know let's just let's just fully
know let's just let's just fully
demonstrate
here tick report interval I don't know
here tick report interval I don't know
why they have the terminals in un and 8
why they have the terminals in un and 8
format like
format like
this um
yeah we really don't
need sure we don't need this
is there a reason it has to be unsigned
charar what do we do by default is it a
float don't make it
binary what do we do by default
we have it as a
bull what's annoying about having it be
bull what's annoying about having it be
a bull
you got to be kidding me right like
you got to be kidding me right like
include standard
include standard
bull you don't need to pound de
bull yeah I'm making it a bull that's
bull yeah I'm making it a bull that's
ridiculous we're not we're not dealing
ridiculous we're not we're not dealing
with that [ __ ]
yeah just do this [ __ ]
correctly okay so there we go
ENT just include standard bull
okay cool we can
play
solid on game
hold
on no hold on
chill canot
chill canot
assign type
assign type
[Music]
[Music]
unsigned car star
interesting that's a compile
error well I don't think it should
error well I don't think it should
be let me see
to avoid no we should just figure out
to avoid no we should just figure out
how to do it
correctly unless it's like cursed but it
correctly unless it's like cursed but it
really shouldn't
be oh I know what it
is oh is there not in a nit function
I'm sure I forgot to change oh it's the
I'm sure I forgot to change oh it's the
header
header
right yeah it's their
header look that's literally
it just a header what we have
here okay this is interesting
here okay this is interesting
then assignment to Bull from
then assignment to Bull from
incompatible type
inar so now it
inar so now it
compiles let me just make sure we're
compiles let me just make sure we're
actually passing the correct type
here warning is not slash ignore and
here warning is not slash ignore and
C python warning is like hey maybe take
C python warning is like hey maybe take
a look at this if you get a chance if
a look at this if you get a chance if
not no big deal warning in C is you're
not no big deal warning in C is you're
about to blow your off with a
[Music]
shotgun D type bull
let me figure out why this is
warning where was my
warning for
okay so this is not what we want syon
okay so this is not what we want syon
has its own weird
yeah this is be very
careful for
underscore
bull that's a little weird
ah okay that's
interesting yeah I mean you're not
interesting yeah I mean you're not
expected to figure these things
expected to figure these things
out but that doesn't mean that I'm going
out but that doesn't mean that I'm going
to leave puffer lib having something
to leave puffer lib having something
stupid in it right because I can't
stupid in it right because I can't
figure out how to use a [ __ ] Boolean
I'm just trying to figure out if there's
I'm just trying to figure out if there's
a reference
normal
thing the normal thing to do in C is to
thing the normal thing to do in C is to
use a bull
we're not quickly approaching a pound of
we're not quickly approaching a pound of
fun
it's actually incredibly funny to me
it's actually incredibly funny to me
that as soon as you go from C stack
that as soon as you go from C stack
Overflow to like python or even cython
Overflow to like python or even cython
the quality of the anwers just become
garbage well no it's because bu is not a
garbage well no it's because bu is not a
standard like in order to use the bull
standard like in order to use the bull
bull you need to
bull you need to
include uh standard
include uh standard
bull I don't know why that is
bull I don't know why that is
but it's a c quirk
me try
something
so for
should just be bull bull shouldn't
it C typed this is [ __ ] wrong
it is crazy this AI overview thing I
it is crazy this AI overview thing I
don't even know how much money they're
don't even know how much money they're
burning on it but like every single
burning on it but like every single
Google search they just generate some
garbage well to be fair the reason that
garbage well to be fair the reason that
people can't use Google is because of
people can't use Google is because of
all the AI generated garbage it's
all the AI generated garbage it's
actually incredibly difficult to find
actually incredibly difficult to find
anything these days
I'm trying to think what's the easiest
I'm trying to think what's the easiest
way to fix this
you're probably right that you can do an
you're probably right that you can do an
unsigned Char internally
let me see what happens if I do
that but I don't want to use an unsigned
that but I don't want to use an unsigned
Char from python if that makes
Char from python if that makes
sense we are reading about RL for llms
sense we are reading about RL for llms
in our ml reading group at the moment
in our ml reading group at the moment
are you interested in that area quite a
are you interested in that area quite a
different set of performance
different set of performance
characteristics I mean I can provide
characteristics I mean I can provide
some input I'm sure on uh a few
some input I'm sure on uh a few
different things but you have a very
different things but you have a very
different problem surface right and
different problem surface right and
honestly
honestly
like the way RL is being it depends what
like the way RL is being it depends what
you mean if you mean RL to train llms
you mean if you mean RL to train llms
you're in a not a fun area because what
you're in a not a fun area because what
you're doing is you're taking
you're doing is you're taking
the you're taking the weakest part of
the you're taking the weakest part of
RL um and you're using it in a very
RL um and you're using it in a very
expensive
area obviously it works with 01 and
area obviously it works with 01 and
stuff but it only works if you have
stuff but it only works if you have
unlimited money for now
I said I did talk to some people last
I said I did talk to some people last
week that had more reasonable ideas on
week that had more reasonable ideas on
places to use RL but like the 01 thing
places to use RL but like the 01 thing
it makes sense what they're doing but
it makes sense what they're doing but
it's going to be very
expensive inference time
expensive inference time
compute guiding the tree of output using
compute guiding the tree of output using
yeah you're looking at
01 yeah bet that's the one thing that
01 yeah bet that's the one thing that
you can't do
you can't do
do you understand why
not
because what's going to happen is python
because what's going to happen is python
is going to use a bite it's probably
is going to use a bite it's probably
going to use an unsigned Char to
going to use an unsigned Char to
represent that bull and scon is going to
represent that bull and scon is going to
use a cant which is four bytes so you're
use a cant which is four bytes so you're
going to have wrong numbers of bytes
okay what I just did seems like it might
okay what I just did seems like it might
have
worked we'll have to
see not something I would expect you to
see not something I would expect you to
know mind
you for
okay so we have a true
here hopefully I have this correct
okay we're definitely going to have to
okay we're definitely going to have to
do a little bit of tweaking to make sure
do a little bit of tweaking to make sure
I haven't broken anything here CU I want
I haven't broken anything here CU I want
to make sure that this thing can
to make sure that this thing can
actually
actually
train which can actually end up being
non-trivial but um I just want to show
non-trivial but um I just want to show
I'm going to I'm going to have to go
I'm going to I'm going to have to go
make a shake and stuff real quick but um
make a shake and stuff real quick but um
I just want to show something real I
I just want to show something real I
want to show something off
unsign Char in C and
unsign Char in C and
scyon yeah so I use a bu in Python so I
scyon yeah so I use a bu in Python so I
don't have to do something stupid in
don't have to do something stupid in
Python right and then I cast to unsign
Python right and then I cast to unsign
char and I'm
char and I'm
assuming that the bite structure is the
assuming that the bite structure is the
same I would
think I'm not positive it could be
think I'm not positive it could be
breaking stuff we'll
see well do you know that between cython
see well do you know that between cython
and C yeah but you don't know that um
and C yeah but you don't know that um
you don't know how a python bull is
you don't know how a python bull is
represented if it's represented just as
represented if it's represented just as
uh as a single bite or if it's like
uh as a single bite or if it's like
packed or whatever I I assume it's
packed or whatever I I assume it's
probably a bite but I don't
know
anyways don't need
this C okay let me
this C okay let me
um Let Me Now show you what we've done
um Let Me Now show you what we've done
here CU this is actually pretty cool so
here CU this is actually pretty cool so
this is just a test at the bottom so you
this is just a test at the bottom so you
can ignore this you basically have a
can ignore this you basically have a
screen of code for this binding right
screen of code for this binding right
here you see this and it has a whole
here you see this and it has a whole
bunch of
bunch of
options and then all it
options and then all it
does is it passes all these options to
does is it passes all these options to
the C the C wrapper it includes logging
the C the C wrapper it includes logging
right here with a an adjustable log
right here with a an adjustable log
interv and it includes the gymnasium
interv and it includes the gymnasium
depths you see how how slim this wrapper
depths you see how how slim this wrapper
is and
then in song
then in song
here this stuff at the top can be
here this stuff at the top can be
autogen it's literally just um you know
autogen it's literally just um you know
deaths from
deaths from
theh here's your siong you can see you
theh here's your siong you can see you
make these M's in a loop and init
make these M's in a loop and init
them but the make function is literally
them but the make function is literally
just uh an instant instantiation of the
just uh an instant instantiation of the
struct there's no other Jank there
struct there's no other Jank there
you've got your reset and step which do
you've got your reset and step which do
loops you've got render function and
loops you've got render function and
you've got this Aggregate and clear
you've got this Aggregate and clear
log and then in pong. h you have normal
log and then in pong. h you have normal
code without really having to do
code without really having to do
anything specific for the fact that this
anything specific for the fact that this
is an
is an
rln just destruct has a bunch of
rln just destruct has a bunch of
data and has the logic for the game
data and has the logic for the game
which could be substantially
which could be substantially
compressed the game logic could
compressed the game logic could
definitely be
definitely be
compressed high level though very simple
compressed high level though very simple
and here's the
renderer and this all
works and the way that this now
happens the do C is for a
happens the do C is for a
test uh the do c is a test so you can
test uh the do c is a test so you can
run locally it also is used for the web
thing
thing
also this now can run through a native
also this now can run through a native
renderer meaning there's no more
renderer meaning there's no more
serial you no longer need a Serial layer
serial you no longer need a Serial layer
so if you just want to run this on one
so if you just want to run this on one
core but ultra high throughput you can
core but ultra high throughput you can
just run through
native uh the do c is it's the same as
native uh the do c is it's the same as
before bet so you have this native this
before bet so you have this native this
native is a very very very slim uh
native is a very very very slim uh
compatibility layer and you no longer
compatibility layer and you no longer
ever have to do anything with serial
ever have to do anything with serial
with Native environments you never have
with Native environments you never have
to do any of this code here and then you
to do any of this code here and then you
can optionally run it in
can optionally run it in
multiprocessing so you can run multiple
multiprocessing so you can run multiple
natives uh you run one native on each
natives uh you run one native on each
core you get a nice performance boost by
core you get a nice performance boost by
pushing the loop uh from python I assume
pushing the loop uh from python I assume
it depends on the environment uh most
it depends on the environment uh most
likely for breakout you will I mean for
likely for breakout you will I mean for
these these en environments you will
these these en environments you will
because they're single
because they're single
agent also I honestly think it's just
agent also I honestly think it's just
cleaner because you treat the scon as
cleaner because you treat the scon as
like a binding intermediate layer and
like a binding intermediate layer and
you keep the crap out of the Python
you keep the crap out of the Python
wrapper it's
wrapper it's
nice so vector. Pi native
nice so vector. Pi native
environments massively massively
environments massively massively
simplified massively simplified native
simplified massively simplified native
environments
environments
um the base class for puffer MS
is an abstract class for all intents and
is an abstract class for all intents and
purposes these properties are API
purposes these properties are API
compatibility only otherwise I would
compatibility only otherwise I would
mark this abstract so there's nothing
mark this abstract so there's nothing
hidden in here there's no like Base
hidden in here there's no like Base
Class [ __ ] this assign buffers thing
Class [ __ ] this assign buffers thing
this function is used to handle all of
this function is used to handle all of
the uh the data allocations or the data
assignments and then you don't have to
assignments and then you don't have to
care about any of it you want to write
care about any of it you want to write
your environment you can just write your
your environment you can just write your
environment with no boiler
plate we also managed to get rid
of the make pong function this thing
of the make pong function this thing
here we don't need it we can just
here we don't need it we can just
directly use the
directly use the
class for
this wrap with stats wrapper nope nope
this wrap with stats wrapper nope nope
you don't need a stats wrapper
you don't need a stats wrapper
either no
either no
rappers
native your environment layer is the
native your environment layer is the
environment you
environment you
wrote runs raw native couple little
wrote runs raw native couple little
compatibility things for vectorization
compatibility things for vectorization
API really if I wanted to have a base
API really if I wanted to have a base
class I could make them both compatible
class I could make them both compatible
uh easily let me go check on that
[Music]
[Music]
you know what's funny this is so so
you know what's funny this is so so
close I could almost just make this the
close I could almost just make this the
base
class I'm actually very tempted
to cuz it still really doesn't do any
to cuz it still really doesn't do any
magic for you
I'll think about that in a bit I might
I'll think about that in a bit I might
actually be able to remove native
actually be able to remove native
entirely and just have puffer M also
entirely and just have puffer M also
work as VM
I'm not one to two steps away from
I'm not one to two steps away from
making a registry please shoot me when I
making a registry please shoot me when I
do welcome that
guy this is honestly so close
guy this is honestly so close
is it worth it
though yeah I can make a base class too
though yeah I can make a base class too
is it worth
it is it
it is it
worth having you
worth having you
subclass a puffer M that has this
subclass a puffer M that has this
minimal amount of logic in it like this
minimal amount of logic in it like this
stuff right
stuff right
here for the privilege of being able to
here for the privilege of being able to
use it with
use it with
vectorization uh immediately without
vectorization uh immediately without
this additional native
object is that worth
it well of course it works that doesn't
it well of course it works that doesn't
mean it's it's worth
it bam garbage
code hate the stupid gym
registry it's honestly terrible design
GNA go
run enforce Base Class for convenience
run enforce Base Class for convenience
well no you need to have a base class
well no you need to have a base class
but the thing is it can be an abstract
but the thing is it can be an abstract
base
class
class
or I can eliminate this whole native
or I can eliminate this whole native
thing
thing
here by making it a very
here by making it a very
slightly more complex
one I'm actually thinking about it
start with less that's the thing I don't
start with less that's the thing I don't
know which is more
complex I'm always going to pick the
complex I'm always going to pick the
simpler one I don't know what is the
simpler one I don't know what is the
simpler one
here if you want these checks
here if you want these checks
wait if I did make it a bait class a
wait if I did make it a bait class a
base class you'd have to like late call
base class you'd have to like late call
Super which is kind of
Super which is kind of
disgusting or I'd have to make these
disgusting or I'd have to make these
things
hooks more or less magic for the
user I don't know the thing well no it's
user I don't know the thing well no it's
you want there you don't want stuff to
you want there you don't want stuff to
be magic but the question is like
you also don't like these stupid rapper
you also don't like these stupid rapper
classes that don't seem to do
anything just go Star Puffer lib signing
anything just go Star Puffer lib signing
off thank you yeah folks please do uh
off thank you yeah folks please do uh
Star Puffer if you're uh if you find any
Star Puffer if you're uh if you find any
of this useful it's all open source it's
of this useful it's all open source it's
all free it's where bet linked it um it
all free it's where bet linked it um it
really helps out a
ton fewer
ton fewer
default well I already have fewer
default well I already have fewer
default wrappers that guy so the thing
default wrappers that guy so the thing
that's going on here right is I'm
that's going on here right is I'm
cleaning up the code paths for uh Native
cleaning up the code paths for uh Native
puffer M so I've stripped out Cal you no
puffer M so I've stripped out Cal you no
longer have to go through this loop with
longer have to go through this loop with
like the bigger serial class for Native
like the bigger serial class for Native
environments uh you go through this
environments uh you go through this
native wrapper here uh the thing is if I
native wrapper here uh the thing is if I
just switch your base class uh if like I
just switch your base class uh if like I
just take the little bits of logic
just take the little bits of logic
because this is barely anything right if
because this is barely anything right if
I put this into puffer en which you're
I put this into puffer en which you're
currently base uh subclassing but is
currently base uh subclassing but is
currently like
currently like
abstract then you don't need
abstract then you don't need
native puffer M just functions as a v en
native puffer M just functions as a v en
or as a normal
en yeah it does it sounds nice right but
en yeah it does it sounds nice right but
you have a base class and it's not just
you have a base class and it's not just
like an abstract
like an abstract
I mean I guess
like you can't even tell it's a freaking
like you can't even tell it's a freaking
abstract you can't even tell it's an
abstract you can't even tell it's an
interface versus uh a base class or
interface versus uh a base class or
whatever with puffer
anyways you also need this joint space
anyways you also need this joint space
and [ __ ] though it's not just dependency
and [ __ ] though it's not just dependency
l
I might go try it I might go add this
I might go try it I might go add this
stuff into the base and then see if it's
stuff into the base and then see if it's
better or not let me use a rest from
better or not let me use a rest from
real quick I'll be right back and then
real quick I'll be right back and then
uh I will
uh I will
see what I can do here we're very very
see what I can do here we're very very
close to having like super super clean
close to having like super super clean
simple simple everything in fact I think
simple simple everything in fact I think
it already is with this it can only ever
it already is with this it can only ever
be a little bit
be a little bit
better but I want to think about
better but I want to think about
it cuz then you wouldn't need to have
it cuz then you wouldn't need to have
something called native it would just be
something called native it would just be
native which is nice anyways be right
native which is nice anyways be right
[Music]
back
e
e
e
e
e e
whoops mute button you know what um I
whoops mute button you know what um I
like it and the reason that I like it is
like it and the reason that I like it is
that it's one less
that it's one less
layer and uh it takes
layer and uh it takes
us it's going to allow us once we ditch
us it's going to allow us once we ditch
eventually like gym or petting zoo apis
eventually like gym or petting zoo apis
or whatever to like put everything into
or whatever to like put everything into
that format without like multiple layers
that format without like multiple layers
that have to be maintained separately so
that have to be maintained separately so
it allow us to co-optimize we're going
it allow us to co-optimize we're going
to try it at least initially
is this done variable needed
it's probably not redundant actually
it's probably not redundant actually
this one
isn't self
yeah because this will be really nice
yeah because this will be really nice
it'll be so easy to just strip stuff out
it'll be so easy to just strip stuff out
as I'm done with it
right don't need no MS
yeah you can tell that there's going to
yeah you can tell that there's going to
be less code actually by doing this
right going to take me a second
though for
oh look at this actually
this goes at the
bottom for
okay
this flag as
well these
flags let's just copy him for now
copy this for now
whoops okay
so def in it
greater args and
greater args and
quars I think it's literally just um
you just do like
this
right I think we'll do buff equal
none and then we'll do
oh wait we can have a sign buffers
oh wait we can have a sign buffers
happen right
here if we're going to commit to
here if we're going to commit to
this which is a thing I didn't want to
this which is a thing I didn't want to
do earlier but it's worth it if it makes
it so yeah essentially I ended up
it so yeah essentially I ended up
circling back around to the um the thing
circling back around to the um the thing
I started with
[Music]
[Music]
but I cleaned it up enough along the way
but I cleaned it up enough along the way
that it's no longer too complicated so I
that it's no longer too complicated so I
sort of start I sort of ended up where I
sort of start I sort of ended up where I
started but in a way better in a way
started but in a way better in a way
better
way and actually right we can take this
way and actually right we can take this
assign
assign
buffers this just goes into Puffer
we're going to try this at least I
we're going to try this at least I
really hate
really hate
subclassing but
um I think in this case it's going to
um I think in this case it's going to
give you so
much we'll see if if this in is worth it
much we'll see if if this in is worth it
or not
what's the uh the do
format I'm use this in so
long yeah
API usage eror
yeah API usage
ER
for for
yeah that's gross let's just do it like
this for
properties
Dark Star
Dark Star
quars what about this
okay so this assign
buffers is going to be
buffers is going to be
super
buff what do we think of that
not implemented
error it's kind of dumb that it's
error it's kind of dumb that it's
implemented as a property like that
right yeah
cuz like I don't like
properties unless they're default
properties unless they're default
ones let's just do this
right all the required
properties all our own properties that
properties all our own properties that
we want
it's a like somewhat annoying because
it's a like somewhat annoying because
we'll have to
we'll have to
do the extra checks
right but I think that that'll bite more
right but I think that that'll bite more
devs if I do it the other way
way you see I messed up right here and
way you see I messed up right here and
the API actually told me
has
Adder this I think this will give you a
Adder this I think this will give you a
reasonable error
already self. action space
cutting it down cutting it
down all these self. M things go away
very
very
clean I think that this is one place
clean I think that this is one place
where it makes sense because it's python
where it makes sense because it's python
anyways and you're going to have to have
anyways and you're going to have to have
an interface anyways even though they
an interface anyways even though they
don't
exist yeah so there we
exist yeah so there we
go now this is training
M.D yeah I think you do need
M.D yeah I think you do need
this you do need dun at the moment
just cuz they handle their own resets at
just cuz they handle their own resets at
the
moment not done
reset stop and
reset stop and
close and then we have our async
close and then we have our async
reset or
reset or
send and R
receive I don't know if these are
receive I don't know if these are
correct though wait are
correct though wait are
they don't we need to change the flags
they don't we need to change the flags
around a bit
and
pre-check H we're not going to be able
pre-check H we're not going to be able
to do these which is obnoxious
do we'll have to figure out a way to get
do we'll have to figure out a way to get
these into native
yeah that's kind of
rough
lag we don't need this flag
anymore take some guard rails off though
anymore take some guard rails off though
is
annoying little
faster maybe maybe
not 85 lines
not 85 lines
it's not bad it's not
bad this is the price that we got to pay
bad this is the price that we got to pay
in order to have um full native V
in order to have um full native V
like I think it's a good
price this is solid progress um I'm
price this is solid progress um I'm
trying to think how much more stuff I
trying to think how much more stuff I
want to do I do need to go get a
want to do I do need to go get a
shake if I want to have any chance of
yeah let me think what order I want to
yeah let me think what order I want to
do stuff
in okay you know what I think I'm going
in okay you know what I think I'm going
to do I'm going to go get a shake I'm
to do I'm going to go get a shake I'm
going to spend just a little bit more
going to spend just a little bit more
time and I'm going to try to actually
time and I'm going to try to actually
get this pong M to
get this pong M to
train um and that's going to be the the
train um and that's going to be the the
main goal for today I'll be right
main goal for today I'll be right
[Music]
back
e
e
e
e
e
e
e
e
e e
all
right goal is get pong M
right goal is get pong M
training with the nice new fancy
training with the nice new fancy
format and then that'll be it for the
format and then that'll be it for the
stream then I can get other stuff done
right
let me figure out what I want to do with
let me figure out what I want to do with
this
okay so we
okay so we
have
have
M's
um
M's do I just change this to 4096 is
M's do I just change this to 4096 is
that what we do
H and you can literally run it
H and you can literally run it
synchronous if you want can't
synchronous if you want can't
you that's
you that's
funny because it's just so stupidly fast
funny because it's just so stupidly fast
you literally don't even need to do to
you literally don't even need to do to
do anything anything
right one
right one
one we
do
do
[Music]
[Music]
64k this
16 380,000
it being mostly zero is probably a
it being mostly zero is probably a
factor of um hold
on for
now the reports are going to be very
infrequent it only logs full games
yeah and you're running so many parallel
yeah and you're running so many parallel
Ms that
like let me think how I want to do
like let me think how I want to do
that well also hold on the length is is
that well also hold on the length is is
screwy as well
right game length is screwy
maybe just no games are
finishing the episode length would have
finishing the episode length would have
to actually be longer right
episode length is going to have to be
longer let's just add some print TS
longer let's just add some print TS
right
oh so length
score
score
huh is not scoring any
points for
so here you can
so here you can
see we do actually have the
see we do actually have the
uh the score increment
here and you have the add
here and you have the add
log before
reset and the Aggregate and clear
well just for now let's do something
well just for now let's do something
about
about
this we'll just do um
oops redo the setup
okay so this is just not reporting
okay so this is just not reporting
correctly
divide equals
oops okay so now we're seeing log here
oops okay so now we're seeing log here
00 0 right
plus
equal something's weird
here well if I go up
here oops we do set
up okay you can see we got big numbers
right e
is this just like float division
[ __ ] oh no I'm just stupid as what
[ __ ] oh no I'm just stupid as what
this
is this shouldn't be a
is this shouldn't be a
loop right
yeah there we go
clo not implemented
clo not implemented
we'll fix
that initially
though 48
environments 32
let's just try this
amusingly you go all the way down to
amusingly you go all the way down to
18,000 steps per
18,000 steps per
second with the garbage batch
size bottleneck almost entirely on
size bottleneck almost entirely on
forward and misprocessing as well you
forward and misprocessing as well you
what's up back home can go over go oh
what's up back home can go over go oh
yeah cool want me to make a PR Str bath
yeah cool want me to make a PR Str bath
was logging game
was logging game
endings yeah go ahead uh make a PR I'm
endings yeah go ahead uh make a PR I'm
finishing up this stream and then I got
finishing up this stream and then I got
one or two quick things to do and then I
one or two quick things to do and then I
will hop on voice to fix that uh I have
will hop on voice to fix that uh I have
really cool updates
really cool updates
actually I'll show you real quick uh let
actually I'll show you real quick uh let
me undo this mess
so this is what the python bindings for
so this is what the python bindings for
Pong look like after
cleanup this is the whole pong binding
cleanup this is the whole pong binding
in
Python see how much less boiler plate
Python see how much less boiler plate
there is it's like a third the length it
there is it's like a third the length it
was before
it's also a native format so this
it's also a native format so this
actually you can use this as a v EnV as
actually you can use this as a v EnV as
well without using anything
well without using anything
else so for ridiculously fast
else so for ridiculously fast
environments you can literally cut out
environments you can literally cut out
you know another layer of the stack
you know another layer of the stack
another thousand lines of
another thousand lines of
code I'm pretty sure the whole pong like
code I'm pretty sure the whole pong like
the whole end to end of pong running
the whole end to end of pong running
with the whole including the
with the whole including the
implementation uh under this version is
implementation uh under this version is
less than 2,000
lines it's not gotten a single point
did you ever figure out
did you ever figure out
Boolean uh yeah it's obnoxious what you
Boolean uh yeah it's obnoxious what you
do is you use a Boolean from python side
do is you use a Boolean from python side
and uh then you just cast it to well to
and uh then you just cast it to well to
be fair I don't know that could be the
be fair I don't know that could be the
reason it's not training now but I think
reason it's not training now but I think
you can just cast to unsign char in
you can just cast to unsign char in
scyon and C but you definitely don't
scyon and C but you definitely don't
want to do there's some other ways that
want to do there's some other ways that
are definitely wrong that I
are definitely wrong that I
found for
work on PR 3x to speed with some items
work on PR 3x to speed with some items
we can okay great yeah
we can okay great yeah
what's current speed I think pretty much
what's current speed I think pretty much
anything should be able to get to a
million this is running on my local
million this is running on my local
desktop otherwise this would be at
desktop otherwise this would be at
around a
million unfortunately we can't test that
million unfortunately we can't test that
for a few days because
for a few days because
um uh puffer boxes are in um storm surge
um uh puffer boxes are in um storm surge
mode we'll get you access ACC to one
mode we'll get you access ACC to one
once they're back up
once they're back up
though as you've been you know doing all
though as you've been you know doing all
this stuff and you could probably use a
this stuff and you could probably use a
test box once in a while
300K 90k on 18 by
300K 90k on 18 by
18 getting wrecked
with how I Implement checking legal
moves oh
moves oh
I'll look at that with you no
I'll look at that with you no
worries yeah I'll look at that with
you yeah this is not
learning let me see if it's actually
learning let me see if it's actually
getting the observation data
that's training speed not M speed
well you should check your um your M
well you should check your um your M
Speed then right to see where you're
Speed then right to see where you're
like are you getting bottlenecked by m
like are you getting bottlenecked by m
or is the m
fast that's a key
distinction definitely key distinction
so this did actually go up a
bit you can't really tell though it
bit you can't really tell though it
could just be
random get rid of track
well that's
something I a i found it
one to two
one to two
mil
mil
checking well when you try to get to 2
checking well when you try to get to 2
mil you're going to get bottlenecked by
mil you're going to get bottlenecked by
a Cuda transfer
bandwidth so you're not just going to
bandwidth so you're not just going to
scale infinitely like that oh msps
scale infinitely like that oh msps
though yeah yeah yeah
yeah you should get a you should get a
yeah you should get a you should get a
profile on M though if you have time
profile on M though if you have time
right now before I finish This and like
right now before I finish This and like
I'm it's going to take me like 20
I'm it's going to take me like 20
minutes as well to get the other stuff
minutes as well to get the other stuff
after this but um before I get to the
after this but um before I get to the
gym and I can chat with stuff but
um I think I just found the error in
this e
we'll figure out if there's a better
we'll figure out if there's a better
better way to do this
cast uh on running test
cast uh on running test
performance 650k
performance 650k
9x9 possibly we can make that faster
9x9 possibly we can make that faster
with uh I'm assuming you haven't put the
with uh I'm assuming you haven't put the
loops into C
yet which is what I this is by the way
yet which is what I this is by the way
this is what you're looking at is the
this is what you're looking at is the
loops in C or scon really um you see how
loops in C or scon really um you see how
I have the MS allocated in in a
I have the MS allocated in in a
scon right in a
scon right in a
buffer that'll help you with um you're
buffer that'll help you with um you're
going to get hammered otherwise by the
going to get hammered otherwise by the
the python Loop speed
but it could just be the the checks
but it could just be the the checks
we'll look at it
ah there we go
just wasn't doing uh handling
just wasn't doing uh handling
observations correctly we'll see if it
observations correctly we'll see if it
actually trains now or if it's just like
actually trains now or if it's just like
better
better
failure remains to be seen
y
kind of suspicious it hasn't figured out
kind of suspicious it hasn't figured out
how to score a point yet
has been training for plenty of
time there's some type of deficiency
R
skip could be the actions Maybe
actions look
good maybe we'll just have to view the
good maybe we'll just have to view the
model
still
learning oh there it is it got a
point pong is usually a hard takeoff
point pong is usually a hard takeoff
environment
environment
hopefully it does something decent by
hopefully it does something decent by
the time uh it finishes training here
definitely can learn
though it's crashing back down
we'll take a look at the policy maybe
we'll take a look at the policy maybe
real
quick oh look at that
it's running the
eval close not implemented it should
eval close not implemented it should
have saved though
oo look at this
here's our uh here is our
here's our uh here is our
policy it's not great but it's
policy it's not great but it's
definitely learned
definitely learned
something way better than
random
oh I think I might still be slightly
oh I think I might still be slightly
better than it
better than it
without having done any sweep or
anything but cool we'll be able to do a
anything but cool we'll be able to do a
sweep on
sweep on
this and we'll be able to have this
this and we'll be able to have this
solved and that'll be our nice first
solved and that'll be our nice first
test
test
end uh I don't like the weird CPS in the
end uh I don't like the weird CPS in the
pong file but that's a very minor and
pong file but that's a very minor and
easy to fix
easy to fix
thing you know we're going to do one
thing you know we're going to do one
last thing right
last thing right
now because uh because I feel like
it it's really surprising how slowly I
it it's really surprising how slowly I
actually ran those 10minute miles what
actually ran those 10minute miles what
did I honestly my train pace is is often
did I honestly my train pace is is often
slower than 10 minutes
I run slow
where's the
where's the
uh oh we don't have the graphic do
uh oh we don't have the graphic do
we we need the puffer I was going to
we we need the puffer I was going to
make the ball the puffer but uh I think
make the ball the puffer but uh I think
we'll wait on
we'll wait on
that uh yeah bet you're just in time for
that uh yeah bet you're just in time for
we got the thing to train somewhat at
we got the thing to train somewhat at
least initially um so we have it mostly
least initially um so we have it mostly
fixed it needs a hyper Prem sweep
fixed it needs a hyper Prem sweep
everything's good and
everything's good and
clean and um I'm I'm going to take like
clean and um I'm I'm going to take like
20 minutes to do a couple
things default
things default
Veen uh
Native Native
yeah it's literally just um poer lib
yeah it's literally just um poer lib
environment this is
environment this is
it but why what
oh we did yeah yeah yeah but like what
oh we did yeah yeah yeah but like what
I'm saying is puffer m is the native
I'm saying is puffer m is the native
format
now so you you cut a
now so you you cut a
layer you don't need a wrapper called
layer you don't need a wrapper called
native it is just native
yeah so it's this is the whole
yeah so it's this is the whole
thing it's not
bad there are a couple things to fix
bad there are a couple things to fix
with it but it's generally pretty
with it but it's generally pretty
nice and uh the pong M trains as well
all right what I'm going to do now is um
all right what I'm going to do now is um
I'm going to go take probably 20 minutes
I'm going to go take probably 20 minutes
to do a couple things and then I'm going
to do a couple things and then I'm going
to uh jump onto the Discord voice and
to uh jump onto the Discord voice and
help out with go and any other
help out with go and any other
environments that need uh that need an
environments that need uh that need an
eye on so for folks watching that's on
eye on so for folks watching that's on
discord.gg puffer if you want to hop in
discord.gg puffer if you want to hop in
and check that out and
and check that out and
otherwise you can support my work for
otherwise you can support my work for
free by starring the puffer helps me out
free by starring the puffer helps me out
a
a
ton other than that good progress today
ton other than that good progress today
um short hours but good progress on VE
um short hours but good progress on VE
that was like a tricky bit of

Kind: captions
Language: en
okay we should be
live we've got some stuff to do
live we've got some stuff to do
today gotten some rest over the weekend
today gotten some rest over the weekend
and uh had some time to think about
puffer I've been making a ton of
puffer I've been making a ton of
progress lately on the environment side
progress lately on the environment side
with puffer
with puffer
um but there's this thing that's been
um but there's this thing that's been
bothering me with the infrastructure
bothering me with the infrastructure
it's gotten too complicated and a little
it's gotten too complicated and a little
clunky I think I found a way to fix
clunky I think I found a way to fix
that so the goal for the next few hours
that so the goal for the next few hours
here is to do that end to end get it
here is to do that end to end get it
working and ship it to Dev Branch it's a
working and ship it to Dev Branch it's a
lot of stuff to
lot of stuff to
do but I think I think it shouldn't be
do but I think I think it shouldn't be
too bad mainly I figured out the way
too bad mainly I figured out the way
that I want to deal with all the data
that I want to deal with all the data
storage for this stuff I think it's
storage for this stuff I think it's
going to be simpler than the way I have
going to be simpler than the way I have
it now it requires one additional API
it now it requires one additional API
call it saves subclassing you don't have
call it saves subclassing you don't have
to subass for this um so it saves a
to subass for this um so it saves a
bunch of API Shenanigans overhead I
bunch of API Shenanigans overhead I
think it's going to be
good so let me show you
good so let me show you
here what I was doing here is I was
here what I was doing here is I was
working on before I was working on on
working on before I was working on on
this puffer M
this puffer M
thing
thing
and the idea here was to have just like
and the idea here was to have just like
a base class for puffer uh for puffer
a base class for puffer uh for puffer
native
native
environments I hate this um yeah this is
environments I hate this um yeah this is
just
just
terrible
terrible
so what we're going to do
so what we're going to do
instead uh and the main reason that I
instead uh and the main reason that I
was doing this was because of this
was doing this was because of this
buffer thing right
buffer thing right
here I couldn't find a clean way
here I couldn't find a clean way
to have uh an environment be able to
to have uh an environment be able to
manage its own storage I think I figured
manage its own storage I think I figured
out a way to do that but it's going to
out a way to do that but it's going to
take a little bit of finagling
take a little bit of finagling
because the structure of puffer infra at
because the structure of puffer infra at
the moment it's a little unintuitive but
the moment it's a little unintuitive but
it's not that bad until you get into the
it's not that bad until you get into the
C environments so you have this serial
C environments so you have this serial
class right here this is for running
class right here this is for running
multiple environments in a loop very
multiple environments in a loop very
basic right except that it also has all
basic right except that it also has all
this like data buff injection nonsense
this like data buff injection nonsense
here which isn't very
here which isn't very
good um and then it's run inside of
good um and then it's run inside of
multiprocessing so you run
multiprocessing so you run
multiprocessing VC and then inside of it
multiprocessing VC and then inside of it
you run
you run
seral on its own that's kind of okay but
seral on its own that's kind of okay but
then the you get into problems when you
then the you get into problems when you
have these C environments that kind of
have these C environments that kind of
do their own loops and then you have to
do their own loops and then you have to
run multiprocessing serial python C
run multiprocessing serial python C
binding uh scyon wrapper thing and then
binding uh scyon wrapper thing and then
C environment under it's just too much
C environment under it's just too much
and I hate it
so yeah that's what we're going to look
so yeah that's what we're going to look
at right here um I'm trying to figure
at right here um I'm trying to figure
out where exactly I want to start on
this yeah cuz I don't actually I don't
this yeah cuz I don't actually I don't
like the way that I was doing this
like the way that I was doing this
before to be
honest yeah this puffer M
honest yeah this puffer M
thing it's got like this reset and this
thing it's got like this reset and this
step and
stuff let's open up an environment so we
stuff let's open up an environment so we
can
see uh poer lib
see uh poer lib
ocean let's take a look
ocean let's take a look
at let's take a look at a complex M
at let's take a look at a complex M
first and a simple
one where's the python mobile.
py okay so here's the python file you
py okay so here's the python file you
can see it sub classes this puffer M
can see it sub classes this puffer M
thing and what's the API
signature it's got render
I mean this is pretty much going to
I mean this is pretty much going to
match the gymnasium VC API
right
right
yeah this match is gymnasium VEC
yeah this match is gymnasium VEC
API and I think we can do that as well
right I think so
right I think so
so what we
so what we
do yeah I think what has happened before
do yeah I think what has happened before
is I had it confused this puffer M needs
is I had it confused this puffer M needs
to be not a vector class it needs to be
to be not a vector class it needs to be
our native environment
type and then we have to have a native
type and then we have to have a native
vectorization mode so it's going to go
vectorization mode so it's going to go
multiprocessing native
puffer I think that's it
yeah I think that
works okay
works okay
um let me see how we should go about
um let me see how we should go about
this
this
then let me
then let me
see change this back to Native right
[Music]
there's going to be a little bit of
there's going to be a little bit of
boiler
boiler
plate before we get to the
plate before we get to the
uh we get to the difficult decisions
uh we get to the difficult decisions
here I
think uh no this day is this puff R
think uh no this day is this puff R
there yeah there's going to be a little
there yeah there's going to be a little
bit of boiler plate before we get to
to
this back end this is going to be
native coer and gymnasium yeah this is
native coer and gymnasium yeah this is
it we've cracked it this is this is
it we've cracked it this is this is
going to be the design I can just I can
going to be the design I can just I can
just
tell and then this assigned buffers is
tell and then this assigned buffers is
not going to be needed
right is there ever a case where you
right is there ever a case where you
need to instantiate this
directly let me
see and
Creator yeah this API signature is just
Creator yeah this API signature is just
not
not
required
right I do think that you need num m
right I do think that you need num m
still
still
maybe I think you do need numb
Ms the lack of buff is also weird
right
yes I just want to make absolutely sure
yes I just want to make absolutely sure
I'm not getting something wrong here so
I'm not getting something wrong here so
the way that this works at the moment
the way that this works at the moment
with puffer's environments right is
with puffer's environments right is
vectorization runs multiple environments
vectorization runs multiple environments
either in parallel or serial or whatever
either in parallel or serial or whatever
and in order to do this efficiently data
and in order to do this efficiently data
buffers are in shared memory or they can
buffers are in shared memory or they can
be at least they're continuous tensor
be at least they're continuous tensor
you need to pass slices of these into
you need to pass slices of these into
each individ individual environment and
each individ individual environment and
the way I do that at the moment is with
the way I do that at the moment is with
this injection
technique you get this injection
technique this injection
technique this injection
technique is kind of nifty cuz you don't
technique is kind of nifty cuz you don't
have to
have to
modify the initialization signature at
modify the initialization signature at
all like you don't have to add this buff
all like you don't have to add this buff
thing
here
here
but I think it's going to be better to
but I think it's going to be better to
do it with it in the
do it with it in the
inette let me just think of any
inette let me just think of any
potential downsides of doing this
potential downsides of doing this
because this is going to be a lot of
because this is going to be a lot of
code changes right all at once I can do
code changes right all at once I can do
it all the day but it's going to be a
it all the day but it's going to be a
lot of changes and I really don't want
lot of changes and I really don't want
to get this wrong
let me check
emulation how do I handle it here
okay I set it to none here and then I
okay I set it to none here and then I
just assume that it's always
injected and then I have conditional
logic I see
oh I think I even have
um
wait self. m
it's a big
change I think it's better I'm not
change I think it's better I'm not
positive
though to be fair I do not have to make
though to be fair I do not have to make
this decision for everything right now I
this decision for everything right now I
only have to make the decision for
only have to make the decision for
Native
environments is it guaranteed
environments is it guaranteed
better the thing is okay
better the thing is okay
I'm being a bit incoherent here because
I'm being a bit incoherent here because
this is complicated but essentially what
this is complicated but essentially what
I'm trying to do is I'm trying to figure
I'm trying to do is I'm trying to figure
out how we get the data storage object
out how we get the data storage object
like the data storage arrays that we
like the data storage arrays that we
need for these environments into the
need for these environments into the
environments and right now let me give
environments and right now let me give
you a
you a
practical version of what is the thing
practical version of what is the thing
that's obnoxious right now
that's obnoxious right now
so this is the reset function for the
so this is the reset function for the
Moa every single environment has one
Moa every single environment has one
like this every custom environment you
like this every custom environment you
see how we're making these environments
see how we're making these environments
inside of the the reset function instead
inside of the the reset function instead
of making them when we make the
of making them when we make the
environment yeah this is
environment yeah this is
because uh this is
unfortunately because we do not have
unfortunately because we do not have
access to buff up here right we do not
access to buff up here right we do not
have access to data buffers it's not
have access to data buffers it's not
passed in here so what this
passed in here so what this
means is that we have to make them here
means is that we have to make them here
but we can't use them immediately
but we can't use them immediately
because vectorization might overwrite
because vectorization might overwrite
these and might not so not only do we
these and might not so not only do we
have to keep track of this gross thing
have to keep track of this gross thing
that should be able to be done
that should be able to be done
automatically for
automatically for
us but we also have to defer creating
us but we also have to defer creating
environments this drives me
insane so I think that at the very least
I think at the very least we do this for
I think at the very least we do this for
Native
environments to be fair there's
environments to be fair there's
probably there's probably no harm in
probably there's probably no harm in
doing this for uh emulated environments
doing this for uh emulated environments
as
well I'm not positive on that let's do
well I'm not positive on that let's do
it for Native environments let's lock
it for Native environments let's lock
that in
is buffer is not a reserve keyword or
is buffer is not a reserve keyword or
something
something
right yeah no we're
right yeah no we're
good uh it's going to be buffers anyways
right we'll name it later
right we'll name it later
let's just let's just get the initial
let's just let's just get the initial
implementation
implementation
so must
so must
Define num M's before
Define num M's before
init uh no right we're just going to do
init uh no right we're just going to do
num numm is a mandatory parameter
let's see the signature that we're using
let's see the signature that we're using
we don't need M creators right or do
we I think we just need
I think we can almost keep this
exactly we can almost keep this
exactly we can almost keep this
signature
signature
exactly the only thing that we need is
exactly the only thing that we need is
we need to
add I don't even think we need this star
add I don't even think we need this star
star quarks do
star quarks do
we we'll see about that so now we don't
we we'll see about that so now we don't
need this has Adder num M's thing
numb
agents we should not need numb agents
agents we should not need numb agents
either
right let's see how we do this in
right let's see how we do this in
serial I think I'm going to be able to
serial I think I'm going to be able to
copy the seral logic and just simplify
copy the seral logic and just simplify
it
yeah let's take all this
yeah let's take all this
garbage where it's going to be way uh
garbage where it's going to be way uh
way s simpler than
way s simpler than
this so first of all this is no longer
this so first of all this is no longer
this is not a list this is just m
cror star
cror star
args star quars
you have to pass no Ms like
this buff equal buff something I think
this buff equal buff something I think
it's something like
this and
this and
then driver environment
we never have emulation on for this
we never have emulation on for this
though technically we might end up doing
though technically we might end up doing
something with emulation
later uh check M's
sure agents per
M A lot of these things we should not
M A lot of these things we should not
need a lot of these things we should not
need a lot of these things we should not
need
let's go look at how this is
let's go look at how this is
um this is done inside
of multiprocessing I guess we don't
need agents per batch M's per
batch man I haven't looked at this code
batch man I haven't looked at this code
in too
long well we'll see if let's just Mark
long well we'll see if let's just Mark
let's just fill stuff out and see if
let's just fill stuff out and see if
it's
[Music]
redundant native does not support async
redundant native does not support async
on its
on its
own but you do get acing through
own but you do get acing through
multiprocessing is that
okay I think it's
okay we'll see about
that single observation space single
that single observation space single
action
action
space do we Define these things at the
moment I think that we
moment I think that we
do ah okay so this is why we needed
do ah okay so this is why we needed
agents per
batch we need to know the number of
Agents yeah
I think we can just
do this gives you a total number of
do this gives you a total number of
Agents I
Agents I
believe agent
IDs believe you have to expose numb
IDs believe you have to expose numb
agents as well right so you just do like
agents as well right so you just do like
at property
and this is kind of stupid isn't it
and this is kind of stupid isn't it
these
properties
whatever let's not nitpick for now
we can
we can
nitpick once this
works welcome
hello currently trying to fix all this
hello currently trying to fix all this
infra
infra
super inspired by your videos Library
super inspired by your videos Library
thank you if you haven't joined the uh
thank you if you haven't joined the uh
the Discord already it's where all the
the Discord already it's where all the
dev
dev
happens often in the evening I'll be
happens often in the evening I'll be
hanging out and there just chatting
hanging out and there just chatting
about Dev or whatever
else really trying to scale the open
else really trying to scale the open
source side of this been tinkering with
source side of this been tinkering with
poo and Tic Tac Toe plus
poo and Tic Tac Toe plus
shared
shared
memory cool wait tic-tac-toe were you
memory cool wait tic-tac-toe were you
the one doing tic taac toe in the
Discord let me
see been lurking okay that probably was
see been lurking okay that probably was
you then
right yeah I bet it'll I bet if you have
right yeah I bet it'll I bet if you have
the environment Dynamics right it'll
the environment Dynamics right it'll
just
just
work oh 600
work oh 600
members that's awesome
don't think so would be
interested I got distracted reading what
interested I got distracted reading what
would you be interested in I just
would you be interested in I just
uh I lost track a second my my bad
uh I lost track a second my my bad
there's been a lot of stuff going on
there's been a lot of stuff going on
lately we literally we have a hurricane
lately we literally we have a hurricane
coming in that we had to get all the
coming in that we had to get all the
servers to not get wiped out by
him the Tic Tac Toe end will should
him the Tic Tac Toe end will should
definitely just work um if you get the
definitely just work um if you get the
uh the Dynamics right someone messing
uh the Dynamics right someone messing
with tic tac toe
with tic tac toe
oh was that not you hold
on oh I guess is this not
on oh I guess is this not
you
you
tic-tac-toe yeah there were a couple
tic-tac-toe yeah there were a couple
people messing around I don't think I
people messing around I don't think I
saw anybody actually do
saw anybody actually do
it yeah are hurricane I can't imagine
it yeah are hurricane I can't imagine
ah it's kind of silly we're going to get
ah it's kind of silly we're going to get
the server out of there soon enough cuz
the server out of there soon enough cuz
it's just like
ridiculous yeah I don't think that
ridiculous yeah I don't think that
anybody if somebody did it they didn't
anybody if somebody did it they didn't
actually do it in a way that we can uh
actually do it in a way that we can uh
we can nicely bind so right now the
we can nicely bind so right now the
thing that we're trying to get a lot
thing that we're trying to get a lot
more environments to do and this is
more environments to do and this is
something we're definitely looking for
something we're definitely looking for
contributions
on so all all these run all of these
on so all all these run all of these
environments here they all run on web
environments here they all run on web
like I can open this and I can play it
like I can open this and I can play it
right and uh there's no JavaScript well
right and uh there's no JavaScript well
at least we haven't written any
at least we haven't written any
JavaScript for these this is all just
JavaScript for these this is all just
like uh wasm bindings for low-level
like uh wasm bindings for low-level
environments and we have a pretty clean
environments and we have a pretty clean
way of doing
way of doing
that it's a really good way to get into
that it's a really good way to get into
the project is to just like make a
the project is to just like make a
simple M like go through the end to
simple M like go through the end to
endend process and that process is
endend process and that process is
getting easier every day like literally
getting easier every day like literally
this infro that I'm building right
this infro that I'm building right
here is going to cut out like one of the
here is going to cut out like one of the
few final remaining annoyances with
few final remaining annoyances with
custom MS
cool can see how it would be a good yeah
cool can see how it would be a good yeah
we literally we have people with zero RL
we literally we have people with zero RL
experience that just have you know an
experience that just have you know an
engineering background that have made
engineering background that have made
and gotten those environments working
and gotten those environments working
online in a day like um the guy that did
online in a day like um the guy that did
the connect 4M that's on there pretty
the connect 4M that's on there pretty
much did that whole thing in a day
much did that whole thing in a day
because well to be fair Fair we kind of
because well to be fair Fair we kind of
try to meet people wherever they're at
try to meet people wherever they're at
like you can just write python
like you can just write python
environments and they will work they
environments and they will work they
just won't run on the web uh you can
just won't run on the web uh you can
push stuff into scon and then it'll be
push stuff into scon and then it'll be
faster but it still won't run on the web
faster but it still won't run on the web
or you can push stuff all the way into C
or you can push stuff all the way into C
which is not that
which is not that
hard um and then it does run on the web
hard um and then it does run on the web
and it's super fast and everything is
and it's super fast and everything is
nice we have lots of examples as well
plus I'm always around to
plus I'm always around to
help depending on your engineering
background that's this buffer in right
oh right there's like this extra layer
oh right there's like this extra layer
of thing that I have to deal with here
right let me think so you pass
in if I just run this on its own am I
in if I just run this on its own am I
going to be passing
going to be passing
in a
buffer what am I going to be doing
I think I'm just going to be
I think I'm just going to be
returning yeah wait this is easy
right yeah this is going to be the piece
right yeah this is going to be the piece
of code that we're going to
of code that we're going to
need pretty much I
need pretty much I
think it's going to be something like
this so we'll store
this so we'll store
that um
um yeah okay this is why we have
um yeah okay this is why we have
properties
and then action
and then action
space yeah this does get declared like
space yeah this does get declared like
this agent ID is
this agent ID is
okay now we can get rid of these
okay now we can get rid of these
obnoxious
obnoxious
checks because they this the property
checks because they this the property
will just get those for
will just get those for
us uh this one these two are good for
now this is just duplicate at and then
now this is just duplicate at and then
this is just duplicated as well right
this is just duplicated as well right
then we have num OBS okay this is all
then we have num OBS okay this is all
this code right
here so basically this is going to have
here so basically this is going to have
to go
to go
into puffer li. environment or something
right like probably
here and then if this is going to be
like death
like death
sign
sign
buffers
and
and
buffer none like
this and
this and
then
then
if
if
none then
observations
zeros so what I'm trying to figure out
zeros so what I'm trying to figure out
here is I'm trying to just figure out a
here is I'm trying to just figure out a
way for these environments to have like
way for these environments to have like
a convenient way to either take an input
a convenient way to either take an input
data storage structure whoops or uh
data storage structure whoops or uh
create their own if
needed and I think it's just going to
needed and I think it's just going to
be num
be num
agents Ms b type yeah like
agents Ms b type yeah like
this and then I should just be able to
this and then I should just be able to
like tab through all of this actions as
like tab through all of this actions as
well
there something like
this uh there's going to be there going
this uh there's going to be there going
to be some issues with that later but
to be some issues with that later but
we'll leave it for
we'll leave it for
now okay and now we do not
now okay and now we do not
need we in the right piece of code here
need we in the right piece of code here
yeah native Native does not need assign
buffers because they already do this for
buffers because they already do this for
themselves
right and then
right and then
here this becomes
infos get returned
here and close like this
so pretty much this is going to
so pretty much this is going to
be about the size of the piece of
be about the size of the piece of
code that we need
code that we need
here which is very
here which is very
slim when I have something this slim I
slim when I have something this slim I
actually question if this code even
actually question if this code even
needs to exist and probably we'll have
needs to exist and probably we'll have
some way eventually to not even require
some way eventually to not even require
this
this
maybe but this is pretty much what we
maybe but this is pretty much what we
want
uh let's see if I can get this working
uh let's see if I can get this working
with like breakout or
something or
pong why is this here
yeah so this is puffer Li Vector native
uper m not just
find put the puff for
here uh
okay driver
and also got to rename all is I don't
and also got to rename all is I don't
know that why it's like my pong and
such no attribute driver end
uh
oops where is
oops where is
this okay so
this okay so
yeah right here this needs to
yeah right here this needs to
change this is going to just
be oh this is a good thing to include
actually when we make the
environment we should
environment we should
assert that it's a puffer end
and then what we
do just return native
right oh back end
right oh back end
of all this stuff
let's just see if this does what this
let's just see if this does what this
does there's so much fluff to strip out
does there's so much fluff to strip out
here uh okay
so right this is actually this is a good
so right this is actually this is a good
thing that we're encountering this
because okay this is actually kind of a
because okay this is actually kind of a
thing that's a bit uh that we should
thing that's a bit uh that we should
think about here right
so when you import this
so when you import this
stuff the only reason that I have this
stuff the only reason that I have this
make
make
function is to do the import dynamically
right I think we're just going to say
right I think we're just going to say
that all the first party environments
that all the first party environments
will
will
build because we can pretty much cut
build because we can pretty much cut
out we can pretty much cut out all this
out we can pretty much cut out all this
nonsense if we just assume that we're
nonsense if we just assume that we're
not going to be stupid with our first
not going to be stupid with our first
party ends
so like right here right you don't need
so like right here right you don't need
this make pong
function you just return to class
and now here we have buff right like
and now here we have buff right like
this
and what we will do
let
see okay now there's there's additional
see okay now there's there's additional
keyword garbage that we just have to
keyword garbage that we just have to
strip out
are you familiar with tiny grad
are you familiar with tiny grad
yep cool
project you remind me of that
framework I'll take that
framework I'll take that
yeah some of the tiny grad stuff is a
yeah some of the tiny grad stuff is a
little bit too functional and too golfed
little bit too functional and too golfed
for me but the idea of trying to keep
for me but the idea of trying to keep
things simple as possible is absolutely
required like literally in my head once
required like literally in my head once
a project goes above a certain
a project goes above a certain
complexity threshold like it's more
complexity threshold like it's more
complex than it needs to be its value
complex than it needs to be its value
just drops to zero like literally if
just drops to zero like literally if
something is substantially more
something is substantially more
complicated than it needs to be I kind
complicated than it needs to be I kind
of don't care what it is it's just not
of don't care what it is it's just not
useful
proba like this
number of lines is slightly misaligned
number of lines is slightly misaligned
number of layers yeah it's kind of both
number of layers yeah it's kind of both
It's Tricky right it's very tricky
It's Tricky right it's very tricky
um cuz you don't actually have a you
um cuz you don't actually have a you
want Simplicity but you don't have a way
want Simplicity but you don't have a way
to measure it like shorter code is
to measure it like shorter code is
generally good fewer components is
generally good fewer components is
generally good fewer API is generally
generally good fewer API is generally
good fewer files often even generally
good fewer files often even generally
good it's just like you have to be very
good it's just like you have to be very
very dogmatic about simplifying
very dogmatic about simplifying
in my
view like you have to be almost
view like you have to be almost
fanatical about the Simplicity of stuff
fanatical about the Simplicity of stuff
like I literally didn't do this for a
like I literally didn't do this for a
week because I couldn't figure out a
week because I couldn't figure out a
clean way of doing this buffer injection
clean way of doing this buffer injection
thing that I'm doing at the moment
thing that I'm doing at the moment
without um making a super Class A base
without um making a super Class A base
class and I'm not willing to accept the
class and I'm not willing to accept the
complexity of a base
complexity of a base
class it's not even really taste as the
class it's not even really taste as the
thing because it's very very obviously
thing because it's very very obviously
like when you look at it it's like when
like when you look at it it's like when
something is simple it's obvious right
something is simple it's obvious right
it's just hard to make it
simple I generally find
simple I generally find
that one really good metric for this is
that one really good metric for this is
if the thing you're doing if the way you
if the thing you're doing if the way you
end up building it makes you feel clever
end up building it makes you feel clever
you're probably
wrong that's usually
correct what happened here
like honestly the best
like honestly the best
stuff like the best stuff I've built I
stuff like the best stuff I've built I
feel very very stupid while building it
feel very very stupid while building it
like you should feel incredibly stupid
like you should feel incredibly stupid
like it should feel like this is so
like it should feel like this is so
simple that it's
trivial doesn't matter how complicated
trivial doesn't matter how complicated
the thing you're working on
is the heck happened here
is the heck happened here
I just got didn't get past the buffer
huh oh I
see h
see h
we'll do like
this
reach it's usually brother but
sure uh
did I already Define this yes I
did
and yeah we don't need this cuz what's
and yeah we don't need this cuz what's
check again
do yeah this is for
do yeah this is for
Vector this is for this is alternative
Vector this is for this is alternative
we don't need
that okay what happened here with self
that okay what happened here with self
reset
async
async
reset I did something weird
here so here they Define or they I'm the
here so here they Define or they I'm the
one that wrote
one that wrote
it
it
um yeah so you actually have to Define
um yeah so you actually have to Define
this
this
as n reset
this
this
is
this and then
here this is very nice now because I
here this is very nice now because I
actually I can remove this garbage
actually I can remove this garbage
here and this one
so we get rid of buff completely I
so we get rid of buff completely I
believe
believe
right no buff just observations it's
right no buff just observations it's
cleaner
why is the self dot ready
it should be observations
it should be observations
right like
this and then this m
step I think it's like this isn't this
step I think it's like this isn't this
the API
there we
go so this
go so this
is this is the core of it
right is that we just have a simple pass
through we have this simple native
through we have this simple native
wrapper
thing instead of having a base
thing instead of having a base
class and then buffers get managed
class and then buffers get managed
through here instead of being like
through here instead of being like
weirdly
injected which lets us simplify our n
injected which lets us simplify our n
code also at the same time we remove
code also at the same time we remove
um make function
um make function
intermediates I suppose
we remove make function intermediates
we remove make function intermediates
for uh Native
ends this will have to be implemented
ends this will have to be implemented
with um multiprocessing as well we'll
with um multiprocessing as well we'll
have to do the same thing for
multiprocessing I'm trying to think if I
multiprocessing I'm trying to think if I
want to do that
first I kind of want to
first I kind of want to
do the multiprocessing thing first just
do the multiprocessing thing first just
to make
sure I think I started on it though
sure I think I started on it though
so I think it's actually not
bad don't I have the uh the type check
bad don't I have the uh the type check
in here or
something mhm right here
so you can see right here this is
where yeah this is
where yeah this is
where we want to do
this oh actually this works this works
this oh actually this works this works
incredibly well the way I've implemented
incredibly well the way I've implemented
this here I thought I was going to have
this here I thought I was going to have
to do some sort of loop over this but I
to do some sort of loop over this but I
don't I think I can literally just give
it right
yes how's
that I think you still need this
that I think you still need this
indexing
I think it's like this
maybe
okay Nam space has no attribute
okay Nam space has no attribute
truncations
really how is that
really how is that
possible observations
that's
silly okay this is legit
silly okay this is legit
was it legit that I didn't do actions
was it legit that I didn't do actions
let me think how I want to handle
let me think how I want to handle
actions
you can just put actions in here
right and did literally just do this
right and did literally just do this
can't I
look at
that I'm surprised this works
that I'm surprised this works
already
already
um these are not optimized parameters
um these are not optimized parameters
whatsoever but you see 0% time in the
whatsoever but you see 0% time in the
environment
zero now this is going to be about
zero now this is going to be about
environment Integrations cleaning this
environment Integrations cleaning this
up making sure I haven't screwed
up making sure I haven't screwed
anything up
anything up
horribly and so
horribly and so
on but this is going to be the thing I
on but this is going to be the thing I
think this was the last missing thing
think this was the last missing thing
for making all this
for making all this
easy because
easy because
now right now I have it it's very very
now right now I have it it's very very
easy now for people to add new
easy now for people to add new
environments at whatever level they want
environments at whatever level they want
this removes the last piece of annoying
this removes the last piece of annoying
like unintuitive redundant boiler plate
like unintuitive redundant boiler plate
I think
there might be one or two things left
there might be one or two things left
I'm not thinking of but this was by far
I'm not thinking of but this was by far
the worst of
it yeah like here you can see that this
it yeah like here you can see that this
Loop is in Python
yeah so I think I answered this question
yeah so I think I answered this question
this was um Nathan's question before
this was um Nathan's question before
that you can't do
this okay so now I think that this
this okay so now I think that this
should just work right
yep so I wasn't able to do that
yep so I wasn't able to do that
before because the buffer here might
before because the buffer here might
change I actually don't call assign
change I actually don't call assign
buffers yet do I
buffers yet do I
wait oh yeah I
wait oh yeah I
do you also don't need self.
do you also don't need self.
buff you can just do assign
buff you can just do assign
buffers like
buffers like
this and then this all goes away
let's see how much of this is now
let's see how much of this is now
redundant I bet a lot of this is now
redundant I bet a lot of this is now
redundant
render
render
mode do you need to Define render mode
mode do you need to Define render mode
is that
uh what happens if I delete
this nothing
yeah
yeah
so render mode has to be defined
still is that a gymnasium thing hold on
still is that a gymnasium thing hold on
let me just make sure I have not added
let me just make sure I have not added
that as a
requirement we want to really strip this
requirement we want to really strip this
down to be no more overhead than gy and
down to be no more overhead than gy and
eventually we're going to phase out a
eventually we're going to phase out a
lot of this stuff that is required by
lot of this stuff that is required by
GEM but not
yet where's their
API this like so they have all sorts of
API this like so they have all sorts of
stuff that's
stuff that's
never
never
used like this stuff for instance
it looks like oh it is it is part of
it looks like oh it is it is part of
it render mode is part of
it render mode is part of
it so we're not actually adding anything
it so we're not actually adding anything
by doing render mode so I think we're
by doing render mode so I think we're
good I think that we leave that as is
good I think that we leave that as is
for now um okay num M's and num agents
for now um okay num M's and num agents
this is stuff we've added
we do need to know num agents don't
we yeah I think we need to no num
we yeah I think we need to no num
agents I don't think we need num
agents I don't think we need num
M's let just start commenting stuff I
M's let just start commenting stuff I
don't think that
don't think that
we we need oh
um all these things
here yeah we're going to be able to
here yeah we're going to be able to
clean all this up a
lot observation space
and I think we use the
and I think we use the
vector the vector form of observation
vector the vector form of observation
space here which is the single
one let's try like this
see if this still
works um
M's yeah you're going to see a lot of
M's yeah you're going to see a lot of
this boiler plate was literally just
this boiler plate was literally just
there because it was needed um before in
there because it was needed um before in
the
the
reset m.
reset m.
single observation
space
enironment I think we can just call this
enironment I think we can just call this
observation
observation
space cleaner
num M's do we need
this this actually this will be num M
this this actually this will be num M
don't need the self variable
oh I guess this is why you would want to
oh I guess this is why you would want to
have a
have a
num num M's but it's not an API
num num M's but it's not an API
requirement
requirement
right the only thing that's an API
right the only thing that's an API
requirement you need to know the number
requirement you need to know the number
of Agents
in order to know how big of a buffer to
in order to know how big of a buffer to
make
right okay you can't see this because
right okay you can't see this because
it's off screen let me pull this so here
it's off screen let me pull this so here
is your random agent playing
pong eval now
pong eval now
works
works
and there are a few other things
right I'm going to try a couple things
right I'm going to try a couple things
here
so first of all let's just do this is
so first of all let's just do this is
width this is height paddle
width this is height paddle
width all these variables here these
width all these variables here these
don't need to be saved I assume
right let's see what happens if I just
right let's see what happens if I just
take all these out
okay so this still runs still running a
okay so this still runs still running a
random
policy by
policy by
train emulated
false if
false if
is native else
driver m.
emulated oh I
emulated oh I
see I messed up the API a little here
see I messed up the API a little here
didn't
I
uh let me think what I want to do about
this this is all stupid API
this this is all stupid API
compatibility stuff
right I think what I need to do is I do
right I think what I need to do is I do
need to go back to single spaces for now
need to go back to single spaces for now
um
um
but not
but not
permanently I only need this for as long
permanently I only need this for as long
as we want petting to API
as we want petting to API
petting zoo API
petting zoo API
compatibility eventually we'll just
compatibility eventually we'll just
subsume the other apis within a cleaner
subsume the other apis within a cleaner
and faster puffer
and faster puffer
API um but until then we'll just you
API um but until then we'll just you
know we'll keep it for
know we'll keep it for
compat which I hate doing but got to
compat which I hate doing but got to
start somewhere
so this is
so this is
now single observation
space Oh you know what I could do
alternatively I know what I'm going to
alternatively I know what I'm going to
do even
better uh watch this so we'll just
do no no I can't okay I thought I was
do no no I can't okay I thought I was
going to be able to wrapper it but I
going to be able to wrapper it but I
can't cuz you need the you need the raw
can't cuz you need the you need the raw
environment to have this
environment to have this
defined
defined
CL yeah I do have to do the gross
thing that's fine I don't mind doing
thing that's fine I don't mind doing
this gross thing when I know it's it's
this gross thing when I know it's it's
temporary and it's for like an external
temporary and it's for like an external
requirement that we're going to be able
requirement that we're going to be able
to delete pretty
to delete pretty
soon so I don't mind that much
no attribute observation space
no attribute observation
space that is crazy
space that is crazy
obnoxious but again we get to
obnoxious but again we get to
cheat we get to
cheat for
okay so we're back to having this
okay so we're back to having this
working
again we also have this num agents
thing uh
I guess we can put this like this
right cuz then what we'll just do is
right cuz then what we'll just do is
we'll just put it as a
property like
this I hate the
underscore we'll just do that for now
though okay now this works again
now there's a little bit more that we
now there's a little bit more that we
have to do I
have to do I
believe all
right so we've got eval
right so we've got eval
mode welcome YouTube
mode welcome YouTube
folks making puffer in for work
folks making puffer in for work
today make it work real
nice okay so here's something I
nice okay so here's something I
genuinely don't know um if I pass these
genuinely don't know um if I pass these
buffers to the
buffers to the
environment but then they go out of
environment but then they go out of
scope is python smart enough to keep
scope is python smart enough to keep
them
them
around I do not know
this how do I test this quickly
I'm trying to think how I test this
quickly oh I need these for logging
quickly oh I need these for logging
anyways though don't
I oh these don't even need to be in scon
I oh these don't even need to be in scon
at all I mean in in Python at
all
all
yeah he did all this from like Mis
yeah he did all this from like Mis
clogging which is fine
this is sketchy
this is sketchy
very sketchy
very sketchy
here yeah stuff needs a little work
here that's okay though I can do this
here that's okay though I can do this
right now this will be good
right now this will be good
um this will be good to do anyways
it's Mis logging
thing yeah I don't like this m logging
thing yeah I don't like this m logging
thing
thing
either it'll probably take me 30 minutes
either it'll probably take me 30 minutes
just to clean up pong if I want to clean
just to clean up pong if I want to clean
up just this one
M it's probably worth doing right yeahum
okay let's just let's start on
it so we've got scon pong here this is
it so we've got scon pong here this is
the rapper
this doesn't need to be called pong I
this doesn't need to be called pong I
mean c
mean c
pong so we just oops
leave this like this for
now these things
here yeah these are
nets for
wait why do we even have these things
wait why do we even have these things
allocated this way isn't this just
Jank this is just straight up Jank
right there's literally no reason to
right there's literally no reason to
have this
yeah there's no reason to have it this
way paddle
y I just replaced this with
y I just replaced this with
four values right for
oh this is not this contributor's fault
oh this is not this contributor's fault
either I should make
either I should make
clear uh it was actually kind of janky
clear uh it was actually kind of janky
before the way we were doing stuff
before the way we were doing stuff
you kind of had to pass in all your
you kind of had to pass in all your
memory allocations from
python did I just do that right yeah I
python did I just do that right yeah I
have to be very careful not to introduce
have to be very careful not to introduce
any bugs while I'm doing this let me
any bugs while I'm doing this let me
Focus up a
moment make sure I use the right
moment make sure I use the right
one in each case
going to have to do this for a few
going to have to do this for a few
different
variables um the code will be
variables um the code will be
substantially cleaner though and The
substantially cleaner though and The
Binding will be cleaner as well
not always going to be super fun stream
not always going to be super fun stream
doing like crazy random M's right but
doing like crazy random M's right but
this
this
is this is
is this is
important we having all our infra and
important we having all our infra and
all of our Baseline
all of our Baseline
M the way that they need to be this is
M the way that they need to be this is
ultimately like one of the most
ultimately like one of the most
important
things I have to do a little
things I have to do a little
refactoring it's perfectly
fine so I am going to need some more
fine so I am going to need some more
caffeine if I'm going to be doing
this score LR
kind of nice in some ways just watching
kind of nice in some ways just watching
this very rapidly become
this very rapidly become
simpler and knowing that this is going
simpler and knowing that this is going
to be for every single person
to be for every single person
writing custom RL environments going
forward I mean this is demo code that I
forward I mean this is demo code that I
point people to too contributor demo
point people to too contributor demo
codee but it's good I it was good for uh
codee but it's good I it was good for uh
the standards of two weeks
the standards of two weeks
ago
ago
now it's going to be much simpler
now it's going to be much simpler
there's going to be even less weird
there's going to be even less weird
stuff you have to
stuff you have to
do basically no weird stuff that you
do basically no weird stuff that you
have to do at this point this is kind of
have to do at this point this is kind of
the last of it gone you're literally
the last of it gone you're literally
just
just
writing standard uh like SIM code
and be careful talking because I have to
and be careful talking because I have to
not mess up the
indexing okay so this is all this stuff
indexing okay so this is all this stuff
here
build
local I missed one
okay
okay
so here is our pong
so here is our pong
game it still plays let me make sure I
game it still plays let me make sure I
can score a point
yep there it is
yep there it is
oops it's very difficult for a pawn game
oops it's very difficult for a pawn game
as well
huh okay it seems like it
works these are standard
works these are standard
is just rib or rib depths you can tell
is just rib or rib depths you can tell
that there's nothing in here that's uh
that there's nothing in here that's uh
none of these Arrow are in puffer it's
none of these Arrow are in puffer it's
just an internal
build what about this mis logging
build what about this mis logging
thing this probably still has to get
thing this probably still has to get
passed in
passed in
right but we're going to be able to do
right but we're going to be able to do
this for
now oh yeah I got a damn
it so much stuff
the uh the signature changed to be fair
the uh the signature changed to be fair
uh it should actually be completely
uh it should actually be completely
possible to
possible to
autogenerate most of this ithon almost
autogenerate most of this ithon almost
all of it
all of it
really I just haven't gotten that set up
really I just haven't gotten that set up
in a way that I like
in a way that I like
yet so doing it manually is slow but
yet so doing it manually is slow but
easy versus having like a broken autogen
easy versus having like a broken autogen
tool
okay and we
take this goes
away these lines go away
can we
can we
build LR
no
attribute right here this goes away as
well 17 args
well 17 args
given
shoot oh I bet it it's
shoot oh I bet it it's
uh right
there seg
fult b Vault really
servations rewards terminals oh cuz I'm
servations rewards terminals oh cuz I'm
uh I am
dumb did I forget VX and VY as
well for
almost done with this one I think the
almost done with this one I think the
other one should be
other one should be
um substantially easier as
um substantially easier as
well wait did I do this
well wait did I do this
right yeah I
did on the bright side we actually um we
did on the bright side we actually um we
simplified this quite a bit this code
okay does our pong game
okay does our pong game
work pong game still appears to work
work pong game still appears to work
right it's kind of fun to be
honest
honest
and then we have to do p.
and then we have to do p.
H BX v y
yeah and then we don't allocate all the
yeah and then we don't allocate all the
variables
right hopefully they get reset cleanly I
right hopefully they get reset cleanly I
actually didn't think about that
actually didn't think about that
we'll see if they
do okay so here is running through
do okay so here is running through
puffer random policy this appears to
work let's see
training training also works
training training also works
very
good
good
so this binding layer is kind of
so this binding layer is kind of
annoying that this has to exist still
annoying that this has to exist still
but not bad
overall we're going to actually just
overall we're going to actually just
Port real quick the um
just
just
do
do
um num M's width and height like
um num M's width and height like
this then this will just
be CMS equals what we're going to do is
be CMS equals what we're going to do is
we're going to Port the loop to
we're going to Port the loop to
BNC not strictly necessary because of
BNC not strictly necessary because of
how fast this thing is um but I do
how fast this thing is um but I do
believe it'll be
believe it'll be
cleaner like there won't be all this
cleaner like there won't be all this
indexing it'll just be in
scon like
this
this
oops dm.
reset and then the this is going to
reset and then the this is going to
be cm.
be cm.
[Music]
step
step
ends all right and then we will
ends all right and then we will
do I did this somewhere and I don't
do I did this somewhere and I don't
remember where maybe it was the Moa
me see if I did it
here I don't think I did it here did
I oh no I did right
no well whatever we'll just do it
here so what this is going to be is this
here so what this is going to be is this
is going to be
is going to be
pointer okay and then what we're going
pointer okay and then what we're going
to do
is m
size of
size of
pong and then we're just
do
do
I or rrange in Num M's like
this
I uh I
think I need to find this CU there was
think I need to find this CU there was
there were a little things a little
there were a little things a little
there were a couple things that were a
there were a couple things that were a
little tricky
the
grid star star
M was this it
this is very odd
yeah what is this
why the heck does it do I have it like
why the heck does it do I have it like
this m star star
M's that's really weird isn't it
oh it's probably because yeah that's
oh it's probably because yeah that's
fine we we don't have to do it that way
fine we we don't have to do it that way
here it'll be
here it'll be
easier so we have this calic like
easier so we have this calic like
this and then we make this
this and then we make this
pong and then this gets
pong and then this gets
enited like this
everything's coming together here
everything's coming together here
everything is coming together here
yeah this it thinks that this Python and
yeah this it thinks that this Python and
it's not um this is reset like this
there self.
there self.
m0 make
client
this for
there's really nothing allocated here is
there's really nothing allocated here is
there in the init
there in the init
here so I think it's
here so I think it's
literally I think we did it
right if this one works we'll do the
right if this one works we'll do the
whole rest of them like this as
whole rest of them like this as
well oops
okay this still
okay this still
[Music]
[Music]
runs and
then
then
see get some
errors cannot convert python
errors cannot convert python
object to
pong
star
um right so this was the obnoxious thing
um right so this was the obnoxious thing
I got to figure out
well wait this isn't
well wait this isn't
even not even
even not even
[Music]
[Music]
imported okay now we get a better error
imported okay now we get a better error
at least
now we get one
error and oh yeah we just need to cast
right what's good to me
not
subscriptable we get to even easier
here look at
that how was train
that how was train
bra still
work this should now go at literal
work this should now go at literal
millions of steps per second um not
millions of steps per second um not
training because we're bot necked by uh
training because we're bot necked by uh
bad pams but the M will go real
bad pams but the M will go real
fast okay so what did we do here we
fast okay so what did we do here we
pushed the loopings pretty much we push
pushed the loopings pretty much we push
all
all
looping from python to scyon and then
looping from python to scyon and then
that runs pure C the m is in C this is a
that runs pure C the m is in C this is a
very nice separation of things right
very nice separation of things right
where you have n code is in
where you have n code is in
C external
C external
Loop is in
Loop is in
scon since that's a binding
scon since that's a binding
anyways and uh then you have very simple
anyways and uh then you have very simple
very very simple wrapper code in Python
let's get the logging working real
let's get the logging working real
quick and clean this code up as
well
98. tick
h
so these sums
so these sums
um this should all just be done and
um this should all just be done and
see all these stats
what do I think about that
what do I think about that
actually you could very easily make like
actually you could very easily make like
a shared stats object that all these
a shared stats object that all these
things can
increment or shared stat struct rather
I like the idea of being able to easily
I like the idea of being able to easily
exfiltrate
exfiltrate
data uh from C and I know exactly how to
data uh from C and I know exactly how to
do it as
well there no reason not
to
right yeah I think I know we're going to
right yeah I think I know we're going to
do something kind of cool here
do something kind of cool here
um yeah we're going to do something kind
um yeah we're going to do something kind
of cool here uh I'm going to use a
of cool here uh I'm going to use a
restroom real
restroom real
quick remind me to unmute my mic when I
quick remind me to unmute my mic when I
come back if I forget I'm going to grab
come back if I forget I'm going to grab
a grab a quick drink and
a grab a quick drink and
we're going to do much better logging
we're going to do much better logging
than this it'll be faster it'll be
than this it'll be faster it'll be
simpler everything so I'll be right
back
e
e
e
e e
did not forget to unmute mik this
did not forget to unmute mik this
time hello
folks RL infra is going to be in such a
folks RL infra is going to be in such a
better place after
better place after
this I mean just like the M's are going
this I mean just like the M's are going
to be so much simpler for contributors
to be so much simpler for contributors
and such I I honestly really should just
and such I I honestly really should just
push to get this merged today that'd be
push to get this merged today that'd be
the best
thing cuz you guys really should have
thing cuz you guys really should have
this
this
[Music]
[Music]
already it's going to just be so nice
already it's going to just be so nice
for
everybody all this boiler plate okay
everybody all this boiler plate okay
we're going to do something really cool
we're going to do something really cool
now we going to do something really
now we going to do something really
really cool now
really cool now
um let me show you this
so type def struct
so type def struct
logs
logs
logs uh this is four integers
here and you can see that there's just
here and you can see that there's just
like this sort of
like this sort of
structure right
structure right
and this is unsigned
and this is unsigned
int no reason for it to be
unsigned this is actually a really cool
unsigned this is actually a really cool
thing for um for folks to
thing for um for folks to
learn one is round is
over but what if what numbers do they
over but what if what numbers do they
actually want they
actually want they
want reward
sum finished
rounds
tick and bounce
tick and bounce
is and
win okay so there are two things I can
win okay so there are two things I can
do here that are kind of cool one is
do here that are kind of cool one is
that I can have one shared logger
that I can have one shared logger
between across all the
between across all the
environments and I can have them update
environments and I can have them update
it without screwing each other up I can
it without screwing each other up I can
do that very very cleanly and easily or
do that very very cleanly and easily or
the other thing which I think is going
the other thing which I think is going
to be more appropriate
to be more appropriate
here is um
I can have one logger instance
I can have one logger instance
per
environment I don't really like either
environment I don't really like either
of these
options bounces
kind of want your episode returns right
give me a moment to figure this out I
give me a moment to figure this out I
want to make sure we do this in a way
want to make sure we do this in a way
that is
good logging is always a
good logging is always a
pain but the cool thing is that I have
pain but the cool thing is that I have
what I have is I have a really good way
what I have is I have a really good way
of sharing strs and arrays of strs uh
of sharing strs and arrays of strs uh
with named elements between Python and c
with named elements between Python and c
and scon as well so we're going to be
and scon as well so we're going to be
able to have very clean syntax I just
able to have very clean syntax I just
have to figure out the way I want to
have to figure out the way I want to
record this data and recaff
[Music]
finate let me double check one thing in
finate let me double check one thing in
the meantime
let me see
here I'm just trying to figure out a
here I'm just trying to figure out a
clean formulation for recording episode
clean formulation for recording episode
returns
right
right
um let me see the other stats
um let me see the other stats
recorded bounces wins
I could get fancy with
this I don't think I don't necessarily
this I don't think I don't necessarily
think that's the best
idea intuition tells me that it sounds
idea intuition tells me that it sounds
like like a good idea but isn't okay let
like like a good idea but isn't okay let
me let me just at least talk through
me let me just at least talk through
what's going through my head at the
what's going through my head at the
moment
moment
um so we need a nice way of recording
um so we need a nice way of recording
stats
stats
right I can make a log object which is
right I can make a log object which is
just destruct which can contain you know
just destruct which can contain you know
various elements I can very cleanly pass
various elements I can very cleanly pass
that uh to all the different C
that uh to all the different C
environments so that let's say that we
environments so that let's say that we
just want to record a total number of uh
just want to record a total number of uh
bounces or whatever across all the
bounces or whatever across all the
environments we can have them all
environments we can have them all
increment that same struct or we can
increment that same struct or we can
have all the environments increment
have all the environments increment
their own struct so we can see the
their own struct so we can see the
average number of bounces per
average number of bounces per
environment at any given time for
environment at any given time for
instance problem is that the
instance problem is that the
environments are going to reset at
environments are going to reset at
different times right so you either need
different times right so you either need
to when that data is reset from python
to when that data is reset from python
you extract out the information that you
you extract out the information that you
need into a
need into a
list or you would need like a similar
list or you would need like a similar
type of variable length data structure
type of variable length data structure
in
in
C so if I wanted to get
C so if I wanted to get
complicated not really that complicated
complicated not really that complicated
to be fair uh but I could just add like
to be fair uh but I could just add like
a simple stack type thing
a simple stack type thing
where the environments can just push end
where the environments can just push end
of episode logs onto a stack and then
of episode logs onto a stack and then
from python once in a while you just
from python once in a while you just
average everything out over the stack
average everything out over the stack
and clear it pretty pretty easy for me
and clear it pretty pretty easy for me
to do
that I don't know if that's worth it
that seems like a lot of complexity
that seems like a lot of complexity
overhead for something this
overhead for something this
simple but this has been a uh a
simple but this has been a uh a
persistent pain in the
ass
ass
maybe let me think about
this what would this actually require
I think it'll very quickly get more
I think it'll very quickly get more
complicated than I would
like you need some sort of internal log
like you need some sort of internal log
structure for the environment to keep
structure for the environment to keep
track of the stuff that it's going to
track of the stuff that it's going to
report at the end of episode and then at
report at the end of episode and then at
the end of the
the end of the
episode it's going to have to like stack
episode it's going to have to like stack
push it's
push it's
logs which is really just going to be an
array I could make a little scon
array I could make a little scon
function to record from there to clear
function to record from there to clear
the stack and return all the means or
whatever you don't always want means
whatever you don't always want means
sometimes you want sums and
such is there anything I can do that's
such is there anything I can do that's
simpler than this if I just
simpler than this if I just
ignore if I just say that this is this
ignore if I just say that this is this
is just going to be for
is just going to be for
pong
pong
so what's it need when a game is
so what's it need when a game is
finished you want to
know whether you won the
know whether you won the
game how many bounces there
game how many bounces there
were he
ticks maybe some reward or something
it seems like you need at least some
it seems like you need at least some
piece of machinery for
this the stack idea is really not
this the stack idea is really not
looking that bad
what if I think about it for a more
what if I think about it for a more
complex end like the
Moa not that bad
Moa not that bad
still even more complex
en actually works very nicely with
en actually works very nicely with
multi-agent
multi-agent
Ms depending on how you want to Define
Ms depending on how you want to Define
such
you can cap the buffer
size I kind of like
size I kind of like
it I kind of like
it you just make a log
struct the envir can maintain one or
struct the envir can maintain one or
several of these depending on the type
several of these depending on the type
of environment it
of environment it
is or it can maintain none of them if it
is or it can maintain none of them if it
doesn't need
doesn't need
to and then you need to have a
stack which is just an array just a few
stack which is just an array just a few
lines of
code are there any reason is not to do
this well if I ever want to do
this well if I ever want to do
multiprocessing in here that doesn't
multiprocessing in here that doesn't
work
right yeah
H well I guess a lot of stuff doesn't
H well I guess a lot of stuff doesn't
work anyways in that case though
work anyways in that case though
right and actually maybe we're still
right and actually maybe we're still
fine
I'm not going to be messing with that
I'm not going to be messing with that
for a while
for a while
anyways I think for the immediate
anyways I think for the immediate
term it's probably the simplest way of
term it's probably the simplest way of
doing some form of logging
basically eliminates all of the
basically eliminates all of the
remaining boiler plate
remaining boiler plate
code in
Python I think that's pretty
Python I think that's pretty
good I think that's worth doing we'll
good I think that's worth doing we'll
see if I'm horribly wrong
but I think it's a very small amount of
but I think it's a very small amount of
complexity
done it just needs to know tick and
bounce
pick you can even do multi-type like
pick you can even do multi-type like
this
and then watch this we can do type def
and then watch this we can do type def
struct we'll just do log
stack
index
length St
science there we go that's pretty good
right does this need to be allocated
right does this need to be allocated
like this
it might not need to even be allocated
it might not need to even be allocated
because scon will manage that won't
it well hold on
I think this is probably
right push
right push
[Music]
log also it probably shouldn't be a
log also it probably shouldn't be a
stack it should probably be a a circular
buffer yeah this will be better
circular buffer is actually going to be
circular buffer is actually going to be
harder
harder
though now I'm thinking about
it I think I had it right before with
it I think I had it right before with
this
stack
stack
yeah it's a little
yeah it's a little
awkward it is a little awkward
I think it's okay
though
though
log so then we have
we really don't need push and pop then
we really don't need push and pop then
do we
it will be a log buffer but it won't be
it will be a log buffer but it won't be
a circular buffer
let
let
say Okay Rel log
buffer this
log okay then we do
log okay then we do
if turn
and then the question is how
um we can do like
um we can do like
log
aggregate can you return a
aggregate can you return a
struct you can return a struct can't you
struct you can return a struct can't you
yeah
hold
hold
on
on
ah bad
okay I was unsure about the lifetime of
okay I was unsure about the lifetime of
this this is what we wanted yeah return
this this is what we wanted yeah return
by value
good glad I checked but we are safe
here and
here and
clear up for logs and then what we would
clear up for logs and then what we would
do is log
then okay
so we go through all the
so we go through all the
logs we do it like
this and then we do
this and then we do
for turn log but we also have to go
for turn log but we also have to go
through a second
through a second
time and we have to
time and we have to
do
do
log for slash
equal uh is that going to do integer
equal uh is that going to do integer
division
if I make them all floats it
works what do I think about
works what do I think about
this
this
so I added to
this like 45 lines of
code and this gets us oh no CU I also
code and this gets us oh no CU I also
have to include this so I added a screen
have to include this so I added a screen
of
of
code
code
um is this worth
it you add one screen of code and then
it you add one screen of code and then
what's going to happen here is we're
what's going to happen here is we're
going to be able to get this log from
scyon um
scyon um
and then we can literally just expose
and then we can literally just expose
this Aggregate and clear
function have to guard there
kind of a specific piece of
kind of a specific piece of
code I'd have to think about how if
code I'd have to think about how if
there were a nice way to write this
there were a nice way to write this
reusable I don't think that there is and
reusable I don't think that there is and
I don't think it really matters that
I don't think it really matters that
much
much
um but you have a
buffer this essentially gives you
buffer this essentially gives you
uh variable length
logging let's try it and let's see uh
logging let's try it and let's see uh
let's see how much stuff it adds to the
let's see how much stuff it adds to the
code base I think that's going to be the
code base I think that's going to be the
way to do
it uh so right away we need both of
it uh so right away we need both of
these type deaths I'm going to ignore
these type deaths I'm going to ignore
code added by type deaths though because
code added by type deaths though because
I think it's going to be able to be
autogen so we put right here C type def
autogen so we put right here C type def
struct
logs allocate log
buffer and
buffer and
log we do not need this one
I think that this is
good so we make log buffer star
logs and then we
do allocate log buffer
um num
logs
logs
fine can you pound Define in syon I
fine can you pound Define in syon I
think you
can like this
and then I will make like a def log I
guess
log turn log
this is actually kind of nice cuz now
this is actually kind of nice cuz now
that I'm looking at this you don't even
that I'm looking at this you don't even
have to pass in the
have to pass in the
memory from uh python to do
this you might want to it gives you
this you might want to it gives you
more access to it but you don't have to
oh we also I forgot that we get to
oh we also I forgot that we get to
delete a little bit of code for this as
delete a little bit of code for this as
well don't we we add a little we add a
well don't we we add a little we add a
couple things and we delete a couple
couple things and we delete a couple
things so we just get to do like
log you need to have the pointer to the
log you need to have the pointer to the
log buffer I believe
buer I think you can just
do I think you can just literally do
this give rid of Miss
logging oh we should put the log buffer
logging oh we should put the log buffer
size in here right
I think that this is
right feels like a lot of code for just
right feels like a lot of code for just
pong
some of these things I think we're going
some of these things I think we're going
to be able to uh remove
though all right so this is nice we get
though all right so this is nice we get
to do
n log buffer
I don't think any of this needs to get
I don't think any of this needs to get
changed I think
changed I think
actually let me
see
see
yeah I think that we we don't have to do
yeah I think that we we don't have to do
any of this in the reset of the
any of this in the reset of the
round we do this in the overall
round we do this in the overall
reset so we just get rid of this
and
and
tick zero is
weird is that the right syntax
weird is that the right syntax
I thought it's just like this I thought
I thought it's just like this I thought
it's just
this maybe with a cast needed we'll
this maybe with a cast needed we'll
see we do not need
this okay well it's not used anywhere
else so what did we want numb bounces
else so what did we want numb bounces
win
tick so some pick bounces score I think
tick so some pick bounces score I think
would make sense
we need DB
bounces I don't think
bounces I don't think
so some reward score and tick will do
so some reward score and tick will do
it we can easily add
stuff fine
and then I have to add stuff in there I
assume we add the log to the buffer
f
logs we do log
logs we do log
star
buffer clean some stuff up
buffer clean some stuff up
here
here
and want pass this
and want pass this
by I generally make it a rule to not
by I generally make it a rule to not
pass
pass
uh stru by value just cuz it leads to
uh stru by value just cuz it leads to
bad out outcomes so we'll just do
that okay so we got add log
that okay so we got add log
here and now all I have to do is figure
here and now all I have to do is figure
out where to
out where to
update some reward
update some reward
score and tick
log 4+
log 4+
equals
equals
n or plus
n or plus
equals agent wins hold
equals agent wins hold
on plus equals
1 to do duplicated code okay
well you don't get any points for
well you don't get any points for
this oh I see so this is yeah this just
this oh I see so this is yeah this just
the code doesn't
the code doesn't
Okay log
Okay log
this
reset 10.0
you get this bounce reward
here noticing some differences from the
here noticing some differences from the
original
collision with wall
lose or
L Endo Collision on
right log tick plus equal
one and some rewards qute I think we got
one and some rewards qute I think we got
everything I'm pretty sure we got
everything well we'll find out very soon
but then this will
be this will basically W with the
be this will basically W with the
additional info changes we
made uh this also doesn't need a name
made uh this also doesn't need a name
this is just
some W SC and
tick
logs and we have some genuine errors
logs and we have some genuine errors
here I believe
here I believe
we'll debug these in pure
we'll debug these in pure
c not
assignable not a
assignable not a
pointer H
53 expected expression
isn't this
isn't this
um I thought that this was
valid am I dumb
here tcgn
here tcgn
[Music]
equals I thought that I had that hold on
the
the
error expected
expression e
I think you can just cast
I think you can just cast
yeah well it's not a cast it's there's
yeah well it's not a cast it's there's
something weird going on but I think you
something weird going on but I think you
just have to
do if I just do like
do if I just do like
this yeah that
this yeah that
works and let's see if we can run
works and let's see if we can run
it it appears we can play the game
no
I don't know if we need all this here
I don't know if we need all this here
well but this is this is fine for now um
build M
logging after terminals
these should really be
autogenerated get rid of M logging
look at that we got rid of basically all
look at that we got rid of basically all
of the the Jank
things and we're literally going to be
things and we're literally going to be
able to just
do if self.
do if self.
tick then we do info
tick then we do info
equals this
okay
well it's
well it's
stuck so uh something is
weird why is it
stuck it's stuck
stuck it's stuck
there let's not do multiprocessing
look
that so there's something weird here but
that so there's something weird here but
um this so far is good
let me see what we call episodic
episode length and episode
episode length and episode
return is what we call
return is what we call
it episode
turn episode length and then we'll do
turn episode length and then we'll do
uh
uh
score cuz these can be different right
let's go
welcome this is going quite well I think
welcome this is going quite well I think
that we almost have this we almost have
that we almost have this we almost have
the end to end demo done without all the
the end to end demo done without all the
Jank which is going to be very very nice
Jank which is going to be very very nice
to have
I mean like we've had this working like
I mean like we've had this working like
we've had good infro for the last no
we've had good infro for the last no
months but um I think it's going to just
months but um I think it's going to just
get way way better
today of course it took me taking a
today of course it took me taking a
weekend off to clear my head in order to
weekend off to clear my head in order to
be able to figure this
be able to figure this
out but
uh results good
oops episode
length
length
for episode
return okay if we call train now what
happens we
happens we
freeze interesting do I have a while
freeze interesting do I have a while
anywhere like
fa interesting
well we can pretty easily
well we can pretty easily
um figure this out
right exra compile
right exra compile
[Music]
ARS uh
let's see where this egg bolts
there we
go
interesting did this not get allocated
oh I guess
not well that's
easy terminals
do logs
let's see if it uh if this
works
lovely now infos are not being
lovely now infos are not being
reported let's fix
reported let's fix
that we should definitely be reporting
that we should definitely be reporting
infos
like right here
right um
let's see fixing pong much much more
let's see fixing pong much much more
than that my guy much more than that
than that my guy much more than that
fixing puffer lib
fixing puffer lib
infrastructure you're going to love the
infrastructure you're going to love the
new
new
environment uh the new environment
environment uh the new environment
Integrations it's so easy it's like so
Integrations it's so easy it's like so
much easier welcome as well bet
I'll show you in a
second let me make sure it actually logs
correctly for some reason we're not
correctly for some reason we're not
getting we're not getting infos
back let's see why we're not getting
back let's see why we're not getting
infos
just got home completed
just got home completed
telling people
score completed all performance
reviews oh this is not puffer my bad
yeah you can be a boss but are you the
yeah you can be a boss but are you the
boss is the
boss is the
question show a little bit we're pretty
question show a little bit we're pretty
good I did a couple extra workouts this
good I did a couple extra workouts this
weekend my folks were in town so did a
weekend my folks were in town so did a
little training with my
dad shoulder we
ran up and down a ski hill that is hard
ran up and down a ski hill that is hard
work
indeed let me
indeed let me
see I'm trying to figure out why this
see I'm trying to figure out why this
inpost thing isn't getting logged
I'm tired I R
I'm tired I R
20 yeah
20 yeah
man the thing is you can actually just
man the thing is you can actually just
do that you can literally train to do
do that you can literally train to do
that within a few
that within a few
months I mean it's hard but you can do
it could do
it could do
it yeah but you can train to do it in a
it yeah but you can train to do it in a
way that you have a very low chance of
way that you have a very low chance of
injury there no excuse
injury there no excuse
right it's like if you want to do it you
right it's like if you want to do it you
just go do
it personally I think that like it's a
it personally I think that like it's a
good thing to train to do like do a
good thing to train to do like do a
marathon longer distance like the 50k
marathon longer distance like the 50k
actually the 50k actually did some like
actually the 50k actually did some like
more damage to me but uh like a flat
more damage to me but uh like a flat
Marathon or like a mostly flat Marathon
Marathon or like a mostly flat Marathon
totally achievable
what the heck is wrong with this
thing yeah no the thing was the the 50k
thing yeah no the thing was the the 50k
I did took me S and a half hours which
I did took me S and a half hours which
is at
is at
least probably like a good hour at least
least probably like a good hour at least
a good hour longer than it should have
a good hour longer than it should have
taken if it were flat
very weird that this is
very weird that this is
um I assume that I'm just forgetting the
um I assume that I'm just forgetting the
format
infos oh it's because it's uh a list
yeah it's a
list let's add a check actually for
that rip info steper with Enduro need
that rip info steper with Enduro need
the format right so the numbers
yep I add checks for this stuff in new
yep I add checks for this stuff in new
apis when I can like right here for
apis when I can like right here for
instance we're just going
instance we're just going
to seert his
instance info
stick list
there we go
few other issues yeah let me figure this
few other issues yeah let me figure this
right now while I'm on a roll this is uh
right now while I'm on a roll this is uh
this is going to be a huge huge
this is going to be a huge huge
difference for the library right
here you'll see how clean it is you can
here you'll see how clean it is you can
actually kind of see already look how
actually kind of see already look how
much less code is in the
much less code is in the
python in fact I'm going to be able to
python in fact I'm going to be able to
delete all this stuff up here as well
delete all this stuff up here as well
you'll
see observation out of
see observation out of
range yeah uninitialized most likely
range yeah uninitialized most likely
you're uh double check that your
you're uh double check that your
actually your observation types and
actually your observation types and
sizes are what they say cuz if you
sizes are what they say cuz if you
accidentally changed the OB size and you
accidentally changed the OB size and you
pass a pointer it's not going to check
pass a pointer it's not going to check
the bounds for
the bounds for
you ping pong
Dude Where's the stupid thing
Dude Where's the stupid thing
oh yeah infos is a v
format
format
yeah let's do this
do it show up
now so no idea if this is correct or not
now so no idea if this is correct or not
how easy this is to train if default
how easy this is to train if default
hypers are any good um info does show
up yeah we should probably check on on
up yeah we should probably check on on
to make sure like the end to end
to make sure like the end to end
training is good
training is good
but check this out so this is the pong
but check this out so this is the pong
environment in fact let's real quick you
environment in fact let's real quick you
know let's just let's just fully
know let's just let's just fully
demonstrate
here tick report interval I don't know
here tick report interval I don't know
why they have the terminals in un and 8
why they have the terminals in un and 8
format like
format like
this um
yeah we really don't
need sure we don't need this
is there a reason it has to be unsigned
charar what do we do by default is it a
float don't make it
binary what do we do by default
we have it as a
bull what's annoying about having it be
bull what's annoying about having it be
a bull
you got to be kidding me right like
you got to be kidding me right like
include standard
include standard
bull you don't need to pound de
bull yeah I'm making it a bull that's
bull yeah I'm making it a bull that's
ridiculous we're not we're not dealing
ridiculous we're not we're not dealing
with that [ __ ]
yeah just do this [ __ ]
correctly okay so there we go
ENT just include standard bull
okay cool we can
play
solid on game
hold
on no hold on
chill canot
chill canot
assign type
assign type
[Music]
[Music]
unsigned car star
interesting that's a compile
error well I don't think it should
error well I don't think it should
be let me see
to avoid no we should just figure out
to avoid no we should just figure out
how to do it
correctly unless it's like cursed but it
correctly unless it's like cursed but it
really shouldn't
be oh I know what it
is oh is there not in a nit function
I'm sure I forgot to change oh it's the
I'm sure I forgot to change oh it's the
header
header
right yeah it's their
header look that's literally
it just a header what we have
here okay this is interesting
here okay this is interesting
then assignment to Bull from
then assignment to Bull from
incompatible type
inar so now it
inar so now it
compiles let me just make sure we're
compiles let me just make sure we're
actually passing the correct type
here warning is not slash ignore and
here warning is not slash ignore and
C python warning is like hey maybe take
C python warning is like hey maybe take
a look at this if you get a chance if
a look at this if you get a chance if
not no big deal warning in C is you're
not no big deal warning in C is you're
about to blow your off with a
[Music]
shotgun D type bull
let me figure out why this is
warning where was my
warning for
okay so this is not what we want syon
okay so this is not what we want syon
has its own weird
yeah this is be very
careful for
underscore
bull that's a little weird
ah okay that's
interesting yeah I mean you're not
interesting yeah I mean you're not
expected to figure these things
expected to figure these things
out but that doesn't mean that I'm going
out but that doesn't mean that I'm going
to leave puffer lib having something
to leave puffer lib having something
stupid in it right because I can't
stupid in it right because I can't
figure out how to use a [ __ ] Boolean
I'm just trying to figure out if there's
I'm just trying to figure out if there's
a reference
normal
thing the normal thing to do in C is to
thing the normal thing to do in C is to
use a bull
we're not quickly approaching a pound of
we're not quickly approaching a pound of
fun
it's actually incredibly funny to me
it's actually incredibly funny to me
that as soon as you go from C stack
that as soon as you go from C stack
Overflow to like python or even cython
Overflow to like python or even cython
the quality of the anwers just become
garbage well no it's because bu is not a
garbage well no it's because bu is not a
standard like in order to use the bull
standard like in order to use the bull
bull you need to
bull you need to
include uh standard
include uh standard
bull I don't know why that is
bull I don't know why that is
but it's a c quirk
me try
something
so for
should just be bull bull shouldn't
it C typed this is [ __ ] wrong
it is crazy this AI overview thing I
it is crazy this AI overview thing I
don't even know how much money they're
don't even know how much money they're
burning on it but like every single
burning on it but like every single
Google search they just generate some
garbage well to be fair the reason that
garbage well to be fair the reason that
people can't use Google is because of
people can't use Google is because of
all the AI generated garbage it's
all the AI generated garbage it's
actually incredibly difficult to find
actually incredibly difficult to find
anything these days
I'm trying to think what's the easiest
I'm trying to think what's the easiest
way to fix this
you're probably right that you can do an
you're probably right that you can do an
unsigned Char internally
let me see what happens if I do
that but I don't want to use an unsigned
that but I don't want to use an unsigned
Char from python if that makes
Char from python if that makes
sense we are reading about RL for llms
sense we are reading about RL for llms
in our ml reading group at the moment
in our ml reading group at the moment
are you interested in that area quite a
are you interested in that area quite a
different set of performance
different set of performance
characteristics I mean I can provide
characteristics I mean I can provide
some input I'm sure on uh a few
some input I'm sure on uh a few
different things but you have a very
different things but you have a very
different problem surface right and
different problem surface right and
honestly
honestly
like the way RL is being it depends what
like the way RL is being it depends what
you mean if you mean RL to train llms
you mean if you mean RL to train llms
you're in a not a fun area because what
you're in a not a fun area because what
you're doing is you're taking
you're doing is you're taking
the you're taking the weakest part of
the you're taking the weakest part of
RL um and you're using it in a very
RL um and you're using it in a very
expensive
area obviously it works with 01 and
area obviously it works with 01 and
stuff but it only works if you have
stuff but it only works if you have
unlimited money for now
I said I did talk to some people last
I said I did talk to some people last
week that had more reasonable ideas on
week that had more reasonable ideas on
places to use RL but like the 01 thing
places to use RL but like the 01 thing
it makes sense what they're doing but
it makes sense what they're doing but
it's going to be very
expensive inference time
expensive inference time
compute guiding the tree of output using
compute guiding the tree of output using
yeah you're looking at
01 yeah bet that's the one thing that
01 yeah bet that's the one thing that
you can't do
you can't do
do you understand why
not
because what's going to happen is python
because what's going to happen is python
is going to use a bite it's probably
is going to use a bite it's probably
going to use an unsigned Char to
going to use an unsigned Char to
represent that bull and scon is going to
represent that bull and scon is going to
use a cant which is four bytes so you're
use a cant which is four bytes so you're
going to have wrong numbers of bytes
okay what I just did seems like it might
okay what I just did seems like it might
have
worked we'll have to
see not something I would expect you to
see not something I would expect you to
know mind
you for
okay so we have a true
here hopefully I have this correct
okay we're definitely going to have to
okay we're definitely going to have to
do a little bit of tweaking to make sure
do a little bit of tweaking to make sure
I haven't broken anything here CU I want
I haven't broken anything here CU I want
to make sure that this thing can
to make sure that this thing can
actually
actually
train which can actually end up being
non-trivial but um I just want to show
non-trivial but um I just want to show
I'm going to I'm going to have to go
I'm going to I'm going to have to go
make a shake and stuff real quick but um
make a shake and stuff real quick but um
I just want to show something real I
I just want to show something real I
want to show something off
unsign Char in C and
unsign Char in C and
scyon yeah so I use a bu in Python so I
scyon yeah so I use a bu in Python so I
don't have to do something stupid in
don't have to do something stupid in
Python right and then I cast to unsign
Python right and then I cast to unsign
char and I'm
char and I'm
assuming that the bite structure is the
assuming that the bite structure is the
same I would
think I'm not positive it could be
think I'm not positive it could be
breaking stuff we'll
see well do you know that between cython
see well do you know that between cython
and C yeah but you don't know that um
and C yeah but you don't know that um
you don't know how a python bull is
you don't know how a python bull is
represented if it's represented just as
represented if it's represented just as
uh as a single bite or if it's like
uh as a single bite or if it's like
packed or whatever I I assume it's
packed or whatever I I assume it's
probably a bite but I don't
know
anyways don't need
this C okay let me
this C okay let me
um Let Me Now show you what we've done
um Let Me Now show you what we've done
here CU this is actually pretty cool so
here CU this is actually pretty cool so
this is just a test at the bottom so you
this is just a test at the bottom so you
can ignore this you basically have a
can ignore this you basically have a
screen of code for this binding right
screen of code for this binding right
here you see this and it has a whole
here you see this and it has a whole
bunch of
bunch of
options and then all it
options and then all it
does is it passes all these options to
does is it passes all these options to
the C the C wrapper it includes logging
the C the C wrapper it includes logging
right here with a an adjustable log
right here with a an adjustable log
interv and it includes the gymnasium
interv and it includes the gymnasium
depths you see how how slim this wrapper
depths you see how how slim this wrapper
is and
then in song
then in song
here this stuff at the top can be
here this stuff at the top can be
autogen it's literally just um you know
autogen it's literally just um you know
deaths from
deaths from
theh here's your siong you can see you
theh here's your siong you can see you
make these M's in a loop and init
make these M's in a loop and init
them but the make function is literally
them but the make function is literally
just uh an instant instantiation of the
just uh an instant instantiation of the
struct there's no other Jank there
struct there's no other Jank there
you've got your reset and step which do
you've got your reset and step which do
loops you've got render function and
loops you've got render function and
you've got this Aggregate and clear
you've got this Aggregate and clear
log and then in pong. h you have normal
log and then in pong. h you have normal
code without really having to do
code without really having to do
anything specific for the fact that this
anything specific for the fact that this
is an
is an
rln just destruct has a bunch of
rln just destruct has a bunch of
data and has the logic for the game
data and has the logic for the game
which could be substantially
which could be substantially
compressed the game logic could
compressed the game logic could
definitely be
definitely be
compressed high level though very simple
compressed high level though very simple
and here's the
renderer and this all
works and the way that this now
happens the do C is for a
happens the do C is for a
test uh the do c is a test so you can
test uh the do c is a test so you can
run locally it also is used for the web
thing
thing
also this now can run through a native
also this now can run through a native
renderer meaning there's no more
renderer meaning there's no more
serial you no longer need a Serial layer
serial you no longer need a Serial layer
so if you just want to run this on one
so if you just want to run this on one
core but ultra high throughput you can
core but ultra high throughput you can
just run through
native uh the do c is it's the same as
native uh the do c is it's the same as
before bet so you have this native this
before bet so you have this native this
native is a very very very slim uh
native is a very very very slim uh
compatibility layer and you no longer
compatibility layer and you no longer
ever have to do anything with serial
ever have to do anything with serial
with Native environments you never have
with Native environments you never have
to do any of this code here and then you
to do any of this code here and then you
can optionally run it in
can optionally run it in
multiprocessing so you can run multiple
multiprocessing so you can run multiple
natives uh you run one native on each
natives uh you run one native on each
core you get a nice performance boost by
core you get a nice performance boost by
pushing the loop uh from python I assume
pushing the loop uh from python I assume
it depends on the environment uh most
it depends on the environment uh most
likely for breakout you will I mean for
likely for breakout you will I mean for
these these en environments you will
these these en environments you will
because they're single
because they're single
agent also I honestly think it's just
agent also I honestly think it's just
cleaner because you treat the scon as
cleaner because you treat the scon as
like a binding intermediate layer and
like a binding intermediate layer and
you keep the crap out of the Python
you keep the crap out of the Python
wrapper it's
wrapper it's
nice so vector. Pi native
nice so vector. Pi native
environments massively massively
environments massively massively
simplified massively simplified native
simplified massively simplified native
environments
environments
um the base class for puffer MS
is an abstract class for all intents and
is an abstract class for all intents and
purposes these properties are API
purposes these properties are API
compatibility only otherwise I would
compatibility only otherwise I would
mark this abstract so there's nothing
mark this abstract so there's nothing
hidden in here there's no like Base
hidden in here there's no like Base
Class [ __ ] this assign buffers thing
Class [ __ ] this assign buffers thing
this function is used to handle all of
this function is used to handle all of
the uh the data allocations or the data
assignments and then you don't have to
assignments and then you don't have to
care about any of it you want to write
care about any of it you want to write
your environment you can just write your
your environment you can just write your
environment with no boiler
plate we also managed to get rid
of the make pong function this thing
of the make pong function this thing
here we don't need it we can just
here we don't need it we can just
directly use the
directly use the
class for
this wrap with stats wrapper nope nope
this wrap with stats wrapper nope nope
you don't need a stats wrapper
you don't need a stats wrapper
either no
either no
rappers
native your environment layer is the
native your environment layer is the
environment you
environment you
wrote runs raw native couple little
wrote runs raw native couple little
compatibility things for vectorization
compatibility things for vectorization
API really if I wanted to have a base
API really if I wanted to have a base
class I could make them both compatible
class I could make them both compatible
uh easily let me go check on that
[Music]
[Music]
you know what's funny this is so so
you know what's funny this is so so
close I could almost just make this the
close I could almost just make this the
base
class I'm actually very tempted
to cuz it still really doesn't do any
to cuz it still really doesn't do any
magic for you
I'll think about that in a bit I might
I'll think about that in a bit I might
actually be able to remove native
actually be able to remove native
entirely and just have puffer M also
entirely and just have puffer M also
work as VM
I'm not one to two steps away from
I'm not one to two steps away from
making a registry please shoot me when I
making a registry please shoot me when I
do welcome that
guy this is honestly so close
guy this is honestly so close
is it worth it
though yeah I can make a base class too
though yeah I can make a base class too
is it worth
it is it
it is it
worth having you
worth having you
subclass a puffer M that has this
subclass a puffer M that has this
minimal amount of logic in it like this
minimal amount of logic in it like this
stuff right
stuff right
here for the privilege of being able to
here for the privilege of being able to
use it with
use it with
vectorization uh immediately without
vectorization uh immediately without
this additional native
object is that worth
it well of course it works that doesn't
it well of course it works that doesn't
mean it's it's worth
it bam garbage
code hate the stupid gym
registry it's honestly terrible design
GNA go
run enforce Base Class for convenience
run enforce Base Class for convenience
well no you need to have a base class
well no you need to have a base class
but the thing is it can be an abstract
but the thing is it can be an abstract
base
class
class
or I can eliminate this whole native
or I can eliminate this whole native
thing
thing
here by making it a very
here by making it a very
slightly more complex
one I'm actually thinking about it
start with less that's the thing I don't
start with less that's the thing I don't
know which is more
complex I'm always going to pick the
complex I'm always going to pick the
simpler one I don't know what is the
simpler one I don't know what is the
simpler one
here if you want these checks
here if you want these checks
wait if I did make it a bait class a
wait if I did make it a bait class a
base class you'd have to like late call
base class you'd have to like late call
Super which is kind of
Super which is kind of
disgusting or I'd have to make these
disgusting or I'd have to make these
things
hooks more or less magic for the
user I don't know the thing well no it's
user I don't know the thing well no it's
you want there you don't want stuff to
you want there you don't want stuff to
be magic but the question is like
you also don't like these stupid rapper
you also don't like these stupid rapper
classes that don't seem to do
anything just go Star Puffer lib signing
anything just go Star Puffer lib signing
off thank you yeah folks please do uh
off thank you yeah folks please do uh
Star Puffer if you're uh if you find any
Star Puffer if you're uh if you find any
of this useful it's all open source it's
of this useful it's all open source it's
all free it's where bet linked it um it
all free it's where bet linked it um it
really helps out a
ton fewer
ton fewer
default well I already have fewer
default well I already have fewer
default wrappers that guy so the thing
default wrappers that guy so the thing
that's going on here right is I'm
that's going on here right is I'm
cleaning up the code paths for uh Native
cleaning up the code paths for uh Native
puffer M so I've stripped out Cal you no
puffer M so I've stripped out Cal you no
longer have to go through this loop with
longer have to go through this loop with
like the bigger serial class for Native
like the bigger serial class for Native
environments uh you go through this
environments uh you go through this
native wrapper here uh the thing is if I
native wrapper here uh the thing is if I
just switch your base class uh if like I
just switch your base class uh if like I
just take the little bits of logic
just take the little bits of logic
because this is barely anything right if
because this is barely anything right if
I put this into puffer en which you're
I put this into puffer en which you're
currently base uh subclassing but is
currently base uh subclassing but is
currently like
currently like
abstract then you don't need
abstract then you don't need
native puffer M just functions as a v en
native puffer M just functions as a v en
or as a normal
en yeah it does it sounds nice right but
en yeah it does it sounds nice right but
you have a base class and it's not just
you have a base class and it's not just
like an abstract
like an abstract
I mean I guess
like you can't even tell it's a freaking
like you can't even tell it's a freaking
abstract you can't even tell it's an
abstract you can't even tell it's an
interface versus uh a base class or
interface versus uh a base class or
whatever with puffer
anyways you also need this joint space
anyways you also need this joint space
and [ __ ] though it's not just dependency
and [ __ ] though it's not just dependency
l
I might go try it I might go add this
I might go try it I might go add this
stuff into the base and then see if it's
stuff into the base and then see if it's
better or not let me use a rest from
better or not let me use a rest from
real quick I'll be right back and then
real quick I'll be right back and then
uh I will
uh I will
see what I can do here we're very very
see what I can do here we're very very
close to having like super super clean
close to having like super super clean
simple simple everything in fact I think
simple simple everything in fact I think
it already is with this it can only ever
it already is with this it can only ever
be a little bit
be a little bit
better but I want to think about
better but I want to think about
it cuz then you wouldn't need to have
it cuz then you wouldn't need to have
something called native it would just be
something called native it would just be
native which is nice anyways be right
native which is nice anyways be right
[Music]
back
e
e
e
e
e e
whoops mute button you know what um I
whoops mute button you know what um I
like it and the reason that I like it is
like it and the reason that I like it is
that it's one less
that it's one less
layer and uh it takes
layer and uh it takes
us it's going to allow us once we ditch
us it's going to allow us once we ditch
eventually like gym or petting zoo apis
eventually like gym or petting zoo apis
or whatever to like put everything into
or whatever to like put everything into
that format without like multiple layers
that format without like multiple layers
that have to be maintained separately so
that have to be maintained separately so
it allow us to co-optimize we're going
it allow us to co-optimize we're going
to try it at least initially
is this done variable needed
it's probably not redundant actually
it's probably not redundant actually
this one
isn't self
yeah because this will be really nice
yeah because this will be really nice
it'll be so easy to just strip stuff out
it'll be so easy to just strip stuff out
as I'm done with it
right don't need no MS
yeah you can tell that there's going to
yeah you can tell that there's going to
be less code actually by doing this
right going to take me a second
though for
oh look at this actually
this goes at the
bottom for
okay
this flag as
well these
flags let's just copy him for now
copy this for now
whoops okay
so def in it
greater args and
greater args and
quars I think it's literally just um
you just do like
this
right I think we'll do buff equal
none and then we'll do
oh wait we can have a sign buffers
oh wait we can have a sign buffers
happen right
here if we're going to commit to
here if we're going to commit to
this which is a thing I didn't want to
this which is a thing I didn't want to
do earlier but it's worth it if it makes
it so yeah essentially I ended up
it so yeah essentially I ended up
circling back around to the um the thing
circling back around to the um the thing
I started with
[Music]
[Music]
but I cleaned it up enough along the way
but I cleaned it up enough along the way
that it's no longer too complicated so I
that it's no longer too complicated so I
sort of start I sort of ended up where I
sort of start I sort of ended up where I
started but in a way better in a way
started but in a way better in a way
better
way and actually right we can take this
way and actually right we can take this
assign
assign
buffers this just goes into Puffer
we're going to try this at least I
we're going to try this at least I
really hate
really hate
subclassing but
um I think in this case it's going to
um I think in this case it's going to
give you so
much we'll see if if this in is worth it
much we'll see if if this in is worth it
or not
what's the uh the do
format I'm use this in so
long yeah
API usage eror
yeah API usage
ER
for for
yeah that's gross let's just do it like
this for
properties
Dark Star
Dark Star
quars what about this
okay so this assign
buffers is going to be
buffers is going to be
super
buff what do we think of that
not implemented
error it's kind of dumb that it's
error it's kind of dumb that it's
implemented as a property like that
right yeah
cuz like I don't like
properties unless they're default
properties unless they're default
ones let's just do this
right all the required
properties all our own properties that
properties all our own properties that
we want
it's a like somewhat annoying because
it's a like somewhat annoying because
we'll have to
we'll have to
do the extra checks
right but I think that that'll bite more
right but I think that that'll bite more
devs if I do it the other way
way you see I messed up right here and
way you see I messed up right here and
the API actually told me
has
Adder this I think this will give you a
Adder this I think this will give you a
reasonable error
already self. action space
cutting it down cutting it
down all these self. M things go away
very
very
clean I think that this is one place
clean I think that this is one place
where it makes sense because it's python
where it makes sense because it's python
anyways and you're going to have to have
anyways and you're going to have to have
an interface anyways even though they
an interface anyways even though they
don't
exist yeah so there we
exist yeah so there we
go now this is training
M.D yeah I think you do need
M.D yeah I think you do need
this you do need dun at the moment
just cuz they handle their own resets at
just cuz they handle their own resets at
the
moment not done
reset stop and
reset stop and
close and then we have our async
close and then we have our async
reset or
reset or
send and R
receive I don't know if these are
receive I don't know if these are
correct though wait are
correct though wait are
they don't we need to change the flags
they don't we need to change the flags
around a bit
and
pre-check H we're not going to be able
pre-check H we're not going to be able
to do these which is obnoxious
do we'll have to figure out a way to get
do we'll have to figure out a way to get
these into native
yeah that's kind of
rough
lag we don't need this flag
anymore take some guard rails off though
anymore take some guard rails off though
is
annoying little
faster maybe maybe
not 85 lines
not 85 lines
it's not bad it's not
bad this is the price that we got to pay
bad this is the price that we got to pay
in order to have um full native V
in order to have um full native V
like I think it's a good
price this is solid progress um I'm
price this is solid progress um I'm
trying to think how much more stuff I
trying to think how much more stuff I
want to do I do need to go get a
want to do I do need to go get a
shake if I want to have any chance of
yeah let me think what order I want to
yeah let me think what order I want to
do stuff
in okay you know what I think I'm going
in okay you know what I think I'm going
to do I'm going to go get a shake I'm
to do I'm going to go get a shake I'm
going to spend just a little bit more
going to spend just a little bit more
time and I'm going to try to actually
time and I'm going to try to actually
get this pong M to
get this pong M to
train um and that's going to be the the
train um and that's going to be the the
main goal for today I'll be right
main goal for today I'll be right
[Music]
back
e
e
e
e
e
e
e
e
e e
all
right goal is get pong M
right goal is get pong M
training with the nice new fancy
training with the nice new fancy
format and then that'll be it for the
format and then that'll be it for the
stream then I can get other stuff done
right
let me figure out what I want to do with
let me figure out what I want to do with
this
okay so we
okay so we
have
have
M's
um
M's do I just change this to 4096 is
M's do I just change this to 4096 is
that what we do
H and you can literally run it
H and you can literally run it
synchronous if you want can't
synchronous if you want can't
you that's
you that's
funny because it's just so stupidly fast
funny because it's just so stupidly fast
you literally don't even need to do to
you literally don't even need to do to
do anything anything
right one
right one
one we
do
do
[Music]
[Music]
64k this
16 380,000
it being mostly zero is probably a
it being mostly zero is probably a
factor of um hold
on for
now the reports are going to be very
infrequent it only logs full games
yeah and you're running so many parallel
yeah and you're running so many parallel
Ms that
like let me think how I want to do
like let me think how I want to do
that well also hold on the length is is
that well also hold on the length is is
screwy as well
right game length is screwy
maybe just no games are
finishing the episode length would have
finishing the episode length would have
to actually be longer right
episode length is going to have to be
longer let's just add some print TS
longer let's just add some print TS
right
oh so length
score
score
huh is not scoring any
points for
so here you can
so here you can
see we do actually have the
see we do actually have the
uh the score increment
here and you have the add
here and you have the add
log before
reset and the Aggregate and clear
well just for now let's do something
well just for now let's do something
about
about
this we'll just do um
oops redo the setup
okay so this is just not reporting
okay so this is just not reporting
correctly
divide equals
oops okay so now we're seeing log here
oops okay so now we're seeing log here
00 0 right
plus
equal something's weird
here well if I go up
here oops we do set
up okay you can see we got big numbers
right e
is this just like float division
[ __ ] oh no I'm just stupid as what
[ __ ] oh no I'm just stupid as what
this
is this shouldn't be a
is this shouldn't be a
loop right
yeah there we go
clo not implemented
clo not implemented
we'll fix
that initially
though 48
environments 32
let's just try this
amusingly you go all the way down to
amusingly you go all the way down to
18,000 steps per
18,000 steps per
second with the garbage batch
size bottleneck almost entirely on
size bottleneck almost entirely on
forward and misprocessing as well you
forward and misprocessing as well you
what's up back home can go over go oh
what's up back home can go over go oh
yeah cool want me to make a PR Str bath
yeah cool want me to make a PR Str bath
was logging game
was logging game
endings yeah go ahead uh make a PR I'm
endings yeah go ahead uh make a PR I'm
finishing up this stream and then I got
finishing up this stream and then I got
one or two quick things to do and then I
one or two quick things to do and then I
will hop on voice to fix that uh I have
will hop on voice to fix that uh I have
really cool updates
really cool updates
actually I'll show you real quick uh let
actually I'll show you real quick uh let
me undo this mess
so this is what the python bindings for
so this is what the python bindings for
Pong look like after
cleanup this is the whole pong binding
cleanup this is the whole pong binding
in
Python see how much less boiler plate
Python see how much less boiler plate
there is it's like a third the length it
there is it's like a third the length it
was before
it's also a native format so this
it's also a native format so this
actually you can use this as a v EnV as
actually you can use this as a v EnV as
well without using anything
well without using anything
else so for ridiculously fast
else so for ridiculously fast
environments you can literally cut out
environments you can literally cut out
you know another layer of the stack
you know another layer of the stack
another thousand lines of
another thousand lines of
code I'm pretty sure the whole pong like
code I'm pretty sure the whole pong like
the whole end to end of pong running
the whole end to end of pong running
with the whole including the
with the whole including the
implementation uh under this version is
implementation uh under this version is
less than 2,000
lines it's not gotten a single point
did you ever figure out
did you ever figure out
Boolean uh yeah it's obnoxious what you
Boolean uh yeah it's obnoxious what you
do is you use a Boolean from python side
do is you use a Boolean from python side
and uh then you just cast it to well to
and uh then you just cast it to well to
be fair I don't know that could be the
be fair I don't know that could be the
reason it's not training now but I think
reason it's not training now but I think
you can just cast to unsign char in
you can just cast to unsign char in
scyon and C but you definitely don't
scyon and C but you definitely don't
want to do there's some other ways that
want to do there's some other ways that
are definitely wrong that I
are definitely wrong that I
found for
work on PR 3x to speed with some items
work on PR 3x to speed with some items
we can okay great yeah
we can okay great yeah
what's current speed I think pretty much
what's current speed I think pretty much
anything should be able to get to a
million this is running on my local
million this is running on my local
desktop otherwise this would be at
desktop otherwise this would be at
around a
million unfortunately we can't test that
million unfortunately we can't test that
for a few days because
for a few days because
um uh puffer boxes are in um storm surge
um uh puffer boxes are in um storm surge
mode we'll get you access ACC to one
mode we'll get you access ACC to one
once they're back up
once they're back up
though as you've been you know doing all
though as you've been you know doing all
this stuff and you could probably use a
this stuff and you could probably use a
test box once in a while
300K 90k on 18 by
300K 90k on 18 by
18 getting wrecked
with how I Implement checking legal
moves oh
moves oh
I'll look at that with you no
I'll look at that with you no
worries yeah I'll look at that with
you yeah this is not
learning let me see if it's actually
learning let me see if it's actually
getting the observation data
that's training speed not M speed
well you should check your um your M
well you should check your um your M
Speed then right to see where you're
Speed then right to see where you're
like are you getting bottlenecked by m
like are you getting bottlenecked by m
or is the m
fast that's a key
distinction definitely key distinction
so this did actually go up a
bit you can't really tell though it
bit you can't really tell though it
could just be
random get rid of track
well that's
something I a i found it
one to two
one to two
mil
mil
checking well when you try to get to 2
checking well when you try to get to 2
mil you're going to get bottlenecked by
mil you're going to get bottlenecked by
a Cuda transfer
bandwidth so you're not just going to
bandwidth so you're not just going to
scale infinitely like that oh msps
scale infinitely like that oh msps
though yeah yeah yeah
yeah you should get a you should get a
yeah you should get a you should get a
profile on M though if you have time
profile on M though if you have time
right now before I finish This and like
right now before I finish This and like
I'm it's going to take me like 20
I'm it's going to take me like 20
minutes as well to get the other stuff
minutes as well to get the other stuff
after this but um before I get to the
after this but um before I get to the
gym and I can chat with stuff but
um I think I just found the error in
this e
we'll figure out if there's a better
we'll figure out if there's a better
better way to do this
cast uh on running test
cast uh on running test
performance 650k
performance 650k
9x9 possibly we can make that faster
9x9 possibly we can make that faster
with uh I'm assuming you haven't put the
with uh I'm assuming you haven't put the
loops into C
yet which is what I this is by the way
yet which is what I this is by the way
this is what you're looking at is the
this is what you're looking at is the
loops in C or scon really um you see how
loops in C or scon really um you see how
I have the MS allocated in in a
I have the MS allocated in in a
scon right in a
scon right in a
buffer that'll help you with um you're
buffer that'll help you with um you're
going to get hammered otherwise by the
going to get hammered otherwise by the
the python Loop speed
but it could just be the the checks
but it could just be the the checks
we'll look at it
ah there we go
just wasn't doing uh handling
just wasn't doing uh handling
observations correctly we'll see if it
observations correctly we'll see if it
actually trains now or if it's just like
actually trains now or if it's just like
better
better
failure remains to be seen
y
kind of suspicious it hasn't figured out
kind of suspicious it hasn't figured out
how to score a point yet
has been training for plenty of
time there's some type of deficiency
R
skip could be the actions Maybe
actions look
good maybe we'll just have to view the
good maybe we'll just have to view the
model
still
learning oh there it is it got a
point pong is usually a hard takeoff
point pong is usually a hard takeoff
environment
environment
hopefully it does something decent by
hopefully it does something decent by
the time uh it finishes training here
definitely can learn
though it's crashing back down
we'll take a look at the policy maybe
we'll take a look at the policy maybe
real
quick oh look at that
it's running the
eval close not implemented it should
eval close not implemented it should
have saved though
oo look at this
here's our uh here is our
here's our uh here is our
policy it's not great but it's
policy it's not great but it's
definitely learned
definitely learned
something way better than
random
oh I think I might still be slightly
oh I think I might still be slightly
better than it
better than it
without having done any sweep or
anything but cool we'll be able to do a
anything but cool we'll be able to do a
sweep on
sweep on
this and we'll be able to have this
this and we'll be able to have this
solved and that'll be our nice first
solved and that'll be our nice first
test
test
end uh I don't like the weird CPS in the
end uh I don't like the weird CPS in the
pong file but that's a very minor and
pong file but that's a very minor and
easy to fix
easy to fix
thing you know we're going to do one
thing you know we're going to do one
last thing right
last thing right
now because uh because I feel like
it it's really surprising how slowly I
it it's really surprising how slowly I
actually ran those 10minute miles what
actually ran those 10minute miles what
did I honestly my train pace is is often
did I honestly my train pace is is often
slower than 10 minutes
I run slow
where's the
where's the
uh oh we don't have the graphic do
uh oh we don't have the graphic do
we we need the puffer I was going to
we we need the puffer I was going to
make the ball the puffer but uh I think
make the ball the puffer but uh I think
we'll wait on
we'll wait on
that uh yeah bet you're just in time for
that uh yeah bet you're just in time for
we got the thing to train somewhat at
we got the thing to train somewhat at
least initially um so we have it mostly
least initially um so we have it mostly
fixed it needs a hyper Prem sweep
fixed it needs a hyper Prem sweep
everything's good and
everything's good and
clean and um I'm I'm going to take like
clean and um I'm I'm going to take like
20 minutes to do a couple
things default
things default
Veen uh
Native Native
yeah it's literally just um poer lib
yeah it's literally just um poer lib
environment this is
environment this is
it but why what
oh we did yeah yeah yeah but like what
oh we did yeah yeah yeah but like what
I'm saying is puffer m is the native
I'm saying is puffer m is the native
format
now so you you cut a
now so you you cut a
layer you don't need a wrapper called
layer you don't need a wrapper called
native it is just native
yeah so it's this is the whole
yeah so it's this is the whole
thing it's not
bad there are a couple things to fix
bad there are a couple things to fix
with it but it's generally pretty
with it but it's generally pretty
nice and uh the pong M trains as well
all right what I'm going to do now is um
all right what I'm going to do now is um
I'm going to go take probably 20 minutes
I'm going to go take probably 20 minutes
to do a couple things and then I'm going
to do a couple things and then I'm going
to uh jump onto the Discord voice and
to uh jump onto the Discord voice and
help out with go and any other
help out with go and any other
environments that need uh that need an
environments that need uh that need an
eye on so for folks watching that's on
eye on so for folks watching that's on
discord.gg puffer if you want to hop in
discord.gg puffer if you want to hop in
and check that out and
and check that out and
otherwise you can support my work for
otherwise you can support my work for
free by starring the puffer helps me out
free by starring the puffer helps me out
a
a
ton other than that good progress today
ton other than that good progress today
um short hours but good progress on VE
um short hours but good progress on VE
that was like a tricky bit of
