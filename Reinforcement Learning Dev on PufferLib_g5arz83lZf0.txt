Kind: captions
Language: en
Good
Good
morning. We're back live
here. Little bit of a late start
here. Little bit of a late start
today. It is pouring rain
today. It is pouring rain
outside. Kind of just a sleepy
day. I think what we're going to do is
day. I think what we're going to do is
we're going to look at the experiments
we're going to look at the experiments
from last night. They seem to have done
from last night. They seem to have done
pretty well.
pretty well.
And then we're probably going to just do
And then we're probably going to just do
some work on
some work on
terraform. Probably a good thing to do
terraform. Probably a good thing to do
today.
So we have a uh a good number
So we have a uh a good number
of the results.
got
got
pawn got
breakout. Now, it is moderately annoying
breakout. Now, it is moderately annoying
to me that um
to me that um
We don't get a full 200
experiments because of the way that
experiments because of the way that
um protein sampling takes quite a
while. Think if there's any easy way to
while. Think if there's any easy way to
like improve
that. There really isn't.
You kind of just need
You kind of just need
um like the uh the data set just kind of
um like the uh the data set just kind of
grows a
bunch.
Our current solve
is 24
seconds. Thank you, Captain. My
bad. I don't know. I get I just have
bad. I don't know. I get I just have
days where I'm just like off, you know?
days where I'm just like off, you know?
Feel like kind of tired, not super
focused. Pong definitely worked very
focused. Pong definitely worked very
well. Look at
well. Look at
this. The pong we solve in 3 seconds.
Then this uh this breakout sweep for
Then this uh this breakout sweep for
some reason we don't quite get the sub20
some reason we don't quite get the sub20
with this
with this
one. How are you able to get that fast?
one. How are you able to get that fast?
Protein new algorithm frame
Protein new algorithm frame
skip and we can look at
it. I mean, this is just like all the
it. I mean, this is just like all the
like all the new
like all the new
advancements from uh 3
advancements from uh 3
0 stuck onto this like Okay, here. This
0 stuck onto this like Okay, here. This
is a 3 second solve, right? I like this
is a 3 second solve, right? I like this
one. This one's pretty consistent.
Um, time
steps. Time steps for score maybe.
Oh, this is funny. So, it's actually at
Oh, this is funny. So, it's actually at
min total time steps, meaning that this
min total time steps, meaning that this
could have been even potentially
could have been even potentially
lower cuz it doesn't let you train for
lower cuz it doesn't let you train for
less than uh 10
less than uh 10
million. So, possibly we could get two
seconds. Hang on, I got somebody at the
seconds. Hang on, I got somebody at the
door.
Okay. All I really want to do right now
Okay. All I really want to do right now
with these
with these
experiments is
experiments is
um pick two new
um pick two new
environments to run sweeps on.
Let's do
um
um
enduro and uh triple
enduro and uh triple
triad be
good. Enduro and
Moa. Moa might be
good. Yeah, we'll do
good. Yeah, we'll do
Moa. MOA is actually really easy as the
Moa. MOA is actually really easy as the
thing because
thing because
like the opponents aren't very good. So,
like the opponents aren't very good. So,
all you have to do is learn how to run
all you have to do is learn how to run
it
down and like press your buttons.
It's still cool
though. I don't know, man. The main
though. I don't know, man. The main
limitation I have in dev at the moment
limitation I have in dev at the moment
is just
is just
like I get really really good dev days
like I get really really good dev days
and I need some rest.
and I need some rest.
So, I have a slow start of the
So, I have a slow start of the
week is fine. We got that crazy bug
week is fine. We got that crazy bug
fixed on Monday. I had like 14 hour
fixed on Monday. I had like 14 hour
stream on Sunday. Fixed a few things
stream on Sunday. Fixed a few things
yesterday. Going to be a few days before
yesterday. Going to be a few days before
I'm fully recharged to like hammer out a
I'm fully recharged to like hammer out a
new sim or
whatever. Multi-agent training. Oh yeah,
whatever. Multi-agent training. Oh yeah,
selfplay
selfplay
stuff little harder, but we can I don't
stuff little harder, but we can I don't
think I would want to start on that for
think I would want to start on that for
like competitive selfplay. I think I'd
like competitive selfplay. I think I'd
want to make again like if you want to
want to make again like if you want to
do science side work with us, we have
do science side work with us, we have
ways to do this. They're like very
ways to do this. They're like very
intentional ways we can set it up now. I
intentional ways we can set it up now. I
basically I think I have the formula to
basically I think I have the formula to
smash pretty much any individual area of
smash pretty much any individual area of
research we focus on.
research we focus on.
Um it just takes like some end work and
Um it just takes like some end work and
such. I think it's not burnout. Yeah, I
such. I think it's not burnout. Yeah, I
try to figure out how to get like more
try to figure out how to get like more
consistently productive days out of
consistently productive days out of
myself. You know, they're things that
myself. You know, they're things that
help. Good sleep, good exercise, good
help. Good sleep, good exercise, good
diet, which I'm doing pretty much all of
uh and ultimately can only be at uh peak
uh and ultimately can only be at uh peak
performance so much of the
performance so much of the
time. I think what we're going to do
time. I think what we're going to do
today is try to get
today is try to get
the just get like some new experiments
the just get like some new experiments
running so we like keep making progress
running so we like keep making progress
on that. Uh the new machines are delayed
on that. Uh the new machines are delayed
unfortunately to Monday, not Friday,
unfortunately to Monday, not Friday,
which kind of
which kind of
sucks. So uh I think we're going to work
sucks. So uh I think we're going to work
on just Terraform and stuff in the
on just Terraform and stuff in the
meantime. We're just kind of like do
meantime. We're just kind of like do
some chill sim
dev. So this reward for tower is this is
dev. So this reward for tower is this is
getting clipped anyways.
No.
really simple new M. Yeah. I
really simple new M. Yeah. I
mean, I can tell you exactly how we do
mean, I can tell you exactly how we do
this, right? So, like we build an M to
this, right? So, like we build an M to
specifically just test out the dynamics
specifically just test out the dynamics
of like competitive play. We build like
of like competitive play. We build like
the simplest possible test case. And by
the simplest possible test case. And by
the way, this was a really bad idea
the way, this was a really bad idea
before Puffer. Um because like pretty
before Puffer. Um because like pretty
much like getting RL working on a a
much like getting RL working on a a
simple or hard end had a fixed cost to
simple or hard end had a fixed cost to
it where like you would just have to
it where like you would just have to
fiddle with things with for a certain
fiddle with things with for a certain
number of weeks. Uh but now because
number of weeks. Uh but now because
Puffer is like so consistent and
Puffer is like so consistent and
reliable like we can probably just knock
reliable like we can probably just knock
out a couple simple tests to figure out
out a couple simple tests to figure out
dynamics of selfplay and such and go
dynamics of selfplay and such and go
from there.
from there.
Like you literally all you need is you
Like you literally all you need is you
need some sort of game that has uh an
need some sort of game that has uh an
ELO curve of some
variety like where like it is possible
variety like where like it is possible
to get better and better at
it and you also the actions have to be
it and you also the actions have to be
somehow dependent on your opponent as
somehow dependent on your opponent as
well. It can't be like you just ignore
well. It can't be like you just ignore
your opponent.
I mean, heck, connect four, which we
I mean, heck, connect four, which we
already have, would work,
right? Has an easier action space as
right? Has an easier action space as
well.
Pong would be dead simplest. Yeah. So,
Pong would be dead simplest. Yeah. So,
pong. The thing is I think there's a
pong. The thing is I think there's a
pretty low skill floor to
pretty low skill floor to
Pong. You ideally want something with a
Pong. You ideally want something with a
higher skill
ceiling. Actually, like the Robbo Code M
ceiling. Actually, like the Robbo Code M
uh that Toina was like trying to finish
uh that Toina was like trying to finish
would be a good one. There are a lot of
would be a good one. There are a lot of
things you could do.
things you could do.
But pretty much you just build a simple
But pretty much you just build a simple
end like that to
end like that to
test. You build something ideally that
test. You build something ideally that
has like a good scripted bot as well
has like a good scripted bot as well
with it, right? So like the scripted
with it, right? So like the scripted
bots actually good. You pick an end
bots actually good. You pick an end
where it's easy to do that. And then you
where it's easy to do that. And then you
compare training versus scripted bot to
compare training versus scripted bot to
like training versus uh
like training versus uh
selfplay and you make it really
selfplay and you make it really
fast. You just smash all this stuff very
fast. You just smash all this stuff very
easy.
8,000 100
8,000 100
m per core.
How good is connect for scripted bot?
How good is connect for scripted bot?
Not great. It's very hard to make like
Not great. It's very hard to make like
good searchbased
good searchbased
bots cuz they're slow.
Like the easiest the easiest way frankly
Like the easiest the easiest way frankly
is um like hidden information games are
is um like hidden information games are
usually the easiest one to make bots for
usually the easiest one to make bots for
because you can just cheat by having
because you can just cheat by having
full
full
information. I'd have to think about it
information. I'd have to think about it
for a bit, but I would be able to come
for a bit, but I would be able to come
up with something like no problem. Or
up with something like no problem. Or
you can,
right? There are all sorts of like like
right? There are all sorts of like like
new M and such that I want to build.
new M and such that I want to build.
It's just a matter of getting 3 0 out,
It's just a matter of getting 3 0 out,
getting
getting
myself rested. The the last few weeks of
myself rested. The the last few weeks of
like the last several weeks of 3, it's
like the last several weeks of 3, it's
just been a lot of grind on all this
just been a lot of grind on all this
fiddly bits.
do 60. Okay.
Now see this is the annoying bet.
128. Do one. We do it this
way. Yeah, that works. Yeah. So, as long
way. Yeah, that works. Yeah. So, as long
as we keep the agents a multiple of 128,
as we keep the agents a multiple of 128,
it's
fine. I'm actually curious if this just
fine. I'm actually curious if this just
trains
I can see that they're leveling radiant
I can see that they're leveling radiant
levels going
up and there's Perf going
up and there's Perf going
up and it is solved in 30 million
up and it is solved in 30 million
steps. So, this will be a super easy
steps. So, this will be a super easy
sweep, I'm sure.
This one will be actually an interesting
This one will be actually an interesting
sort of a test.
We'll do a max
We'll do a max
of 400
of 400
mil in of 200 No.
That'll be fine.
Ah, so this is what died. This died
Ah, so this is what died. This died
because of an internet outage.
did not help. So, we'll ignore this
have a good morning. Little bit of a
have a good morning. Little bit of a
slow start today, Tyler, but we're doing
slow start today, Tyler, but we're doing
well. You defend this week, right? You
said that's one terminal.
And we have the second terminal
here tomorrow. Good luck,
here tomorrow. Good luck,
man. Get some rest. Go over
man. Get some rest. Go over
everything. Presumably like done the
everything. Presumably like done the
thing yourself. Like you've done you
thing yourself. Like you've done you
could gone through the presentation out
could gone through the presentation out
loud a ton of times.
loud a ton of times.
Best thing I can say from my defense
Best thing I can say from my defense
is I mean like I went like I gave that
is I mean like I went like I gave that
presentation to myself probably like at
presentation to myself probably like at
least 50 maybe even 100
least 50 maybe even 100
times before I gave uh my the defense. I
times before I gave uh my the defense. I
put no effort into the manuscript
put no effort into the manuscript
whatsoever. Like the manuscript is just
whatsoever. Like the manuscript is just
all my papers stapled together with like
all my papers stapled together with like
some whatever you know filler in between
some whatever you know filler in between
the sections. Um I did write a decent
the sections. Um I did write a decent
like intro conclusion. That's it.
like intro conclusion. That's it.
Um, but yeah, I put a lot of effort into
Um, but yeah, I put a lot of effort into
the defense itself. It was
the defense itself. It was
good. If you can get it videoed and
good. If you can get it videoed and
stick it online, it's a good
stick it online, it's a good
idea. Not one yet. Jesus, do that,
idea. Not one yet. Jesus, do that,
man. Yeah. Just like I would, what I
man. Yeah. Just like I would, what I
would do is I would just I would spend
would do is I would just I would spend
all day just giving it out loud in your
all day just giving it out loud in your
room to yourself. That is it. Can't
room to yourself. That is it. Can't
record? That's
record? That's
okay. But yeah, the delivery of the
okay. But yeah, the delivery of the
thing is honestly the most important
thing is honestly the most important
part. Like a lot of my slides were just
part. Like a lot of my slides were just
random images from like earlier papers
random images from like earlier papers
just pasted on without like any even
just pasted on without like any even
real editing. It was I put all the
real editing. It was I put all the
effort pretty much into the delivery and
effort pretty much into the delivery and
the flow of it.
I would like not even care if you have
I would like not even care if you have
like I would spend no more time on
like I would spend no more time on
polishing slides and I would just focus
polishing slides and I would just focus
on delivery. That's the most important
on delivery. That's the most important
thing. on my two cents.
Yeah, I mean like I didn't leave this
Yeah, I mean like I didn't leave this
out or I didn't like I didn't do this or
out or I didn't like I didn't do this or
what. Like the most important thing is
what. Like the most important thing is
that the core of what you're doing is
that the core of what you're doing is
well delivered and
flows. That's all I can say.
Okay, so we've got now I will monitor
Okay, so we've got now I will monitor
these throughout the day. We've got our
these throughout the day. We've got our
next two sweeps
going. I uh actually I think 300 I can
going. I uh actually I think 300 I can
rebuild real quick,
rebuild real quick,
right? Yeah, I can rebuild 300 real
right? Yeah, I can rebuild 300 real
quick. I mean, not throw, the the box
three. That'll get us one more
experiment. I feel pretty confident in
experiment. I feel pretty confident in
my presentation skill. You can look at
my presentation skill. You can look at
my thesis, def delivery, and you can
my thesis, def delivery, and you can
decide whether you think that that was
decide whether you think that that was
well delivered or not. Did pretty well
well delivered or not. Did pretty well
on YouTube.
on YouTube.
Um, it doesn't come naturally to almost
Um, it doesn't come naturally to almost
anyone. I will say like I know I don't
anyone. I will say like I know I don't
really know anyone who can give an
really know anyone who can give an
actually good presentation
actually good presentation
unrehearsed. It's very very rare. Like
unrehearsed. It's very very rare. Like
you basically have to be a businessman
you basically have to be a businessman
who just gives presentations all day and
who just gives presentations all day and
then it's like it's not even that you're
then it's like it's not even that you're
natural, it's that you're so well
natural, it's that you're so well
practiced.
Um, so
Yeah. Five years. Yeah. Well, the thing
Yeah. Five years. Yeah. Well, the thing
is so am I, but it atrophies. Like you
is so am I, but it atrophies. Like you
see the way that I talk on stream is
see the way that I talk on stream is
nowhere near as polished as when I was
nowhere near as polished as when I was
giving like conference talks and things.
giving like conference talks and things.
It's just it atrophies, right? I'm here.
It's just it atrophies, right? I'm here.
I don't talk to almost anyone throughout
I don't talk to almost anyone throughout
the day. It's actually one of the
the day. It's actually one of the
reasons I started streaming is at least
reasons I started streaming is at least
I narrate my thoughts in some sort of
I narrate my thoughts in some sort of
coherent manner, you know, and that
coherent manner, you know, and that
helps a lot. But
helps a lot. But
um yeah, it's mainly just it's you need
um yeah, it's mainly just it's you need
the reps. You just need the reps on
it. And I mean like I am somebody who
it. And I mean like I am somebody who
has actually put substantial effort into
has actually put substantial effort into
getting better at giving presentations
getting better at giving presentations
specifically, right? A lot of people
specifically, right? A lot of people
it's kind of just like you know waved
it's kind of just like you know waved
aside. I actually did I didn't get focus
aside. I actually did I didn't get focus
on getting better at writing papers at
on getting better at writing papers at
all. My papers suck. Like it's not that
all. My papers suck. Like it's not that
they suck. Like I can't write good
they suck. Like I can't write good
papers. I can't write good academic
papers. I can't write good academic
papers because I hate the style of them
papers because I hate the style of them
and I just never put the effort into
and I just never put the effort into
like getting that style done the way
like getting that style done the way
that it's expected. But um presentations
that it's expected. But um presentations
I actually did put effort into and it
I actually did put effort into and it
takes freaking effort. Like I don't
takes freaking effort. Like I don't
think still today I could not just put a
think still today I could not just put a
presentation together, not rehearse it.
presentation together, not rehearse it.
Like even if I spent a 100 hours on the
Like even if I spent a 100 hours on the
slides, like I still wouldn't have it be
slides, like I still wouldn't have it be
the way I would want it to be without
the way I would want it to be without
having gone through it a ton a ton of
having gone through it a ton a ton of
times.
I don't want to wipe this box yet.
Yeah, I don't want to actually wipe this
Yeah, I don't want to actually wipe this
just yet
just yet
because I don't have to to be fair.
Uh, I'll leave this one for now. I'll
Uh, I'll leave this one for now. I'll
leave this one for now. Just go. I'm
leave this one for now. Just go. I'm
going to not mess that up. I'm going to
going to not mess that up. I'm going to
go just work on terraform.
Okay, I think what I want to do for
Okay, I think what I want to do for
this
dozer is
dozer is
load and we have capacity.
Go to the step function.
Can do
scoop. Let me just
scoop. Let me just
Don't like the way that I've done
this.
this.
Three three actions.
[Music]
Three. Oh.
Okay. So what we do
here this is fine.
Okay. So, we have to load the dozer by
Okay. So, we have to load the dozer by
one unit, I believe.
Okay. So, this is don't
overload. Okay. So, that loads the
overload. Okay. So, that loads the
bucket.
Uh, this one is a lot easier, I believe.
Can't make it
over. Okay. So, we unload the dozer like
over. Okay. So, we unload the dozer like
this.
Now we got to do the rewards.
target height as well.
Get the target map going in here.
going to be an initial target map. Make
going to be an initial target map. Make
it five
it five
height. Hey
height. Hey
bet, we're doing a terraformer.
Man, it's annoying.
Man, it's annoying.
Like, it's like kind of like a sleepy,
Like, it's like kind of like a sleepy,
rainy day. And the way that I would get
rainy day. And the way that I would get
myself, you know, really energized
myself, you know, really energized
normally would be to go for like a hard
normally would be to go for like a hard
run or something, but I got this screwy
run or something, but I got this screwy
knee, so like I can't even I got to be
knee, so like I can't even I got to be
really careful with all my lower body
really careful with all my lower body
training. I can't even do a push press,
training. I can't even do a push press,
which sucks. Like I got half the
which sucks. Like I got half the
equipment in the back is for doing that.
equipment in the back is for doing that.
And I can't even do that
lift. Speaking of which, let me at least
lift. Speaking of which, let me at least
get my shoulder training in.
limp. Well, to be
limp. Well, to be
fair, even when I'm not injured, I'm
fair, even when I'm not injured, I'm
usually limping from uh just being sore
usually limping from uh just being sore
from training.
Divide this
by
by
this. Never heard of Pip hanging on
this. Never heard of Pip hanging on
puffer
puffer
box. Uh, I don't know. I haven't heard
box. Uh, I don't know. I haven't heard
from
from
him. Oh, wait. No, I have. Let me see if
he's Let me ask him.
paper. This isn't
paper. This isn't
it. Where the heck is
it. Where the heck is
it? This
really high latency and booted me. Uh,
really high latency and booted me. Uh,
there was one internet disconnect. We
there was one internet disconnect. We
were switching over a network
thing. It should have only been a minute
thing. It should have only been a minute
or
or
two. I
two. I
said we got Enduro running a sweep, by
said we got Enduro running a sweep, by
the way.
the way.
Nice
environment. There we
environment. There we
are. You got
are. You got
uh the
enduro. That looks pretty good.
enduro. That looks pretty good.
We have here
We have here
a two-day completed
a two-day completed
in or three days completed almost in 200
mil. I actually don't know. The sweeps
mil. I actually don't know. The sweeps
are going to be a little bit weird with
are going to be a little bit weird with
Enduro, right? Because like even if you
Enduro, right? Because like even if you
have a perfect policy, like the game
have a perfect policy, like the game
just takes a very long time to play. So,
just takes a very long time to play. So,
I imagine that like for any fixed budget
I imagine that like for any fixed budget
of steps, you're probably going to get a
of steps, you're probably going to get a
um you're going to get like slow hypers
um you're going to get like slow hypers
would be my
guess
depending. But then there's the score on
depending. But then there's the score on
this. I mean, this is ridiculous. This
this. I mean, this is ridiculous. This
is Is this one
is Is this one
E? I think it just solves in Yeah, this
E? I think it just solves in Yeah, this
literally solves in
literally solves in
uh in like 10 million steps. Not
even. The MOA is not going to need a
even. The MOA is not going to need a
full
full
sweep. Takes four minutes. Yeah, but how
sweep. Takes four minutes. Yeah, but how
many steps is that? Because like you
many steps is that? Because like you
have to multiply the number of steps by
have to multiply the number of steps by
the number of N's and that's how many
the number of N's and that's how many
samples you need.
samples you need.
with perfect play to complete a
day. Oh yeah, bet. I got a bet sized
day. Oh yeah, bet. I got a bet sized
project for
project for
you. If you're
you. If you're
interested and want some RL clout, I
interested and want some RL clout, I
would want to clear it with this guy
would want to clear it with this guy
first.
But
But
um you probably know this
um you probably know this
name. Where is
he? So this guy here, he just released
he? So this guy here, he just released
this thing. He's uh
this thing. He's uh
He was responsible for a lot of like
He was responsible for a lot of like
early Atari stuff as well. So it's
early Atari stuff as well. So it's
already in
already in
C++. I would have to clear it with him
C++. I would have to clear it with him
like you know get his blessing to do a
like you know get his blessing to do a
port of it. But it looks like very very
port of it. But it looks like very very
simple
simple
code like this is nothing. Where is
code like this is nothing. Where is
it?
Uh yeah. So there's like it's just very
Uh yeah. So there's like it's just very
little stuff in here.
Um, you could probably port this thing
Um, you could probably port this thing
to be like a single line puffer
end and uh get it to go really really
end and uh get it to go really really
fast in
fast in
puffer. If you're interested, let me
puffer. If you're interested, let me
know and I will try to clear it with
know and I will try to clear it with
him.
one line
it was
I figured like I just saw it and I was
I figured like I just saw it and I was
like, "Ah, that's a betsized project."
like, "Ah, that's a betsized project."
you
know, bet that size project meaning like
know, bet that size project meaning like
um it's the type of thing that would
um it's the type of thing that would
probably if I were like, you know,
probably if I were like, you know,
assuming I'm actually having good days,
assuming I'm actually having good days,
it would probably take me like two or
it would probably take me like two or
three days to do um and like it would
three days to do um and like it would
stop before the code gets
unmanageable. Do it in a day. Easy.
I don't know about doing it in a
I don't know about doing it in a
day. That also means having it like
day. That also means having it like
correct in
training. Okay. Vibe coding. Just like
training. Okay. Vibe coding. Just like
prompting a thing to output whatever
prompting a thing to output whatever
does not count. Bet.
What the claw
What the claw
enth? No, I don't
enth? No, I don't
like these things are very
like these things are very
brittle. One shot a puffer enth. I mean,
brittle. One shot a puffer enth. I mean,
I did the target M the other day,
I did the target M the other day,
right? The target M took me like four or
right? The target M took me like four or
five hours, including all the docks and
five hours, including all the docks and
stuff.
Actually we can move we can make this
Actually we can move we can make this
easier. What we can do is we can do
easier. What we can do is we can do
delta
pre and then we can do delta post.
pretty
good. Just issuing a coding
good. Just issuing a coding
challenge. My guy, that's the whole
stream. Yeah. So that's not the issue,
stream. Yeah. So that's not the issue,
right? The issue is that like you have
right? The issue is that like you have
absolutely no way to scale complexity
absolutely no way to scale complexity
because you have no control whatsoever
because you have no control whatsoever
over the output. But like as soon like
over the output. But like as soon like
if that's the problem with trying to
if that's the problem with trying to
vibe code [ __ ] right? Is it's like this
vibe code [ __ ] right? Is it's like this
fuzzy algorithm that just screws with
fuzzy algorithm that just screws with
everything and like you have no control
everything and like you have no control
over the rains really.
Um you can increase the dims of the
Um you can increase the dims of the
grid, right? But when you scale
grid, right? But when you scale
complexity, you just don't know what the
complexity, you just don't know what the
hell it
does. And ultimately, being a shitty
does. And ultimately, being a shitty
manager for a shitty programmer is way
manager for a shitty programmer is way
worse than just being a good programmer
worse than just being a good programmer
in every way.
Spencer's also got stuff on the box
I don't know. Um, I'll be excited about
I don't know. Um, I'll be excited about
LLM's programming when they're actually
LLM's programming when they're actually
good at it.
good at it.
Like, in my mind, what's happened at the
Like, in my mind, what's happened at the
moment is like we've kind of just we've
moment is like we've kind of just we've
made modern software a complete dog [ __ ]
made modern software a complete dog [ __ ]
mess with like layers upon layers of
mess with like layers upon layers of
abstraction to the point that we now
abstraction to the point that we now
teach people how to program in the worst
teach people how to program in the worst
way possible. All modern software is a
way possible. All modern software is a
nightmare and then we kind of just threw
nightmare and then we kind of just threw
up our hands and let like let an LLM do
up our hands and let like let an LLM do
the buggy mess we've created when like
the buggy mess we've created when like
if you actually go back and optimize the
if you actually go back and optimize the
whole stack like software could be a
whole stack like software could be a
thousandx better than it is now 10,000x
thousandx better than it is now 10,000x
better than it is now it's just
better than it is now it's just
hilariously hilariously bad um but LLMs
hilariously hilariously bad um but LLMs
don't do that yet all they do is they do
don't do that yet all they do is they do
the buggy mess version in a way that
the buggy mess version in a way that
humans do faster but a bit worse
humans do faster but a bit worse
Like I'll be impressed when you have LMS
Like I'll be impressed when you have LMS
that actually first principles their
that actually first principles their
reason and go, "Yeah, no, this is a
reason and go, "Yeah, no, this is a
mess." And they actually start
mess." And they actually start
optimizing the
stack. That's what I would find
stack. That's what I would find
exciting.
That's not just a meme. That's like the
That's not just a meme. That's like the
way anything like anything that actually
way anything like anything that actually
works gets
done. Good.
who's doing it like any good programmer.
who's doing it like any good programmer.
What do you think Puffer is
What do you think Puffer is
doing? Tyler is defending tomorrow,
doing? Tyler is defending tomorrow,
Jason. Not public, the
Jason. Not public, the
defense. Um, but yeah, good luck to him.
defense. Um, but yeah, good luck to him.
No, like there are a lot of people who
No, like there are a lot of people who
do this like a lot of the low-level
do this like a lot of the low-level
devs. I mean, like look at like Rayson
devs. I mean, like look at like Rayson
stuff as well. Look at Rayb. Ray is just
stuff as well. Look at Rayb. Ray is just
a fantastic fantastic piece of
software. The kind the tiny guys are
software. The kind the tiny guys are
trying to be fair. They're golfing the
trying to be fair. They're golfing the
[ __ ] out of their code for no reason.
[ __ ] out of their code for no reason.
But um other like if you ignore that
But um other like if you ignore that
then what they're doing is pretty cool.
Well, I mean, the vast majority of
Well, I mean, the vast majority of
things being [ __ ] doesn't mean you can't
things being [ __ ] doesn't mean you can't
make stuff that's
make stuff that's
good. I mean, like, lo and behold,
good. I mean, like, lo and behold,
there's a curve to everything and like,
there's a curve to everything and like,
you know, the exponentially farther out
you know, the exponentially farther out
things are exponentially better.
I mean the best way to learn is to not
I mean the best way to learn is to not
just go with the flow of everything,
right? It is to actually think through
right? It is to actually think through
things from first
principles. That's not a meme. The meme
principles. That's not a meme. The meme
is modern. Like the modern software is a
is modern. Like the modern software is a
meme.
Really getting a floating point error
Really getting a floating point error
and compute puff advantage.
and compute puff advantage.
UDA after I
UDA after I
started converting
started converting
multidiscrete actions to
multidiscrete actions to
continuous. Yeah, that doesn't take
continuous. Yeah, that doesn't take
actions at
actions at
all.
all.
Um, captain, it
Um, captain, it
is Oh, you know what you're probably
is Oh, you know what you're probably
getting? You're probably just getting a
getting? You're probably just getting a
numerical error because continuous
numerical error because continuous
training blows up.
Why are you doing continuous
though? At least for my test. And it
though? At least for my test. And it
could be a bug and puffer, but I don't
could be a bug and puffer, but I don't
think so, cuz like we can repro all the
think so, cuz like we can repro all the
20 stuff in continuous just fine. It
20 stuff in continuous just fine. It
seems like continuous doesn't let you
seems like continuous doesn't let you
use anywhere near as aggressive hyper
prams. Converting
prams. Converting
multi-discreet. But did you con did you
multi-discreet. But did you con did you
change your action space from
change your action space from
multi-discrete to
multi-discrete to
continuous or are you just converting
continuous or are you just converting
them in the
end? You should still discretise the
end? You should still discretise the
action space to multi-discrete for the
policy. Okay, that's correct. So you're
policy. Okay, that's correct. So you're
saying that you started getting but then
saying that you started getting but then
you're saying after I started converting
you're saying after I started converting
converting multi-discrete to continuous
converting multi-discrete to continuous
I don't so you've been doing that the
I don't so you've been doing that the
whole time haven't you like what
whole time haven't you like what
actually
changed bet you can just like stick the
changed bet you can just like stick the
UV install on box one if you got time
UV install on box one if you got time
for
instead of in
C doing it in Python. Now, did you
C doing it in Python. Now, did you
remember to adjust the types like check
remember to adjust the types like check
check the type of the actions buffer and
check the type of the actions buffer and
stuff in Python? check the type and
see cuz like you getting a floating
see cuz like you getting a floating
point of error just is like you're
point of error just is like you're
probably blowing up a loss or something.
probably blowing up a loss or something.
The only way that could
happen. There's this big fat bluebird
happen. There's this big fat bluebird
here that's just sitting on the feeder
here that's just sitting on the feeder
and chasing away every other bird that
and chasing away every other bird that
tries to get to it.
is literally infinite food and this
is literally infinite food and this
[ __ ] won't let anyone else have
it. Modified the size of selfdown
it. Modified the size of selfdown
actions. Yeah. So, you probably just
actions. Yeah. So, you probably just
have a mismatch between Python and
C. Garbage in, garbage out.
multi-iscript as so what
changed fin training on
CPU something weird
Wait, why is this getting cold a second
Wait, why is this getting cold a second
time?
Oh, you
dummy. We'll do, captain. That's half
dummy. We'll do, captain. That's half
the reason I stream.
Hey, can you hear me? Yep. All right,
Hey, can you hear me? Yep. All right,
let me share my screen. I'm probably
let me share my screen. I'm probably
doing Well, no, I don't actually think
doing Well, no, I don't actually think
I'm doing something obviously stupid
I'm doing something obviously stupid
because it works when training on CPU
because it works when training on CPU
for some reason. Here, let me show you
for some reason. Here, let me show you
what I did or what I'm doing so you
understand this bot as well. We'll take
understand this bot as well. We'll take
a look at your bug on the
street. Okay, what do we have here? We
street. Okay, what do we have here? We
have Okay, so yeah, I have basically two
have Okay, so yeah, I have basically two
maps. So yeah, what I'm aiming to do is
maps. So yeah, what I'm aiming to do is
um I'm supporting both continuous and
um I'm supporting both continuous and
multiscreet actions, but for the most
multiscreet actions, but for the most
part I'm just going to be using
part I'm just going to be using
multiscreet actions. Uh and this is the
multiscreet actions. Uh and this is the
way I have multi-discreet just aiming
way I have multi-discreet just aiming
and moving. Um I just have basically x
and moving. Um I just have basically x
and y rolled into one number just to
and y rolled into one number just to
make it easier and faster for
make it easier and faster for
multiscreet.
multiscreet.
Um so yeah, pretty self-explanatory. And
Um so yeah, pretty self-explanatory. And
then I have this map that yeah basically
then I have this map that yeah basically
if you put in like zero that's going to
if you put in like zero that's going to
give you this continuous output you know
give you this continuous output you know
so on pretty simple same for continuous
so on pretty simple same for continuous
aiming I give you 16 aim directions so
aiming I give you 16 aim directions so
that makes sense
that makes sense
right okay so what I'm doing is because
right okay so what I'm doing is because
the shape of this is five for
the shape of this is five for
multi-discretet and continuous is seven
multi-discretet and continuous is seven
because it needs um it really does not
because it needs um it really does not
work well if uh you use a polar
work well if uh you use a polar
coordinate It's for moving or aiming. It
coordinate It's for moving or aiming. It
needs like separate X and Y. So two for
needs like separate X and Y. So two for
move, two for aim, three multi.
move, two for aim, three multi.
Yeah. So if it's if we're
Yeah. So if it's if we're
multi-discrete, I just set the action
multi-discrete, I just set the action
size to be continuous, which is seven,
size to be continuous, which is seven,
which is fine. Wait, where's seven?
which is fine. Wait, where's seven?
It's just this is seven. Why is it
It's just this is seven. Why is it
seven? I just said because um I see five
seven? I just said because um I see five
actions.
actions.
Huh? I see five actions. This is five.
Huh? I see five actions. This is five.
But for moving um or for continuous
But for moving um or for continuous
moving and aiming they're two per. So
moving and aiming they're two per. So
it's X and Y. X and Y because let me see
it's X and Y. X and Y because let me see
how you set this.
how you set this.
Yeah. So I pass the like the first two
Yeah. So I pass the like the first two
or the the yeah the first um integer for
or the the yeah the first um integer for
multi- discrete is just going to be
multi- discrete is just going to be
moving. So I pass that into a continuous
moving. So I pass that into a continuous
action movement and that gives you um
action movement and that gives you um
two out because it's an array of two
two out because it's an array of two
here. Um and then I do the same with
here. Um and then I do the same with
aim. And then the rest I just cast the
aim. And then the rest I just cast the
floats. I concatenate them all. And
floats. I concatenate them all. And
yeah, and I can show you that um in like
yeah, and I can show you that um in like
Python debugger, show you what that
Python debugger, show you what that
looks like if you want.
that floating point exception like can
that floating point exception like can
you put a try except around it or no?
you put a try except around it or no?
I can. Well, the thing is yeah, I mean I
I can. Well, the thing is yeah, I mean I
can
can
it's it's in the CUDA itself. I get it.
it's it's in the CUDA itself. I get it.
Well, I just want to know what the
Well, I just want to know what the
inputs are. You give it names. Yeah.
inputs are. You give it names. Yeah.
Well, that's the weird thing. I'm
Well, that's the weird thing. I'm
printing the actions and maybe I It's
printing the actions and maybe I It's
not the actions. There something well
not the actions. There something well
action doesn't even go into that. Yeah,
action doesn't even go into that. Yeah,
it's got to be something like maybe the
it's got to be something like maybe the
advantages or Yeah. Well, I I would
advantages or Yeah. Well, I I would
suspect that something is going in as
suspect that something is going in as
nan or in for whatever.
I would just go check.
I would just go check.
Yeah, right there.
Yeah, right there.
It's called twice. So,
um I don't know. I'm not sure which one
um I don't know. I'm not sure which one
it's called at. I'll just do both. What
it's called at. I'll just do both. What
does the robustify by the way mean? Make
does the robustify by the way mean? Make
this function more robust.
Okay. Um there's some annoying stuff
Okay. Um there's some annoying stuff
with um kernel strides.
You have to have a multiple of 128
agents. Should print everything, right?
Well, that's going to print tons of
Well, that's going to print tons of
data. I I wanted you to put like a try
data. I I wanted you to put like a try
except around it, but
except around it, but
sure. And it's literally going to print
sure. And it's literally going to print
like millions of elements unless it
like millions of elements unless it
happens instantly. Well, I have it. Uh,
happens instantly. Well, I have it. Uh,
does it happen on first? Running one.
Does this thing happen on like the first
Does this thing happen on like the first
epoch?
epoch?
Pretty much.
Pretty much.
Okay.
like that
basically. I don't know if that'll
basically. I don't know if that'll
work. All
work. All
right. And then where is this called
again? No.
Yeah. Yeah. It doesn't happen in Python.
Yeah. Yeah. It doesn't happen in Python.
So, I can't catch the
So, I can't catch the
exception. Okay.
exception. Okay.
So I
mean like any of you know is nan or
mean like any of you know is nan or
isn't something like that.
So basically just before I call this
So basically just before I call this
check if you've got any nanss or uh I
check if you've got any nanss or uh I
would just go check if you have any
would just go check if you have any
nanss or imps in any of the tensors
nanss or imps in any of the tensors
because that's the most likely frankly.
because that's the most likely frankly.
Yeah I just how would that happen?
Yeah I just how would that happen?
Tons of things
Tons of things
right tons of places for numerical
right tons of places for numerical
instability.
instability.
Is there one that just tells you if it's
Is there one that just tells you if it's
saying or is in
saying or is in
is
is
times just huh is numpy like is in for
times just huh is numpy like is in for
like times numpy is nan right or plus I
like times numpy is nan right or plus I
think it would be plus not times because
think it would be plus not times because
times is
Oh, hey,
Oh, hey,
solar. Print mean and
solar. Print mean and
shape.
shape.
[Music]
[Music]
Uh, I guess mean would give you nan or
Uh, I guess mean would give you nan or
in if there's anything in there, maybe.
It technically doesn't have to be nan.
It technically doesn't have to be nan.
It could be that there's some giant
It could be that there's some giant
value that then when you put it into
value that then when you put it into
that function gets turned into like
that function gets turned into like
nanner in. Right. Well, so what would be
nanner in. Right. Well, so what would be
easier? I'm in this GDB right here and
easier? I'm in this GDB right here and
I' I've broken right where this
I' I've broken right where this
exception happens. Okay. So then you can
exception happens. Okay. So then you can
Well, yeah. Do you I have to print all
Well, yeah. Do you I have to print all
the stuff from there then.
the stuff from there then.
which is
which is
like there's like some data container
like there's like some data container
for this thing, right? Yeah. I don't
for this thing, right? Yeah. I don't
know like the tensor B because is this
know like the tensor B because is this
like C++ technically because yes that's
like C++ technically because yes that's
the torch C++ API with CUDA.
You can see that there's the torch stuff
You can see that there's the torch stuff
in this is painful. The CUDA is actually
in this is painful. The CUDA is actually
really easy and simple. The torch
really easy and simple. The torch
bindings are a pain in the ass.
This is so strange. It's just really
This is so strange. It's just really
weird how this is only happens in uh
weird how this is only happens in uh
Yeah, Cuda's a lot more finicky about
Yeah, Cuda's a lot more finicky about
what it'll blow up on versus what it
what it'll blow up on versus what it
won't. Do you get like nans or anything
won't. Do you get like nans or anything
in on CPU or no? It doesn't seem like
in on CPU or no? It doesn't seem like
it. I don't get any exceptions at least.
it. I don't get any exceptions at least.
Be pretty surprised if we had a
Be pretty surprised if we had a
difference in the implementation. I'm
difference in the implementation. I'm
pretty sure they're just copy pasted.
pretty sure they're just copy pasted.
Look. So I mean you can see like immed
Look. So I mean you can see like immed
pretty much immediately.
pretty much immediately.
Um yeah I print every time I take an
Um yeah I print every time I take an
action. So not even one epoch I get a
action. So not even one epoch I get a
point one one exception. Well you're
point one one exception. Well you're
printing actions though. You're not
printing actions though. You're not
printing the actual tensors going into
printing the actual tensors going into
advantages. I'm just saying like I I do
advantages. I'm just saying like I I do
a couple of steps and consistently I
a couple of steps and consistently I
guess. Yeah. But like it could be that
guess. Yeah. But like it could be that
somehow some other change rooted up and
somehow some other change rooted up and
now you're nanning your other
now you're nanning your other
values pulling some torch into rust.
values pulling some torch into rust.
So the yeah it doesn't matter that it's
So the yeah it doesn't matter that it's
just annoying solar like
just annoying solar like
it's like dealing with the torch API
it's like dealing with the torch API
like stuff is substantially more
like stuff is substantially more
obnoxious than just dealing with CUDA
obnoxious than just dealing with CUDA
and
C. Like the build system was especially
C. Like the build system was especially
a pain in the ass to get the extension
a pain in the ass to get the extension
to build
to build
correctly. It was like they just they
correctly. It was like they just they
have this extensions dur where they just
have this extensions dur where they just
like stick all the extensions and like
like stick all the extensions and like
if you get it right it shows up there.
if you get it right it shows up there.
If it doesn't it just doesn't show up
If it doesn't it just doesn't show up
and you don't know why.
And then like
And then like
also the way they have stuff set up,
also the way they have stuff set up,
it's really difficult to do the way that
it's really difficult to do the way that
their fallbacks work. It's kind of
their fallbacks work. It's kind of
tricky like in Fiddly to register
tricky like in Fiddly to register
fallback functions. Like it's kind of
fallback functions. Like it's kind of
hard to like have a shared
hard to like have a shared
implementation that's like a piece of CC
implementation that's like a piece of CC
code and then have it run in CUDA or run
code and then have it run in CUDA or run
in C++. You kind of just have to copy
in C++. You kind of just have to copy
paste the code the way their includes
paste the code the way their includes
work. Build issues in CNC. That that's
work. Build issues in CNC. That that's
the thing though. It's not like all of
the thing though. It's not like all of
our C and Puffer is so easy. It's like
our C and Puffer is so easy. It's like
the simplest, easiest code. It's great.
the simplest, easiest code. It's great.
I love it. It's like as soon as I have
I love it. It's like as soon as I have
to deal with the Python build system or
to deal with the Python build system or
the torch build system or anybody else's
the torch build system or anybody else's
stuff, that's when things get
stuff, that's when things get
annoying. RC is really
easy. Okay. Yeah. Now, this is weird
easy. Okay. Yeah. Now, this is weird
because I I yesterday I had this
because I I yesterday I had this
training and now when I removed my main
training and now when I removed my main
change, the other changes shouldn't
change, the other changes shouldn't
really do anything. It seems like I'm
really do anything. It seems like I'm
still getting that exception. So, that's
still getting that exception. So, that's
really weird. I'm going to look into
really weird. I'm going to look into
that. Maybe it's not what I thought. I
that. Maybe it's not what I thought. I
had this training yesterday with
had this training yesterday with
basically the same changes.
basically the same changes.
Yeah, there's you know that you know the
Yeah, there's you know that you know the
way to not have include problems while
way to not have include problems while
your code's just in a file somewhere.
your code's just in a file somewhere.
I don't have problems. I don't have
I don't have problems. I don't have
include problems. I just have I was a
include problems. I just have I was a
chat uh chat captain. Oh,
my Here we have Terraform. It's slow and
my Here we have Terraform. It's slow and
we do fast.
fast. I don't know why it has two
fast. I don't know why it has two
windows. Yeah, we got
terraform random
agent. Terraform is a terraforming sim.
agent. Terraform is a terraforming sim.
I'm working on this end. The goal is for
I'm working on this end. The goal is for
the agents to take this landscape and
the agents to take this landscape and
then terraform it into whatever we
then terraform it into whatever we
want. They're like simulated little
want. They're like simulated little
bulldozers.
bulldozers.
what I'm working on. Anyways,
did you start that from scratch at some
did you start that from scratch at some
point? Started it with Spencer two weeks
point? Started it with Spencer two weeks
ago. Oh, nice. I spent like a day on it
ago. Oh, nice. I spent like a day on it
and now I'm like fiddling it. It's
and now I'm like fiddling it. It's
literally This thing has had like maybe
literally This thing has had like maybe
10 hours of total work put into it.
10 hours of total work put into it.
Nice. Like kind of sleepy work at that.
Yeah, that's literally how easy it is to
Yeah, that's literally how easy it is to
get our stuff rebuilt for
get our stuff rebuilt for
um for our training.
I like how this Neptune stuff, it's like
I like how this Neptune stuff, it's like
they have this new pricing and they
they have this new pricing and they
advertise it as being like so much
advertise it as being like so much
faster than their competition and it
faster than their competition and it
still takes 3 seconds to load anything.
Modern software, man.
Modern software, man.
Yeah, I know.
I asked um I got like a brand new like
I asked um I got like a brand new like
like really highspec Razer laptop came
like really highspec Razer laptop came
with Windows 11. It took an hour to
with Windows 11. It took an hour to
install. No, two hours to install
install. No, two hours to install
Windows like to update itself so you
Windows like to update itself so you
could use it. Had like a bunch of
could use it. Had like a bunch of
spyware and garbage on it and then like
spyware and garbage on it and then like
you go to open any application and it
you go to open any application and it
takes like 4 seconds. And then I asked
takes like 4 seconds. And then I asked
my father to do the same on his new Mac
my father to do the same on his new Mac
and it's like three or four seconds to
and it's like three or four seconds to
open an application and they just they
open an application and they just they
make it seem like it's not taking that
make it seem like it's not taking that
long by making the icon bounce but it
long by making the icon bounce but it
still takes three or 4 seconds and it's
still takes three or 4 seconds and it's
like what the hell man. Yeah, at least
like what the hell man. Yeah, at least
on a Windows on Windows stuff I pretty
on a Windows on Windows stuff I pretty
much always just like instantly on my
much always just like instantly on my
new you know it like works instantly.
new you know it like works instantly.
Like what the hell are people doing? And
Like what the hell are people doing? And
this is Chrome, which is not exactly
this is Chrome, which is not exactly
Yeah. IPF software either.
Yeah. IPF software either.
Well, if you're ever buying like any
Well, if you're ever buying like any
kind of Windows laptop, Mac's a little
kind of Windows laptop, Mac's a little
better about this. The first thing you
better about this. The first thing you
should do is like reinstall Windows like
should do is like reinstall Windows like
fresh because yeah, the amount of crap
fresh because yeah, the amount of crap
that you just load on there is
insane. I just have a bunch on
stuff. So, this gets zero reward now,
stuff. So, this gets zero reward now,
which is
which is
interesting. Probably this is
interesting. Probably this is
incorrectly set up.
We get
We get
different there.
Okay, that's so yeah, this isn't doesn't
Okay, that's so yeah, this isn't doesn't
seem to be a bug with my code. It seems
seem to be a bug with my code. It seems
to be a bug with my particular set of
to be a bug with my particular set of
parameters.
parameters.
So if I run in serial with like one M
So if I run in serial with like one M
and a mini batch size of 16 and a M or
and a mini batch size of 16 and a M or
BPPT size of 16, I get the floating
BPPT size of 16, I get the floating
point error. If I run like how I'd
point error. If I run like how I'd
normally run for speed, it's it actually
normally run for speed, it's it actually
is completely fine. Yeah. So like I was
is completely fine. Yeah. So like I was
saying, it's like there's probably
saying, it's like there's probably
something's exploding or whatever. Yeah.
something's exploding or whatever. Yeah.
Which is then giving you a floating
Which is then giving you a floating
point error.
point error.
Okay. Yeah. I was doing that to debug it
Okay. Yeah. I was doing that to debug it
because I've had another error, but
because I've had another error, but
okay, whatever. So, I guess I'm fine
okay, whatever. So, I guess I'm fine
then. Yep.
then. Yep.
Cool. Um, I think I'm ready to just
Cool. Um, I think I'm ready to just
finally PR this then.
finally PR this then.
Awesome. Going to want to get uh the
Awesome. Going to want to get uh the
models training on this. Yeah, you got
models training on this. Yeah, you got
uh I gave you a box, don't you, to like
uh I gave you a box, don't you, to like
run this stuff on?
run this stuff on?
Uh, I should. Yeah. Back online box to
Uh, I should. Yeah. Back online box to
Okay, cool.
Okay, cool.
literally on the shelves behind me. You
literally on the shelves behind me. You
can see a couple of the lights blinking
can see a couple of the lights blinking
in the background.
in the background.
Yeah.
Which it'll go focus on that. I get my
Which it'll go focus on that. I get my
shoulder trading again
All
right, let me make sure these changes
right, let me make sure these changes
are actually
Ah, you
Ah, you
dummy. The problem
Definitely.
Still
zero. Of course.
still zero
still zero
reward. That's screwy.
We're definitely seeing reward
here. Not getting recompiled somehow.
Power climb.
Narmo. I see terraform in
Narmo. I see terraform in
here.
here.
Or there's terraform.
Or there's terraform.
Terraform is getting
compiled. I guess we have to we didn't
compiled. I guess we have to we didn't
add it to end of returns probably.
Yeah, we forgot that.
This should be
This should be
pre delta
post. Got training.
post. Got training.
Uh the bindings accept truncations,
Uh the bindings accept truncations,
right?
right?
Uh I do not have truncation set up. like
Uh I do not have truncation set up. like
it does not actually populate that. Ah,
it does not actually populate that. Ah,
okay. At the moment, we'll leave that in
okay. At the moment, we'll leave that in
then.
Is there a reason? I just haven't done
Is there a reason? I just haven't done
it and I'd have to do it for every.
it and I'd have to do it for every.
Also, I think it's kind of stupid. Like
Also, I think it's kind of stupid. Like
the fact that they did that in the API,
the fact that they did that in the API,
like they split the gymn gym gymnasium
like they split the gymn gym gymnasium
API and added an extra buffer for that,
API and added an extra buffer for that,
I think is kind of lame.
I think is kind of lame.
I think there was a good reason for it.
I think there was a good reason for it.
There was a pedantic academic reason for
There was a pedantic academic reason for
it.
Yeah, it doesn't work for truncations.
Okay. Okay. So, we have episode return
Okay. Okay. So, we have episode return
at
at
2.0, which is interesting that it is
2.0, which is interesting that it is
stuck there. That seems like
stuck there. That seems like
a an indicator of something.
I was able to delete 200 lines of code
I was able to delete 200 lines of code
because I didn't need some stuff
because I didn't need some stuff
anymore. So that's
anymore. So that's
good
overall. Some reason this is stuck at
overall. Some reason this is stuck at
1.0
1.0
O which is equal to
O which is equal to
200 blocks moved I
believe.
Ah, which
is kind of a
is kind of a
suspicious number to be stuck at.
Oh, it's the bucket
capacity. So, it probably like loads all
capacity. So, it probably like loads all
that dirt and then doesn't unload it, I
that dirt and then doesn't unload it, I
would imagine.
wait. So delta
is probably too high.
So, it's just loading the bucket and
So, it's just loading the bucket and
it's refusing to put it down right now
it's refusing to put it down right now
as
well. Still doing it.
the reward wrong or
them. Refusing to unload any dirt.
I should make it human playable.
All right, Joseph. I just made a PR for
All right, Joseph. I just made a PR for
uh Impulse Wars. Note that all the
uh Impulse Wars. Note that all the
bindings work, but it still doesn't
bindings work, but it still doesn't
build. Um, it still requires CMake to
build. Um, it still requires CMake to
build, but all I need to do to get it
build, but all I need to do to get it
not to require CMake is just
not to require CMake is just
uh update our Box 2D um forks to just
uh update our Box 2D um forks to just
build archives. And then after that,
build archives. And then after that,
basically just do the same thing where
basically just do the same thing where
like download the archive and then swat
like download the archive and then swat
it in and build with it. And I tested
it in and build with it. And I tested
with it when I build an archive locally
with it when I build an archive locally
and like tell setup.p PI to mainly load
and like tell setup.p PI to mainly load
it, it works fine without CXO.
it, it works fine without CXO.
What is this?
What is this?
Yeah. So, um, yeah, that allows you that
Yeah. So, um, yeah, that allows you that
kind of solves a problem we were talking
kind of solves a problem we were talking
about. That allows people to just like
about. That allows people to just like
use add whatever methods they want to
use add whatever methods they want to
their own Python module.
their own Python module.
Oh, cool. So, if you want to look at
Oh, cool. So, if you want to look at
binding.c, you'll see how I did it.
binding.c, you'll see how I did it.
I better not see any deck refs in here.
I better not see any deck refs in here.
Nope. If you do, I would be extremely
Nope. If you do, I would be extremely
surprised.
surprised.
I didn't do any of that
crap. Yeah. No LLMs were used in the
crap. Yeah. No LLMs were used in the
making of this. Well, shouldn't say
making of this. Well, shouldn't say
none, but like extremely few. And
none, but like extremely few. And
obviously like I mean, you know, I'm a
obviously like I mean, you know, I'm a
responsible programmer, so I don't vibe
responsible programmer, so I don't vibe
code. No vibe codes. The uh I saw Notch,
code. No vibe codes. The uh I saw Notch,
the Minecraft creator, was recently
the Minecraft creator, was recently
posting that he's making a new game and
posting that he's making a new game and
he's hiring people and he says no vi no
he's hiring people and he says no vi no
vibe coders and no new line curly
vibe coders and no new line curly
bracers.
That's funny.
Those were the two requirements.
I mean to be fair, you can use this
I mean to be fair, you can use this
formatter to solve the ladder problem.
formatter to solve the ladder problem.
Yeah, but it's a it's a philosophical
Yeah, but it's a it's a philosophical
problem, right? You can't be working
problem, right? You can't be working
with a new line curly
bracer. Yeah. So, you can see you I just
bracer. Yeah. So, you can see you I just
defined my methods as what I want it to
defined my methods as what I want it to
add and then it works fine. So, that
add and then it works fine. So, that
builds all the other M's fine because it
builds all the other M's fine because it
only adds that function for my M. I'm
only adds that function for my M. I'm
fine with you doing that. I don't think
fine with you doing that. I don't think
it's a good solution for like
it's a good solution for like
I I don't like that the thing is exposed
I I don't like that the thing is exposed
basically via [ __ ] macros for people
basically via [ __ ] macros for people
generally, but we'll keep it for you.
generally, but we'll keep it for you.
That's fine. I mean, it's See, I don't
That's fine. I mean, it's See, I don't
really know how else you can do it. But
really know how else you can do it. But
the thing is like no one else will
the thing is like no one else will
really need to care about it unless they
really need to care about it unless they
actually need it.
actually need it.
So, it's not changing anyone else's M
Does this thing fail build all of
Does this thing fail build all of
Puffer's environments if you don't have
Puffer's environments if you don't have
Clang 20? No, this is just for my
Clang 20? No, this is just for my
specific thing. But like does the
specific thing. But like does the
setup.py trigger your end of build or do
setup.py trigger your end of build or do
you have to build this from your
you have to build this from your
subdirectory?
subdirectory?
So, I'm pretty Yeah, I'm pretty sure
So, I'm pretty Yeah, I'm pretty sure
right now I need to ask you about that.
right now I need to ask you about that.
Until I get like the archive
Until I get like the archive
automatically building and stuff in
automatically building and stuff in
another repo, it tries to build mine but
another repo, it tries to build mine but
fails. So, is there some way to like
fails. So, is there some way to like
exclude it temporarily? Does it fail the
exclude it temporarily? Does it fail the
whole build? Um, it fails to build mine
whole build? Um, it fails to build mine
and then like I think fails, but it
and then like I think fails, but it
builds everything else fine.
builds everything else fine.
So, yeah, I think so. Does this prevent
So, yeah, I think so. Does this prevent
you from building the rest of puffer lab
you from building the rest of puffer lab
right now?
right now?
Um, let me try now. That would be an
Um, let me try now. That would be an
important thing to know in a PR for a
pre-release. Uh, yeah. Is there a way to
pre-release. Uh, yeah. Is there a way to
exclude my M from building from setup.py
exclude my M from building from setup.py
temporarily?
Um I it's going to look for that
Um I it's going to look for that
binding. C file is the thing.
So if it doesn't find binding C, it
So if it doesn't find binding C, it
won't try and build it. I believe so.
won't try and build it. I believe so.
Okay. I can just rename it and then
Okay. I can just rename it and then
I'll just add a to-do to rename it back.
Well, yeah. It just won't work if I
Well, yeah. It just won't work if I
don't rename it back.
don't rename it back.
Let me try
that. Yeah, ideally like if I like the
that. Yeah, ideally like if I like the
rest of this is fine. It's so far it's
rest of this is fine. It's so far it's
um I think yeah, if you just don't break
um I think yeah, if you just don't break
my build and then have it in a state
my build and then have it in a state
where I can compile it manually so that
where I can compile it manually so that
I like we can run sweeps because ideally
I like we can run sweeps because ideally
I want you to have some good agents on
I want you to have some good agents on
this for uh release.
Yeah. Um, I I added a readme with like
Yeah. Um, I I added a readme with like
basic instructions to build it for now,
basic instructions to build it for now,
but like it you've built it before. It
but like it you've built it before. It
shouldn't be bad. I added also explicit
shouldn't be bad. I added also explicit
things like you need to install because
things like you need to install because
like the things that you're running into
like the things that you're running into
you need to install. You just need to
you need to install. You just need to
manually install the ray dependencies
manually install the ray dependencies
because it's building everything from
because it's building everything from
scratch. Whereas you don't have to do
scratch. Whereas you don't have to do
that for parliament because you're just
that for parliament because you're just
downloading a pre-built
downloading a pre-built
archive. So that's the only annoying
archive. So that's the only annoying
thing
thing
really. Okay. Yeah. If I just rename
really. Okay. Yeah. If I just rename
binding.c See, it does not break the
binding.c See, it does not break the
build. So, I Let's make sure the build's
build. So, I Let's make sure the build's
in my
in my
CMake. And then I'll push that and then
CMake. And then I'll push that and then
you'll actually be able to see. So,
you'll actually be able to see. So,
right now the tests are failing because
right now the tests are failing because
um I'm presumably because of that. But
um I'm presumably because of that. But
after this test should pass the test
after this test should pass the test
that that guy committed.
that that guy committed.
What did he commit? Try and build.
What did he commit? Try and build.
Oh, yeah. I haven't checked those in a
Oh, yeah. I haven't checked those in a
while. Those those get checked before I
while. Those those get checked before I
ship packages. That's about it.
ship packages. That's about it.
It's a good indicator though of whether
It's a good indicator though of whether
a PR will break the build or not.
Yeah, but it's like it's like you
Yeah, but it's like it's like you
[ __ ] have to sit there and wait for
[ __ ] have to sit there and wait for
10 minutes after committing your code to
10 minutes after committing your code to
see like
see like
I mean again, you don't have to wait,
I mean again, you don't have to wait,
but it's a nice useful indicator.
but it's a nice useful indicator.
I leave them in there, but like I don't
I leave them in there, but like I don't
actually look at them um until I'm ready
actually look at them um until I'm ready
to like commit a build release and I see
to like commit a build release and I see
like okay it's screwing up on Mac and I
like okay it's screwing up on Mac and I
go pull errors.
go pull errors.
I don't know it personally they just
I don't know it personally they just
seem like a nice indicator like they're
seem like a nice indicator like they're
if so if they're passing if they ran
if so if they're passing if they ran
instantly then yeah but they don't I
instantly then yeah but they don't I
mean can't expect them to run instantly.
mean can't expect them to run instantly.
They are still pretty fast I would
They are still pretty fast I would
imagine. And the thing is though, like
imagine. And the thing is though, like
you can ignore them or you can just
you can ignore them or you can just
Well, yeah, that's what I do is I just I
Well, yeah, that's what I do is I just I
ignore them until we're ready to get a
ignore them until we're ready to get a
release build and then I go fix I make
release build and then I go fix I make
sure that they're working for the
sure that they're working for the
release.
release.
The thing is though, if they're already
The thing is though, if they're already
working on the branch and then you have
working on the branch and then you have
a PR that it fails, that's a useful
a PR that it fails, that's a useful
indicator. It's like, okay, this PR
indicator. It's like, okay, this PR
broke something. Yeah, but like I don't
broke something. Yeah, but like I don't
get that feedback, right, for like
get that feedback, right, for like
basically all these things do at the
basically all these things do at the
moment. Like all these things have been
moment. Like all these things have been
useful for is ruining my Gmail inbox
useful for is ruining my Gmail inbox
because I like I apparently these things
because I like I apparently these things
trigger notifications by default. Yeah,
trigger notifications by default. Yeah,
you can turn that off. Yeah, I need to
you can turn that off. Yeah, I need to
cuz I actually I like I missed my tax
cuz I actually I like I missed my tax
return in emails because it got buried
return in emails because it got buried
in this [ __ ]
in this [ __ ]
Yeah, I would definitely do that then.
Yeah, I would definitely do that then.
Yeah. All right. I don't know. I don't I
Yeah. All right. I don't know. I don't I
don't like processes like additional
don't like processes like additional
like processes by default because they
like processes by default because they
just they bulk everything up and slow
just they bulk everything up and slow
everything down.
everything down.
Like the only reason I even have them
Like the only reason I even have them
here, like the only reason I have them
here, like the only reason I have them
integrated into GitHub is because they
integrated into GitHub is because they
run on different platforms. Like I can't
run on different platforms. Like I can't
run a Mac test locally. Like I would ra
run a Mac test locally. Like I would ra
I would ra way rather they not even run
I would ra way rather they not even run
by default on every PR and I just have a
by default on every PR and I just have a
button I can press to run them when I
button I can press to run them when I
want to.
want to.
I mean aside from the emails, there's
I mean aside from the emails, there's
literally no downside to running them
literally no downside to running them
though because it's not running on your
though because it's not running on your
compute. just adds a bunch of like it
compute. just adds a bunch of like it
just adds extra
just adds extra
[ __ ] Like look, every single every
[ __ ] Like look, every single every
single
single
PR now has a bunch of [ __ ] like with
PR now has a bunch of [ __ ] like with
like all these tests like go test
like all these tests like go test
failing this
that I mean you're entitled to your
that I mean you're entitled to your
opinion I guess but a test can
opinion I guess but a test can
especially honestly tests are the most
especially honestly tests are the most
useful. They're useful for for people if
useful. They're useful for for people if
like if I'm just developing my own
like if I'm just developing my own
single project like depends on a project
single project like depends on a project
like I may or may not have that many
like I may or may not have that many
tests but if I'm having a project with a
tests but if I'm having a project with a
lot of contributors that's when I would
lot of contributors that's when I would
have a lot of tests because I would just
have a lot of tests because I would just
be paranoid that other people are going
be paranoid that other people are going
to screw stuff up like what happened
to screw stuff up like what happened
with bet and it's it's just like
with bet and it's it's just like
inevitable right I mean or you it
inevitable right I mean or you it
protects I mean I just like the thing is
protects I mean I just like the thing is
I see so many projects that have like
I see so many projects that have like
the strict coding standards and their
the strict coding standards and their
code is still [ __ ] dog [ __ ] so it's
code is still [ __ ] dog [ __ ] so it's
Like I mean that's not like a direct
Like I mean that's not like a direct
correlation though and I mean I'm not
correlation though and I mean I'm not
saying you have it doesn't seem like it
saying you have it doesn't seem like it
like the thing is it doesn't actually
like the thing is it doesn't actually
seem like it helps you with the things
seem like it helps you with the things
you want and it actually all it does it
you want and it actually all it does it
kind of locks you more to your
kind of locks you more to your
architecture because like this is why I
architecture because like this is why I
don't like having tons of tests right as
don't like having tons of tests right as
soon as you start refactoring things you
soon as you start refactoring things you
break all the tests so your choices are
break all the tests so your choices are
now to do double the work and now also
now to do double the work and now also
refactor your tests or to just delete
refactor your tests or to just delete
the tests. Well, it depends on what kind
the tests. Well, it depends on what kind
of test you have, right? If you have
of test you have, right? If you have
super tightly scoped unit tests, then
super tightly scoped unit tests, then
yeah, but if you have like very broad
yeah, but if you have like very broad
integration tests, well, the integration
integration tests, well, the integration
test we train at. Yeah, you don't have
test we train at. Yeah, you don't have
you don't have any of those automated
you don't have any of those automated
though, right? Well, it's a training
though, right? Well, it's a training
run. Doesn't run instantly.
run. Doesn't run instantly.
It's one still do that action though.
It's one still do that action though.
All right. Why did these fail though?
All right. Why did these fail though?
The Mac one seem to be failing.
I mean all of Popper lib
I mean all of Popper lib
is like all of our experiments are CI in
is like all of our experiments are CI in
a sense. I actually the one thing I did
a sense. I actually the one thing I did
relent on recently is I added some
relent on recently is I added some
things that do serve as tests but uh I
things that do serve as tests but uh I
think that the way that Ray did it is
think that the way that Ray did it is
actually genius because you dual purpose
actually genius because you dual purpose
your tests as
your tests as
examples. Like you write examples and
examples. Like you write examples and
the examples run that's pretty standard.
the examples run that's pretty standard.
I mean that's great. Well, it's not
I mean that's great. Well, it's not
standard because I see a lot of like
standard because I see a lot of like
tons of projects where they have [ __ ]
tons of projects where they have [ __ ]
tons of tests that they have to maintain
tons of tests that they have to maintain
for no reason other than maintaining the
for no reason other than maintaining the
test.
test.
No, but a good test suite will also
No, but a good test suite will also
Yeah. Like Yeah. Use have the tests as
Yeah. Like Yeah. Use have the tests as
examples. That's a really good that's
examples. That's a really good that's
and I guess like having a test that you
and I guess like having a test that you
link somebody to is very different from
link somebody to is very different from
having like an
having like an
example. Like I have I do have a couple
example. Like I have I do have a couple
of tests that I actually use for
of tests that I actually use for
instance like I have API tests for a
instance like I have API tests for a
couple of things where it's just like I
couple of things where it's just like I
just like throw some common misuses at
just like throw some common misuses at
the environment and I basically I try to
the environment and I basically I try to
make sure that I get API usage errors
make sure that I get API usage errors
back instead of internal errors. Like I
back instead of internal errors. Like I
have a few things like that. I'm not
have a few things like that. I'm not
mad, right? Like I actually do a little
mad, right? Like I actually do a little
bit of it. But like I don't know when
bit of it. But like I don't know when
you like when you really start
you like when you really start
overesting stuff it's just like it slows
overesting stuff it's just like it slows
dev down. And there's really there's
dev down. And there's really there's
nothing I value more than keeping
nothing I value more than keeping
everything like really simple, concise,
everything like really simple, concise,
and easy to do stuff with. Like as soon
and easy to do stuff with. Like as soon
as stuff gets big and bulky, not only
as stuff gets big and bulky, not only
does it slow development time down, but
does it slow development time down, but
personally I just get bored and my
personally I just get bored and my
productivity drops to zero. And I just
productivity drops to zero. And I just
like I actually lose the ability to work
like I actually lose the ability to work
on the codebase.
on the codebase.
I mean, let's be clear, like I
I mean, let's be clear, like I
understand where you come from, and I'm
understand where you come from, and I'm
not advocating like again, I'm not
not advocating like again, I'm not
advocating for like 100% test coverage.
advocating for like 100% test coverage.
Like right now, our tests I think just
Like right now, our tests I think just
build puffer. All I'm saying is it might
build puffer. All I'm saying is it might
be useful to like run uh build and then
be useful to like run uh build and then
try to run every puffer m with like the
try to run every puffer m with like the
minimum number of steps just to make
minimum number of steps just to make
sure they run correctly without like
sure they run correctly without like
completely erroring out because that
completely erroring out because that
would have if I remember correctly there
would have if I remember correctly there
was a couple shows stopping bugs near
was a couple shows stopping bugs near
the 2.0 release that that sort of thing
the 2.0 release that that sort of thing
would have caught. Um and I mean you
would have caught. Um and I mean you
could expand it if you wanted but even I
could expand it if you wanted but even I
think that would be a good signal. Also,
think that would be a good signal. Also,
you know, someone PR something to one of
you know, someone PR something to one of
the puffer m and then it runs before,
the puffer m and then it runs before,
now it doesn't. And then, yeah, the
now it doesn't. And then, yeah, the
ocean m I can do that with. I mean, I
ocean m I can do that with. I mean, I
have a few small tests that I am going
have a few small tests that I am going
to clean up for the uh the release.
to clean up for the uh the release.
Um, stuff like that's generally
fine. It's more the unit tests that
fine. It's more the unit tests that
drive me mad
drive me mad
cuz those will legit like those will
cuz those will legit like those will
legitimately break on every single
legitimately break on every single
refactor.
refactor.
Yeah, but I mean it yeah and and that's
Yeah, but I mean it yeah and and that's
part of it is the cost to do business
part of it is the cost to do business
with unit test. Part of it is yeah like
with unit test. Part of it is yeah like
testing what actually like should be
testing what actually like should be
tested. I don't know testing is a whole
tested. I don't know testing is a whole
but the thing is people do actually like
but the thing is people do actually like
legitimately aim for 100% test coverage
legitimately aim for 100% test coverage
and then 100% like typed everything in
and then 100% like typed everything in
Python and at that point it's just like
Python and at that point it's just like
I don't want to read your code. Like
I don't want to read your code. Like
literally you just tell me that I know
literally you just tell me that I know
your code sucks.
I mean, yeah. I don't I don't think
I mean, yeah. I don't I don't think
based on ideological approach. I like I
based on ideological approach. I like I
know your code sucks.
know your code sucks.
Okay. I have some I have some projects
Okay. I have some I have some projects
that are not Python that have like very
that are not Python that have like very
high test coverage though. Would you say
high test coverage though. Would you say
they suck just idologically? No. I think
they suck just idologically? No. I think
the it's the Python specifically when I
the it's the Python specifically when I
see the combination of it has to be
see the combination of it has to be
typed and it has to be tested then I
typed and it has to be tested then I
kind of know.
kind of know.
To be fair though, the code that I did
To be fair though, the code that I did
that for was security based code. Like
that for was security based code. Like
it was some custom like firewall stuff
it was some custom like firewall stuff
type stuff. So yeah, that I was trying
type stuff. So yeah, that I was trying
to test the [ __ ] out of that thing
to test the [ __ ] out of that thing
because I wanted at that point then it's
because I wanted at that point then it's
like you don't even it's not even
like you don't even it's not even
testing. You need to fuzz that. Yeah.
testing. You need to fuzz that. Yeah.
And which I am actually. Yeah, I spent a
And which I am actually. Yeah, I spent a
lot of time on a fuzzing or fuzz fuzz
lot of time on a fuzzing or fuzz fuzz
tester which is pretty nice. Yeah,
tester which is pretty nice. Yeah,
that's a different story and that's
that's a different story and that's
fine.
fine.
Okay, so these um build on Linux uh but
Okay, so these um build on Linux uh but
the Mac tests are failing, but it seems
the Mac tests are failing, but it seems
unrelated to me because that I get if
unrelated to me because that I get if
you look there's like errors building
you look there's like errors building
tactical. So I don't think like that's a
tactical. So I don't think like that's a
me problem. Tactical builds
me problem. Tactical builds
on Mac apparently in Oh, on Mac I don't
on Mac apparently in Oh, on Mac I don't
freaking know. Yeah, it's this is weird
freaking know. Yeah, it's this is weird
though. Let me look this up. It's it's
though. Let me look this up. It's it's
it's error C.C close or C close. I might
it's error C.C close or C close. I might
have to I might have to modify that. But
have to I might have to modify that. But
the thing is that doesn't have a binding
the thing is that doesn't have a binding
file, does it? Or maybe that added one.
file, does it? Or maybe that added one.
I don't freaking know. It must have
I don't freaking know. It must have
because it's it's I don't know. Hold on.
We are Oh, I think what the issue is is
We are Oh, I think what the issue is is
binding as Wait, no. No. This is weird
binding as Wait, no. No. This is weird
because it it passes on
Linux. Yeah. Somehow when building Mac,
Linux. Yeah. Somehow when building Mac,
it can't find the C close file or or
it can't find the C close file or or
function. That's strange. I don't know.
function. That's strange. I don't know.
I don't think that's my problem
I don't think that's my problem
though. That's still a weird problem.
There freaking clear button on the chat.
There we
go. Oh, I think if I had to guess, I
go. Oh, I think if I had to guess, I
think what it is, so there is no C close
think what it is, so there is no C close
defined in tactical.h H and I think the
defined in tactical.h H and I think the
compiler configuration on the Linux like
compiler configuration on the Linux like
setup basically just doesn't care if
setup basically just doesn't care if
there's an undeclared function call. But
there's an undeclared function call. But
on uh Mac for whatever reason the
on uh Mac for whatever reason the
default stuff it will just treat as an
default stuff it will just treat as an
error. So I think that's I guess I'll
error. So I think that's I guess I'll
have to fix that then. Yeah, but again
have to fix that then. Yeah, but again
doesn't seem like something I introduced
doesn't seem like something I introduced
because Linux builds are fine in the CI
because Linux builds are fine in the CI
and locally. Uh yeah, Reds the release
and locally. Uh yeah, Reds the release
is going well. We're kind of just
is going well. We're kind of just
running experiments for that and then
running experiments for that and then
doing other stuff in the background
doing other stuff in the background
while the experiments run. Kind of burnt
while the experiments run. Kind of burnt
on release work. It's like it's pretty
on release work. It's like it's pretty
well good. We've got experiments going.
well good. We've got experiments going.
They're doing ridiculously well.
They're doing ridiculously well.
Um, see, here's
Um, see, here's
Enduro. Here's
Enduro. Here's
[Music]
[Music]
Enduro. Yeah, that's really good.
mobile.
harder to say with this one, but I like
harder to say with this one, but I like
I think that we'll be able to just kill
I think that we'll be able to just kill
these later today and we'll have good
these later today and we'll have good
hypers. I'll at least give them like,
hypers. I'll at least give them like,
you know, 50 runs plus
you know, 50 runs plus
each. We'll keep doing more experiments.
each. We'll keep doing more experiments.
So, yeah, now that uh the build is fine,
So, yeah, now that uh the build is fine,
you think is it fine to merge? Do you
you think is it fine to merge? Do you
want some other changes? Yeah, that's
want some other changes? Yeah, that's
fine. You update the PR? Yeah. Yeah, go
fine. You update the PR? Yeah. Yeah, go
check it out. You can check the latest
check it out. You can check the latest
command then. Like I said, you can see
command then. Like I said, you can see
that the Linux build succeed in CI.
Thank you very much.
Thank you very much.
You're not going to look at what I uh
You're not going to look at what I uh
change before you merge it?
change before you merge it?
No, I'm going to fix it if uh if you
No, I'm going to fix it if uh if you
broke anything. Man, you're a trusting
broke anything. Man, you're a trusting
man.
There's only so much I can look at when
There's only so much I can look at when
you send me 21 files changed with, you
you send me 21 files changed with, you
know, I'm just saying like the latest
know, I'm just saying like the latest
commit was like tiny. I personally just
commit was like tiny. I personally just
would have checked that before um I
would have checked that before um I
merge but you do because I'm I'm just
merge but you do because I'm I'm just
paranoid person especially when it comes
paranoid person especially when it comes
to my code.
to my code.
Yeah. Well, not like I can't revert it.
Yeah. Well, not like I can't revert it.
True.
Uh, all right. Yeah, I guess I'll start
Uh, all right. Yeah, I guess I'll start
a sweep then. Go feed the puffer. Thank
a sweep then. Go feed the puffer. Thank
you for your
contribution. The
puffer trying to understand something in
puffer trying to understand something in
puffer li an example. So here I'll give
puffer li an example. So here I'll give
you our new example. times. Just go here
you our new example. times. Just go here
to uh ocean not to ocean to ocean in
3. There are uh two tutorial M's and a
3. There are uh two tutorial M's and a
template. There's a template which is
template. There's a template which is
like a very very minimal N that just
like a very very minimal N that just
contains the like just to get you
contains the like just to get you
started a runnable trainable env. And
started a runnable trainable env. And
then there is uh squared which
then there is uh squared which
has a single agent like sample code. And
has a single agent like sample code. And
then there is target which has multi-
then there is target which has multi-
aent sample
aent sample
code target
code target
here mix structure output like multi
here mix structure output like multi
head output force head. Uh we do not do
head output force head. Uh we do not do
that at the moment because no m actually
that at the moment because no m actually
do that like there just like are not
do that like there just like are not
environments where that's been an issue.
If you really want to do that, what I
If you really want to do that, what I
would suggest first of all is just
would suggest first of all is just
discretizing the continuous ones because
discretizing the continuous ones because
from our experiments, discretizing the
from our experiments, discretizing the
continuous action space just does way
continuous action space just does way
better anyways. So just make the whole
better anyways. So just make the whole
thing
multi-discretet. I went very deep down
multi-discretet. I went very deep down
that rabbit hole and like we support a
that rabbit hole and like we support a
bunch of structured stuff and we don't
bunch of structured stuff and we don't
use any of it in our new M now because
use any of it in our new M now because
it's a pain in the ass. like it works.
it's a pain in the ass. like it works.
It works better than any other
It works better than any other
structured data processing stuff out
structured data processing stuff out
there in RL and we still don't bother
there in RL and we still don't bother
with it because it's just so much easier
with it because it's just so much easier
to keep everything flat and
simple. Yeah, that was something I was
simple. Yeah, that was something I was
skeptical on, but then because I I use
skeptical on, but then because I I use
structured stuff for like my Super Mario
structured stuff for like my Super Mario
M. But then if you're writing it in C, I
M. But then if you're writing it in C, I
think it makes it makes it a lot
think it makes it makes it a lot
simpler. Just keep it flat and perform
simpler. Just keep it flat and perform
it. Well, Python code is just trolling.
it. Well, Python code is just trolling.
It's like so freaking
slow. I mean, I talked to somebody who
slow. I mean, I talked to somebody who
had a pretty cool sim yesterday, but
had a pretty cool sim yesterday, but
they were running it like single
they were running it like single
threaded in Python with rendering on
threaded in Python with rendering on
during
during
training with GQN.
training with GQN.
Yeah, that's that's not going to be a
Yeah, that's that's not going to be a
good time. Hey, Georgie. G. I apologize
good time. Hey, Georgie. G. I apologize
for my pronunciation of your
for my pronunciation of your
name. Org, I
think. Welcome to
stream.
stream.
Um, I would like to know why this
Um, I would like to know why this
bulldozer is not unloading its
bulldozer is not unloading its
dirt. It's like learning not to unload
dirt. It's like learning not to unload
anything, right? I was going to make it
anything, right? I was going to make it
human playable, right?
human playable, right?
where I left
off MMO. I saw multi head
off MMO. I saw multi head
outputs create full pull output. Yep,
outputs create full pull output. Yep,
that's what I did for neural MMO 2.0 and
that's what I did for neural MMO 2.0 and
that still works. That one is still very
that still works. That one is still very
simple. For 3.0, know I got smarter and
simple. For 3.0, know I got smarter and
uh I managed to do the whole thing in a
uh I managed to do the whole thing in a
single discrete
single discrete
variable and uh it actually is like a
variable and uh it actually is like a
very interesting action space. Basically
very interesting action space. Basically
I designed neural MMO 3 for like what if
I designed neural MMO 3 for like what if
you were just playing this thing only on
you were just playing this thing only on
a
keyboard and it works tremendously well.
keyboard and it works tremendously well.
Multi-Discrete is
Multi-Discrete is
fine if you want multiple. And this end
fine if you want multiple. And this end
here, this is multi-iscreet.
here, this is multi-iscreet.
Multi-discreet is also
fine. Uh it's nice to have the internet
fine. Uh it's nice to have the internet
fast again and puffer boxes. That was
fast again and puffer boxes. That was
very painful. How many months ago that
very painful. How many months ago that
wasn't? It's uh it's still not like I
wasn't? It's uh it's still not like I
wish we could get a 10 gig line here,
wish we could get a 10 gig line here,
man, but we can't.
man, but we can't.
This is fast enough. It's a one gig
This is fast enough. It's a one gig
line. Like I'm on a farm
line. Like I'm on a farm
and there's not even going to be 10 gig
and there's not even going to be 10 gig
at the intersection, right? You'd have
at the intersection, right? You'd have
to go to like a business district, but
to go to like a business district, but
just to get to the intersection
just to get to the intersection
uh of like the road where you can go to
uh of like the road where you can go to
places is two miles.
Dang. So, it's not like just a two-m R
Dang. So, it's not like just a two-m R
driveway, but like a shared, you know,
driveway, but like a shared, you know,
like a few different like farms and
like a few different like farms and
things. It's two freaking miles.
I've done mixed distribution predictions
I've done mixed distribution predictions
using
using
maser working very well but it
maser working very well but it
becomes it's not that it's hard right
becomes it's not that it's hard right
it's just a pain like the infrastructure
it's just a pain like the infrastructure
and like
and like
the inference like in infrastructure
the inference like in infrastructure
code's just a pain in the ass and it's
code's just a pain in the ass and it's
slow that's the only
slow that's the only
issue and like why
bother basically Yeah.
Hey
Hey
RL, what is that?
dated
package. Is it maze? Cuz they do mazes
package. Is it maze? Cuz they do mazes
cuz we kind of have the best
mazes. Seems like it.
It's kind of funny how many of these
It's kind of funny how many of these
like little RL projects there are that
like little RL projects there are that
just died and it's like you know I I
just died and it's like you know I I
used to see like oh man look at all
used to see like oh man look at all
these other RL libraries trying to do
these other RL libraries trying to do
this stuff and then like a year later
this stuff and then like a year later
it's like Buffer is kind of the only one
it's like Buffer is kind of the only one
still doing these things like it's still
still doing these things like it's still
going really well.
Okay. M training impulse wars on the
Okay. M training impulse wars on the
puffer box.
Um, wonder what I should sweep. Let me
Um, wonder what I should sweep. Let me
see what the default sweep stuff is.
You set torch terministic to true
You set torch terministic to true
default when this slow it down.
default when this slow it down.
Uh not when I was testing it. You can
Uh not when I was testing it. You can
try it. See if it makes a difference.
try it. See if it makes a difference.
One sec.
Okay. So, I'm playing it
Okay. So, I'm playing it
here. I'm
the odd cursor. None of them.
Runescape. I have like probably three or
Runescape. I have like probably three or
4K hours in that game. In old
4K hours in that game. In old
school, I stopped playing because that
school, I stopped playing because that
thing is actually cocaine. Like that
thing is actually cocaine. Like that
game is straight freaking heroin or coke
game is straight freaking heroin or coke
or whatever. But
or whatever. But
uh not before I got a dusted omelette.
uh not before I got a dusted omelette.
Run. Okay. All that sweaty
stuff. I need to like print out the
stuff. I need to like print out the
bucket or something.
Okay. So, it's not letting me
deposit. There's definitely something
deposit. There's definitely something
wrong with the sim here.
like fix the angle or something. So this
like fix the angle or something. So this
is me
here. Okay. So holding shift does
not does not do anything. So, let's
not does not do anything. So, let's
figure that out.
This is just to like I don't know lazy
This is just to like I don't know lazy
way of setting conditional breakpoint.
terraforming sim I'm working
on. Okay. So, it's just straight up not
on. Okay. So, it's just straight up not
registering this action for some reason.
So what are the act like how does this M
So what are the act like how does this M
work like what are the what's the action
work like what are the what's the action
space like what what's I guess good
space like what what's I guess good
behavior in this M
behavior in this M
you mean the simulator itself it's uh
you mean the simulator itself it's uh
it's a simulator for like it's
it's a simulator for like it's
simulating Terraform it's written in the
simulating Terraform it's written in the
code here that I'm working on. No, I I
code here that I'm working on. No, I I
meant like uh I I was talking to chat.
meant like uh I I was talking to chat.
What you ask, Captain? Oh,
What you ask, Captain? Oh,
um what is a good policy look like? Like
um what is a good policy look like? Like
what is the goal? I I know it's to kind
what is the goal? I I know it's to kind
of terraform, but how does how does one
of terraform, but how does how does one
actually do that? Ideally, there's a
actually do that? Ideally, there's a
target map, there's a source map, and
target map, there's a source map, and
you convert the source map to the target
you convert the source map to the target
map.
map.
Oh, okay. That makes sense. Initially,
Oh, okay. That makes sense. Initially,
the target map is just flat.
the target map is just flat.
And the action space is just moving
And the action space is just moving
around. So, they're just trying to like
around. So, they're just trying to like
move through hills or what? Move around.
move through hills or what? Move around.
Load bucket. Unload bucket. Ah, I see.
Load bucket. Unload bucket. Ah, I see.
Gotcha. And then there's a place where
Gotcha. And then there's a place where
they can unload and it just they can
they can unload and it just they can
unload anywhere and it it just it
unload anywhere and it it just it
terraforms, right? Like they unload the
terraforms, right? Like they unload the
dirt and it terraforms space. Yeah.
dirt and it terraforms space. Yeah.
Okay. Yeah, that makes sense. all the
Okay. Yeah, that makes sense. all the
sim code is just yours or some kind of
sim code is just yours or some kind of
simulation framework. Um, I mean, it's
simulation framework. Um, I mean, it's
mostly just really plain vanilla C, but
mostly just really plain vanilla C, but
then the way that we hook it up to RL,
then the way that we hook it up to RL,
that's Puffer Lib, which is our set of
that's Puffer Lib, which is our set of
reinforcement learning tools cuz like we
reinforcement learning tools cuz like we
train agents to like to play games and
train agents to like to play games and
like, you know, to terraform the ground
like, you know, to terraform the ground
and do whatever else we're doing. These
and do whatever else we're doing. These
are all our Sims. Here's like miniature
are all our Sims. Here's like miniature
version of League or Dota. We've got
version of League or Dota. We've got
like miniature uh miniature MMO here.
like miniature uh miniature MMO here.
got like arcade games and they all have
got like arcade games and they all have
like neural nets that play them in your
like neural nets that play them in your
browser. So that's the uh general idea
browser. So that's the uh general idea
around here. Hyperf simulation and
around here. Hyperf simulation and
reinforcement learning dev.
Hey, off the top of your head, do you
Hey, off the top of your head, do you
know how many uh actual CPUs um are on
know how many uh actual CPUs um are on
the original puffer boxes?
the original puffer boxes?
I wish I sent the number for workers,
I wish I sent the number for workers,
too.
too.
Uh, it's probably 24. Okay.
No, Puffer Lib
No, Puffer Lib
does No. So, the the actual simulation
does No. So, the the actual simulation
is just Hyperf C. Pufferlib just makes
is just Hyperf C. Pufferlib just makes
it really easy for us to run a whole
it really easy for us to run a whole
bunch of these and get all the data to
bunch of these and get all the data to
the main process for reinforcement
the main process for reinforcement
learning very quickly for PyTorch and
learning very quickly for PyTorch and
all that. Um the rendering we're using
all that. Um the rendering we're using
Ray Lib for that. It's like low-level
Ray Lib for that. It's like low-level
nice graphics. And then I mean Puffer
nice graphics. And then I mean Puffer
Lib has like 30 plus thousand lines of C
Lib has like 30 plus thousand lines of C
for all the simulations. At this point
for all the simulations. At this point
we've got 20 different 20 different M's
we've got 20 different 20 different M's
like games, sims, whatever you want to
like games, sims, whatever you want to
call them. Um is that accurate with
call them. Um is that accurate with
Impulse Wars now? 20 plus now, right?
Impulse Wars now? 20 plus now, right?
I don't Yeah, I think mine was like I
I don't Yeah, I think mine was like I
don't know. Mine was a lot. I can't
don't know. Mine was a lot. I can't
remember. Yeah, because it's like 30k
remember. Yeah, because it's like 30k
lines now with it was 20k for 2. I think
lines now with it was 20k for 2. I think
it's got to be well well over 30k.
it's got to be well well over 30k.
Okay. Yeah, Impulse Wars kind of
Okay. Yeah, Impulse Wars kind of
inflated though because I kind of bundle
inflated though because I kind of bundle
some like a single head header
some like a single head header
dependencies like in but anyway. Yeah,
dependencies like in but anyway. Yeah,
we kind of got to do something with that
we kind of got to do something with that
because I I don't like you messing up my
because I I don't like you messing up my
line count.
It just really makes me laugh. It just I
It just really makes me laugh. It just I
don't know. Just the things you It's
don't know. Just the things you It's
just funny to me the things that you're
just funny to me the things that you're
important to you versus not. Just very
important to you versus not. Just very
different. Well, I just like to I just
different. Well, I just like to I just
like to see how much stuff we've done in
like to see how much stuff we've done in
Puffer.
Puffer.
Yeah.
Yeah.
Um so I'm about to start a sweep. Do you
Um so I'm about to start a sweep. Do you
mind just like really quick just
mind just like really quick just
double-checking my params? They're sane
double-checking my params? They're sane
and then I'm probably just gonna hop out
and then I'm probably just gonna hop out
and do some other stuff.
and do some other stuff.
Uh, Koopa, we completely like Jim, we
Uh, Koopa, we completely like Jim, we
use some of their stuff, but this it's
use some of their stuff, but this it's
like pathetically slow. We are a
like pathetically slow. We are a
thousand times slower than their default
thousand times slower than their default
tooling. Um, Majoko is also horribly
tooling. Um, Majoko is also horribly
slow. We have it running like 10x plus
slow. We have it running like 10x plus
faster than it normally would through
faster than it normally would through
Puffer Lib. If you run Majoko with
Puffer Lib. If you run Majoko with
Puffer Lib, we've done like contract
Puffer Lib, we've done like contract
work on Isaac Jim before. It's annoying.
work on Isaac Jim before. It's annoying.
It's kind of okay. We could do more Isax
It's kind of okay. We could do more Isax
in but we're not really focused on
in but we're not really focused on
robotics at this point unless we have
robotics at this point unless we have
robotics contracts active. Um but
robotics contracts active. Um but
generally like any of the existing
generally like any of the existing
frameworks out there we kind of just go
frameworks out there we kind of just go
like a thousandx faster with the stuff
like a thousandx faster with the stuff
we
we
have. Let me see what you're let's see
have. Let me see what you're let's see
what you're looking at captain. Yeah.
what you're looking at captain. Yeah.
And hello.
You don't need GPU parallel rendering.
You don't need GPU parallel rendering.
You need that parallel sim that chat.
You need that parallel sim that chat.
Yeah, my bad. Join Isaac FG. Yeah, you
Yeah, my bad. Join Isaac FG. Yeah, you
don't you don't want to train on render.
don't you don't want to train on render.
You're trolling if you're training on
You're trolling if you're training on
rendering over partial local state like
rendering over partial local state like
Yeah, it doesn't make sense. To give you
Yeah, it doesn't make sense. To give you
an idea like most RL labs are training
an idea like most RL labs are training
at like you know low thousands of steps
at like you know low thousands of steps
per second. Some of the better equipped
per second. Some of the better equipped
ones are in the tens of thousands. Maybe
ones are in the tens of thousands. Maybe
they're like a singledigit number of
they're like a singledigit number of
them in the hundreds of thousands. The
them in the hundreds of thousands. The
majority of our experiments run millions
majority of our experiments run millions
of steps per second. So like it's just
of steps per second. So like it's just
dramatically dramatically higher perf
dramatically dramatically higher perf
with what we've
built. You can take a look at like some
built. You can take a look at like some
of the stuff on the uh the on the repo.
of the stuff on the uh the on the repo.
We've got a 3.0 release coming out now
We've got a 3.0 release coming out now
soon. We've got new hyperparameter
soon. We've got new hyperparameter
tuning. We have fundamental algorithm
tuning. We have fundamental algorithm
improvements. We got a lot of
stuff. All right, let's see your sweep.
stuff. All right, let's see your sweep.
Um,
turn six.
turn six.
What? Why are you sixfold buffered?
What? Why are you sixfold buffered?
I need to change that. Like the vec
I need to change that. Like the vec
thing. Yeah, you're sixfold buffering
thing. Yeah, you're sixfold buffering
there with batch size. Yeah, I just
there with batch size. Yeah, I just
update nums num workers. I didn't update
update nums num workers. I didn't update
anything else. You 24 you could do
anything else. You 24 you could do
threefold for instance with eight.
threefold for instance with eight.
Um, I actually don't even know how good
Um, I actually don't even know how good
this is going to be on those that Intel
this is going to be on those that Intel
architecture anymore because we did
architecture anymore because we did
change the way that VEC works a little
change the way that VEC works a little
bit. So, we'll see.
Okay. Got num M. Let's try six. So, num
Okay. Got num M. Let's try six. So, num
ms I actually make configurable because
ms I actually make configurable because
I'm not really that's that actually
I'm not really that's that actually
seems to be pretty 256 with one 56 * 24.
seems to be pretty 256 with one 56 * 24.
Yeah, that's reasonable. And then,
well, the stuff I really want you to
well, the stuff I really want you to
look at is like the sweep um sizes and
look at is like the sweep um sizes and
stuff. Okay, so you're sweeping the
stuff. Okay, so you're sweeping the
number of M's.
number of M's.
Does it really take 250 mil to do
Does it really take 250 mil to do
anything?
anything?
Um, I guess that makes sense with your
Um, I guess that makes sense with your
end. Yeah, I I it really shouldn't take
end. Yeah, I I it really shouldn't take
that long. Well, this Yeah, I'm sweep
that long. Well, this Yeah, I'm sweep
I'm going to start to sweep over sitting
I'm going to start to sweep over sitting
Doug just to make sure it's fine. Um, it
Doug just to make sure it's fine. Um, it
shouldn't take that. Let me see. I can
shouldn't take that. Let me see. I can
probably look. It's fine.
probably look. It's fine.
Do you not have mini batch size in the
Do you not have mini batch size in the
sweep?
sweep?
No, I should. I just Yeah. Oh, there it
No, I should. I just Yeah. Oh, there it
is. That's a giant one for the max
is. That's a giant one for the max
there. That's We have grading
there. That's We have grading
accumulation, so that shouldn't break
accumulation, so that shouldn't break
you. Um, you think it's too high to max?
you. Um, you think it's too high to max?
Maybe, but it shouldn't break because
Maybe, but it shouldn't break because
it'll like it'll cap you to 32k anyways
it'll like it'll cap you to 32k anyways
and then it'll start doing gradient
and then it'll start doing gradient
accumulation, which is fine. Um, and
accumulation, which is fine. Um, and
it's learning rate. The min's probably
it's learning rate. The min's probably
too low though, isn't it? Yeah.
too low though, isn't it? Yeah.
It should learn pretty quickly to not do
It should learn pretty quickly to not do
that,
that,
but then we have I don't know co is
but then we have I don't know co is
fine.
fine.
I like a lot of these you don't need to
I like a lot of these you don't need to
like modify from their defaults. There's
like modify from their defaults. There's
ant and like value function. All these
ant and like value function. All these
things are in the original.
things are in the original.
Yeah, I was just setting like the the
Yeah, I was just setting like the the
mean to be what seemed to work. Okay,
mean to be what seemed to work. Okay,
fine. You can run a sweep and then we'll
fine. You can run a sweep and then we'll
see where that goes from there, I guess.
see where that goes from there, I guess.
So, if I just want to leave everything
So, if I just want to leave everything
as the default settings are, can I just
as the default settings are, can I just
say change the mean of something but
say change the mean of something but
leave the min, max, and scale and
leave the min, max, and scale and
everything else? Probably. You can try
everything else? Probably. You can try
it. Okay. I might I think it works. I
it. Okay. I might I think it works. I
don't know.
don't know.
The way I'm loading configs, I would
The way I'm loading configs, I would
think it would work. Yeah. The only
think it would work. Yeah. The only
thing you can't easily do is delete like
thing you can't easily do is delete like
things you don't want from the defaults.
things you don't want from the defaults.
Yeah. You can just set them to be
Yeah. You can just set them to be
something else, though. Mhm.
Okay. Yeah. Let's Let's see if this
Okay. Yeah. Let's Let's see if this
works.
Okay, so we got terraform
sim. This should get us break point.
sim. This should get us break point.
Yes.
Okay.
Bucket action is
two. Okay. So, I see the problem.
It wasn't letting you unload on
zero. That would screw it up.
thing. Unload any
thing. Unload any
dirt? Hard to tell.
very tiny amount of dirt that it can
very tiny amount of dirt that it can
hold. But we'll try
this. Might have to run the M for like
this. Might have to run the M for like
way longer
way longer
now. They terraform.
No.
No.
Huh? That is immediately better.
like consistently learning now.
Is there a reason why your default sweep
Is there a reason why your default sweep
sweeps over effects?
sweeps over effects?
Yeah. So, I made it so that um you I
Yeah. So, I made it so that um you I
just I left it so most of them have like
just I left it so most of them have like
a thousand agents per core now and it'll
a thousand agents per core now and it'll
just use more cores because that will
just use more cores because that will
automatically work for both the faster
automatically work for both the faster
and the slower MS.
and the slower MS.
like when you have more agents, it'll
like when you have more agents, it'll
just do more cores.
just do more cores.
You can change it for impulse wars if
You can change it for impulse wars if
you want. I think it would actually
you want. I think it would actually
wouldn't be the worst fit though,
wouldn't be the worst fit though,
depending on uh how you set default
depending on uh how you set default
noms.
noms.
Well, I'm I'm thinking is there a
Well, I'm I'm thinking is there a
scenario where it wouldn't make sense to
scenario where it wouldn't make sense to
use uh well, I think what works best for
use uh well, I think what works best for
me is the same amount of M's as there
me is the same amount of M's as there
are
are
workers. At least what I've seen on
workers. At least what I've seen on
Impulse Wars.
Impulse Wars.
Like if I have num ms equals 24 workers
Like if I have num ms equals 24 workers
but for
now. Huh. They really like this specific
now. Huh. They really like this specific
mountain for some reason.
mountain for some reason.
Is it just where they happen to spawn?
Is it just where they happen to spawn?
No, they go they all go to this
No, they go they all go to this
mountain.
I think we have to make the uh the
I think we have to make the uh the
bucket amount
bucket amount
uh much better.
load and unload amount
load and unload amount
10. We're going to make the bucket
10. We're going to make the bucket
capacity. What would a full scoop
be? I want to like actually see this do
be? I want to like actually see this do
something, you know?
something, you know?
Mhm. I want to see them
terraform. Actually,
Oh, this probably too much. I figured
Oh, this probably too much. I figured
out what the uh train misk time was by
out what the uh train misk time was by
the way.
the way.
What? In impulse wars. Um I accidentally
What? In impulse wars. Um I accidentally
set uh I because I was testing basically
set uh I because I was testing basically
I had some tensors in my policy that
I had some tensors in my policy that
were allocated in the CPU not on the GPU
were allocated in the CPU not on the GPU
so transferring between them. Yeah. So
so transferring between them. Yeah. So
once now I'm getting
once now I'm getting
um numbers that are like higher end
um numbers that are like higher end
time. Well everything's actually just
time. Well everything's actually just
higher but the end is a little higher.
higher but the end is a little higher.
The forward time is still like 56%
The forward time is still like 56%
evaluate forward. I don't know what is
evaluate forward. I don't know what is
so slow
so slow
there. I guess it's just multi-iscreet.
there. I guess it's just multi-iscreet.
I don't
know. But anyway, I'm going to hop off
know. But anyway, I'm going to hop off
and do some stuff. But thanks for your
and do some stuff. But thanks for your
help. Um, I got an impulse war sweep
help. Um, I got an impulse war sweep
running and
running and
hopefully in the next couple days I
hopefully in the next couple days I
should be able to get that archive thing
should be able to get that archive thing
and then we can just have, you know,
and then we can just have, you know,
impulse wars building like uh just with
impulse wars building like uh just with
setup.pay. But um is that a hard
setup.pay. But um is that a hard
prerequisite for release? What? Uh
prerequisite for release? What? Uh
impulse war is building in setup.py.
Yeah, but we can special case it. Okay.
Yeah, but we can special case it. Okay.
I mean, it it shouldn't take too long, I
I mean, it it shouldn't take too long, I
don't think, because I actually don't
don't think, because I actually don't
even need to modify anything in Vox CD.
even need to modify anything in Vox CD.
I just got to make like a GitHub actions
I just got to make like a GitHub actions
thing that just built it. So, I mean,
thing that just built it. So, I mean,
it's just like otherwise the thing is
it's just like otherwise the thing is
it's not going to be usable out of the
it's not going to be usable out of the
box, which is kind of shitty. Yeah. No,
box, which is kind of shitty. Yeah. No,
I agree. Yeah. Oh, one thing I did want
I agree. Yeah. Oh, one thing I did want
to say, I don't know if this
to say, I don't know if this
realistically matters. And this is kind
realistically matters. And this is kind
of one of the downsides of not using
of one of the downsides of not using
CMake. The way setup.py is, I don't know
CMake. The way setup.py is, I don't know
how to configure it such that um Box 2D
how to configure it such that um Box 2D
is only linked in to impulse wars. The
is only linked in to impulse wars. The
only way I'm I know how to do it is
only way I'm I know how to do it is
basically link box 2D into every M even
basically link box 2D into every M even
though mine it's because so it's you
though mine it's because so it's you
just have to like I said you'd special
just have to like I said you'd special
case you would add to the C extensions
case you would add to the C extensions
and each extension takes separate
and each extension takes separate
uh link extra link in compile args.
uh link extra link in compile args.
Oh okay it's very easy.
Oh okay it's very easy.
Let me look then really quick. The only
Let me look then really quick. The only
thing that's annoying is getting those
thing that's annoying is getting those
those archives.
those archives.
But if you get those archives, then it's
But if you get those archives, then it's
literally it's just a one line build.
literally it's just a one line build.
Okay. Yeah, we we can talk more about it
Okay. Yeah, we we can talk more about it
when I uh it should be a little bit less
when I uh it should be a little bit less
terrible now also without the Syon. Like
terrible now also without the Syon. Like
yeah, I don't know. Let me know if it
yeah, I don't know. Let me know if it
sucks, but I think I've made it easier.
sucks, but I think I've made it easier.
I hope. Um Oh, and by the way, um like
I hope. Um Oh, and by the way, um like
it seems it seems like a couple days ago
it seems it seems like a couple days ago
someone posted a PR that fixed the uh
someone posted a PR that fixed the uh
Mac build issues. Okay, I got I gota
Mac build issues. Okay, I got I gota
merge that then.
merge that then.
Yeah, they just it's basically just
Yeah, they just it's basically just
ignore certain warnings. That's all it
ignore certain warnings. That's all it
was in like the setup. Okay. So, it
was in like the setup. Okay. So, it
seems reasonable. Yeah, I take a look
seems reasonable. Yeah, I take a look
then all the stuff will pass.
then all the stuff will pass.
That would be useful.
That would be useful.
I'm going to do a little bit of stuff on
I'm going to do a little bit of stuff on
Terraform. So, we have hopefully I want
Terraform. So, we have hopefully I want
to get like post 300. Um the goal is
to get like post 300. Um the goal is
that we start doing a lot more industry
that we start doing a lot more industry
adjacent ends because Puffer's also got
adjacent ends because Puffer's also got
to grow business side. So, I'm going to
to grow business side. So, I'm going to
be working on Sims. I'm going to be
be working on Sims. I'm going to be
looking for other people to work on Sims
looking for other people to work on Sims
that are slightly more industry side and
that are slightly more industry side and
then like looking for companies uh that
then like looking for companies uh that
want our stuff and trying to get some
want our stuff and trying to get some
bigger contracts because I can be
bigger contracts because I can be
buying, you know, a few servers here and
buying, you know, a few servers here and
there, but if I want to like really be
there, but if I want to like really be
providing hardware and growing this
providing hardware and growing this
thing, then uh yeah, I got to grow that
thing, then uh yeah, I got to grow that
side of Puffer as well. So, mix of
side of Puffer as well. So, mix of
algorithm work and SIM work is mostly
algorithm work and SIM work is mostly
what I'm expecting to do.
what I'm expecting to do.
Yeah, I'm sure you're happy to get back
Yeah, I'm sure you're happy to get back
into sim work like you said because
into sim work like you said because
yeah, that's I'm so so freaking sick of
yeah, that's I'm so so freaking sick of
release stuff.
release stuff.
Yeah, I mean if it makes you feel any
Yeah, I mean if it makes you feel any
better. Um yeah, just I mean know I've
better. Um yeah, just I mean know I've
been working on and off of dev for the
been working on and off of dev for the
past uh couple months and it's really
past uh couple months and it's really
nice to have things be more stable and
nice to have things be more stable and
just working nice error messages like
just working nice error messages like
all that stuff. Like I've it's
all that stuff. Like I've it's
noticeable and it's really nice.
noticeable and it's really nice.
I know it sucks, but it makes the
I know it sucks, but it makes the
experience a lot better. No, I know I
experience a lot better. No, I know I
got to do it. It's just like I got to
got to do it. It's just like I got to
get back to doing like sims and other
get back to doing like sims and other
things as well. There is more core
things as well. There is more core
research I want to do as well, but like
research I want to do as well, but like
I think it's kind of at the like I work
I think it's kind of at the like I work
in blocks or phases and I think the next
in blocks or phases and I think the next
thing is like all right, let's get
thing is like all right, let's get
Puffer to having some like pretty solid
Puffer to having some like pretty solid
ARR where I can like actually be funding
ARR where I can like actually be funding
like spin-off research and stuff more
like spin-off research and stuff more
consistently. Yeah.
consistently. Yeah.
Makes sense. That's the goal.
Makes sense. That's the goal.
Cool. Well, yeah, once I'll I'll be
Cool. Well, yeah, once I'll I'll be
running some sweeps and check back in
running some sweeps and check back in
with you, but um in the next like couple
with you, but um in the next like couple
weeks or something once 3 0 is released
weeks or something once 3 0 is released
or something, I'd like to maybe start
or something, I'd like to maybe start
doing some multi- aent research on like
doing some multi- aent research on like
kind of like what we were talking about.
kind of like what we were talking about.
I can absolutely get you set up on that
I can absolutely get you set up on that
type of stuff. Yeah, cuz I mean there's
type of stuff. Yeah, cuz I mean there's
so many cool things that would be so
so many cool things that would be so
easy to make now. Like really if you
easy to make now. Like really if you
just think about like the things that
just think about like the things that
you wouldn't want to do before like in 2
you wouldn't want to do before like in 2
because like it would be hard to get the
because like it would be hard to get the
RL working versus now dramatically
RL working versus now dramatically
different.
different.
Yeah. With with protein and muon and all
Yeah. With with protein and muon and all
the other stuff the Yeah. Like well I'm
the other stuff the Yeah. Like well I'm
going to have this terraformer thing
going to have this terraformer thing
working pretty darn quick I imagine. And
working pretty darn quick I imagine. And
like that's like an actual industry use
like that's like an actual industry use
case. It's just going to be like easy.
case. It's just going to be like easy.
Yeah, I am curious to see how fast like
Yeah, I am curious to see how fast like
once you get the you know once the M
once you get the you know once the M
itself is done how and you fix like the
itself is done how and you fix like the
R the inevitable RL related bugs how
R the inevitable RL related bugs how
fast you're able to train a policy
fast you're able to train a policy
because I know for example um well I
because I know for example um well I
didn't watch them live but I saw you had
didn't watch them live but I saw you had
like just looking back and finding other
like just looking back and finding other
videos you had a ton of videos it seems
videos you had a ton of videos it seems
like it took you a long time to train
like it took you a long time to train
decent mobile policy even though like
decent mobile policy even though like
you said Um, the opponents are not
you said Um, the opponents are not
difficult. It just took a long time to
difficult. It just took a long time to
work everything. Yeah, exactly. So,
work everything. Yeah, exactly. So,
yeah, I'm curious how fast this will be,
yeah, I'm curious how fast this will be,
but it be it'll be cool to see. And
but it be it'll be cool to see. And
these guys are terraforming stuff like I
these guys are terraforming stuff like I
can see the terrain moving. I think I'm
can see the terrain moving. I think I'm
going to like accentuate it so that it
going to like accentuate it so that it
happens faster.
happens faster.
Um, but yeah, this is this would be
Um, but yeah, this is this would be
pretty cool. Or maybe light up like if
pretty cool. Or maybe light up like if
they move something kind of highlight. I
they move something kind of highlight. I
think what I'm going to do is yeah, I'm
think what I'm going to do is yeah, I'm
going to like change the the color map
going to like change the the color map
cuz it's just hard to see this color
cuz it's just hard to see this color
map, but it's also kind of difficult to
map, but it's also kind of difficult to
get Rayb to load nice colors in. I don't
get Rayb to load nice colors in. I don't
know. I might
know. I might
I might like have to do like some
I might like have to do like some
unrealistic like debug mode
map. Yeah, that that would make sense.
map. Yeah, that that would make sense.
But I I like I said, I think it Oh,
But I I like I said, I think it Oh,
yeah. I can see them moving some stuff.
yeah. I can see them moving some stuff.
I think it might also be nice to kind of
I think it might also be nice to kind of
I don't know have almost some kind of
I don't know have almost some kind of
like ghost outline of where stuff used
like ghost outline of where stuff used
to be or I I don't know some way of
to be or I I don't know some way of
making it more obvious what they're
making it more obvious what they're
doing. They're definitely moving stuff
doing. They're definitely moving stuff
around. Yeah, I see it now. Yeah. I
around. Yeah, I see it now. Yeah. I
mean, I just trained this these guys for
mean, I just trained this these guys for
30 seconds and they don't have enough
30 seconds and they don't have enough
time like before the end resets to
time like before the end resets to
really do much. So, I think that's going
really do much. So, I think that's going
to be Yeah, we'll we'll have to mess
to be Yeah, we'll we'll have to mess
with that. Like they're building. I
with that. Like they're building. I
don't know why they're building stuff.
don't know why they're building stuff.
That's kind of funny.
That's kind of funny.
When are you resetting? Are you just
When are you resetting? Are you just
hard resetting it like n number of time
hard resetting it like n number of time
steps? Like 500 something steps.
steps? Like 500 something steps.
Yeah, that's not a ton.
Terraforming sim will be really cool
Terraforming sim will be really cool
though. Yeah, that is that is cool. It
though. Yeah, that is that is cool. It
it's pretty simple, but also well the
it's pretty simple, but also well the
the idea is simple, but it's also kind
the idea is simple, but it's also kind
of somewhat complex. Well, but like
of somewhat complex. Well, but like
imagine if I can actually just like take
imagine if I can actually just like take
this map and turn it into whatever I
this map and turn it into whatever I
want, right? No. Yeah, I know. That'd be
want, right? No. Yeah, I know. That'd be
really cool. Like let's say I run this
really cool. Like let's say I run this
for like 100k steps and it just like
for like 100k steps and it just like
turns it into whatever I
want. Right.
want. Right.
Yeah, this is kind of tough. How do you
Yeah, this is kind of tough. How do you
actually decide in a good termination or
actually decide in a good termination or
I guess it'd be I guess you don't have
I guess it'd be I guess you don't have
this in the new bindings, but it really
this in the new bindings, but it really
be like truncation or something, but
be like truncation or something, but
whatever because Yeah. How do you decide
whatever because Yeah. How do you decide
like they're not doing anything? I don't
like they're not doing anything? I don't
know. I mean, I can literally just set
know. I mean, I can literally just set
some reward threshold where like once
some reward threshold where like once
they're not getting enough reward.
I don't know why they're building stuff.
I don't know why they're building stuff.
That's kind of interesting.
Yeah. Well, I got to go. Thanks again
Yeah. Well, I got to go. Thanks again
for help though. Got a sweep running.
for help though. Got a sweep running.
Hopefully does well. All right. I will
Hopefully does well. All right. I will
continue working on terraforming.
continue working on terraforming.
Thanks, Captain.
Thanks, Captain.
See you.
Okay, I think we're going to see if we
Okay, I think we're going to see if we
can get really
can get really
cool really cool terraform demo today.
cool really cool terraform demo today.
That's we'll make that the goal. Um,
That's we'll make that the goal. Um,
going have to mess with the rendering a
going have to mess with the rendering a
bit. I'm going to have to mess with the
bit. I'm going to have to mess with the
policies a bit. I think they also just
policies a bit. I think they also just
have to move more dirt at a time or I
have to move more dirt at a time or I
have to run the rendering way faster.
have to run the rendering way faster.
One or the
One or the
other. But yeah, I'm going to be right
other. But yeah, I'm going to be right
back. back. I'm going to use a restroom,
back. back. I'm going to use a restroom,
get a couple quick steps in, and uh
get a couple quick steps in, and uh
we'll go from
Oh, almost forgot.
All right.
First things
here 48 steps.
Max Dart height is
32. Then they operate.
2,00
capacity 120 FPS. Yes.
Okay, we got some score.
What are these guys going to
do? Oh, they're actually doing
do? Oh, they're actually doing
something. It looks
like it is actually like slowly getting
like it is actually like slowly getting
smoothed out, isn't it?
So I guess what we do
is render
is render
texture. Load texture from
texture. Load texture from
image. You have like procedural texture.
This is
cycling gradient. This is just image
gradient. Right.
I guess the real way to do this would be
I guess the real way to do this would be
a shader,
right? Yeah, let's just do a quick
right? Yeah, let's just do a quick
shader, I
guess. What's the simplest em I have
guess. What's the simplest em I have
that has a shader in it? Moa.
Okay. Shader
30. I get this thing. This is for
30. I get this thing. This is for
mobile.
only has um fragment shader because
only has um fragment shader because
that's all we need,
right? Probably can use like a way more
right? Probably can use like a way more
basic shader than this thing as well.
basic shader than this thing as well.
No.
fragment text
cord. Yeah, I need the like the fragment
cord. Yeah, I need the like the fragment
cord. Let's get this thing loaded in
first. Load shader.
Bloss is there probably
ins. Yeah. So these are all ins.
I think you just need the
X. Do you even need anything to be
X. Do you even need anything to be
passed into
this? I guess texture one.
No, you don't even need this. I think
No, you don't even need this. I think
you just straight
up model from
hash draw the
model. Okay. So right
here in shader modes.
Oh, it's been a while since I've done
Oh, it's been a while since I've done
shaders.
shaders.
Um, this should just you should just get
Um, this should just you should just get
this, I
think. I'm trying to remember which of
think. I'm trying to remember which of
these are like standards. I think you
these are like standards. I think you
get texture zero and then that's all you
get. You don't need any of this
crap. Extra
size. Is there a way to like get
haters.
[Music]
xcoordinate.x
X calculate the scaled texture. We don't
X calculate the scaled texture. We don't
need the text
coordinates input
coordinates input
vertex. Oh, I think it is. Is it this
vertex. Oh, I think it is. Is it this
frag text cord? No, that's a ve two.
frag text cord? No, that's a ve two.
How do you get the um
You need vertex
position, vertex
color. You need a vertex shader. I think
color. You need a vertex shader. I think
that you get a default vertex shader,
that you get a default vertex shader,
don't you?
That's actually what I need is I need to
That's actually what I need is I need to
know what their default shader
is. Where is
Default shader attribute
locations. So it has position. Okay. So
locations. So it has position. Okay. So
this is going to have all
this is going to have all
the attributes. Where is the ray default
the attributes. Where is the ray default
shader?
Dang it. I don't know where it is. Come
Dang it. I don't know where it is. Come
on.
Ra would be in source.
But there's no GLSL in
here. So, it's got to just be like
here. So, it's got to just be like
hardcoded in here
somewhere. Maybe if I just look for like
somewhere. Maybe if I just look for like
texture zero.
Okay. Well, I guess at least this gives
us this gives us
us this gives us
something. So, I can keep
this with
fragment text cord to fragment
color. Drag height.
This is
interesting. If I can get this to
interesting. If I can get this to
work. We definitely don't need all this
work. We definitely don't need all this
other crap.
Okay. Loaded successfully. Undefined
Okay. Loaded successfully. Undefined
variable frag
height. This is going to be
fragment
fragment
color this vertex.
Why? File loaded successfully. Compiled
successfully. That's bad.
Where's like the super basic rail
Where's like the super basic rail
example? Dang
it. Yeah. color mix
it. Yeah. color mix
FS resources shaders.
FS resources shaders.
Let me just go find this example one
Let me just go find this example one
because this will probably have enough
because this will probably have enough
in it for me to
use. Is that called
Yes, this one is
Yes, this one is
called multiple sample 2D.
Okay.
And they load resources
And they load resources
shader color mix.
Okay.
Okay.
So they do have all
this
this
matter. This probably doesn't matter at
matter. This probably doesn't matter at
all.
Why isn't this red?
listen.
Okay. Color
It's going to be way easier without the
leak.
leak.
Okay. So, we can get rid of this.
The heck is going on with this? Oh,
The heck is going on with this? Oh,
final
color. Okay. So, this is says this says
color. Okay. So, this is says this says
loaded successfully.
Uh but this is not drawing for some
Uh but this is not drawing for some
reason.
Only hard thing about shaders is getting
Only hard thing about shaders is getting
them to actually do anything. And then
them to actually do anything. And then
there it's very
there it's very
easy. Once they do anything to doing
easy. Once they do anything to doing
what you want is not as hard as just
what you want is not as hard as just
getting the thing to freaking load
correctly every freaking
correctly every freaking
time. I swear it's just every
time. Find that
example. This doesn't
need load shader zero.
Yeah, this is correct. The shader
load. Then you have begin shader
load. Then you have begin shader
mode. Draw the model.
texture
zero not have to
do you have to do this I don't have this
do you have to do this I don't have this
texture I'm sampling
from I do it for mobile.
This is cuz I have game map.
Does it not work when you do a 3D
Does it not work when you do a 3D
model? Good. Right.
definitely work for
definitely work for
a 3D model.
begin shader mode of
shader. Yeah, this is correct.
I'm just going to type this [ __ ] into
I'm just going to type this [ __ ] into
Grock. Look at this.
This. Get rid of this.
truck as well.
material shader isn't properly
material shader isn't properly
set. Is that a
set. Is that a
thing? Shader must
thing? Shader must
assign. Okay, so this is just a docs
assign. Okay, so this is just a docs
thing.
Cool. Perfect.
Now we can very
Now we can very
easily do what the heck we
vertex
position. What should be the value of
position. What should be the value of
vertex position?
Yeah. So, this gives you the
Yeah. So, this gives you the
shading.
Um, frag text cord.
Um, frag text cord.
That's kind of weird though, right?
That's kind of weird though, right?
Because
like not just where it is on the screen.
like not just where it is on the screen.
This is the correct attribute. Why is it
2D
vertex extra coordinates?
Where's the
um I had the docks for this,
right? I had like a window with docs and
right? I had like a window with docs and
here it
here it
is. This thing
is. This thing
has vertex text vertex normal. Okay.
Do you want the fragment height?
vertex Y. This thing thinks that it
vertex Y. This thing thinks that it
should
should
be normalized
be normalized
height. So, it should just
be it
be it
position the vertex position. That's
position the vertex position. That's
what I thought it would be, right?
But this apparently is not correct
But this apparently is not correct
because this just gives you
black invert three vertex position.
black invert three vertex position.
That is a default attribute. Good.
Upload mesh to
send there. Upload
send there. Upload
mesh. Yeah, we do have upload
mesh. Yeah, we do have upload
mesh. What is false on
this on
Trying to think what I could be doing
Trying to think what I could be doing
dumb
here. Where' my stream
go? Y over 32.
Oh, here it
Oh, here it
is.
Finally. Base vertex shader. This is
Finally. Base vertex shader. This is
what I was looking
what I was looking
for. Vertex
for. Vertex
position. Get fragment text board.
Yes. So this is not passed some
Yes. So this is not passed some
dummy.
Um vertex position was it ver fragment
Um vertex position was it ver fragment
text
text
cord and fragment color.
So this needs to be out, right?
Yeah, you literally just have to make
Yeah, you literally just have to make
this an output variable as well,
right? V vertex
export. You just need frag position.
export. You just need frag position.
Just Yes.
And actually that'll just make it work I
think like this.
Mama.
drag position.
All right, there you go. Now we can
All right, there you go. Now we can
actually write a basic shader for this
actually write a basic shader for this
thing pretty easily, I imagine.
Now we actually just have to make this
Now we actually just have to make this
thing adjust a little bit more. All
thing adjust a little bit more. All
right.
basic
thing. Trying to get some basic Viz map.
thing. Trying to get some basic Viz map.
There we go.
Okay, there's no
Okay, there's no
gradient. Kind of expect
um be a
gradient
dummy. Okay, way better. So now we
dummy. Okay, way better. So now we
actually get some sort of
gradient. The point of doing this is
gradient. The point of doing this is
that we're actually going to be able to
that we're actually going to be able to
tell uh when it has modified the
terrain. That's
There should be a draw FPS function,
There should be a draw FPS function,
right?
Okay. So, it can only get like 60s
Okay. So, it can only get like 60s
something FPS because of the way we're
something FPS because of the way we're
doing the mesh [ __ ]
dynamic mesh update.
Update mesh
Update mesh
buffer. Is that a
buffer. Is that a
thing? It is a
thing update height mash map. Let's do
client mesh. It's going to be create
client mesh. It's going to be create
heightmap mesh.
how they deal with
how they deal with
that vertices.
Raw
model load model from
mesh. Oh, okay. So, can you do like
mesh. Oh, okay. So, can you do like
this?
Okay.
Okay.
So, doesn't do much,
but okay. So, there's that. Now we have
but okay. So, there's that. Now we have
to call
to call
update buffer. Instead of unload we
update buffer. Instead of unload we
do update
buffer.
This does have normals.
Okay. And we
get vertex count.
We get this here. Update mesh buffer.
Okay, this is totally fine.
Is this going to use
Is this going to use
it? No, this doesn't have updating the
it? No, this doesn't have updating the
buffer,
buffer,
right? Upload
right? Upload
mesh. This has upload mesh. It doesn't
mesh. This has upload mesh. It doesn't
have update mesh
have update mesh
buffer. And then this is update for a
buffer. And then this is update for a
specific buffer index.
specific buffer index.
void start. So int
void start. So int
data this so the signature here is
data this so the signature here is
correct data size and then
correct data size and then
offset. Uh this seems correct to me then
update mesh
buffer. The one is UVs I
guess Xords of zero.
Okay. So why are we seg faulting
Okay. So why are we seg faulting
then? Oh well this should not be
upload. This is update heightmap
mesh. It should be something like this.
mesh. It should be something like this.
Maybe not uploaded
yet. Ah, there we go.
And uh we're not doing anything with
And uh we're not doing anything with
this yet, but this is this is
something. Hey,
something. Hey,
Plasma. Working on the
end. I had a really stupid hack for how
end. I had a really stupid hack for how
we were rendering the mesh before. So,
we were rendering the mesh before. So,
I'm fixing that so we can actually
I'm fixing that so we can actually
render it fast enough so we can see
render it fast enough so we can see
what's going on.
Oh, was that your PR? Yeah, I've been
Oh, was that your PR? Yeah, I've been
meaning to merge that. Hang on. Ah, it
meaning to merge that. Hang on. Ah, it
works. It gloriously
works. It gloriously
works. Look at that. The
works. Look at that. The
environment gloriously works. Except
environment gloriously works. Except
it's still uploading meshes constantly.
Okay, I will take a look at that
Okay, I will take a look at that
then. We only get 100
FPS. Figure that out.
I have to figure out how we can get the
I have to figure out how we can get the
uh the thing to sink way
faster
plasma. I tried installing
plasma. I tried installing
the void still gives me reward trouble.
the void still gives me reward trouble.
Not giving up
though. Yeah, I just fixed basics for
though. Yeah, I just fixed basics for
you. You got to take a look at like our
you. You got to take a look at like our
new tutorial end and like clean up
new tutorial end and like clean up
logic. There's so many places where you
logic. There's so many places where you
can screw stuff up and the checklist is
can screw stuff up and the checklist is
a good thing to
use. All right, this is
use. All right, this is
fine. Thank you for PR.
update height
update height
map.
also. Okay.
also. Okay.
It's still only 100 FPS.
It's still only 100 FPS.
be dramatically faster than that.
I guess we are kind of doing the entire
map. Deltas, we're not really doing
map. Deltas, we're not really doing
deltas.
and that's the super lameo way,
right? And then we can render like what
right? And then we can render like what
FPS. Yeah, easy 300,
FPS. Yeah, easy 300,
right? That's like good speed for
right? That's like good speed for
actually. I honestly want
actually. I honestly want
more. Do like 600
FPS. There you go.
We're going to do 8192 steps for this.
All right, I will be right back.
You're the best. Keep doing. Thank you
You're the best. Keep doing. Thank you
very much,
sir. This is a weird learning curve,
sir. This is a weird learning curve,
huh?
Is this
Is this
uh Oh, it only got two data
uh Oh, it only got two data
points.
points.
AC.
Annoying. Well, let's at least watch
it. It's just cuz the episode length is
it. It's just cuz the episode length is
too long.
Yeah, that's
terraforming. I mean, it's like trying,
terraforming. I mean, it's like trying,
right?
I think we give it some better
observations. Hang on. I got uh some
observations. Hang on. I got uh some
folks here. One second.
Hey Red. Yeah. What uh implementation
Hey Red. Yeah. What uh implementation
question you
got? Why do you use
got? Why do you use
LSTM? I'm not seeing any to temporal
LSTM? I'm not seeing any to temporal
data. Or is
there RL is inherently tempor like it's
there RL is inherently tempor like it's
a sequential decision-making
a sequential decision-making
problem. You get from the last time step
problem. You get from the last time step
there's a state the state goes to the
there's a state the state goes to the
next time step and so on and so forth.
next time step and so on and so forth.
So each time step is only using one like
So each time step is only using one like
one state of the
one state of the
LSTM but like it's inherently a
LSTM but like it's inherently a
sequential problem,
sequential problem,
right?
Also, yeah, our LSTM implementation is
Also, yeah, our LSTM implementation is
just good. So, we just use it
just good. So, we just use it
everywhere.
I think we give them a bigger bucket
capacity. Yeah, LSD. I'm
capacity. Yeah, LSD. I'm
good. We give them a bigger bucket
capacity. And then what we do Yes.
gives us anything
else. Bigger bucket
else. Bigger bucket
size. No.
Interesting. So, is it learning less or
Interesting. So, is it learning less or
is this some quirk of really long
is this some quirk of really long
episodes?
reds
the RL is inherently unless you're doing
the RL is inherently unless you're doing
like a bandit problem, it's inherently a
like a bandit problem, it's inherently a
sequential decision
problem like you're making an
problem like you're making an
observation in the end. You're taking an
observation in the end. You're taking an
action and then you make a then you make
action and then you make a then you make
another observation based on what
another observation based on what
happens and you take another action.
happens and you take another action.
Right? It's a sequential action
problem. Okay. Okay. So, I think there's
problem. Okay. Okay. So, I think there's
definitely something wrong with
uh with
[Music]
[Music]
this. Now, it goes back up.
It's kind of tough to
It's kind of tough to
say cuz like the thing is that here when
say cuz like the thing is that here when
you have the episodes this
long Yeah. Like the episodes being this
long Yeah. Like the episodes being this
long can mess it uh can mess it
up. Mess up the logging. I
mean they're doing something here,
mean they're doing something here,
right?
But they don't seem great.
Well, yeah. I have everything
Well, yeah. I have everything
accentuated so you can actually see
accentuated so you can actually see
what's going Come on.
Yeah, you can definitely see it's just
Yeah, you can definitely see it's just
they're not doing it at the moment. They
they're not doing it at the moment. They
are taking they have the ability to take
are taking they have the ability to take
out a good
chunk STS which is
valid. You do have long trajectories
valid. You do have long trajectories
technically right. The state keeps
technically right. The state keeps
getting preserved but then when you
getting preserved but then when you
train in backrop you uh you take like
train in backrop you uh you take like
segments usually like length 64 segments
segments usually like length 64 segments
as training
data. The way I'm doing it in is
data. The way I'm doing it in is
entirely standard as well. There's
entirely standard as well. There's
nothing weird here.
nothing weird here.
Like we have a couple small efficiency
Like we have a couple small efficiency
hacks, but the framing of it entirely
standard. Oops. And actually,
So l kick
turns something like this probably
turns something like this probably
works.
Do a few experiments, but something
Do a few experiments, but something
around this will
work. Ideas that you reset when they
work. Ideas that you reset when they
stop making good
stop making good
progress. So the smarter the agents
progress. So the smarter the agents
get, the better progress they can make.
Ah, this is not going to work the way I
Ah, this is not going to work the way I
wrote it.
something like this
instead. This might be way too
generous. You'll see.
fully ex Oh yeah, bet. So it's it's a
fully ex Oh yeah, bet. So it's it's a
tableau. So it's flat but not at ground
level. That is the current goal map.
pretty
pretty
much
much
step. I think this is
step. I think this is
too
too
aggressive. Got to rebuild.
I just got to find good reset conditions
I just got to find good reset conditions
and all that stuff.
turned added. Divide by tick divide by
turned added. Divide by tick divide by
numbum
agents. Maybe they're just getting a ton
agents. Maybe they're just getting a ton
of reward. I don't know.
Oh yeah, they're just getting too much
Oh yeah, they're just getting too much
reward
Tube size five
Okay, that's
Okay, that's
something. So, this
something. So, this
is
Yeah, way better.
Yeah, way better.
We'll see if it's stable or not.
Hello
Casper. We doing Morse code
now. Yeah. So this levels out at uh
now. Yeah. So this levels out at uh
about the curse go welcome as well. Uh
about the curse go welcome as well. Uh
we are leveling out here at 33ish with
we are leveling out here at 33ish with
the
the
current setup. We have lots of stuff we
current setup. We have lots of stuff we
can tweak though.
I do want to see how this policy
I do want to see how this policy
does or what this policy
does. Thoughts on Dreamer V3
Cool approach, good results. Too bad
Cool approach, good results. Too bad
half of the tricks that they uh
half of the tricks that they uh
advertise are wrong, or at least don't
advertise are wrong, or at least don't
do what they say they
do what they say they
do. Kind of mad about that one. They
do. Kind of mad about that one. They
wasted uh 10,000 GPU hours worth of
wasted uh 10,000 GPU hours worth of
compute on uh well, we had to doing
compute on uh well, we had to doing
ablations on it to find out that it
ablations on it to find out that it
really wasn't what the heck it was
really wasn't what the heck it was
presented as.
presented as.
So, I'm a bit miffed about that
paper. Whoa.
Okay. Yeah, that's some terraforming
Okay. Yeah, that's some terraforming
action, right?
I got to let this go maybe a little
longer on the
reset. I don't think like it's not like
reset. I don't think like it's not like
the whole paper is wrong, but all the
the whole paper is wrong, but all the
tricks that they say make it really
tricks that they say make it really
robust and stable are total [ __ ]
I think that it's like something to do
I think that it's like something to do
with their world model formulation
with their world model formulation
letting them scale to gigantic networks.
I forgot to recompile, didn't I?
Oops. We'll get this done and then we
Oops. We'll get this done and then we
will maybe we even set up a sweep on
will maybe we even set up a sweep on
this. I don't know. Pretty freaking
this. I don't know. Pretty freaking
awesome
awesome
already. Terraforming.
I have really good ideas on how to sweep
I have really good ideas on how to sweep
this actually because like so the cool
this actually because like so the cool
thing with this environment is there is
thing with this environment is there is
a like absolutely correct global score
a like absolutely correct global score
function you can compute which is this
function you can compute which is this
the sum of deltas um between this in the
the sum of deltas um between this in the
target map. So like I can actually add
target map. So like I can actually add
some pretty awesome metrics on
that thing. I don't know if this one is
that thing. I don't know if this one is
training quite as well because this one
training quite as well because this one
has slightly lower PF with longer
has slightly lower PF with longer
episode
episode
length. We shall
see. Say the ending state is
see. Say the ending state is
Mega Scarp with some pretty impressive
Mega Scarp with some pretty impressive
escarments. Agents descend and descend
escarments. Agents descend and descend
without impediment currently. Yes, we
without impediment currently. Yes, we
will be accounting for that
though. And this is like a brand new
though. And this is like a brand new
end.
I mean, we're not we're not there yet,
I mean, we're not we're not there yet,
right? This is like early testing on
stuff. I don't think that this agent is
stuff. I don't think that this agent is
going to be quite as
good. Yeah. I mean, it's doing stuff.
But yeah, it's getting lower score than
But yeah, it's getting lower score than
uh than
uh than
before. I think that the more frequent
before. I think that the more frequent
resets were actually good for it. We'll
resets were actually good for it. We'll
keep this
here. And then I think I'm going to
here. And then I think I'm going to
train this. And in the meantime, I'm
train this. And in the meantime, I'm
going to
going to
fix a few graphics.
came out
purple. There we are.
It's a lot more Marsy, right?
pretty
pretty
mesmerizing. It's not super smart yet
though. I mean, there are several
though. I mean, there are several
reasons though that this could be uh the
reasons though that this could be uh the
case. Go compile this thing.
30 FPS. Yes.
Okay. I mean, they can definitely take a
Okay. I mean, they can definitely take a
decent chunk of dirt
out. Like, they can definitely take a
out. Like, they can definitely take a
decent chunk of dirt out.
Yeah. So the acceleration
Yeah. So the acceleration
is
-2. Try
this. See if this lets
this. See if this lets
them dramatically
them dramatically
different. cuz we're going to have an
different. cuz we're going to have an
apples to
apples to
apples comparison
now. Yeah. Get rid of this one. This one
now. Yeah. Get rid of this one. This one
doesn't do very well.
idea here is that they're they
idea here is that they're they
accelerate so slowly right now that like
accelerate so slowly right now that like
the way the M dynamics work, it's kind
the way the M dynamics work, it's kind
of more efficient to just drive in
of more efficient to just drive in
circles and like pick up dirt and spew
circles and like pick up dirt and spew
it everywhere. I think that they're
it everywhere. I think that they're
actually going to be able to be more
actually going to be able to be more
precise if they have uh more control
precise if they have uh more control
over their
over their
acceleration. We'll see.
Any ideas here?
So apparently this did not
So apparently this did not
help which is
interesting. Unless hang
interesting. Unless hang
on. No, I did
recompile. I definitely did recompile.
recompile. I definitely did recompile.
So that is uh unfortunate. that.
Maybe we make them not be able to drive
Maybe we make them not be able to drive
into uh to drive through cliffs.
Next, what we
do
is stuck
Is there height?
Oops.
But we got bucket offset here.
What is the best way to do this?
Add some additional restrictions.
We're moving forward.
trying to think how we do the
trying to think how we do the
collisions.
collisions.
A good simple way to do the collisions.
We can just set velocity to zero.
Yeah. So we do
I'm trying to think what the heck how we
I'm trying to think what the heck how we
do
this cuz like the thing is you need them
this cuz like the thing is you need them
to be able to back out but there's no
to be able to back out but there's no
notion of like a front of the dozer.
Oh, I know what we can
Oh, I know what we can
do. I mean, it's kind of jank, but
You do this bucket shenanigans.
The idea is if you try to go
The idea is if you try to go
somewhere and
somewhere and
um the height difference is too big, you
um the height difference is too big, you
get stopped.
Okay. So yeah, this drops the dirt drops
Okay. So yeah, this drops the dirt drops
in the wrong spot is
all cuz it's around the dozer Now,
Ricky.
I need to adjust the camera on this
I need to adjust the camera on this
Okay.
Do I use
Do I use
XY? I do use Z as height.
XY? I do use Z as height.
Okay, he is up.
Still
Still
no. I thought this would do
no. I thought this would do
something.
Camera. That's looking at something, I
Camera. That's looking at something, I
guess.
I don't know why this thing doesn't
I don't know why this thing doesn't
um does not make sense to
um does not make sense to
me. Hang
me. Hang
on. If I go like this, am I higher
on. If I go like this, am I higher
up? Yeah, I am higher up, right?
Okay.
and
wait. He's
115.
Okay.
Red. So
Red. So
confused.
Oh, is it just clipping?
Yeah. So, there's something crazy going
Yeah. So, there's something crazy going
on cuz it's like the exact
position. I wonder if
um what if this one has to be zero and
um what if this one has to be zero and
this one has to
this one has to
be uh Okay, so the directions are messed
be uh Okay, so the directions are messed
up. Hang on. So this is probably
why. But it's not is the
thing. This is like this is zoom,
thing. This is like this is zoom,
right?
Not Oh, that is zoom. the like.
camera rotation. Maybe.
3D camera split
screen. The third person
Not going to
work. Oh, wait. Camera mode.
Leave it like this. Now
The fact that this is stuck is weird.
a pipe 20. This seems like wrong
a pipe 20. This seems like wrong
indexing. Okay.
Wait,
Wait,
what? Oh, is X like totally screwed up?
Oh, this is totally fine.
What's Hey,
That pipe
That pipe
106 X is some crazy
thing redefined or something.
Like the Y is also screwed up, right?
That's crazy.
Why does it being like
this
d fine?
Okay, X. So, desk X desk Y is totally
Okay, X. So, desk X desk Y is totally
fine. And then X is just screwy for some
fine. And then X is just screwy for some
reason.
Not like a cast thing, right? Like what?
Not like a cast thing, right? Like what?
What is this?
Okay, we're just going to put a break
Okay, we're just going to put a break
point. I like this is
ridiculous. Oh, wait. Specifies
But yeah, it doesn't break on these.
Okay. So we get undefined behavior here.
really weird that that's freaking
really weird that that's freaking
undefined
undefined
behavior. I will say
Oh yeah, that is
outside. What?
Ah, be
20. It's very weird to me that that is
20. It's very weird to me that that is
undefined behavior. Like the hell? It's
undefined behavior. Like the hell? It's
not just uh that's kind of crazy.
Sometimes it just decides that now
Sometimes it just decides that now
you're not moving. It's weird.
Oh, is it the Z?
Dozer height was registered as way
Dozer height was registered as way
higher than it
should. y * m size plus x. Isn't that
should. y * m size plus x. Isn't that
what we do?
All right. Explode.
Okay. So
immediately this is freaking wrong,
immediately this is freaking wrong,
right?
reasonable.
Like am I going nuts somehow?
Like am I going nuts somehow?
Like
why? Oh, this should be fine.
Is that the actual dozer? Why?
Okay. So, it says dozer X is 105, Y
is that doesn't agree with what we have
here. Dozer.x
Axe. Oh, are you dumb? I think I'm dumb.
Axe. Oh, are you dumb? I think I'm dumb.
Hang on. I think I'm real
dumb. Yeah, real real
dumb. Yeah, it's a different dozer.
My bad.
325. Okay, now we can do
this. Okay, but as soon as you run into
this. Okay, but as soon as you run into
something,
it's basically
Okay. So this is good. This is where we
Okay. So this is good. This is where we
want those
want those
X. Okay. So now we actually
get
height. So this says this is 26 which
height. So this says this is 26 which
makes absolutely no sense.
Death tight is correct.
Is this casting
Is this casting
shenanigans? Is that what this
is? Got to be casting shenanigans,
is? Got to be casting shenanigans,
right?
Yeah. You know what this is? This is
Yeah. You know what this is? This is
going to give you like half of a row, I
going to give you like half of a row, I
bet.
No, you actually
No, you actually
get I did I not
rebuild? I
did.
Those are
height. It
claims the position
claims the position
is claims a dozer's on a
is claims a dozer's on a
hill. I do not understand why.
I think this is it either though,
right? Hey,
bet. For some reason, this is still
bet. For some reason, this is still
claiming that the dozer is at
claiming that the dozer is at
Weird height.
six.
I wonder if it's um Hang
on. So, it's not like some memory
on. So, it's not like some memory
overwrite shenanigans.
right there at 3:18.
moves a bit.
No, it's not the destination. The
No, it's not the destination. The
destination is fine.
It's like crazy annoying.
Do I have the indexing just wrong
Do I have the indexing just wrong
somehow?
Now, when I make this
I would be so surprised if
So this immediately fails.
But that doesn't make sense how that
But that doesn't make sense how that
immediately fails.
And the thing is that they
And the thing is that they
were a height map on the
were a height map on the
renderer
fine time size. So this is y * size plus
x y * size plus
x. That's what we
have. Is there just some random like
have. Is there just some random like
single spike in the map? That's
single spike in the map? That's
not No, there can't just be like some
not No, there can't just be like some
random single spike, right?
and like I can't scoop it either. It
and like I can't scoop it either. It
says
bizarre
Come on.
We literally still have this, don't
we? We're fine.
still hit it.
I have absolutely no idea what's
I have absolutely no idea what's
happening. I have no idea. It's like I'm
happening. I have no idea. It's like I'm
rendering the
rendering the
terrain from the same map.
It's very
weird. It's like a super basic sim as
weird. It's like a super basic sim as
well.
well.
We should not be hitting this level of
We should not be hitting this level of
[ __ ] uh this early on into dev of
[ __ ] uh this early on into dev of
the sim. This is like very easy.
especially considering we shouldn't even
especially considering we shouldn't even
hit it here.
hit it here.
Like if anything, it should tell us that
Like if anything, it should tell us that
the destination is too tall. We
the destination is too tall. We
shouldn't be able to get to this tile,
shouldn't be able to get to this tile,
which means that like
You would think it would be
You would think it would be
something something with the
something something with the
indexing, but the indexing looks fine.
So we get like
this like 26
this like 26
whatever. Okay. And
somehow map height freaking change on
somehow map height freaking change on
us.
Okay. So,
Okay. So,
here this is going to catch
it. Go use the restroom real quick. be
it. Go use the restroom real quick. be
back and we'll figure out what the heck
back and we'll figure out what the heck
is going on with this Okay.
Hey,
Hey,
Spencer. I'm stuck on a bug. I'm trying
Spencer. I'm stuck on a bug. I'm trying
to add collisions and I'm stuck on a bug
to add collisions and I'm stuck on a bug
where uh they're like phantom
where uh they're like phantom
collisions. It's a really cool sim
collisions. It's a really cool sim
though. I can show you
though. I can show you
it kind
of. It thinks it's colliding with
of. It thinks it's colliding with
something
here. I added a shader and did a few
here. I added a shader and did a few
other things as well.
That was
want me to work on anything? Uh, once I
want me to work on anything? Uh, once I
figure out this bug
The thing is that this shouldn't be
The thing is that this shouldn't be
possible
because we just checked this above,
because we just checked this above,
right?
Those are velocities five as well.
Yeah. One sec, folks.
Oh, my bad. Probably better. I was
Oh, my bad. Probably better. I was
muted. Just a bunch of swearing at
muted. Just a bunch of swearing at
ridiculous code.
Go check for them.
I don't have that in my branch and it's
I don't have that in my branch and it's
still broken.
I've run Sutton embaro doing independent
I've run Sutton embaro doing independent
research think going for PhD will be
research think going for PhD will be
worth it you do a PhD if you know that
worth it you do a PhD if you know that
you want to do a PhD that's my
you want to do a PhD that's my
recommendation
like you go go like figure out what a
like you go go like figure out what a
PhD entails, publications, you know, the
PhD entails, publications, you know, the
like five years of doing whatever and if
like five years of doing whatever and if
like that appeals to you, you do a PhD.
like that appeals to you, you do a PhD.
If not, you do other
If not, you do other
things. I don't encourage I don't try to
things. I don't encourage I don't try to
make people go do a PhD, right? It's
make people go do a PhD, right? It's
like if you want to do a PhD, do a PhD.
This is still zero reward.
How's this still not freaking fix it is
How's this still not freaking fix it is
my question.
array of int action.
So they don't have this
This is also insane.
This thing gets zero reward.
This never
gets never gets any data into
rewards. They never get any rewards.
Check out this freaking
met. I got to think this thing is
ridiculous. I'm going to just clone
ridiculous. I'm going to just clone
there.
Why they're using make files
ridiculous thing.
probably just pip install pop,
right? No, it's they have a weird setup.
right? No, it's they have a weird setup.
I need help understanding what the hell
I need help understanding what the hell
they've been doing.
You
It's literally like, "Please install AWS
It's literally like, "Please install AWS
CLI on your Mac to run training.
And it's like not even in here.
I like I have no idea what the hell
I like I have no idea what the hell
they're doing with
um like I don't know why the hell they
um like I don't know why the hell they
would have it set up like
like mindbogglingly over complicated.
And like the devs who work on it
And like the devs who work on it
literally don't know where it is in
literally don't know where it is in
their own code because they have too
their own code because they have too
much
I mean, this isn't my fault that they
I mean, this isn't my fault that they
did it this way.
Like I'm trying to get them baselines,
Like I'm trying to get them baselines,
but they introduced a bug where they
but they introduced a bug where they
have all their rewards zero and like
have all their rewards zero and like
they've got 15 engineers and they have
they've got 15 engineers and they have
not been able to figure this out for
not been able to figure this out for
multiple days because of how complicated
multiple days because of how complicated
it is, which is like fair enough. It's
it is, which is like fair enough. It's
hard to like get this stuff simplified
hard to like get this stuff simplified
uh with larger teams, but
uh with larger teams, but
like I mean it's just it's not done in a
like I mean it's just it's not done in a
way that I can help them at all.
You can try. It's not going to make any
You can try. It's not going to make any
sense. I don't even know how to run
sense. I don't even know how to run
their

Kind: captions
Language: en
Good
Good
morning. We're back live
here. Little bit of a late start
here. Little bit of a late start
today. It is pouring rain
today. It is pouring rain
outside. Kind of just a sleepy
day. I think what we're going to do is
day. I think what we're going to do is
we're going to look at the experiments
we're going to look at the experiments
from last night. They seem to have done
from last night. They seem to have done
pretty well.
pretty well.
And then we're probably going to just do
And then we're probably going to just do
some work on
some work on
terraform. Probably a good thing to do
terraform. Probably a good thing to do
today.
So we have a uh a good number
So we have a uh a good number
of the results.
got
got
pawn got
breakout. Now, it is moderately annoying
breakout. Now, it is moderately annoying
to me that um
to me that um
We don't get a full 200
experiments because of the way that
experiments because of the way that
um protein sampling takes quite a
while. Think if there's any easy way to
while. Think if there's any easy way to
like improve
that. There really isn't.
You kind of just need
You kind of just need
um like the uh the data set just kind of
um like the uh the data set just kind of
grows a
bunch.
Our current solve
is 24
seconds. Thank you, Captain. My
bad. I don't know. I get I just have
bad. I don't know. I get I just have
days where I'm just like off, you know?
days where I'm just like off, you know?
Feel like kind of tired, not super
focused. Pong definitely worked very
focused. Pong definitely worked very
well. Look at
well. Look at
this. The pong we solve in 3 seconds.
Then this uh this breakout sweep for
Then this uh this breakout sweep for
some reason we don't quite get the sub20
some reason we don't quite get the sub20
with this
with this
one. How are you able to get that fast?
one. How are you able to get that fast?
Protein new algorithm frame
Protein new algorithm frame
skip and we can look at
it. I mean, this is just like all the
it. I mean, this is just like all the
like all the new
like all the new
advancements from uh 3
advancements from uh 3
0 stuck onto this like Okay, here. This
0 stuck onto this like Okay, here. This
is a 3 second solve, right? I like this
is a 3 second solve, right? I like this
one. This one's pretty consistent.
Um, time
steps. Time steps for score maybe.
Oh, this is funny. So, it's actually at
Oh, this is funny. So, it's actually at
min total time steps, meaning that this
min total time steps, meaning that this
could have been even potentially
could have been even potentially
lower cuz it doesn't let you train for
lower cuz it doesn't let you train for
less than uh 10
less than uh 10
million. So, possibly we could get two
seconds. Hang on, I got somebody at the
seconds. Hang on, I got somebody at the
door.
Okay. All I really want to do right now
Okay. All I really want to do right now
with these
with these
experiments is
experiments is
um pick two new
um pick two new
environments to run sweeps on.
Let's do
um
um
enduro and uh triple
enduro and uh triple
triad be
good. Enduro and
Moa. Moa might be
good. Yeah, we'll do
good. Yeah, we'll do
Moa. MOA is actually really easy as the
Moa. MOA is actually really easy as the
thing because
thing because
like the opponents aren't very good. So,
like the opponents aren't very good. So,
all you have to do is learn how to run
all you have to do is learn how to run
it
down and like press your buttons.
It's still cool
though. I don't know, man. The main
though. I don't know, man. The main
limitation I have in dev at the moment
limitation I have in dev at the moment
is just
is just
like I get really really good dev days
like I get really really good dev days
and I need some rest.
and I need some rest.
So, I have a slow start of the
So, I have a slow start of the
week is fine. We got that crazy bug
week is fine. We got that crazy bug
fixed on Monday. I had like 14 hour
fixed on Monday. I had like 14 hour
stream on Sunday. Fixed a few things
stream on Sunday. Fixed a few things
yesterday. Going to be a few days before
yesterday. Going to be a few days before
I'm fully recharged to like hammer out a
I'm fully recharged to like hammer out a
new sim or
whatever. Multi-agent training. Oh yeah,
whatever. Multi-agent training. Oh yeah,
selfplay
selfplay
stuff little harder, but we can I don't
stuff little harder, but we can I don't
think I would want to start on that for
think I would want to start on that for
like competitive selfplay. I think I'd
like competitive selfplay. I think I'd
want to make again like if you want to
want to make again like if you want to
do science side work with us, we have
do science side work with us, we have
ways to do this. They're like very
ways to do this. They're like very
intentional ways we can set it up now. I
intentional ways we can set it up now. I
basically I think I have the formula to
basically I think I have the formula to
smash pretty much any individual area of
smash pretty much any individual area of
research we focus on.
research we focus on.
Um it just takes like some end work and
Um it just takes like some end work and
such. I think it's not burnout. Yeah, I
such. I think it's not burnout. Yeah, I
try to figure out how to get like more
try to figure out how to get like more
consistently productive days out of
consistently productive days out of
myself. You know, they're things that
myself. You know, they're things that
help. Good sleep, good exercise, good
help. Good sleep, good exercise, good
diet, which I'm doing pretty much all of
uh and ultimately can only be at uh peak
uh and ultimately can only be at uh peak
performance so much of the
performance so much of the
time. I think what we're going to do
time. I think what we're going to do
today is try to get
today is try to get
the just get like some new experiments
the just get like some new experiments
running so we like keep making progress
running so we like keep making progress
on that. Uh the new machines are delayed
on that. Uh the new machines are delayed
unfortunately to Monday, not Friday,
unfortunately to Monday, not Friday,
which kind of
which kind of
sucks. So uh I think we're going to work
sucks. So uh I think we're going to work
on just Terraform and stuff in the
on just Terraform and stuff in the
meantime. We're just kind of like do
meantime. We're just kind of like do
some chill sim
dev. So this reward for tower is this is
dev. So this reward for tower is this is
getting clipped anyways.
No.
really simple new M. Yeah. I
really simple new M. Yeah. I
mean, I can tell you exactly how we do
mean, I can tell you exactly how we do
this, right? So, like we build an M to
this, right? So, like we build an M to
specifically just test out the dynamics
specifically just test out the dynamics
of like competitive play. We build like
of like competitive play. We build like
the simplest possible test case. And by
the simplest possible test case. And by
the way, this was a really bad idea
the way, this was a really bad idea
before Puffer. Um because like pretty
before Puffer. Um because like pretty
much like getting RL working on a a
much like getting RL working on a a
simple or hard end had a fixed cost to
simple or hard end had a fixed cost to
it where like you would just have to
it where like you would just have to
fiddle with things with for a certain
fiddle with things with for a certain
number of weeks. Uh but now because
number of weeks. Uh but now because
Puffer is like so consistent and
Puffer is like so consistent and
reliable like we can probably just knock
reliable like we can probably just knock
out a couple simple tests to figure out
out a couple simple tests to figure out
dynamics of selfplay and such and go
dynamics of selfplay and such and go
from there.
from there.
Like you literally all you need is you
Like you literally all you need is you
need some sort of game that has uh an
need some sort of game that has uh an
ELO curve of some
variety like where like it is possible
variety like where like it is possible
to get better and better at
it and you also the actions have to be
it and you also the actions have to be
somehow dependent on your opponent as
somehow dependent on your opponent as
well. It can't be like you just ignore
well. It can't be like you just ignore
your opponent.
I mean, heck, connect four, which we
I mean, heck, connect four, which we
already have, would work,
right? Has an easier action space as
right? Has an easier action space as
well.
Pong would be dead simplest. Yeah. So,
Pong would be dead simplest. Yeah. So,
pong. The thing is I think there's a
pong. The thing is I think there's a
pretty low skill floor to
pretty low skill floor to
Pong. You ideally want something with a
Pong. You ideally want something with a
higher skill
ceiling. Actually, like the Robbo Code M
ceiling. Actually, like the Robbo Code M
uh that Toina was like trying to finish
uh that Toina was like trying to finish
would be a good one. There are a lot of
would be a good one. There are a lot of
things you could do.
things you could do.
But pretty much you just build a simple
But pretty much you just build a simple
end like that to
end like that to
test. You build something ideally that
test. You build something ideally that
has like a good scripted bot as well
has like a good scripted bot as well
with it, right? So like the scripted
with it, right? So like the scripted
bots actually good. You pick an end
bots actually good. You pick an end
where it's easy to do that. And then you
where it's easy to do that. And then you
compare training versus scripted bot to
compare training versus scripted bot to
like training versus uh
like training versus uh
selfplay and you make it really
selfplay and you make it really
fast. You just smash all this stuff very
fast. You just smash all this stuff very
easy.
8,000 100
8,000 100
m per core.
How good is connect for scripted bot?
How good is connect for scripted bot?
Not great. It's very hard to make like
Not great. It's very hard to make like
good searchbased
good searchbased
bots cuz they're slow.
Like the easiest the easiest way frankly
Like the easiest the easiest way frankly
is um like hidden information games are
is um like hidden information games are
usually the easiest one to make bots for
usually the easiest one to make bots for
because you can just cheat by having
because you can just cheat by having
full
full
information. I'd have to think about it
information. I'd have to think about it
for a bit, but I would be able to come
for a bit, but I would be able to come
up with something like no problem. Or
up with something like no problem. Or
you can,
right? There are all sorts of like like
right? There are all sorts of like like
new M and such that I want to build.
new M and such that I want to build.
It's just a matter of getting 3 0 out,
It's just a matter of getting 3 0 out,
getting
getting
myself rested. The the last few weeks of
myself rested. The the last few weeks of
like the last several weeks of 3, it's
like the last several weeks of 3, it's
just been a lot of grind on all this
just been a lot of grind on all this
fiddly bits.
do 60. Okay.
Now see this is the annoying bet.
128. Do one. We do it this
way. Yeah, that works. Yeah. So, as long
way. Yeah, that works. Yeah. So, as long
as we keep the agents a multiple of 128,
as we keep the agents a multiple of 128,
it's
fine. I'm actually curious if this just
fine. I'm actually curious if this just
trains
I can see that they're leveling radiant
I can see that they're leveling radiant
levels going
up and there's Perf going
up and there's Perf going
up and it is solved in 30 million
up and it is solved in 30 million
steps. So, this will be a super easy
steps. So, this will be a super easy
sweep, I'm sure.
This one will be actually an interesting
This one will be actually an interesting
sort of a test.
We'll do a max
We'll do a max
of 400
of 400
mil in of 200 No.
That'll be fine.
Ah, so this is what died. This died
Ah, so this is what died. This died
because of an internet outage.
did not help. So, we'll ignore this
have a good morning. Little bit of a
have a good morning. Little bit of a
slow start today, Tyler, but we're doing
slow start today, Tyler, but we're doing
well. You defend this week, right? You
said that's one terminal.
And we have the second terminal
here tomorrow. Good luck,
here tomorrow. Good luck,
man. Get some rest. Go over
man. Get some rest. Go over
everything. Presumably like done the
everything. Presumably like done the
thing yourself. Like you've done you
thing yourself. Like you've done you
could gone through the presentation out
could gone through the presentation out
loud a ton of times.
loud a ton of times.
Best thing I can say from my defense
Best thing I can say from my defense
is I mean like I went like I gave that
is I mean like I went like I gave that
presentation to myself probably like at
presentation to myself probably like at
least 50 maybe even 100
least 50 maybe even 100
times before I gave uh my the defense. I
times before I gave uh my the defense. I
put no effort into the manuscript
put no effort into the manuscript
whatsoever. Like the manuscript is just
whatsoever. Like the manuscript is just
all my papers stapled together with like
all my papers stapled together with like
some whatever you know filler in between
some whatever you know filler in between
the sections. Um I did write a decent
the sections. Um I did write a decent
like intro conclusion. That's it.
like intro conclusion. That's it.
Um, but yeah, I put a lot of effort into
Um, but yeah, I put a lot of effort into
the defense itself. It was
the defense itself. It was
good. If you can get it videoed and
good. If you can get it videoed and
stick it online, it's a good
stick it online, it's a good
idea. Not one yet. Jesus, do that,
idea. Not one yet. Jesus, do that,
man. Yeah. Just like I would, what I
man. Yeah. Just like I would, what I
would do is I would just I would spend
would do is I would just I would spend
all day just giving it out loud in your
all day just giving it out loud in your
room to yourself. That is it. Can't
room to yourself. That is it. Can't
record? That's
record? That's
okay. But yeah, the delivery of the
okay. But yeah, the delivery of the
thing is honestly the most important
thing is honestly the most important
part. Like a lot of my slides were just
part. Like a lot of my slides were just
random images from like earlier papers
random images from like earlier papers
just pasted on without like any even
just pasted on without like any even
real editing. It was I put all the
real editing. It was I put all the
effort pretty much into the delivery and
effort pretty much into the delivery and
the flow of it.
I would like not even care if you have
I would like not even care if you have
like I would spend no more time on
like I would spend no more time on
polishing slides and I would just focus
polishing slides and I would just focus
on delivery. That's the most important
on delivery. That's the most important
thing. on my two cents.
Yeah, I mean like I didn't leave this
Yeah, I mean like I didn't leave this
out or I didn't like I didn't do this or
out or I didn't like I didn't do this or
what. Like the most important thing is
what. Like the most important thing is
that the core of what you're doing is
that the core of what you're doing is
well delivered and
flows. That's all I can say.
Okay, so we've got now I will monitor
Okay, so we've got now I will monitor
these throughout the day. We've got our
these throughout the day. We've got our
next two sweeps
going. I uh actually I think 300 I can
going. I uh actually I think 300 I can
rebuild real quick,
rebuild real quick,
right? Yeah, I can rebuild 300 real
right? Yeah, I can rebuild 300 real
quick. I mean, not throw, the the box
three. That'll get us one more
experiment. I feel pretty confident in
experiment. I feel pretty confident in
my presentation skill. You can look at
my presentation skill. You can look at
my thesis, def delivery, and you can
my thesis, def delivery, and you can
decide whether you think that that was
decide whether you think that that was
well delivered or not. Did pretty well
well delivered or not. Did pretty well
on YouTube.
on YouTube.
Um, it doesn't come naturally to almost
Um, it doesn't come naturally to almost
anyone. I will say like I know I don't
anyone. I will say like I know I don't
really know anyone who can give an
really know anyone who can give an
actually good presentation
actually good presentation
unrehearsed. It's very very rare. Like
unrehearsed. It's very very rare. Like
you basically have to be a businessman
you basically have to be a businessman
who just gives presentations all day and
who just gives presentations all day and
then it's like it's not even that you're
then it's like it's not even that you're
natural, it's that you're so well
natural, it's that you're so well
practiced.
Um, so
Yeah. Five years. Yeah. Well, the thing
Yeah. Five years. Yeah. Well, the thing
is so am I, but it atrophies. Like you
is so am I, but it atrophies. Like you
see the way that I talk on stream is
see the way that I talk on stream is
nowhere near as polished as when I was
nowhere near as polished as when I was
giving like conference talks and things.
giving like conference talks and things.
It's just it atrophies, right? I'm here.
It's just it atrophies, right? I'm here.
I don't talk to almost anyone throughout
I don't talk to almost anyone throughout
the day. It's actually one of the
the day. It's actually one of the
reasons I started streaming is at least
reasons I started streaming is at least
I narrate my thoughts in some sort of
I narrate my thoughts in some sort of
coherent manner, you know, and that
coherent manner, you know, and that
helps a lot. But
helps a lot. But
um yeah, it's mainly just it's you need
um yeah, it's mainly just it's you need
the reps. You just need the reps on
it. And I mean like I am somebody who
it. And I mean like I am somebody who
has actually put substantial effort into
has actually put substantial effort into
getting better at giving presentations
getting better at giving presentations
specifically, right? A lot of people
specifically, right? A lot of people
it's kind of just like you know waved
it's kind of just like you know waved
aside. I actually did I didn't get focus
aside. I actually did I didn't get focus
on getting better at writing papers at
on getting better at writing papers at
all. My papers suck. Like it's not that
all. My papers suck. Like it's not that
they suck. Like I can't write good
they suck. Like I can't write good
papers. I can't write good academic
papers. I can't write good academic
papers because I hate the style of them
papers because I hate the style of them
and I just never put the effort into
and I just never put the effort into
like getting that style done the way
like getting that style done the way
that it's expected. But um presentations
that it's expected. But um presentations
I actually did put effort into and it
I actually did put effort into and it
takes freaking effort. Like I don't
takes freaking effort. Like I don't
think still today I could not just put a
think still today I could not just put a
presentation together, not rehearse it.
presentation together, not rehearse it.
Like even if I spent a 100 hours on the
Like even if I spent a 100 hours on the
slides, like I still wouldn't have it be
slides, like I still wouldn't have it be
the way I would want it to be without
the way I would want it to be without
having gone through it a ton a ton of
having gone through it a ton a ton of
times.
I don't want to wipe this box yet.
Yeah, I don't want to actually wipe this
Yeah, I don't want to actually wipe this
just yet
just yet
because I don't have to to be fair.
Uh, I'll leave this one for now. I'll
Uh, I'll leave this one for now. I'll
leave this one for now. Just go. I'm
leave this one for now. Just go. I'm
going to not mess that up. I'm going to
going to not mess that up. I'm going to
go just work on terraform.
Okay, I think what I want to do for
Okay, I think what I want to do for
this
dozer is
dozer is
load and we have capacity.
Go to the step function.
Can do
scoop. Let me just
scoop. Let me just
Don't like the way that I've done
this.
this.
Three three actions.
[Music]
Three. Oh.
Okay. So what we do
here this is fine.
Okay. So, we have to load the dozer by
Okay. So, we have to load the dozer by
one unit, I believe.
Okay. So, this is don't
overload. Okay. So, that loads the
overload. Okay. So, that loads the
bucket.
Uh, this one is a lot easier, I believe.
Can't make it
over. Okay. So, we unload the dozer like
over. Okay. So, we unload the dozer like
this.
Now we got to do the rewards.
target height as well.
Get the target map going in here.
going to be an initial target map. Make
going to be an initial target map. Make
it five
it five
height. Hey
height. Hey
bet, we're doing a terraformer.
Man, it's annoying.
Man, it's annoying.
Like, it's like kind of like a sleepy,
Like, it's like kind of like a sleepy,
rainy day. And the way that I would get
rainy day. And the way that I would get
myself, you know, really energized
myself, you know, really energized
normally would be to go for like a hard
normally would be to go for like a hard
run or something, but I got this screwy
run or something, but I got this screwy
knee, so like I can't even I got to be
knee, so like I can't even I got to be
really careful with all my lower body
really careful with all my lower body
training. I can't even do a push press,
training. I can't even do a push press,
which sucks. Like I got half the
which sucks. Like I got half the
equipment in the back is for doing that.
equipment in the back is for doing that.
And I can't even do that
lift. Speaking of which, let me at least
lift. Speaking of which, let me at least
get my shoulder training in.
limp. Well, to be
limp. Well, to be
fair, even when I'm not injured, I'm
fair, even when I'm not injured, I'm
usually limping from uh just being sore
usually limping from uh just being sore
from training.
Divide this
by
by
this. Never heard of Pip hanging on
this. Never heard of Pip hanging on
puffer
puffer
box. Uh, I don't know. I haven't heard
box. Uh, I don't know. I haven't heard
from
from
him. Oh, wait. No, I have. Let me see if
he's Let me ask him.
paper. This isn't
paper. This isn't
it. Where the heck is
it. Where the heck is
it? This
really high latency and booted me. Uh,
really high latency and booted me. Uh,
there was one internet disconnect. We
there was one internet disconnect. We
were switching over a network
thing. It should have only been a minute
thing. It should have only been a minute
or
or
two. I
two. I
said we got Enduro running a sweep, by
said we got Enduro running a sweep, by
the way.
the way.
Nice
environment. There we
environment. There we
are. You got
are. You got
uh the
enduro. That looks pretty good.
enduro. That looks pretty good.
We have here
We have here
a two-day completed
a two-day completed
in or three days completed almost in 200
mil. I actually don't know. The sweeps
mil. I actually don't know. The sweeps
are going to be a little bit weird with
are going to be a little bit weird with
Enduro, right? Because like even if you
Enduro, right? Because like even if you
have a perfect policy, like the game
have a perfect policy, like the game
just takes a very long time to play. So,
just takes a very long time to play. So,
I imagine that like for any fixed budget
I imagine that like for any fixed budget
of steps, you're probably going to get a
of steps, you're probably going to get a
um you're going to get like slow hypers
um you're going to get like slow hypers
would be my
guess
depending. But then there's the score on
depending. But then there's the score on
this. I mean, this is ridiculous. This
this. I mean, this is ridiculous. This
is Is this one
is Is this one
E? I think it just solves in Yeah, this
E? I think it just solves in Yeah, this
literally solves in
literally solves in
uh in like 10 million steps. Not
even. The MOA is not going to need a
even. The MOA is not going to need a
full
full
sweep. Takes four minutes. Yeah, but how
sweep. Takes four minutes. Yeah, but how
many steps is that? Because like you
many steps is that? Because like you
have to multiply the number of steps by
have to multiply the number of steps by
the number of N's and that's how many
the number of N's and that's how many
samples you need.
samples you need.
with perfect play to complete a
day. Oh yeah, bet. I got a bet sized
day. Oh yeah, bet. I got a bet sized
project for
project for
you. If you're
you. If you're
interested and want some RL clout, I
interested and want some RL clout, I
would want to clear it with this guy
would want to clear it with this guy
first.
But
But
um you probably know this
um you probably know this
name. Where is
he? So this guy here, he just released
he? So this guy here, he just released
this thing. He's uh
this thing. He's uh
He was responsible for a lot of like
He was responsible for a lot of like
early Atari stuff as well. So it's
early Atari stuff as well. So it's
already in
already in
C++. I would have to clear it with him
C++. I would have to clear it with him
like you know get his blessing to do a
like you know get his blessing to do a
port of it. But it looks like very very
port of it. But it looks like very very
simple
simple
code like this is nothing. Where is
code like this is nothing. Where is
it?
Uh yeah. So there's like it's just very
Uh yeah. So there's like it's just very
little stuff in here.
Um, you could probably port this thing
Um, you could probably port this thing
to be like a single line puffer
end and uh get it to go really really
end and uh get it to go really really
fast in
fast in
puffer. If you're interested, let me
puffer. If you're interested, let me
know and I will try to clear it with
know and I will try to clear it with
him.
one line
it was
I figured like I just saw it and I was
I figured like I just saw it and I was
like, "Ah, that's a betsized project."
like, "Ah, that's a betsized project."
you
know, bet that size project meaning like
know, bet that size project meaning like
um it's the type of thing that would
um it's the type of thing that would
probably if I were like, you know,
probably if I were like, you know,
assuming I'm actually having good days,
assuming I'm actually having good days,
it would probably take me like two or
it would probably take me like two or
three days to do um and like it would
three days to do um and like it would
stop before the code gets
unmanageable. Do it in a day. Easy.
I don't know about doing it in a
I don't know about doing it in a
day. That also means having it like
day. That also means having it like
correct in
training. Okay. Vibe coding. Just like
training. Okay. Vibe coding. Just like
prompting a thing to output whatever
prompting a thing to output whatever
does not count. Bet.
What the claw
What the claw
enth? No, I don't
enth? No, I don't
like these things are very
like these things are very
brittle. One shot a puffer enth. I mean,
brittle. One shot a puffer enth. I mean,
I did the target M the other day,
I did the target M the other day,
right? The target M took me like four or
right? The target M took me like four or
five hours, including all the docks and
five hours, including all the docks and
stuff.
Actually we can move we can make this
Actually we can move we can make this
easier. What we can do is we can do
easier. What we can do is we can do
delta
pre and then we can do delta post.
pretty
good. Just issuing a coding
good. Just issuing a coding
challenge. My guy, that's the whole
stream. Yeah. So that's not the issue,
stream. Yeah. So that's not the issue,
right? The issue is that like you have
right? The issue is that like you have
absolutely no way to scale complexity
absolutely no way to scale complexity
because you have no control whatsoever
because you have no control whatsoever
over the output. But like as soon like
over the output. But like as soon like
if that's the problem with trying to
if that's the problem with trying to
vibe code [ __ ] right? Is it's like this
vibe code [ __ ] right? Is it's like this
fuzzy algorithm that just screws with
fuzzy algorithm that just screws with
everything and like you have no control
everything and like you have no control
over the rains really.
Um you can increase the dims of the
Um you can increase the dims of the
grid, right? But when you scale
grid, right? But when you scale
complexity, you just don't know what the
complexity, you just don't know what the
hell it
does. And ultimately, being a shitty
does. And ultimately, being a shitty
manager for a shitty programmer is way
manager for a shitty programmer is way
worse than just being a good programmer
worse than just being a good programmer
in every way.
Spencer's also got stuff on the box
I don't know. Um, I'll be excited about
I don't know. Um, I'll be excited about
LLM's programming when they're actually
LLM's programming when they're actually
good at it.
good at it.
Like, in my mind, what's happened at the
Like, in my mind, what's happened at the
moment is like we've kind of just we've
moment is like we've kind of just we've
made modern software a complete dog [ __ ]
made modern software a complete dog [ __ ]
mess with like layers upon layers of
mess with like layers upon layers of
abstraction to the point that we now
abstraction to the point that we now
teach people how to program in the worst
teach people how to program in the worst
way possible. All modern software is a
way possible. All modern software is a
nightmare and then we kind of just threw
nightmare and then we kind of just threw
up our hands and let like let an LLM do
up our hands and let like let an LLM do
the buggy mess we've created when like
the buggy mess we've created when like
if you actually go back and optimize the
if you actually go back and optimize the
whole stack like software could be a
whole stack like software could be a
thousandx better than it is now 10,000x
thousandx better than it is now 10,000x
better than it is now it's just
better than it is now it's just
hilariously hilariously bad um but LLMs
hilariously hilariously bad um but LLMs
don't do that yet all they do is they do
don't do that yet all they do is they do
the buggy mess version in a way that
the buggy mess version in a way that
humans do faster but a bit worse
humans do faster but a bit worse
Like I'll be impressed when you have LMS
Like I'll be impressed when you have LMS
that actually first principles their
that actually first principles their
reason and go, "Yeah, no, this is a
reason and go, "Yeah, no, this is a
mess." And they actually start
mess." And they actually start
optimizing the
stack. That's what I would find
stack. That's what I would find
exciting.
That's not just a meme. That's like the
That's not just a meme. That's like the
way anything like anything that actually
way anything like anything that actually
works gets
done. Good.
who's doing it like any good programmer.
who's doing it like any good programmer.
What do you think Puffer is
What do you think Puffer is
doing? Tyler is defending tomorrow,
doing? Tyler is defending tomorrow,
Jason. Not public, the
Jason. Not public, the
defense. Um, but yeah, good luck to him.
defense. Um, but yeah, good luck to him.
No, like there are a lot of people who
No, like there are a lot of people who
do this like a lot of the low-level
do this like a lot of the low-level
devs. I mean, like look at like Rayson
devs. I mean, like look at like Rayson
stuff as well. Look at Rayb. Ray is just
stuff as well. Look at Rayb. Ray is just
a fantastic fantastic piece of
software. The kind the tiny guys are
software. The kind the tiny guys are
trying to be fair. They're golfing the
trying to be fair. They're golfing the
[ __ ] out of their code for no reason.
[ __ ] out of their code for no reason.
But um other like if you ignore that
But um other like if you ignore that
then what they're doing is pretty cool.
Well, I mean, the vast majority of
Well, I mean, the vast majority of
things being [ __ ] doesn't mean you can't
things being [ __ ] doesn't mean you can't
make stuff that's
make stuff that's
good. I mean, like, lo and behold,
good. I mean, like, lo and behold,
there's a curve to everything and like,
there's a curve to everything and like,
you know, the exponentially farther out
you know, the exponentially farther out
things are exponentially better.
I mean the best way to learn is to not
I mean the best way to learn is to not
just go with the flow of everything,
right? It is to actually think through
right? It is to actually think through
things from first
principles. That's not a meme. The meme
principles. That's not a meme. The meme
is modern. Like the modern software is a
is modern. Like the modern software is a
meme.
Really getting a floating point error
Really getting a floating point error
and compute puff advantage.
and compute puff advantage.
UDA after I
UDA after I
started converting
started converting
multidiscrete actions to
multidiscrete actions to
continuous. Yeah, that doesn't take
continuous. Yeah, that doesn't take
actions at
actions at
all.
all.
Um, captain, it
Um, captain, it
is Oh, you know what you're probably
is Oh, you know what you're probably
getting? You're probably just getting a
getting? You're probably just getting a
numerical error because continuous
numerical error because continuous
training blows up.
Why are you doing continuous
though? At least for my test. And it
though? At least for my test. And it
could be a bug and puffer, but I don't
could be a bug and puffer, but I don't
think so, cuz like we can repro all the
think so, cuz like we can repro all the
20 stuff in continuous just fine. It
20 stuff in continuous just fine. It
seems like continuous doesn't let you
seems like continuous doesn't let you
use anywhere near as aggressive hyper
prams. Converting
prams. Converting
multi-discreet. But did you con did you
multi-discreet. But did you con did you
change your action space from
change your action space from
multi-discrete to
multi-discrete to
continuous or are you just converting
continuous or are you just converting
them in the
end? You should still discretise the
end? You should still discretise the
action space to multi-discrete for the
policy. Okay, that's correct. So you're
policy. Okay, that's correct. So you're
saying that you started getting but then
saying that you started getting but then
you're saying after I started converting
you're saying after I started converting
converting multi-discrete to continuous
converting multi-discrete to continuous
I don't so you've been doing that the
I don't so you've been doing that the
whole time haven't you like what
whole time haven't you like what
actually
changed bet you can just like stick the
changed bet you can just like stick the
UV install on box one if you got time
UV install on box one if you got time
for
instead of in
C doing it in Python. Now, did you
C doing it in Python. Now, did you
remember to adjust the types like check
remember to adjust the types like check
check the type of the actions buffer and
check the type of the actions buffer and
stuff in Python? check the type and
see cuz like you getting a floating
see cuz like you getting a floating
point of error just is like you're
point of error just is like you're
probably blowing up a loss or something.
probably blowing up a loss or something.
The only way that could
happen. There's this big fat bluebird
happen. There's this big fat bluebird
here that's just sitting on the feeder
here that's just sitting on the feeder
and chasing away every other bird that
and chasing away every other bird that
tries to get to it.
is literally infinite food and this
is literally infinite food and this
[ __ ] won't let anyone else have
it. Modified the size of selfdown
it. Modified the size of selfdown
actions. Yeah. So, you probably just
actions. Yeah. So, you probably just
have a mismatch between Python and
C. Garbage in, garbage out.
multi-iscript as so what
changed fin training on
CPU something weird
Wait, why is this getting cold a second
Wait, why is this getting cold a second
time?
Oh, you
dummy. We'll do, captain. That's half
dummy. We'll do, captain. That's half
the reason I stream.
Hey, can you hear me? Yep. All right,
Hey, can you hear me? Yep. All right,
let me share my screen. I'm probably
let me share my screen. I'm probably
doing Well, no, I don't actually think
doing Well, no, I don't actually think
I'm doing something obviously stupid
I'm doing something obviously stupid
because it works when training on CPU
because it works when training on CPU
for some reason. Here, let me show you
for some reason. Here, let me show you
what I did or what I'm doing so you
understand this bot as well. We'll take
understand this bot as well. We'll take
a look at your bug on the
street. Okay, what do we have here? We
street. Okay, what do we have here? We
have Okay, so yeah, I have basically two
have Okay, so yeah, I have basically two
maps. So yeah, what I'm aiming to do is
maps. So yeah, what I'm aiming to do is
um I'm supporting both continuous and
um I'm supporting both continuous and
multiscreet actions, but for the most
multiscreet actions, but for the most
part I'm just going to be using
part I'm just going to be using
multiscreet actions. Uh and this is the
multiscreet actions. Uh and this is the
way I have multi-discreet just aiming
way I have multi-discreet just aiming
and moving. Um I just have basically x
and moving. Um I just have basically x
and y rolled into one number just to
and y rolled into one number just to
make it easier and faster for
make it easier and faster for
multiscreet.
multiscreet.
Um so yeah, pretty self-explanatory. And
Um so yeah, pretty self-explanatory. And
then I have this map that yeah basically
then I have this map that yeah basically
if you put in like zero that's going to
if you put in like zero that's going to
give you this continuous output you know
give you this continuous output you know
so on pretty simple same for continuous
so on pretty simple same for continuous
aiming I give you 16 aim directions so
aiming I give you 16 aim directions so
that makes sense
that makes sense
right okay so what I'm doing is because
right okay so what I'm doing is because
the shape of this is five for
the shape of this is five for
multi-discretet and continuous is seven
multi-discretet and continuous is seven
because it needs um it really does not
because it needs um it really does not
work well if uh you use a polar
work well if uh you use a polar
coordinate It's for moving or aiming. It
coordinate It's for moving or aiming. It
needs like separate X and Y. So two for
needs like separate X and Y. So two for
move, two for aim, three multi.
move, two for aim, three multi.
Yeah. So if it's if we're
Yeah. So if it's if we're
multi-discrete, I just set the action
multi-discrete, I just set the action
size to be continuous, which is seven,
size to be continuous, which is seven,
which is fine. Wait, where's seven?
which is fine. Wait, where's seven?
It's just this is seven. Why is it
It's just this is seven. Why is it
seven? I just said because um I see five
seven? I just said because um I see five
actions.
actions.
Huh? I see five actions. This is five.
Huh? I see five actions. This is five.
But for moving um or for continuous
But for moving um or for continuous
moving and aiming they're two per. So
moving and aiming they're two per. So
it's X and Y. X and Y because let me see
it's X and Y. X and Y because let me see
how you set this.
how you set this.
Yeah. So I pass the like the first two
Yeah. So I pass the like the first two
or the the yeah the first um integer for
or the the yeah the first um integer for
multi- discrete is just going to be
multi- discrete is just going to be
moving. So I pass that into a continuous
moving. So I pass that into a continuous
action movement and that gives you um
action movement and that gives you um
two out because it's an array of two
two out because it's an array of two
here. Um and then I do the same with
here. Um and then I do the same with
aim. And then the rest I just cast the
aim. And then the rest I just cast the
floats. I concatenate them all. And
floats. I concatenate them all. And
yeah, and I can show you that um in like
yeah, and I can show you that um in like
Python debugger, show you what that
Python debugger, show you what that
looks like if you want.
that floating point exception like can
that floating point exception like can
you put a try except around it or no?
you put a try except around it or no?
I can. Well, the thing is yeah, I mean I
I can. Well, the thing is yeah, I mean I
can
can
it's it's in the CUDA itself. I get it.
it's it's in the CUDA itself. I get it.
Well, I just want to know what the
Well, I just want to know what the
inputs are. You give it names. Yeah.
inputs are. You give it names. Yeah.
Well, that's the weird thing. I'm
Well, that's the weird thing. I'm
printing the actions and maybe I It's
printing the actions and maybe I It's
not the actions. There something well
not the actions. There something well
action doesn't even go into that. Yeah,
action doesn't even go into that. Yeah,
it's got to be something like maybe the
it's got to be something like maybe the
advantages or Yeah. Well, I I would
advantages or Yeah. Well, I I would
suspect that something is going in as
suspect that something is going in as
nan or in for whatever.
I would just go check.
I would just go check.
Yeah, right there.
Yeah, right there.
It's called twice. So,
um I don't know. I'm not sure which one
um I don't know. I'm not sure which one
it's called at. I'll just do both. What
it's called at. I'll just do both. What
does the robustify by the way mean? Make
does the robustify by the way mean? Make
this function more robust.
Okay. Um there's some annoying stuff
Okay. Um there's some annoying stuff
with um kernel strides.
You have to have a multiple of 128
agents. Should print everything, right?
Well, that's going to print tons of
Well, that's going to print tons of
data. I I wanted you to put like a try
data. I I wanted you to put like a try
except around it, but
except around it, but
sure. And it's literally going to print
sure. And it's literally going to print
like millions of elements unless it
like millions of elements unless it
happens instantly. Well, I have it. Uh,
happens instantly. Well, I have it. Uh,
does it happen on first? Running one.
Does this thing happen on like the first
Does this thing happen on like the first
epoch?
epoch?
Pretty much.
Pretty much.
Okay.
like that
basically. I don't know if that'll
basically. I don't know if that'll
work. All
work. All
right. And then where is this called
again? No.
Yeah. Yeah. It doesn't happen in Python.
Yeah. Yeah. It doesn't happen in Python.
So, I can't catch the
So, I can't catch the
exception. Okay.
exception. Okay.
So I
mean like any of you know is nan or
mean like any of you know is nan or
isn't something like that.
So basically just before I call this
So basically just before I call this
check if you've got any nanss or uh I
check if you've got any nanss or uh I
would just go check if you have any
would just go check if you have any
nanss or imps in any of the tensors
nanss or imps in any of the tensors
because that's the most likely frankly.
because that's the most likely frankly.
Yeah I just how would that happen?
Yeah I just how would that happen?
Tons of things
Tons of things
right tons of places for numerical
right tons of places for numerical
instability.
instability.
Is there one that just tells you if it's
Is there one that just tells you if it's
saying or is in
saying or is in
is
is
times just huh is numpy like is in for
times just huh is numpy like is in for
like times numpy is nan right or plus I
like times numpy is nan right or plus I
think it would be plus not times because
think it would be plus not times because
times is
Oh, hey,
Oh, hey,
solar. Print mean and
solar. Print mean and
shape.
shape.
[Music]
[Music]
Uh, I guess mean would give you nan or
Uh, I guess mean would give you nan or
in if there's anything in there, maybe.
It technically doesn't have to be nan.
It technically doesn't have to be nan.
It could be that there's some giant
It could be that there's some giant
value that then when you put it into
value that then when you put it into
that function gets turned into like
that function gets turned into like
nanner in. Right. Well, so what would be
nanner in. Right. Well, so what would be
easier? I'm in this GDB right here and
easier? I'm in this GDB right here and
I' I've broken right where this
I' I've broken right where this
exception happens. Okay. So then you can
exception happens. Okay. So then you can
Well, yeah. Do you I have to print all
Well, yeah. Do you I have to print all
the stuff from there then.
the stuff from there then.
which is
which is
like there's like some data container
like there's like some data container
for this thing, right? Yeah. I don't
for this thing, right? Yeah. I don't
know like the tensor B because is this
know like the tensor B because is this
like C++ technically because yes that's
like C++ technically because yes that's
the torch C++ API with CUDA.
You can see that there's the torch stuff
You can see that there's the torch stuff
in this is painful. The CUDA is actually
in this is painful. The CUDA is actually
really easy and simple. The torch
really easy and simple. The torch
bindings are a pain in the ass.
This is so strange. It's just really
This is so strange. It's just really
weird how this is only happens in uh
weird how this is only happens in uh
Yeah, Cuda's a lot more finicky about
Yeah, Cuda's a lot more finicky about
what it'll blow up on versus what it
what it'll blow up on versus what it
won't. Do you get like nans or anything
won't. Do you get like nans or anything
in on CPU or no? It doesn't seem like
in on CPU or no? It doesn't seem like
it. I don't get any exceptions at least.
it. I don't get any exceptions at least.
Be pretty surprised if we had a
Be pretty surprised if we had a
difference in the implementation. I'm
difference in the implementation. I'm
pretty sure they're just copy pasted.
pretty sure they're just copy pasted.
Look. So I mean you can see like immed
Look. So I mean you can see like immed
pretty much immediately.
pretty much immediately.
Um yeah I print every time I take an
Um yeah I print every time I take an
action. So not even one epoch I get a
action. So not even one epoch I get a
point one one exception. Well you're
point one one exception. Well you're
printing actions though. You're not
printing actions though. You're not
printing the actual tensors going into
printing the actual tensors going into
advantages. I'm just saying like I I do
advantages. I'm just saying like I I do
a couple of steps and consistently I
a couple of steps and consistently I
guess. Yeah. But like it could be that
guess. Yeah. But like it could be that
somehow some other change rooted up and
somehow some other change rooted up and
now you're nanning your other
now you're nanning your other
values pulling some torch into rust.
values pulling some torch into rust.
So the yeah it doesn't matter that it's
So the yeah it doesn't matter that it's
just annoying solar like
just annoying solar like
it's like dealing with the torch API
it's like dealing with the torch API
like stuff is substantially more
like stuff is substantially more
obnoxious than just dealing with CUDA
obnoxious than just dealing with CUDA
and
C. Like the build system was especially
C. Like the build system was especially
a pain in the ass to get the extension
a pain in the ass to get the extension
to build
to build
correctly. It was like they just they
correctly. It was like they just they
have this extensions dur where they just
have this extensions dur where they just
like stick all the extensions and like
like stick all the extensions and like
if you get it right it shows up there.
if you get it right it shows up there.
If it doesn't it just doesn't show up
If it doesn't it just doesn't show up
and you don't know why.
And then like
And then like
also the way they have stuff set up,
also the way they have stuff set up,
it's really difficult to do the way that
it's really difficult to do the way that
their fallbacks work. It's kind of
their fallbacks work. It's kind of
tricky like in Fiddly to register
tricky like in Fiddly to register
fallback functions. Like it's kind of
fallback functions. Like it's kind of
hard to like have a shared
hard to like have a shared
implementation that's like a piece of CC
implementation that's like a piece of CC
code and then have it run in CUDA or run
code and then have it run in CUDA or run
in C++. You kind of just have to copy
in C++. You kind of just have to copy
paste the code the way their includes
paste the code the way their includes
work. Build issues in CNC. That that's
work. Build issues in CNC. That that's
the thing though. It's not like all of
the thing though. It's not like all of
our C and Puffer is so easy. It's like
our C and Puffer is so easy. It's like
the simplest, easiest code. It's great.
the simplest, easiest code. It's great.
I love it. It's like as soon as I have
I love it. It's like as soon as I have
to deal with the Python build system or
to deal with the Python build system or
the torch build system or anybody else's
the torch build system or anybody else's
stuff, that's when things get
stuff, that's when things get
annoying. RC is really
easy. Okay. Yeah. Now, this is weird
easy. Okay. Yeah. Now, this is weird
because I I yesterday I had this
because I I yesterday I had this
training and now when I removed my main
training and now when I removed my main
change, the other changes shouldn't
change, the other changes shouldn't
really do anything. It seems like I'm
really do anything. It seems like I'm
still getting that exception. So, that's
still getting that exception. So, that's
really weird. I'm going to look into
really weird. I'm going to look into
that. Maybe it's not what I thought. I
that. Maybe it's not what I thought. I
had this training yesterday with
had this training yesterday with
basically the same changes.
basically the same changes.
Yeah, there's you know that you know the
Yeah, there's you know that you know the
way to not have include problems while
way to not have include problems while
your code's just in a file somewhere.
your code's just in a file somewhere.
I don't have problems. I don't have
I don't have problems. I don't have
include problems. I just have I was a
include problems. I just have I was a
chat uh chat captain. Oh,
my Here we have Terraform. It's slow and
my Here we have Terraform. It's slow and
we do fast.
fast. I don't know why it has two
fast. I don't know why it has two
windows. Yeah, we got
terraform random
agent. Terraform is a terraforming sim.
agent. Terraform is a terraforming sim.
I'm working on this end. The goal is for
I'm working on this end. The goal is for
the agents to take this landscape and
the agents to take this landscape and
then terraform it into whatever we
then terraform it into whatever we
want. They're like simulated little
want. They're like simulated little
bulldozers.
bulldozers.
what I'm working on. Anyways,
did you start that from scratch at some
did you start that from scratch at some
point? Started it with Spencer two weeks
point? Started it with Spencer two weeks
ago. Oh, nice. I spent like a day on it
ago. Oh, nice. I spent like a day on it
and now I'm like fiddling it. It's
and now I'm like fiddling it. It's
literally This thing has had like maybe
literally This thing has had like maybe
10 hours of total work put into it.
10 hours of total work put into it.
Nice. Like kind of sleepy work at that.
Yeah, that's literally how easy it is to
Yeah, that's literally how easy it is to
get our stuff rebuilt for
get our stuff rebuilt for
um for our training.
I like how this Neptune stuff, it's like
I like how this Neptune stuff, it's like
they have this new pricing and they
they have this new pricing and they
advertise it as being like so much
advertise it as being like so much
faster than their competition and it
faster than their competition and it
still takes 3 seconds to load anything.
Modern software, man.
Modern software, man.
Yeah, I know.
I asked um I got like a brand new like
I asked um I got like a brand new like
like really highspec Razer laptop came
like really highspec Razer laptop came
with Windows 11. It took an hour to
with Windows 11. It took an hour to
install. No, two hours to install
install. No, two hours to install
Windows like to update itself so you
Windows like to update itself so you
could use it. Had like a bunch of
could use it. Had like a bunch of
spyware and garbage on it and then like
spyware and garbage on it and then like
you go to open any application and it
you go to open any application and it
takes like 4 seconds. And then I asked
takes like 4 seconds. And then I asked
my father to do the same on his new Mac
my father to do the same on his new Mac
and it's like three or four seconds to
and it's like three or four seconds to
open an application and they just they
open an application and they just they
make it seem like it's not taking that
make it seem like it's not taking that
long by making the icon bounce but it
long by making the icon bounce but it
still takes three or 4 seconds and it's
still takes three or 4 seconds and it's
like what the hell man. Yeah, at least
like what the hell man. Yeah, at least
on a Windows on Windows stuff I pretty
on a Windows on Windows stuff I pretty
much always just like instantly on my
much always just like instantly on my
new you know it like works instantly.
new you know it like works instantly.
Like what the hell are people doing? And
Like what the hell are people doing? And
this is Chrome, which is not exactly
this is Chrome, which is not exactly
Yeah. IPF software either.
Yeah. IPF software either.
Well, if you're ever buying like any
Well, if you're ever buying like any
kind of Windows laptop, Mac's a little
kind of Windows laptop, Mac's a little
better about this. The first thing you
better about this. The first thing you
should do is like reinstall Windows like
should do is like reinstall Windows like
fresh because yeah, the amount of crap
fresh because yeah, the amount of crap
that you just load on there is
insane. I just have a bunch on
stuff. So, this gets zero reward now,
stuff. So, this gets zero reward now,
which is
which is
interesting. Probably this is
interesting. Probably this is
incorrectly set up.
We get
We get
different there.
Okay, that's so yeah, this isn't doesn't
Okay, that's so yeah, this isn't doesn't
seem to be a bug with my code. It seems
seem to be a bug with my code. It seems
to be a bug with my particular set of
to be a bug with my particular set of
parameters.
parameters.
So if I run in serial with like one M
So if I run in serial with like one M
and a mini batch size of 16 and a M or
and a mini batch size of 16 and a M or
BPPT size of 16, I get the floating
BPPT size of 16, I get the floating
point error. If I run like how I'd
point error. If I run like how I'd
normally run for speed, it's it actually
normally run for speed, it's it actually
is completely fine. Yeah. So like I was
is completely fine. Yeah. So like I was
saying, it's like there's probably
saying, it's like there's probably
something's exploding or whatever. Yeah.
something's exploding or whatever. Yeah.
Which is then giving you a floating
Which is then giving you a floating
point error.
point error.
Okay. Yeah. I was doing that to debug it
Okay. Yeah. I was doing that to debug it
because I've had another error, but
because I've had another error, but
okay, whatever. So, I guess I'm fine
okay, whatever. So, I guess I'm fine
then. Yep.
then. Yep.
Cool. Um, I think I'm ready to just
Cool. Um, I think I'm ready to just
finally PR this then.
finally PR this then.
Awesome. Going to want to get uh the
Awesome. Going to want to get uh the
models training on this. Yeah, you got
models training on this. Yeah, you got
uh I gave you a box, don't you, to like
uh I gave you a box, don't you, to like
run this stuff on?
run this stuff on?
Uh, I should. Yeah. Back online box to
Uh, I should. Yeah. Back online box to
Okay, cool.
Okay, cool.
literally on the shelves behind me. You
literally on the shelves behind me. You
can see a couple of the lights blinking
can see a couple of the lights blinking
in the background.
in the background.
Yeah.
Which it'll go focus on that. I get my
Which it'll go focus on that. I get my
shoulder trading again
All
right, let me make sure these changes
right, let me make sure these changes
are actually
Ah, you
Ah, you
dummy. The problem
Definitely.
Still
zero. Of course.
still zero
still zero
reward. That's screwy.
We're definitely seeing reward
here. Not getting recompiled somehow.
Power climb.
Narmo. I see terraform in
Narmo. I see terraform in
here.
here.
Or there's terraform.
Or there's terraform.
Terraform is getting
compiled. I guess we have to we didn't
compiled. I guess we have to we didn't
add it to end of returns probably.
Yeah, we forgot that.
This should be
This should be
pre delta
post. Got training.
post. Got training.
Uh the bindings accept truncations,
Uh the bindings accept truncations,
right?
right?
Uh I do not have truncation set up. like
Uh I do not have truncation set up. like
it does not actually populate that. Ah,
it does not actually populate that. Ah,
okay. At the moment, we'll leave that in
okay. At the moment, we'll leave that in
then.
Is there a reason? I just haven't done
Is there a reason? I just haven't done
it and I'd have to do it for every.
it and I'd have to do it for every.
Also, I think it's kind of stupid. Like
Also, I think it's kind of stupid. Like
the fact that they did that in the API,
the fact that they did that in the API,
like they split the gymn gym gymnasium
like they split the gymn gym gymnasium
API and added an extra buffer for that,
API and added an extra buffer for that,
I think is kind of lame.
I think is kind of lame.
I think there was a good reason for it.
I think there was a good reason for it.
There was a pedantic academic reason for
There was a pedantic academic reason for
it.
Yeah, it doesn't work for truncations.
Okay. Okay. So, we have episode return
Okay. Okay. So, we have episode return
at
at
2.0, which is interesting that it is
2.0, which is interesting that it is
stuck there. That seems like
stuck there. That seems like
a an indicator of something.
I was able to delete 200 lines of code
I was able to delete 200 lines of code
because I didn't need some stuff
because I didn't need some stuff
anymore. So that's
anymore. So that's
good
overall. Some reason this is stuck at
overall. Some reason this is stuck at
1.0
1.0
O which is equal to
O which is equal to
200 blocks moved I
believe.
Ah, which
is kind of a
is kind of a
suspicious number to be stuck at.
Oh, it's the bucket
capacity. So, it probably like loads all
capacity. So, it probably like loads all
that dirt and then doesn't unload it, I
that dirt and then doesn't unload it, I
would imagine.
wait. So delta
is probably too high.
So, it's just loading the bucket and
So, it's just loading the bucket and
it's refusing to put it down right now
it's refusing to put it down right now
as
well. Still doing it.
the reward wrong or
them. Refusing to unload any dirt.
I should make it human playable.
All right, Joseph. I just made a PR for
All right, Joseph. I just made a PR for
uh Impulse Wars. Note that all the
uh Impulse Wars. Note that all the
bindings work, but it still doesn't
bindings work, but it still doesn't
build. Um, it still requires CMake to
build. Um, it still requires CMake to
build, but all I need to do to get it
build, but all I need to do to get it
not to require CMake is just
not to require CMake is just
uh update our Box 2D um forks to just
uh update our Box 2D um forks to just
build archives. And then after that,
build archives. And then after that,
basically just do the same thing where
basically just do the same thing where
like download the archive and then swat
like download the archive and then swat
it in and build with it. And I tested
it in and build with it. And I tested
with it when I build an archive locally
with it when I build an archive locally
and like tell setup.p PI to mainly load
and like tell setup.p PI to mainly load
it, it works fine without CXO.
it, it works fine without CXO.
What is this?
What is this?
Yeah. So, um, yeah, that allows you that
Yeah. So, um, yeah, that allows you that
kind of solves a problem we were talking
kind of solves a problem we were talking
about. That allows people to just like
about. That allows people to just like
use add whatever methods they want to
use add whatever methods they want to
their own Python module.
their own Python module.
Oh, cool. So, if you want to look at
Oh, cool. So, if you want to look at
binding.c, you'll see how I did it.
binding.c, you'll see how I did it.
I better not see any deck refs in here.
I better not see any deck refs in here.
Nope. If you do, I would be extremely
Nope. If you do, I would be extremely
surprised.
surprised.
I didn't do any of that
crap. Yeah. No LLMs were used in the
crap. Yeah. No LLMs were used in the
making of this. Well, shouldn't say
making of this. Well, shouldn't say
none, but like extremely few. And
none, but like extremely few. And
obviously like I mean, you know, I'm a
obviously like I mean, you know, I'm a
responsible programmer, so I don't vibe
responsible programmer, so I don't vibe
code. No vibe codes. The uh I saw Notch,
code. No vibe codes. The uh I saw Notch,
the Minecraft creator, was recently
the Minecraft creator, was recently
posting that he's making a new game and
posting that he's making a new game and
he's hiring people and he says no vi no
he's hiring people and he says no vi no
vibe coders and no new line curly
vibe coders and no new line curly
bracers.
That's funny.
Those were the two requirements.
I mean to be fair, you can use this
I mean to be fair, you can use this
formatter to solve the ladder problem.
formatter to solve the ladder problem.
Yeah, but it's a it's a philosophical
Yeah, but it's a it's a philosophical
problem, right? You can't be working
problem, right? You can't be working
with a new line curly
bracer. Yeah. So, you can see you I just
bracer. Yeah. So, you can see you I just
defined my methods as what I want it to
defined my methods as what I want it to
add and then it works fine. So, that
add and then it works fine. So, that
builds all the other M's fine because it
builds all the other M's fine because it
only adds that function for my M. I'm
only adds that function for my M. I'm
fine with you doing that. I don't think
fine with you doing that. I don't think
it's a good solution for like
it's a good solution for like
I I don't like that the thing is exposed
I I don't like that the thing is exposed
basically via [ __ ] macros for people
basically via [ __ ] macros for people
generally, but we'll keep it for you.
generally, but we'll keep it for you.
That's fine. I mean, it's See, I don't
That's fine. I mean, it's See, I don't
really know how else you can do it. But
really know how else you can do it. But
the thing is like no one else will
the thing is like no one else will
really need to care about it unless they
really need to care about it unless they
actually need it.
actually need it.
So, it's not changing anyone else's M
Does this thing fail build all of
Does this thing fail build all of
Puffer's environments if you don't have
Puffer's environments if you don't have
Clang 20? No, this is just for my
Clang 20? No, this is just for my
specific thing. But like does the
specific thing. But like does the
setup.py trigger your end of build or do
setup.py trigger your end of build or do
you have to build this from your
you have to build this from your
subdirectory?
subdirectory?
So, I'm pretty Yeah, I'm pretty sure
So, I'm pretty Yeah, I'm pretty sure
right now I need to ask you about that.
right now I need to ask you about that.
Until I get like the archive
Until I get like the archive
automatically building and stuff in
automatically building and stuff in
another repo, it tries to build mine but
another repo, it tries to build mine but
fails. So, is there some way to like
fails. So, is there some way to like
exclude it temporarily? Does it fail the
exclude it temporarily? Does it fail the
whole build? Um, it fails to build mine
whole build? Um, it fails to build mine
and then like I think fails, but it
and then like I think fails, but it
builds everything else fine.
builds everything else fine.
So, yeah, I think so. Does this prevent
So, yeah, I think so. Does this prevent
you from building the rest of puffer lab
you from building the rest of puffer lab
right now?
right now?
Um, let me try now. That would be an
Um, let me try now. That would be an
important thing to know in a PR for a
pre-release. Uh, yeah. Is there a way to
pre-release. Uh, yeah. Is there a way to
exclude my M from building from setup.py
exclude my M from building from setup.py
temporarily?
Um I it's going to look for that
Um I it's going to look for that
binding. C file is the thing.
So if it doesn't find binding C, it
So if it doesn't find binding C, it
won't try and build it. I believe so.
won't try and build it. I believe so.
Okay. I can just rename it and then
Okay. I can just rename it and then
I'll just add a to-do to rename it back.
Well, yeah. It just won't work if I
Well, yeah. It just won't work if I
don't rename it back.
don't rename it back.
Let me try
that. Yeah, ideally like if I like the
that. Yeah, ideally like if I like the
rest of this is fine. It's so far it's
rest of this is fine. It's so far it's
um I think yeah, if you just don't break
um I think yeah, if you just don't break
my build and then have it in a state
my build and then have it in a state
where I can compile it manually so that
where I can compile it manually so that
I like we can run sweeps because ideally
I like we can run sweeps because ideally
I want you to have some good agents on
I want you to have some good agents on
this for uh release.
Yeah. Um, I I added a readme with like
Yeah. Um, I I added a readme with like
basic instructions to build it for now,
basic instructions to build it for now,
but like it you've built it before. It
but like it you've built it before. It
shouldn't be bad. I added also explicit
shouldn't be bad. I added also explicit
things like you need to install because
things like you need to install because
like the things that you're running into
like the things that you're running into
you need to install. You just need to
you need to install. You just need to
manually install the ray dependencies
manually install the ray dependencies
because it's building everything from
because it's building everything from
scratch. Whereas you don't have to do
scratch. Whereas you don't have to do
that for parliament because you're just
that for parliament because you're just
downloading a pre-built
downloading a pre-built
archive. So that's the only annoying
archive. So that's the only annoying
thing
thing
really. Okay. Yeah. If I just rename
really. Okay. Yeah. If I just rename
binding.c See, it does not break the
binding.c See, it does not break the
build. So, I Let's make sure the build's
build. So, I Let's make sure the build's
in my
in my
CMake. And then I'll push that and then
CMake. And then I'll push that and then
you'll actually be able to see. So,
you'll actually be able to see. So,
right now the tests are failing because
right now the tests are failing because
um I'm presumably because of that. But
um I'm presumably because of that. But
after this test should pass the test
after this test should pass the test
that that guy committed.
that that guy committed.
What did he commit? Try and build.
What did he commit? Try and build.
Oh, yeah. I haven't checked those in a
Oh, yeah. I haven't checked those in a
while. Those those get checked before I
while. Those those get checked before I
ship packages. That's about it.
ship packages. That's about it.
It's a good indicator though of whether
It's a good indicator though of whether
a PR will break the build or not.
Yeah, but it's like it's like you
Yeah, but it's like it's like you
[ __ ] have to sit there and wait for
[ __ ] have to sit there and wait for
10 minutes after committing your code to
10 minutes after committing your code to
see like
see like
I mean again, you don't have to wait,
I mean again, you don't have to wait,
but it's a nice useful indicator.
but it's a nice useful indicator.
I leave them in there, but like I don't
I leave them in there, but like I don't
actually look at them um until I'm ready
actually look at them um until I'm ready
to like commit a build release and I see
to like commit a build release and I see
like okay it's screwing up on Mac and I
like okay it's screwing up on Mac and I
go pull errors.
go pull errors.
I don't know it personally they just
I don't know it personally they just
seem like a nice indicator like they're
seem like a nice indicator like they're
if so if they're passing if they ran
if so if they're passing if they ran
instantly then yeah but they don't I
instantly then yeah but they don't I
mean can't expect them to run instantly.
mean can't expect them to run instantly.
They are still pretty fast I would
They are still pretty fast I would
imagine. And the thing is though, like
imagine. And the thing is though, like
you can ignore them or you can just
you can ignore them or you can just
Well, yeah, that's what I do is I just I
Well, yeah, that's what I do is I just I
ignore them until we're ready to get a
ignore them until we're ready to get a
release build and then I go fix I make
release build and then I go fix I make
sure that they're working for the
sure that they're working for the
release.
release.
The thing is though, if they're already
The thing is though, if they're already
working on the branch and then you have
working on the branch and then you have
a PR that it fails, that's a useful
a PR that it fails, that's a useful
indicator. It's like, okay, this PR
indicator. It's like, okay, this PR
broke something. Yeah, but like I don't
broke something. Yeah, but like I don't
get that feedback, right, for like
get that feedback, right, for like
basically all these things do at the
basically all these things do at the
moment. Like all these things have been
moment. Like all these things have been
useful for is ruining my Gmail inbox
useful for is ruining my Gmail inbox
because I like I apparently these things
because I like I apparently these things
trigger notifications by default. Yeah,
trigger notifications by default. Yeah,
you can turn that off. Yeah, I need to
you can turn that off. Yeah, I need to
cuz I actually I like I missed my tax
cuz I actually I like I missed my tax
return in emails because it got buried
return in emails because it got buried
in this [ __ ]
in this [ __ ]
Yeah, I would definitely do that then.
Yeah, I would definitely do that then.
Yeah. All right. I don't know. I don't I
Yeah. All right. I don't know. I don't I
don't like processes like additional
don't like processes like additional
like processes by default because they
like processes by default because they
just they bulk everything up and slow
just they bulk everything up and slow
everything down.
everything down.
Like the only reason I even have them
Like the only reason I even have them
here, like the only reason I have them
here, like the only reason I have them
integrated into GitHub is because they
integrated into GitHub is because they
run on different platforms. Like I can't
run on different platforms. Like I can't
run a Mac test locally. Like I would ra
run a Mac test locally. Like I would ra
I would ra way rather they not even run
I would ra way rather they not even run
by default on every PR and I just have a
by default on every PR and I just have a
button I can press to run them when I
button I can press to run them when I
want to.
want to.
I mean aside from the emails, there's
I mean aside from the emails, there's
literally no downside to running them
literally no downside to running them
though because it's not running on your
though because it's not running on your
compute. just adds a bunch of like it
compute. just adds a bunch of like it
just adds extra
just adds extra
[ __ ] Like look, every single every
[ __ ] Like look, every single every
single
single
PR now has a bunch of [ __ ] like with
PR now has a bunch of [ __ ] like with
like all these tests like go test
like all these tests like go test
failing this
that I mean you're entitled to your
that I mean you're entitled to your
opinion I guess but a test can
opinion I guess but a test can
especially honestly tests are the most
especially honestly tests are the most
useful. They're useful for for people if
useful. They're useful for for people if
like if I'm just developing my own
like if I'm just developing my own
single project like depends on a project
single project like depends on a project
like I may or may not have that many
like I may or may not have that many
tests but if I'm having a project with a
tests but if I'm having a project with a
lot of contributors that's when I would
lot of contributors that's when I would
have a lot of tests because I would just
have a lot of tests because I would just
be paranoid that other people are going
be paranoid that other people are going
to screw stuff up like what happened
to screw stuff up like what happened
with bet and it's it's just like
with bet and it's it's just like
inevitable right I mean or you it
inevitable right I mean or you it
protects I mean I just like the thing is
protects I mean I just like the thing is
I see so many projects that have like
I see so many projects that have like
the strict coding standards and their
the strict coding standards and their
code is still [ __ ] dog [ __ ] so it's
code is still [ __ ] dog [ __ ] so it's
Like I mean that's not like a direct
Like I mean that's not like a direct
correlation though and I mean I'm not
correlation though and I mean I'm not
saying you have it doesn't seem like it
saying you have it doesn't seem like it
like the thing is it doesn't actually
like the thing is it doesn't actually
seem like it helps you with the things
seem like it helps you with the things
you want and it actually all it does it
you want and it actually all it does it
kind of locks you more to your
kind of locks you more to your
architecture because like this is why I
architecture because like this is why I
don't like having tons of tests right as
don't like having tons of tests right as
soon as you start refactoring things you
soon as you start refactoring things you
break all the tests so your choices are
break all the tests so your choices are
now to do double the work and now also
now to do double the work and now also
refactor your tests or to just delete
refactor your tests or to just delete
the tests. Well, it depends on what kind
the tests. Well, it depends on what kind
of test you have, right? If you have
of test you have, right? If you have
super tightly scoped unit tests, then
super tightly scoped unit tests, then
yeah, but if you have like very broad
yeah, but if you have like very broad
integration tests, well, the integration
integration tests, well, the integration
test we train at. Yeah, you don't have
test we train at. Yeah, you don't have
you don't have any of those automated
you don't have any of those automated
though, right? Well, it's a training
though, right? Well, it's a training
run. Doesn't run instantly.
run. Doesn't run instantly.
It's one still do that action though.
It's one still do that action though.
All right. Why did these fail though?
All right. Why did these fail though?
The Mac one seem to be failing.
I mean all of Popper lib
I mean all of Popper lib
is like all of our experiments are CI in
is like all of our experiments are CI in
a sense. I actually the one thing I did
a sense. I actually the one thing I did
relent on recently is I added some
relent on recently is I added some
things that do serve as tests but uh I
things that do serve as tests but uh I
think that the way that Ray did it is
think that the way that Ray did it is
actually genius because you dual purpose
actually genius because you dual purpose
your tests as
your tests as
examples. Like you write examples and
examples. Like you write examples and
the examples run that's pretty standard.
the examples run that's pretty standard.
I mean that's great. Well, it's not
I mean that's great. Well, it's not
standard because I see a lot of like
standard because I see a lot of like
tons of projects where they have [ __ ]
tons of projects where they have [ __ ]
tons of tests that they have to maintain
tons of tests that they have to maintain
for no reason other than maintaining the
for no reason other than maintaining the
test.
test.
No, but a good test suite will also
No, but a good test suite will also
Yeah. Like Yeah. Use have the tests as
Yeah. Like Yeah. Use have the tests as
examples. That's a really good that's
examples. That's a really good that's
and I guess like having a test that you
and I guess like having a test that you
link somebody to is very different from
link somebody to is very different from
having like an
having like an
example. Like I have I do have a couple
example. Like I have I do have a couple
of tests that I actually use for
of tests that I actually use for
instance like I have API tests for a
instance like I have API tests for a
couple of things where it's just like I
couple of things where it's just like I
just like throw some common misuses at
just like throw some common misuses at
the environment and I basically I try to
the environment and I basically I try to
make sure that I get API usage errors
make sure that I get API usage errors
back instead of internal errors. Like I
back instead of internal errors. Like I
have a few things like that. I'm not
have a few things like that. I'm not
mad, right? Like I actually do a little
mad, right? Like I actually do a little
bit of it. But like I don't know when
bit of it. But like I don't know when
you like when you really start
you like when you really start
overesting stuff it's just like it slows
overesting stuff it's just like it slows
dev down. And there's really there's
dev down. And there's really there's
nothing I value more than keeping
nothing I value more than keeping
everything like really simple, concise,
everything like really simple, concise,
and easy to do stuff with. Like as soon
and easy to do stuff with. Like as soon
as stuff gets big and bulky, not only
as stuff gets big and bulky, not only
does it slow development time down, but
does it slow development time down, but
personally I just get bored and my
personally I just get bored and my
productivity drops to zero. And I just
productivity drops to zero. And I just
like I actually lose the ability to work
like I actually lose the ability to work
on the codebase.
on the codebase.
I mean, let's be clear, like I
I mean, let's be clear, like I
understand where you come from, and I'm
understand where you come from, and I'm
not advocating like again, I'm not
not advocating like again, I'm not
advocating for like 100% test coverage.
advocating for like 100% test coverage.
Like right now, our tests I think just
Like right now, our tests I think just
build puffer. All I'm saying is it might
build puffer. All I'm saying is it might
be useful to like run uh build and then
be useful to like run uh build and then
try to run every puffer m with like the
try to run every puffer m with like the
minimum number of steps just to make
minimum number of steps just to make
sure they run correctly without like
sure they run correctly without like
completely erroring out because that
completely erroring out because that
would have if I remember correctly there
would have if I remember correctly there
was a couple shows stopping bugs near
was a couple shows stopping bugs near
the 2.0 release that that sort of thing
the 2.0 release that that sort of thing
would have caught. Um and I mean you
would have caught. Um and I mean you
could expand it if you wanted but even I
could expand it if you wanted but even I
think that would be a good signal. Also,
think that would be a good signal. Also,
you know, someone PR something to one of
you know, someone PR something to one of
the puffer m and then it runs before,
the puffer m and then it runs before,
now it doesn't. And then, yeah, the
now it doesn't. And then, yeah, the
ocean m I can do that with. I mean, I
ocean m I can do that with. I mean, I
have a few small tests that I am going
have a few small tests that I am going
to clean up for the uh the release.
to clean up for the uh the release.
Um, stuff like that's generally
fine. It's more the unit tests that
fine. It's more the unit tests that
drive me mad
drive me mad
cuz those will legit like those will
cuz those will legit like those will
legitimately break on every single
legitimately break on every single
refactor.
refactor.
Yeah, but I mean it yeah and and that's
Yeah, but I mean it yeah and and that's
part of it is the cost to do business
part of it is the cost to do business
with unit test. Part of it is yeah like
with unit test. Part of it is yeah like
testing what actually like should be
testing what actually like should be
tested. I don't know testing is a whole
tested. I don't know testing is a whole
but the thing is people do actually like
but the thing is people do actually like
legitimately aim for 100% test coverage
legitimately aim for 100% test coverage
and then 100% like typed everything in
and then 100% like typed everything in
Python and at that point it's just like
Python and at that point it's just like
I don't want to read your code. Like
I don't want to read your code. Like
literally you just tell me that I know
literally you just tell me that I know
your code sucks.
I mean, yeah. I don't I don't think
I mean, yeah. I don't I don't think
based on ideological approach. I like I
based on ideological approach. I like I
know your code sucks.
know your code sucks.
Okay. I have some I have some projects
Okay. I have some I have some projects
that are not Python that have like very
that are not Python that have like very
high test coverage though. Would you say
high test coverage though. Would you say
they suck just idologically? No. I think
they suck just idologically? No. I think
the it's the Python specifically when I
the it's the Python specifically when I
see the combination of it has to be
see the combination of it has to be
typed and it has to be tested then I
typed and it has to be tested then I
kind of know.
kind of know.
To be fair though, the code that I did
To be fair though, the code that I did
that for was security based code. Like
that for was security based code. Like
it was some custom like firewall stuff
it was some custom like firewall stuff
type stuff. So yeah, that I was trying
type stuff. So yeah, that I was trying
to test the [ __ ] out of that thing
to test the [ __ ] out of that thing
because I wanted at that point then it's
because I wanted at that point then it's
like you don't even it's not even
like you don't even it's not even
testing. You need to fuzz that. Yeah.
testing. You need to fuzz that. Yeah.
And which I am actually. Yeah, I spent a
And which I am actually. Yeah, I spent a
lot of time on a fuzzing or fuzz fuzz
lot of time on a fuzzing or fuzz fuzz
tester which is pretty nice. Yeah,
tester which is pretty nice. Yeah,
that's a different story and that's
that's a different story and that's
fine.
fine.
Okay, so these um build on Linux uh but
Okay, so these um build on Linux uh but
the Mac tests are failing, but it seems
the Mac tests are failing, but it seems
unrelated to me because that I get if
unrelated to me because that I get if
you look there's like errors building
you look there's like errors building
tactical. So I don't think like that's a
tactical. So I don't think like that's a
me problem. Tactical builds
me problem. Tactical builds
on Mac apparently in Oh, on Mac I don't
on Mac apparently in Oh, on Mac I don't
freaking know. Yeah, it's this is weird
freaking know. Yeah, it's this is weird
though. Let me look this up. It's it's
though. Let me look this up. It's it's
it's error C.C close or C close. I might
it's error C.C close or C close. I might
have to I might have to modify that. But
have to I might have to modify that. But
the thing is that doesn't have a binding
the thing is that doesn't have a binding
file, does it? Or maybe that added one.
file, does it? Or maybe that added one.
I don't freaking know. It must have
I don't freaking know. It must have
because it's it's I don't know. Hold on.
We are Oh, I think what the issue is is
We are Oh, I think what the issue is is
binding as Wait, no. No. This is weird
binding as Wait, no. No. This is weird
because it it passes on
Linux. Yeah. Somehow when building Mac,
Linux. Yeah. Somehow when building Mac,
it can't find the C close file or or
it can't find the C close file or or
function. That's strange. I don't know.
function. That's strange. I don't know.
I don't think that's my problem
I don't think that's my problem
though. That's still a weird problem.
There freaking clear button on the chat.
There we
go. Oh, I think if I had to guess, I
go. Oh, I think if I had to guess, I
think what it is, so there is no C close
think what it is, so there is no C close
defined in tactical.h H and I think the
defined in tactical.h H and I think the
compiler configuration on the Linux like
compiler configuration on the Linux like
setup basically just doesn't care if
setup basically just doesn't care if
there's an undeclared function call. But
there's an undeclared function call. But
on uh Mac for whatever reason the
on uh Mac for whatever reason the
default stuff it will just treat as an
default stuff it will just treat as an
error. So I think that's I guess I'll
error. So I think that's I guess I'll
have to fix that then. Yeah, but again
have to fix that then. Yeah, but again
doesn't seem like something I introduced
doesn't seem like something I introduced
because Linux builds are fine in the CI
because Linux builds are fine in the CI
and locally. Uh yeah, Reds the release
and locally. Uh yeah, Reds the release
is going well. We're kind of just
is going well. We're kind of just
running experiments for that and then
running experiments for that and then
doing other stuff in the background
doing other stuff in the background
while the experiments run. Kind of burnt
while the experiments run. Kind of burnt
on release work. It's like it's pretty
on release work. It's like it's pretty
well good. We've got experiments going.
well good. We've got experiments going.
They're doing ridiculously well.
They're doing ridiculously well.
Um, see, here's
Um, see, here's
Enduro. Here's
Enduro. Here's
[Music]
[Music]
Enduro. Yeah, that's really good.
mobile.
harder to say with this one, but I like
harder to say with this one, but I like
I think that we'll be able to just kill
I think that we'll be able to just kill
these later today and we'll have good
these later today and we'll have good
hypers. I'll at least give them like,
hypers. I'll at least give them like,
you know, 50 runs plus
you know, 50 runs plus
each. We'll keep doing more experiments.
each. We'll keep doing more experiments.
So, yeah, now that uh the build is fine,
So, yeah, now that uh the build is fine,
you think is it fine to merge? Do you
you think is it fine to merge? Do you
want some other changes? Yeah, that's
want some other changes? Yeah, that's
fine. You update the PR? Yeah. Yeah, go
fine. You update the PR? Yeah. Yeah, go
check it out. You can check the latest
check it out. You can check the latest
command then. Like I said, you can see
command then. Like I said, you can see
that the Linux build succeed in CI.
Thank you very much.
Thank you very much.
You're not going to look at what I uh
You're not going to look at what I uh
change before you merge it?
change before you merge it?
No, I'm going to fix it if uh if you
No, I'm going to fix it if uh if you
broke anything. Man, you're a trusting
broke anything. Man, you're a trusting
man.
There's only so much I can look at when
There's only so much I can look at when
you send me 21 files changed with, you
you send me 21 files changed with, you
know, I'm just saying like the latest
know, I'm just saying like the latest
commit was like tiny. I personally just
commit was like tiny. I personally just
would have checked that before um I
would have checked that before um I
merge but you do because I'm I'm just
merge but you do because I'm I'm just
paranoid person especially when it comes
paranoid person especially when it comes
to my code.
to my code.
Yeah. Well, not like I can't revert it.
Yeah. Well, not like I can't revert it.
True.
Uh, all right. Yeah, I guess I'll start
Uh, all right. Yeah, I guess I'll start
a sweep then. Go feed the puffer. Thank
a sweep then. Go feed the puffer. Thank
you for your
contribution. The
puffer trying to understand something in
puffer trying to understand something in
puffer li an example. So here I'll give
puffer li an example. So here I'll give
you our new example. times. Just go here
you our new example. times. Just go here
to uh ocean not to ocean to ocean in
3. There are uh two tutorial M's and a
3. There are uh two tutorial M's and a
template. There's a template which is
template. There's a template which is
like a very very minimal N that just
like a very very minimal N that just
contains the like just to get you
contains the like just to get you
started a runnable trainable env. And
started a runnable trainable env. And
then there is uh squared which
then there is uh squared which
has a single agent like sample code. And
has a single agent like sample code. And
then there is target which has multi-
then there is target which has multi-
aent sample
aent sample
code target
code target
here mix structure output like multi
here mix structure output like multi
head output force head. Uh we do not do
head output force head. Uh we do not do
that at the moment because no m actually
that at the moment because no m actually
do that like there just like are not
do that like there just like are not
environments where that's been an issue.
If you really want to do that, what I
If you really want to do that, what I
would suggest first of all is just
would suggest first of all is just
discretizing the continuous ones because
discretizing the continuous ones because
from our experiments, discretizing the
from our experiments, discretizing the
continuous action space just does way
continuous action space just does way
better anyways. So just make the whole
better anyways. So just make the whole
thing
multi-discretet. I went very deep down
multi-discretet. I went very deep down
that rabbit hole and like we support a
that rabbit hole and like we support a
bunch of structured stuff and we don't
bunch of structured stuff and we don't
use any of it in our new M now because
use any of it in our new M now because
it's a pain in the ass. like it works.
it's a pain in the ass. like it works.
It works better than any other
It works better than any other
structured data processing stuff out
structured data processing stuff out
there in RL and we still don't bother
there in RL and we still don't bother
with it because it's just so much easier
with it because it's just so much easier
to keep everything flat and
simple. Yeah, that was something I was
simple. Yeah, that was something I was
skeptical on, but then because I I use
skeptical on, but then because I I use
structured stuff for like my Super Mario
structured stuff for like my Super Mario
M. But then if you're writing it in C, I
M. But then if you're writing it in C, I
think it makes it makes it a lot
think it makes it makes it a lot
simpler. Just keep it flat and perform
simpler. Just keep it flat and perform
it. Well, Python code is just trolling.
it. Well, Python code is just trolling.
It's like so freaking
slow. I mean, I talked to somebody who
slow. I mean, I talked to somebody who
had a pretty cool sim yesterday, but
had a pretty cool sim yesterday, but
they were running it like single
they were running it like single
threaded in Python with rendering on
threaded in Python with rendering on
during
during
training with GQN.
training with GQN.
Yeah, that's that's not going to be a
Yeah, that's that's not going to be a
good time. Hey, Georgie. G. I apologize
good time. Hey, Georgie. G. I apologize
for my pronunciation of your
for my pronunciation of your
name. Org, I
think. Welcome to
stream.
stream.
Um, I would like to know why this
Um, I would like to know why this
bulldozer is not unloading its
bulldozer is not unloading its
dirt. It's like learning not to unload
dirt. It's like learning not to unload
anything, right? I was going to make it
anything, right? I was going to make it
human playable, right?
human playable, right?
where I left
off MMO. I saw multi head
off MMO. I saw multi head
outputs create full pull output. Yep,
outputs create full pull output. Yep,
that's what I did for neural MMO 2.0 and
that's what I did for neural MMO 2.0 and
that still works. That one is still very
that still works. That one is still very
simple. For 3.0, know I got smarter and
simple. For 3.0, know I got smarter and
uh I managed to do the whole thing in a
uh I managed to do the whole thing in a
single discrete
single discrete
variable and uh it actually is like a
variable and uh it actually is like a
very interesting action space. Basically
very interesting action space. Basically
I designed neural MMO 3 for like what if
I designed neural MMO 3 for like what if
you were just playing this thing only on
you were just playing this thing only on
a
keyboard and it works tremendously well.
keyboard and it works tremendously well.
Multi-Discrete is
Multi-Discrete is
fine if you want multiple. And this end
fine if you want multiple. And this end
here, this is multi-iscreet.
here, this is multi-iscreet.
Multi-discreet is also
fine. Uh it's nice to have the internet
fine. Uh it's nice to have the internet
fast again and puffer boxes. That was
fast again and puffer boxes. That was
very painful. How many months ago that
very painful. How many months ago that
wasn't? It's uh it's still not like I
wasn't? It's uh it's still not like I
wish we could get a 10 gig line here,
wish we could get a 10 gig line here,
man, but we can't.
man, but we can't.
This is fast enough. It's a one gig
This is fast enough. It's a one gig
line. Like I'm on a farm
line. Like I'm on a farm
and there's not even going to be 10 gig
and there's not even going to be 10 gig
at the intersection, right? You'd have
at the intersection, right? You'd have
to go to like a business district, but
to go to like a business district, but
just to get to the intersection
just to get to the intersection
uh of like the road where you can go to
uh of like the road where you can go to
places is two miles.
Dang. So, it's not like just a two-m R
Dang. So, it's not like just a two-m R
driveway, but like a shared, you know,
driveway, but like a shared, you know,
like a few different like farms and
like a few different like farms and
things. It's two freaking miles.
I've done mixed distribution predictions
I've done mixed distribution predictions
using
using
maser working very well but it
maser working very well but it
becomes it's not that it's hard right
becomes it's not that it's hard right
it's just a pain like the infrastructure
it's just a pain like the infrastructure
and like
and like
the inference like in infrastructure
the inference like in infrastructure
code's just a pain in the ass and it's
code's just a pain in the ass and it's
slow that's the only
slow that's the only
issue and like why
bother basically Yeah.
Hey
Hey
RL, what is that?
dated
package. Is it maze? Cuz they do mazes
package. Is it maze? Cuz they do mazes
cuz we kind of have the best
mazes. Seems like it.
It's kind of funny how many of these
It's kind of funny how many of these
like little RL projects there are that
like little RL projects there are that
just died and it's like you know I I
just died and it's like you know I I
used to see like oh man look at all
used to see like oh man look at all
these other RL libraries trying to do
these other RL libraries trying to do
this stuff and then like a year later
this stuff and then like a year later
it's like Buffer is kind of the only one
it's like Buffer is kind of the only one
still doing these things like it's still
still doing these things like it's still
going really well.
Okay. M training impulse wars on the
Okay. M training impulse wars on the
puffer box.
Um, wonder what I should sweep. Let me
Um, wonder what I should sweep. Let me
see what the default sweep stuff is.
You set torch terministic to true
You set torch terministic to true
default when this slow it down.
default when this slow it down.
Uh not when I was testing it. You can
Uh not when I was testing it. You can
try it. See if it makes a difference.
try it. See if it makes a difference.
One sec.
Okay. So, I'm playing it
Okay. So, I'm playing it
here. I'm
the odd cursor. None of them.
Runescape. I have like probably three or
Runescape. I have like probably three or
4K hours in that game. In old
4K hours in that game. In old
school, I stopped playing because that
school, I stopped playing because that
thing is actually cocaine. Like that
thing is actually cocaine. Like that
game is straight freaking heroin or coke
game is straight freaking heroin or coke
or whatever. But
or whatever. But
uh not before I got a dusted omelette.
uh not before I got a dusted omelette.
Run. Okay. All that sweaty
stuff. I need to like print out the
stuff. I need to like print out the
bucket or something.
Okay. So, it's not letting me
deposit. There's definitely something
deposit. There's definitely something
wrong with the sim here.
like fix the angle or something. So this
like fix the angle or something. So this
is me
here. Okay. So holding shift does
not does not do anything. So, let's
not does not do anything. So, let's
figure that out.
This is just to like I don't know lazy
This is just to like I don't know lazy
way of setting conditional breakpoint.
terraforming sim I'm working
on. Okay. So, it's just straight up not
on. Okay. So, it's just straight up not
registering this action for some reason.
So what are the act like how does this M
So what are the act like how does this M
work like what are the what's the action
work like what are the what's the action
space like what what's I guess good
space like what what's I guess good
behavior in this M
behavior in this M
you mean the simulator itself it's uh
you mean the simulator itself it's uh
it's a simulator for like it's
it's a simulator for like it's
simulating Terraform it's written in the
simulating Terraform it's written in the
code here that I'm working on. No, I I
code here that I'm working on. No, I I
meant like uh I I was talking to chat.
meant like uh I I was talking to chat.
What you ask, Captain? Oh,
What you ask, Captain? Oh,
um what is a good policy look like? Like
um what is a good policy look like? Like
what is the goal? I I know it's to kind
what is the goal? I I know it's to kind
of terraform, but how does how does one
of terraform, but how does how does one
actually do that? Ideally, there's a
actually do that? Ideally, there's a
target map, there's a source map, and
target map, there's a source map, and
you convert the source map to the target
you convert the source map to the target
map.
map.
Oh, okay. That makes sense. Initially,
Oh, okay. That makes sense. Initially,
the target map is just flat.
the target map is just flat.
And the action space is just moving
And the action space is just moving
around. So, they're just trying to like
around. So, they're just trying to like
move through hills or what? Move around.
move through hills or what? Move around.
Load bucket. Unload bucket. Ah, I see.
Load bucket. Unload bucket. Ah, I see.
Gotcha. And then there's a place where
Gotcha. And then there's a place where
they can unload and it just they can
they can unload and it just they can
unload anywhere and it it just it
unload anywhere and it it just it
terraforms, right? Like they unload the
terraforms, right? Like they unload the
dirt and it terraforms space. Yeah.
dirt and it terraforms space. Yeah.
Okay. Yeah, that makes sense. all the
Okay. Yeah, that makes sense. all the
sim code is just yours or some kind of
sim code is just yours or some kind of
simulation framework. Um, I mean, it's
simulation framework. Um, I mean, it's
mostly just really plain vanilla C, but
mostly just really plain vanilla C, but
then the way that we hook it up to RL,
then the way that we hook it up to RL,
that's Puffer Lib, which is our set of
that's Puffer Lib, which is our set of
reinforcement learning tools cuz like we
reinforcement learning tools cuz like we
train agents to like to play games and
train agents to like to play games and
like, you know, to terraform the ground
like, you know, to terraform the ground
and do whatever else we're doing. These
and do whatever else we're doing. These
are all our Sims. Here's like miniature
are all our Sims. Here's like miniature
version of League or Dota. We've got
version of League or Dota. We've got
like miniature uh miniature MMO here.
like miniature uh miniature MMO here.
got like arcade games and they all have
got like arcade games and they all have
like neural nets that play them in your
like neural nets that play them in your
browser. So that's the uh general idea
browser. So that's the uh general idea
around here. Hyperf simulation and
around here. Hyperf simulation and
reinforcement learning dev.
Hey, off the top of your head, do you
Hey, off the top of your head, do you
know how many uh actual CPUs um are on
know how many uh actual CPUs um are on
the original puffer boxes?
the original puffer boxes?
I wish I sent the number for workers,
I wish I sent the number for workers,
too.
too.
Uh, it's probably 24. Okay.
No, Puffer Lib
No, Puffer Lib
does No. So, the the actual simulation
does No. So, the the actual simulation
is just Hyperf C. Pufferlib just makes
is just Hyperf C. Pufferlib just makes
it really easy for us to run a whole
it really easy for us to run a whole
bunch of these and get all the data to
bunch of these and get all the data to
the main process for reinforcement
the main process for reinforcement
learning very quickly for PyTorch and
learning very quickly for PyTorch and
all that. Um the rendering we're using
all that. Um the rendering we're using
Ray Lib for that. It's like low-level
Ray Lib for that. It's like low-level
nice graphics. And then I mean Puffer
nice graphics. And then I mean Puffer
Lib has like 30 plus thousand lines of C
Lib has like 30 plus thousand lines of C
for all the simulations. At this point
for all the simulations. At this point
we've got 20 different 20 different M's
we've got 20 different 20 different M's
like games, sims, whatever you want to
like games, sims, whatever you want to
call them. Um is that accurate with
call them. Um is that accurate with
Impulse Wars now? 20 plus now, right?
Impulse Wars now? 20 plus now, right?
I don't Yeah, I think mine was like I
I don't Yeah, I think mine was like I
don't know. Mine was a lot. I can't
don't know. Mine was a lot. I can't
remember. Yeah, because it's like 30k
remember. Yeah, because it's like 30k
lines now with it was 20k for 2. I think
lines now with it was 20k for 2. I think
it's got to be well well over 30k.
it's got to be well well over 30k.
Okay. Yeah, Impulse Wars kind of
Okay. Yeah, Impulse Wars kind of
inflated though because I kind of bundle
inflated though because I kind of bundle
some like a single head header
some like a single head header
dependencies like in but anyway. Yeah,
dependencies like in but anyway. Yeah,
we kind of got to do something with that
we kind of got to do something with that
because I I don't like you messing up my
because I I don't like you messing up my
line count.
It just really makes me laugh. It just I
It just really makes me laugh. It just I
don't know. Just the things you It's
don't know. Just the things you It's
just funny to me the things that you're
just funny to me the things that you're
important to you versus not. Just very
important to you versus not. Just very
different. Well, I just like to I just
different. Well, I just like to I just
like to see how much stuff we've done in
like to see how much stuff we've done in
Puffer.
Puffer.
Yeah.
Yeah.
Um so I'm about to start a sweep. Do you
Um so I'm about to start a sweep. Do you
mind just like really quick just
mind just like really quick just
double-checking my params? They're sane
double-checking my params? They're sane
and then I'm probably just gonna hop out
and then I'm probably just gonna hop out
and do some other stuff.
and do some other stuff.
Uh, Koopa, we completely like Jim, we
Uh, Koopa, we completely like Jim, we
use some of their stuff, but this it's
use some of their stuff, but this it's
like pathetically slow. We are a
like pathetically slow. We are a
thousand times slower than their default
thousand times slower than their default
tooling. Um, Majoko is also horribly
tooling. Um, Majoko is also horribly
slow. We have it running like 10x plus
slow. We have it running like 10x plus
faster than it normally would through
faster than it normally would through
Puffer Lib. If you run Majoko with
Puffer Lib. If you run Majoko with
Puffer Lib, we've done like contract
Puffer Lib, we've done like contract
work on Isaac Jim before. It's annoying.
work on Isaac Jim before. It's annoying.
It's kind of okay. We could do more Isax
It's kind of okay. We could do more Isax
in but we're not really focused on
in but we're not really focused on
robotics at this point unless we have
robotics at this point unless we have
robotics contracts active. Um but
robotics contracts active. Um but
generally like any of the existing
generally like any of the existing
frameworks out there we kind of just go
frameworks out there we kind of just go
like a thousandx faster with the stuff
like a thousandx faster with the stuff
we
we
have. Let me see what you're let's see
have. Let me see what you're let's see
what you're looking at captain. Yeah.
what you're looking at captain. Yeah.
And hello.
You don't need GPU parallel rendering.
You don't need GPU parallel rendering.
You need that parallel sim that chat.
You need that parallel sim that chat.
Yeah, my bad. Join Isaac FG. Yeah, you
Yeah, my bad. Join Isaac FG. Yeah, you
don't you don't want to train on render.
don't you don't want to train on render.
You're trolling if you're training on
You're trolling if you're training on
rendering over partial local state like
rendering over partial local state like
Yeah, it doesn't make sense. To give you
Yeah, it doesn't make sense. To give you
an idea like most RL labs are training
an idea like most RL labs are training
at like you know low thousands of steps
at like you know low thousands of steps
per second. Some of the better equipped
per second. Some of the better equipped
ones are in the tens of thousands. Maybe
ones are in the tens of thousands. Maybe
they're like a singledigit number of
they're like a singledigit number of
them in the hundreds of thousands. The
them in the hundreds of thousands. The
majority of our experiments run millions
majority of our experiments run millions
of steps per second. So like it's just
of steps per second. So like it's just
dramatically dramatically higher perf
dramatically dramatically higher perf
with what we've
built. You can take a look at like some
built. You can take a look at like some
of the stuff on the uh the on the repo.
of the stuff on the uh the on the repo.
We've got a 3.0 release coming out now
We've got a 3.0 release coming out now
soon. We've got new hyperparameter
soon. We've got new hyperparameter
tuning. We have fundamental algorithm
tuning. We have fundamental algorithm
improvements. We got a lot of
stuff. All right, let's see your sweep.
stuff. All right, let's see your sweep.
Um,
turn six.
turn six.
What? Why are you sixfold buffered?
What? Why are you sixfold buffered?
I need to change that. Like the vec
I need to change that. Like the vec
thing. Yeah, you're sixfold buffering
thing. Yeah, you're sixfold buffering
there with batch size. Yeah, I just
there with batch size. Yeah, I just
update nums num workers. I didn't update
update nums num workers. I didn't update
anything else. You 24 you could do
anything else. You 24 you could do
threefold for instance with eight.
threefold for instance with eight.
Um, I actually don't even know how good
Um, I actually don't even know how good
this is going to be on those that Intel
this is going to be on those that Intel
architecture anymore because we did
architecture anymore because we did
change the way that VEC works a little
change the way that VEC works a little
bit. So, we'll see.
Okay. Got num M. Let's try six. So, num
Okay. Got num M. Let's try six. So, num
ms I actually make configurable because
ms I actually make configurable because
I'm not really that's that actually
I'm not really that's that actually
seems to be pretty 256 with one 56 * 24.
seems to be pretty 256 with one 56 * 24.
Yeah, that's reasonable. And then,
well, the stuff I really want you to
well, the stuff I really want you to
look at is like the sweep um sizes and
look at is like the sweep um sizes and
stuff. Okay, so you're sweeping the
stuff. Okay, so you're sweeping the
number of M's.
number of M's.
Does it really take 250 mil to do
Does it really take 250 mil to do
anything?
anything?
Um, I guess that makes sense with your
Um, I guess that makes sense with your
end. Yeah, I I it really shouldn't take
end. Yeah, I I it really shouldn't take
that long. Well, this Yeah, I'm sweep
that long. Well, this Yeah, I'm sweep
I'm going to start to sweep over sitting
I'm going to start to sweep over sitting
Doug just to make sure it's fine. Um, it
Doug just to make sure it's fine. Um, it
shouldn't take that. Let me see. I can
shouldn't take that. Let me see. I can
probably look. It's fine.
probably look. It's fine.
Do you not have mini batch size in the
Do you not have mini batch size in the
sweep?
sweep?
No, I should. I just Yeah. Oh, there it
No, I should. I just Yeah. Oh, there it
is. That's a giant one for the max
is. That's a giant one for the max
there. That's We have grading
there. That's We have grading
accumulation, so that shouldn't break
accumulation, so that shouldn't break
you. Um, you think it's too high to max?
you. Um, you think it's too high to max?
Maybe, but it shouldn't break because
Maybe, but it shouldn't break because
it'll like it'll cap you to 32k anyways
it'll like it'll cap you to 32k anyways
and then it'll start doing gradient
and then it'll start doing gradient
accumulation, which is fine. Um, and
accumulation, which is fine. Um, and
it's learning rate. The min's probably
it's learning rate. The min's probably
too low though, isn't it? Yeah.
too low though, isn't it? Yeah.
It should learn pretty quickly to not do
It should learn pretty quickly to not do
that,
that,
but then we have I don't know co is
but then we have I don't know co is
fine.
fine.
I like a lot of these you don't need to
I like a lot of these you don't need to
like modify from their defaults. There's
like modify from their defaults. There's
ant and like value function. All these
ant and like value function. All these
things are in the original.
things are in the original.
Yeah, I was just setting like the the
Yeah, I was just setting like the the
mean to be what seemed to work. Okay,
mean to be what seemed to work. Okay,
fine. You can run a sweep and then we'll
fine. You can run a sweep and then we'll
see where that goes from there, I guess.
see where that goes from there, I guess.
So, if I just want to leave everything
So, if I just want to leave everything
as the default settings are, can I just
as the default settings are, can I just
say change the mean of something but
say change the mean of something but
leave the min, max, and scale and
leave the min, max, and scale and
everything else? Probably. You can try
everything else? Probably. You can try
it. Okay. I might I think it works. I
it. Okay. I might I think it works. I
don't know.
don't know.
The way I'm loading configs, I would
The way I'm loading configs, I would
think it would work. Yeah. The only
think it would work. Yeah. The only
thing you can't easily do is delete like
thing you can't easily do is delete like
things you don't want from the defaults.
things you don't want from the defaults.
Yeah. You can just set them to be
Yeah. You can just set them to be
something else, though. Mhm.
Okay. Yeah. Let's Let's see if this
Okay. Yeah. Let's Let's see if this
works.
Okay, so we got terraform
sim. This should get us break point.
sim. This should get us break point.
Yes.
Okay.
Bucket action is
two. Okay. So, I see the problem.
It wasn't letting you unload on
zero. That would screw it up.
thing. Unload any
thing. Unload any
dirt? Hard to tell.
very tiny amount of dirt that it can
very tiny amount of dirt that it can
hold. But we'll try
this. Might have to run the M for like
this. Might have to run the M for like
way longer
way longer
now. They terraform.
No.
No.
Huh? That is immediately better.
like consistently learning now.
Is there a reason why your default sweep
Is there a reason why your default sweep
sweeps over effects?
sweeps over effects?
Yeah. So, I made it so that um you I
Yeah. So, I made it so that um you I
just I left it so most of them have like
just I left it so most of them have like
a thousand agents per core now and it'll
a thousand agents per core now and it'll
just use more cores because that will
just use more cores because that will
automatically work for both the faster
automatically work for both the faster
and the slower MS.
and the slower MS.
like when you have more agents, it'll
like when you have more agents, it'll
just do more cores.
just do more cores.
You can change it for impulse wars if
You can change it for impulse wars if
you want. I think it would actually
you want. I think it would actually
wouldn't be the worst fit though,
wouldn't be the worst fit though,
depending on uh how you set default
depending on uh how you set default
noms.
noms.
Well, I'm I'm thinking is there a
Well, I'm I'm thinking is there a
scenario where it wouldn't make sense to
scenario where it wouldn't make sense to
use uh well, I think what works best for
use uh well, I think what works best for
me is the same amount of M's as there
me is the same amount of M's as there
are
are
workers. At least what I've seen on
workers. At least what I've seen on
Impulse Wars.
Impulse Wars.
Like if I have num ms equals 24 workers
Like if I have num ms equals 24 workers
but for
now. Huh. They really like this specific
now. Huh. They really like this specific
mountain for some reason.
mountain for some reason.
Is it just where they happen to spawn?
Is it just where they happen to spawn?
No, they go they all go to this
No, they go they all go to this
mountain.
I think we have to make the uh the
I think we have to make the uh the
bucket amount
bucket amount
uh much better.
load and unload amount
load and unload amount
10. We're going to make the bucket
10. We're going to make the bucket
capacity. What would a full scoop
be? I want to like actually see this do
be? I want to like actually see this do
something, you know?
something, you know?
Mhm. I want to see them
terraform. Actually,
Oh, this probably too much. I figured
Oh, this probably too much. I figured
out what the uh train misk time was by
out what the uh train misk time was by
the way.
the way.
What? In impulse wars. Um I accidentally
What? In impulse wars. Um I accidentally
set uh I because I was testing basically
set uh I because I was testing basically
I had some tensors in my policy that
I had some tensors in my policy that
were allocated in the CPU not on the GPU
were allocated in the CPU not on the GPU
so transferring between them. Yeah. So
so transferring between them. Yeah. So
once now I'm getting
once now I'm getting
um numbers that are like higher end
um numbers that are like higher end
time. Well everything's actually just
time. Well everything's actually just
higher but the end is a little higher.
higher but the end is a little higher.
The forward time is still like 56%
The forward time is still like 56%
evaluate forward. I don't know what is
evaluate forward. I don't know what is
so slow
so slow
there. I guess it's just multi-iscreet.
there. I guess it's just multi-iscreet.
I don't
know. But anyway, I'm going to hop off
know. But anyway, I'm going to hop off
and do some stuff. But thanks for your
and do some stuff. But thanks for your
help. Um, I got an impulse war sweep
help. Um, I got an impulse war sweep
running and
running and
hopefully in the next couple days I
hopefully in the next couple days I
should be able to get that archive thing
should be able to get that archive thing
and then we can just have, you know,
and then we can just have, you know,
impulse wars building like uh just with
impulse wars building like uh just with
setup.pay. But um is that a hard
setup.pay. But um is that a hard
prerequisite for release? What? Uh
prerequisite for release? What? Uh
impulse war is building in setup.py.
Yeah, but we can special case it. Okay.
Yeah, but we can special case it. Okay.
I mean, it it shouldn't take too long, I
I mean, it it shouldn't take too long, I
don't think, because I actually don't
don't think, because I actually don't
even need to modify anything in Vox CD.
even need to modify anything in Vox CD.
I just got to make like a GitHub actions
I just got to make like a GitHub actions
thing that just built it. So, I mean,
thing that just built it. So, I mean,
it's just like otherwise the thing is
it's just like otherwise the thing is
it's not going to be usable out of the
it's not going to be usable out of the
box, which is kind of shitty. Yeah. No,
box, which is kind of shitty. Yeah. No,
I agree. Yeah. Oh, one thing I did want
I agree. Yeah. Oh, one thing I did want
to say, I don't know if this
to say, I don't know if this
realistically matters. And this is kind
realistically matters. And this is kind
of one of the downsides of not using
of one of the downsides of not using
CMake. The way setup.py is, I don't know
CMake. The way setup.py is, I don't know
how to configure it such that um Box 2D
how to configure it such that um Box 2D
is only linked in to impulse wars. The
is only linked in to impulse wars. The
only way I'm I know how to do it is
only way I'm I know how to do it is
basically link box 2D into every M even
basically link box 2D into every M even
though mine it's because so it's you
though mine it's because so it's you
just have to like I said you'd special
just have to like I said you'd special
case you would add to the C extensions
case you would add to the C extensions
and each extension takes separate
and each extension takes separate
uh link extra link in compile args.
uh link extra link in compile args.
Oh okay it's very easy.
Oh okay it's very easy.
Let me look then really quick. The only
Let me look then really quick. The only
thing that's annoying is getting those
thing that's annoying is getting those
those archives.
those archives.
But if you get those archives, then it's
But if you get those archives, then it's
literally it's just a one line build.
literally it's just a one line build.
Okay. Yeah, we we can talk more about it
Okay. Yeah, we we can talk more about it
when I uh it should be a little bit less
when I uh it should be a little bit less
terrible now also without the Syon. Like
terrible now also without the Syon. Like
yeah, I don't know. Let me know if it
yeah, I don't know. Let me know if it
sucks, but I think I've made it easier.
sucks, but I think I've made it easier.
I hope. Um Oh, and by the way, um like
I hope. Um Oh, and by the way, um like
it seems it seems like a couple days ago
it seems it seems like a couple days ago
someone posted a PR that fixed the uh
someone posted a PR that fixed the uh
Mac build issues. Okay, I got I gota
Mac build issues. Okay, I got I gota
merge that then.
merge that then.
Yeah, they just it's basically just
Yeah, they just it's basically just
ignore certain warnings. That's all it
ignore certain warnings. That's all it
was in like the setup. Okay. So, it
was in like the setup. Okay. So, it
seems reasonable. Yeah, I take a look
seems reasonable. Yeah, I take a look
then all the stuff will pass.
then all the stuff will pass.
That would be useful.
That would be useful.
I'm going to do a little bit of stuff on
I'm going to do a little bit of stuff on
Terraform. So, we have hopefully I want
Terraform. So, we have hopefully I want
to get like post 300. Um the goal is
to get like post 300. Um the goal is
that we start doing a lot more industry
that we start doing a lot more industry
adjacent ends because Puffer's also got
adjacent ends because Puffer's also got
to grow business side. So, I'm going to
to grow business side. So, I'm going to
be working on Sims. I'm going to be
be working on Sims. I'm going to be
looking for other people to work on Sims
looking for other people to work on Sims
that are slightly more industry side and
that are slightly more industry side and
then like looking for companies uh that
then like looking for companies uh that
want our stuff and trying to get some
want our stuff and trying to get some
bigger contracts because I can be
bigger contracts because I can be
buying, you know, a few servers here and
buying, you know, a few servers here and
there, but if I want to like really be
there, but if I want to like really be
providing hardware and growing this
providing hardware and growing this
thing, then uh yeah, I got to grow that
thing, then uh yeah, I got to grow that
side of Puffer as well. So, mix of
side of Puffer as well. So, mix of
algorithm work and SIM work is mostly
algorithm work and SIM work is mostly
what I'm expecting to do.
what I'm expecting to do.
Yeah, I'm sure you're happy to get back
Yeah, I'm sure you're happy to get back
into sim work like you said because
into sim work like you said because
yeah, that's I'm so so freaking sick of
yeah, that's I'm so so freaking sick of
release stuff.
release stuff.
Yeah, I mean if it makes you feel any
Yeah, I mean if it makes you feel any
better. Um yeah, just I mean know I've
better. Um yeah, just I mean know I've
been working on and off of dev for the
been working on and off of dev for the
past uh couple months and it's really
past uh couple months and it's really
nice to have things be more stable and
nice to have things be more stable and
just working nice error messages like
just working nice error messages like
all that stuff. Like I've it's
all that stuff. Like I've it's
noticeable and it's really nice.
noticeable and it's really nice.
I know it sucks, but it makes the
I know it sucks, but it makes the
experience a lot better. No, I know I
experience a lot better. No, I know I
got to do it. It's just like I got to
got to do it. It's just like I got to
get back to doing like sims and other
get back to doing like sims and other
things as well. There is more core
things as well. There is more core
research I want to do as well, but like
research I want to do as well, but like
I think it's kind of at the like I work
I think it's kind of at the like I work
in blocks or phases and I think the next
in blocks or phases and I think the next
thing is like all right, let's get
thing is like all right, let's get
Puffer to having some like pretty solid
Puffer to having some like pretty solid
ARR where I can like actually be funding
ARR where I can like actually be funding
like spin-off research and stuff more
like spin-off research and stuff more
consistently. Yeah.
consistently. Yeah.
Makes sense. That's the goal.
Makes sense. That's the goal.
Cool. Well, yeah, once I'll I'll be
Cool. Well, yeah, once I'll I'll be
running some sweeps and check back in
running some sweeps and check back in
with you, but um in the next like couple
with you, but um in the next like couple
weeks or something once 3 0 is released
weeks or something once 3 0 is released
or something, I'd like to maybe start
or something, I'd like to maybe start
doing some multi- aent research on like
doing some multi- aent research on like
kind of like what we were talking about.
kind of like what we were talking about.
I can absolutely get you set up on that
I can absolutely get you set up on that
type of stuff. Yeah, cuz I mean there's
type of stuff. Yeah, cuz I mean there's
so many cool things that would be so
so many cool things that would be so
easy to make now. Like really if you
easy to make now. Like really if you
just think about like the things that
just think about like the things that
you wouldn't want to do before like in 2
you wouldn't want to do before like in 2
because like it would be hard to get the
because like it would be hard to get the
RL working versus now dramatically
RL working versus now dramatically
different.
different.
Yeah. With with protein and muon and all
Yeah. With with protein and muon and all
the other stuff the Yeah. Like well I'm
the other stuff the Yeah. Like well I'm
going to have this terraformer thing
going to have this terraformer thing
working pretty darn quick I imagine. And
working pretty darn quick I imagine. And
like that's like an actual industry use
like that's like an actual industry use
case. It's just going to be like easy.
case. It's just going to be like easy.
Yeah, I am curious to see how fast like
Yeah, I am curious to see how fast like
once you get the you know once the M
once you get the you know once the M
itself is done how and you fix like the
itself is done how and you fix like the
R the inevitable RL related bugs how
R the inevitable RL related bugs how
fast you're able to train a policy
fast you're able to train a policy
because I know for example um well I
because I know for example um well I
didn't watch them live but I saw you had
didn't watch them live but I saw you had
like just looking back and finding other
like just looking back and finding other
videos you had a ton of videos it seems
videos you had a ton of videos it seems
like it took you a long time to train
like it took you a long time to train
decent mobile policy even though like
decent mobile policy even though like
you said Um, the opponents are not
you said Um, the opponents are not
difficult. It just took a long time to
difficult. It just took a long time to
work everything. Yeah, exactly. So,
work everything. Yeah, exactly. So,
yeah, I'm curious how fast this will be,
yeah, I'm curious how fast this will be,
but it be it'll be cool to see. And
but it be it'll be cool to see. And
these guys are terraforming stuff like I
these guys are terraforming stuff like I
can see the terrain moving. I think I'm
can see the terrain moving. I think I'm
going to like accentuate it so that it
going to like accentuate it so that it
happens faster.
happens faster.
Um, but yeah, this is this would be
Um, but yeah, this is this would be
pretty cool. Or maybe light up like if
pretty cool. Or maybe light up like if
they move something kind of highlight. I
they move something kind of highlight. I
think what I'm going to do is yeah, I'm
think what I'm going to do is yeah, I'm
going to like change the the color map
going to like change the the color map
cuz it's just hard to see this color
cuz it's just hard to see this color
map, but it's also kind of difficult to
map, but it's also kind of difficult to
get Rayb to load nice colors in. I don't
get Rayb to load nice colors in. I don't
know. I might
know. I might
I might like have to do like some
I might like have to do like some
unrealistic like debug mode
map. Yeah, that that would make sense.
map. Yeah, that that would make sense.
But I I like I said, I think it Oh,
But I I like I said, I think it Oh,
yeah. I can see them moving some stuff.
yeah. I can see them moving some stuff.
I think it might also be nice to kind of
I think it might also be nice to kind of
I don't know have almost some kind of
I don't know have almost some kind of
like ghost outline of where stuff used
like ghost outline of where stuff used
to be or I I don't know some way of
to be or I I don't know some way of
making it more obvious what they're
making it more obvious what they're
doing. They're definitely moving stuff
doing. They're definitely moving stuff
around. Yeah, I see it now. Yeah. I
around. Yeah, I see it now. Yeah. I
mean, I just trained this these guys for
mean, I just trained this these guys for
30 seconds and they don't have enough
30 seconds and they don't have enough
time like before the end resets to
time like before the end resets to
really do much. So, I think that's going
really do much. So, I think that's going
to be Yeah, we'll we'll have to mess
to be Yeah, we'll we'll have to mess
with that. Like they're building. I
with that. Like they're building. I
don't know why they're building stuff.
don't know why they're building stuff.
That's kind of funny.
That's kind of funny.
When are you resetting? Are you just
When are you resetting? Are you just
hard resetting it like n number of time
hard resetting it like n number of time
steps? Like 500 something steps.
steps? Like 500 something steps.
Yeah, that's not a ton.
Terraforming sim will be really cool
Terraforming sim will be really cool
though. Yeah, that is that is cool. It
though. Yeah, that is that is cool. It
it's pretty simple, but also well the
it's pretty simple, but also well the
the idea is simple, but it's also kind
the idea is simple, but it's also kind
of somewhat complex. Well, but like
of somewhat complex. Well, but like
imagine if I can actually just like take
imagine if I can actually just like take
this map and turn it into whatever I
this map and turn it into whatever I
want, right? No. Yeah, I know. That'd be
want, right? No. Yeah, I know. That'd be
really cool. Like let's say I run this
really cool. Like let's say I run this
for like 100k steps and it just like
for like 100k steps and it just like
turns it into whatever I
want. Right.
want. Right.
Yeah, this is kind of tough. How do you
Yeah, this is kind of tough. How do you
actually decide in a good termination or
actually decide in a good termination or
I guess it'd be I guess you don't have
I guess it'd be I guess you don't have
this in the new bindings, but it really
this in the new bindings, but it really
be like truncation or something, but
be like truncation or something, but
whatever because Yeah. How do you decide
whatever because Yeah. How do you decide
like they're not doing anything? I don't
like they're not doing anything? I don't
know. I mean, I can literally just set
know. I mean, I can literally just set
some reward threshold where like once
some reward threshold where like once
they're not getting enough reward.
I don't know why they're building stuff.
I don't know why they're building stuff.
That's kind of interesting.
Yeah. Well, I got to go. Thanks again
Yeah. Well, I got to go. Thanks again
for help though. Got a sweep running.
for help though. Got a sweep running.
Hopefully does well. All right. I will
Hopefully does well. All right. I will
continue working on terraforming.
continue working on terraforming.
Thanks, Captain.
Thanks, Captain.
See you.
Okay, I think we're going to see if we
Okay, I think we're going to see if we
can get really
can get really
cool really cool terraform demo today.
cool really cool terraform demo today.
That's we'll make that the goal. Um,
That's we'll make that the goal. Um,
going have to mess with the rendering a
going have to mess with the rendering a
bit. I'm going to have to mess with the
bit. I'm going to have to mess with the
policies a bit. I think they also just
policies a bit. I think they also just
have to move more dirt at a time or I
have to move more dirt at a time or I
have to run the rendering way faster.
have to run the rendering way faster.
One or the
One or the
other. But yeah, I'm going to be right
other. But yeah, I'm going to be right
back. back. I'm going to use a restroom,
back. back. I'm going to use a restroom,
get a couple quick steps in, and uh
get a couple quick steps in, and uh
we'll go from
Oh, almost forgot.
All right.
First things
here 48 steps.
Max Dart height is
32. Then they operate.
2,00
capacity 120 FPS. Yes.
Okay, we got some score.
What are these guys going to
do? Oh, they're actually doing
do? Oh, they're actually doing
something. It looks
like it is actually like slowly getting
like it is actually like slowly getting
smoothed out, isn't it?
So I guess what we do
is render
is render
texture. Load texture from
texture. Load texture from
image. You have like procedural texture.
This is
cycling gradient. This is just image
gradient. Right.
I guess the real way to do this would be
I guess the real way to do this would be
a shader,
right? Yeah, let's just do a quick
right? Yeah, let's just do a quick
shader, I
guess. What's the simplest em I have
guess. What's the simplest em I have
that has a shader in it? Moa.
Okay. Shader
30. I get this thing. This is for
30. I get this thing. This is for
mobile.
only has um fragment shader because
only has um fragment shader because
that's all we need,
right? Probably can use like a way more
right? Probably can use like a way more
basic shader than this thing as well.
basic shader than this thing as well.
No.
fragment text
cord. Yeah, I need the like the fragment
cord. Yeah, I need the like the fragment
cord. Let's get this thing loaded in
first. Load shader.
Bloss is there probably
ins. Yeah. So these are all ins.
I think you just need the
X. Do you even need anything to be
X. Do you even need anything to be
passed into
this? I guess texture one.
No, you don't even need this. I think
No, you don't even need this. I think
you just straight
up model from
hash draw the
model. Okay. So right
here in shader modes.
Oh, it's been a while since I've done
Oh, it's been a while since I've done
shaders.
shaders.
Um, this should just you should just get
Um, this should just you should just get
this, I
think. I'm trying to remember which of
think. I'm trying to remember which of
these are like standards. I think you
these are like standards. I think you
get texture zero and then that's all you
get. You don't need any of this
crap. Extra
size. Is there a way to like get
haters.
[Music]
xcoordinate.x
X calculate the scaled texture. We don't
X calculate the scaled texture. We don't
need the text
coordinates input
coordinates input
vertex. Oh, I think it is. Is it this
vertex. Oh, I think it is. Is it this
frag text cord? No, that's a ve two.
frag text cord? No, that's a ve two.
How do you get the um
You need vertex
position, vertex
color. You need a vertex shader. I think
color. You need a vertex shader. I think
that you get a default vertex shader,
that you get a default vertex shader,
don't you?
That's actually what I need is I need to
That's actually what I need is I need to
know what their default shader
is. Where is
Default shader attribute
locations. So it has position. Okay. So
locations. So it has position. Okay. So
this is going to have all
this is going to have all
the attributes. Where is the ray default
the attributes. Where is the ray default
shader?
Dang it. I don't know where it is. Come
Dang it. I don't know where it is. Come
on.
Ra would be in source.
But there's no GLSL in
here. So, it's got to just be like
here. So, it's got to just be like
hardcoded in here
somewhere. Maybe if I just look for like
somewhere. Maybe if I just look for like
texture zero.
Okay. Well, I guess at least this gives
us this gives us
us this gives us
something. So, I can keep
this with
fragment text cord to fragment
color. Drag height.
This is
interesting. If I can get this to
interesting. If I can get this to
work. We definitely don't need all this
work. We definitely don't need all this
other crap.
Okay. Loaded successfully. Undefined
Okay. Loaded successfully. Undefined
variable frag
height. This is going to be
fragment
fragment
color this vertex.
Why? File loaded successfully. Compiled
successfully. That's bad.
Where's like the super basic rail
Where's like the super basic rail
example? Dang
it. Yeah. color mix
it. Yeah. color mix
FS resources shaders.
FS resources shaders.
Let me just go find this example one
Let me just go find this example one
because this will probably have enough
because this will probably have enough
in it for me to
use. Is that called
Yes, this one is
Yes, this one is
called multiple sample 2D.
Okay.
And they load resources
And they load resources
shader color mix.
Okay.
Okay.
So they do have all
this
this
matter. This probably doesn't matter at
matter. This probably doesn't matter at
all.
Why isn't this red?
listen.
Okay. Color
It's going to be way easier without the
leak.
leak.
Okay. So, we can get rid of this.
The heck is going on with this? Oh,
The heck is going on with this? Oh,
final
color. Okay. So, this is says this says
color. Okay. So, this is says this says
loaded successfully.
Uh but this is not drawing for some
Uh but this is not drawing for some
reason.
Only hard thing about shaders is getting
Only hard thing about shaders is getting
them to actually do anything. And then
them to actually do anything. And then
there it's very
there it's very
easy. Once they do anything to doing
easy. Once they do anything to doing
what you want is not as hard as just
what you want is not as hard as just
getting the thing to freaking load
correctly every freaking
correctly every freaking
time. I swear it's just every
time. Find that
example. This doesn't
need load shader zero.
Yeah, this is correct. The shader
load. Then you have begin shader
load. Then you have begin shader
mode. Draw the model.
texture
zero not have to
do you have to do this I don't have this
do you have to do this I don't have this
texture I'm sampling
from I do it for mobile.
This is cuz I have game map.
Does it not work when you do a 3D
Does it not work when you do a 3D
model? Good. Right.
definitely work for
definitely work for
a 3D model.
begin shader mode of
shader. Yeah, this is correct.
I'm just going to type this [ __ ] into
I'm just going to type this [ __ ] into
Grock. Look at this.
This. Get rid of this.
truck as well.
material shader isn't properly
material shader isn't properly
set. Is that a
set. Is that a
thing? Shader must
thing? Shader must
assign. Okay, so this is just a docs
assign. Okay, so this is just a docs
thing.
Cool. Perfect.
Now we can very
Now we can very
easily do what the heck we
vertex
position. What should be the value of
position. What should be the value of
vertex position?
Yeah. So, this gives you the
Yeah. So, this gives you the
shading.
Um, frag text cord.
Um, frag text cord.
That's kind of weird though, right?
That's kind of weird though, right?
Because
like not just where it is on the screen.
like not just where it is on the screen.
This is the correct attribute. Why is it
2D
vertex extra coordinates?
Where's the
um I had the docks for this,
right? I had like a window with docs and
right? I had like a window with docs and
here it
here it
is. This thing
is. This thing
has vertex text vertex normal. Okay.
Do you want the fragment height?
vertex Y. This thing thinks that it
vertex Y. This thing thinks that it
should
should
be normalized
be normalized
height. So, it should just
be it
be it
position the vertex position. That's
position the vertex position. That's
what I thought it would be, right?
But this apparently is not correct
But this apparently is not correct
because this just gives you
black invert three vertex position.
black invert three vertex position.
That is a default attribute. Good.
Upload mesh to
send there. Upload
send there. Upload
mesh. Yeah, we do have upload
mesh. Yeah, we do have upload
mesh. What is false on
this on
Trying to think what I could be doing
Trying to think what I could be doing
dumb
here. Where' my stream
go? Y over 32.
Oh, here it
Oh, here it
is.
Finally. Base vertex shader. This is
Finally. Base vertex shader. This is
what I was looking
what I was looking
for. Vertex
for. Vertex
position. Get fragment text board.
Yes. So this is not passed some
Yes. So this is not passed some
dummy.
Um vertex position was it ver fragment
Um vertex position was it ver fragment
text
text
cord and fragment color.
So this needs to be out, right?
Yeah, you literally just have to make
Yeah, you literally just have to make
this an output variable as well,
right? V vertex
export. You just need frag position.
export. You just need frag position.
Just Yes.
And actually that'll just make it work I
think like this.
Mama.
drag position.
All right, there you go. Now we can
All right, there you go. Now we can
actually write a basic shader for this
actually write a basic shader for this
thing pretty easily, I imagine.
Now we actually just have to make this
Now we actually just have to make this
thing adjust a little bit more. All
thing adjust a little bit more. All
right.
basic
thing. Trying to get some basic Viz map.
thing. Trying to get some basic Viz map.
There we go.
Okay, there's no
Okay, there's no
gradient. Kind of expect
um be a
gradient
dummy. Okay, way better. So now we
dummy. Okay, way better. So now we
actually get some sort of
gradient. The point of doing this is
gradient. The point of doing this is
that we're actually going to be able to
that we're actually going to be able to
tell uh when it has modified the
terrain. That's
There should be a draw FPS function,
There should be a draw FPS function,
right?
Okay. So, it can only get like 60s
Okay. So, it can only get like 60s
something FPS because of the way we're
something FPS because of the way we're
doing the mesh [ __ ]
dynamic mesh update.
Update mesh
Update mesh
buffer. Is that a
buffer. Is that a
thing? It is a
thing update height mash map. Let's do
client mesh. It's going to be create
client mesh. It's going to be create
heightmap mesh.
how they deal with
how they deal with
that vertices.
Raw
model load model from
mesh. Oh, okay. So, can you do like
mesh. Oh, okay. So, can you do like
this?
Okay.
Okay.
So, doesn't do much,
but okay. So, there's that. Now we have
but okay. So, there's that. Now we have
to call
to call
update buffer. Instead of unload we
update buffer. Instead of unload we
do update
buffer.
This does have normals.
Okay. And we
get vertex count.
We get this here. Update mesh buffer.
Okay, this is totally fine.
Is this going to use
Is this going to use
it? No, this doesn't have updating the
it? No, this doesn't have updating the
buffer,
buffer,
right? Upload
right? Upload
mesh. This has upload mesh. It doesn't
mesh. This has upload mesh. It doesn't
have update mesh
have update mesh
buffer. And then this is update for a
buffer. And then this is update for a
specific buffer index.
specific buffer index.
void start. So int
void start. So int
data this so the signature here is
data this so the signature here is
correct data size and then
correct data size and then
offset. Uh this seems correct to me then
update mesh
buffer. The one is UVs I
guess Xords of zero.
Okay. So why are we seg faulting
Okay. So why are we seg faulting
then? Oh well this should not be
upload. This is update heightmap
mesh. It should be something like this.
mesh. It should be something like this.
Maybe not uploaded
yet. Ah, there we go.
And uh we're not doing anything with
And uh we're not doing anything with
this yet, but this is this is
something. Hey,
something. Hey,
Plasma. Working on the
end. I had a really stupid hack for how
end. I had a really stupid hack for how
we were rendering the mesh before. So,
we were rendering the mesh before. So,
I'm fixing that so we can actually
I'm fixing that so we can actually
render it fast enough so we can see
render it fast enough so we can see
what's going on.
Oh, was that your PR? Yeah, I've been
Oh, was that your PR? Yeah, I've been
meaning to merge that. Hang on. Ah, it
meaning to merge that. Hang on. Ah, it
works. It gloriously
works. It gloriously
works. Look at that. The
works. Look at that. The
environment gloriously works. Except
environment gloriously works. Except
it's still uploading meshes constantly.
Okay, I will take a look at that
Okay, I will take a look at that
then. We only get 100
FPS. Figure that out.
I have to figure out how we can get the
I have to figure out how we can get the
uh the thing to sink way
faster
plasma. I tried installing
plasma. I tried installing
the void still gives me reward trouble.
the void still gives me reward trouble.
Not giving up
though. Yeah, I just fixed basics for
though. Yeah, I just fixed basics for
you. You got to take a look at like our
you. You got to take a look at like our
new tutorial end and like clean up
new tutorial end and like clean up
logic. There's so many places where you
logic. There's so many places where you
can screw stuff up and the checklist is
can screw stuff up and the checklist is
a good thing to
use. All right, this is
use. All right, this is
fine. Thank you for PR.
update height
update height
map.
also. Okay.
also. Okay.
It's still only 100 FPS.
It's still only 100 FPS.
be dramatically faster than that.
I guess we are kind of doing the entire
map. Deltas, we're not really doing
map. Deltas, we're not really doing
deltas.
and that's the super lameo way,
right? And then we can render like what
right? And then we can render like what
FPS. Yeah, easy 300,
FPS. Yeah, easy 300,
right? That's like good speed for
right? That's like good speed for
actually. I honestly want
actually. I honestly want
more. Do like 600
FPS. There you go.
We're going to do 8192 steps for this.
All right, I will be right back.
You're the best. Keep doing. Thank you
You're the best. Keep doing. Thank you
very much,
sir. This is a weird learning curve,
sir. This is a weird learning curve,
huh?
Is this
Is this
uh Oh, it only got two data
uh Oh, it only got two data
points.
points.
AC.
Annoying. Well, let's at least watch
it. It's just cuz the episode length is
it. It's just cuz the episode length is
too long.
Yeah, that's
terraforming. I mean, it's like trying,
terraforming. I mean, it's like trying,
right?
I think we give it some better
observations. Hang on. I got uh some
observations. Hang on. I got uh some
folks here. One second.
Hey Red. Yeah. What uh implementation
Hey Red. Yeah. What uh implementation
question you
got? Why do you use
got? Why do you use
LSTM? I'm not seeing any to temporal
LSTM? I'm not seeing any to temporal
data. Or is
there RL is inherently tempor like it's
there RL is inherently tempor like it's
a sequential decision-making
a sequential decision-making
problem. You get from the last time step
problem. You get from the last time step
there's a state the state goes to the
there's a state the state goes to the
next time step and so on and so forth.
next time step and so on and so forth.
So each time step is only using one like
So each time step is only using one like
one state of the
one state of the
LSTM but like it's inherently a
LSTM but like it's inherently a
sequential problem,
sequential problem,
right?
Also, yeah, our LSTM implementation is
Also, yeah, our LSTM implementation is
just good. So, we just use it
just good. So, we just use it
everywhere.
I think we give them a bigger bucket
capacity. Yeah, LSD. I'm
capacity. Yeah, LSD. I'm
good. We give them a bigger bucket
capacity. And then what we do Yes.
gives us anything
else. Bigger bucket
else. Bigger bucket
size. No.
Interesting. So, is it learning less or
Interesting. So, is it learning less or
is this some quirk of really long
is this some quirk of really long
episodes?
reds
the RL is inherently unless you're doing
the RL is inherently unless you're doing
like a bandit problem, it's inherently a
like a bandit problem, it's inherently a
sequential decision
problem like you're making an
problem like you're making an
observation in the end. You're taking an
observation in the end. You're taking an
action and then you make a then you make
action and then you make a then you make
another observation based on what
another observation based on what
happens and you take another action.
happens and you take another action.
Right? It's a sequential action
problem. Okay. Okay. So, I think there's
problem. Okay. Okay. So, I think there's
definitely something wrong with
uh with
[Music]
[Music]
this. Now, it goes back up.
It's kind of tough to
It's kind of tough to
say cuz like the thing is that here when
say cuz like the thing is that here when
you have the episodes this
long Yeah. Like the episodes being this
long Yeah. Like the episodes being this
long can mess it uh can mess it
up. Mess up the logging. I
mean they're doing something here,
mean they're doing something here,
right?
But they don't seem great.
Well, yeah. I have everything
Well, yeah. I have everything
accentuated so you can actually see
accentuated so you can actually see
what's going Come on.
Yeah, you can definitely see it's just
Yeah, you can definitely see it's just
they're not doing it at the moment. They
they're not doing it at the moment. They
are taking they have the ability to take
are taking they have the ability to take
out a good
chunk STS which is
valid. You do have long trajectories
valid. You do have long trajectories
technically right. The state keeps
technically right. The state keeps
getting preserved but then when you
getting preserved but then when you
train in backrop you uh you take like
train in backrop you uh you take like
segments usually like length 64 segments
segments usually like length 64 segments
as training
data. The way I'm doing it in is
data. The way I'm doing it in is
entirely standard as well. There's
entirely standard as well. There's
nothing weird here.
nothing weird here.
Like we have a couple small efficiency
Like we have a couple small efficiency
hacks, but the framing of it entirely
standard. Oops. And actually,
So l kick
turns something like this probably
turns something like this probably
works.
Do a few experiments, but something
Do a few experiments, but something
around this will
work. Ideas that you reset when they
work. Ideas that you reset when they
stop making good
stop making good
progress. So the smarter the agents
progress. So the smarter the agents
get, the better progress they can make.
Ah, this is not going to work the way I
Ah, this is not going to work the way I
wrote it.
something like this
instead. This might be way too
generous. You'll see.
fully ex Oh yeah, bet. So it's it's a
fully ex Oh yeah, bet. So it's it's a
tableau. So it's flat but not at ground
level. That is the current goal map.
pretty
pretty
much
much
step. I think this is
step. I think this is
too
too
aggressive. Got to rebuild.
I just got to find good reset conditions
I just got to find good reset conditions
and all that stuff.
turned added. Divide by tick divide by
turned added. Divide by tick divide by
numbum
agents. Maybe they're just getting a ton
agents. Maybe they're just getting a ton
of reward. I don't know.
Oh yeah, they're just getting too much
Oh yeah, they're just getting too much
reward
Tube size five
Okay, that's
Okay, that's
something. So, this
something. So, this
is
Yeah, way better.
Yeah, way better.
We'll see if it's stable or not.
Hello
Casper. We doing Morse code
now. Yeah. So this levels out at uh
now. Yeah. So this levels out at uh
about the curse go welcome as well. Uh
about the curse go welcome as well. Uh
we are leveling out here at 33ish with
we are leveling out here at 33ish with
the
the
current setup. We have lots of stuff we
current setup. We have lots of stuff we
can tweak though.
I do want to see how this policy
I do want to see how this policy
does or what this policy
does. Thoughts on Dreamer V3
Cool approach, good results. Too bad
Cool approach, good results. Too bad
half of the tricks that they uh
half of the tricks that they uh
advertise are wrong, or at least don't
advertise are wrong, or at least don't
do what they say they
do what they say they
do. Kind of mad about that one. They
do. Kind of mad about that one. They
wasted uh 10,000 GPU hours worth of
wasted uh 10,000 GPU hours worth of
compute on uh well, we had to doing
compute on uh well, we had to doing
ablations on it to find out that it
ablations on it to find out that it
really wasn't what the heck it was
really wasn't what the heck it was
presented as.
presented as.
So, I'm a bit miffed about that
paper. Whoa.
Okay. Yeah, that's some terraforming
Okay. Yeah, that's some terraforming
action, right?
I got to let this go maybe a little
longer on the
reset. I don't think like it's not like
reset. I don't think like it's not like
the whole paper is wrong, but all the
the whole paper is wrong, but all the
tricks that they say make it really
tricks that they say make it really
robust and stable are total [ __ ]
I think that it's like something to do
I think that it's like something to do
with their world model formulation
with their world model formulation
letting them scale to gigantic networks.
I forgot to recompile, didn't I?
Oops. We'll get this done and then we
Oops. We'll get this done and then we
will maybe we even set up a sweep on
will maybe we even set up a sweep on
this. I don't know. Pretty freaking
this. I don't know. Pretty freaking
awesome
awesome
already. Terraforming.
I have really good ideas on how to sweep
I have really good ideas on how to sweep
this actually because like so the cool
this actually because like so the cool
thing with this environment is there is
thing with this environment is there is
a like absolutely correct global score
a like absolutely correct global score
function you can compute which is this
function you can compute which is this
the sum of deltas um between this in the
the sum of deltas um between this in the
target map. So like I can actually add
target map. So like I can actually add
some pretty awesome metrics on
that thing. I don't know if this one is
that thing. I don't know if this one is
training quite as well because this one
training quite as well because this one
has slightly lower PF with longer
has slightly lower PF with longer
episode
episode
length. We shall
see. Say the ending state is
see. Say the ending state is
Mega Scarp with some pretty impressive
Mega Scarp with some pretty impressive
escarments. Agents descend and descend
escarments. Agents descend and descend
without impediment currently. Yes, we
without impediment currently. Yes, we
will be accounting for that
though. And this is like a brand new
though. And this is like a brand new
end.
I mean, we're not we're not there yet,
I mean, we're not we're not there yet,
right? This is like early testing on
stuff. I don't think that this agent is
stuff. I don't think that this agent is
going to be quite as
good. Yeah. I mean, it's doing stuff.
But yeah, it's getting lower score than
But yeah, it's getting lower score than
uh than
uh than
before. I think that the more frequent
before. I think that the more frequent
resets were actually good for it. We'll
resets were actually good for it. We'll
keep this
here. And then I think I'm going to
here. And then I think I'm going to
train this. And in the meantime, I'm
train this. And in the meantime, I'm
going to
going to
fix a few graphics.
came out
purple. There we are.
It's a lot more Marsy, right?
pretty
pretty
mesmerizing. It's not super smart yet
though. I mean, there are several
though. I mean, there are several
reasons though that this could be uh the
reasons though that this could be uh the
case. Go compile this thing.
30 FPS. Yes.
Okay. I mean, they can definitely take a
Okay. I mean, they can definitely take a
decent chunk of dirt
out. Like, they can definitely take a
out. Like, they can definitely take a
decent chunk of dirt out.
Yeah. So the acceleration
Yeah. So the acceleration
is
-2. Try
this. See if this lets
this. See if this lets
them dramatically
them dramatically
different. cuz we're going to have an
different. cuz we're going to have an
apples to
apples to
apples comparison
now. Yeah. Get rid of this one. This one
now. Yeah. Get rid of this one. This one
doesn't do very well.
idea here is that they're they
idea here is that they're they
accelerate so slowly right now that like
accelerate so slowly right now that like
the way the M dynamics work, it's kind
the way the M dynamics work, it's kind
of more efficient to just drive in
of more efficient to just drive in
circles and like pick up dirt and spew
circles and like pick up dirt and spew
it everywhere. I think that they're
it everywhere. I think that they're
actually going to be able to be more
actually going to be able to be more
precise if they have uh more control
precise if they have uh more control
over their
over their
acceleration. We'll see.
Any ideas here?
So apparently this did not
So apparently this did not
help which is
interesting. Unless hang
interesting. Unless hang
on. No, I did
recompile. I definitely did recompile.
recompile. I definitely did recompile.
So that is uh unfortunate. that.
Maybe we make them not be able to drive
Maybe we make them not be able to drive
into uh to drive through cliffs.
Next, what we
do
is stuck
Is there height?
Oops.
But we got bucket offset here.
What is the best way to do this?
Add some additional restrictions.
We're moving forward.
trying to think how we do the
trying to think how we do the
collisions.
collisions.
A good simple way to do the collisions.
We can just set velocity to zero.
Yeah. So we do
I'm trying to think what the heck how we
I'm trying to think what the heck how we
do
this cuz like the thing is you need them
this cuz like the thing is you need them
to be able to back out but there's no
to be able to back out but there's no
notion of like a front of the dozer.
Oh, I know what we can
Oh, I know what we can
do. I mean, it's kind of jank, but
You do this bucket shenanigans.
The idea is if you try to go
The idea is if you try to go
somewhere and
somewhere and
um the height difference is too big, you
um the height difference is too big, you
get stopped.
Okay. So yeah, this drops the dirt drops
Okay. So yeah, this drops the dirt drops
in the wrong spot is
all cuz it's around the dozer Now,
Ricky.
I need to adjust the camera on this
I need to adjust the camera on this
Okay.
Do I use
Do I use
XY? I do use Z as height.
XY? I do use Z as height.
Okay, he is up.
Still
Still
no. I thought this would do
no. I thought this would do
something.
Camera. That's looking at something, I
Camera. That's looking at something, I
guess.
I don't know why this thing doesn't
I don't know why this thing doesn't
um does not make sense to
um does not make sense to
me. Hang
me. Hang
on. If I go like this, am I higher
on. If I go like this, am I higher
up? Yeah, I am higher up, right?
Okay.
and
wait. He's
115.
Okay.
Red. So
Red. So
confused.
Oh, is it just clipping?
Yeah. So, there's something crazy going
Yeah. So, there's something crazy going
on cuz it's like the exact
position. I wonder if
um what if this one has to be zero and
um what if this one has to be zero and
this one has to
this one has to
be uh Okay, so the directions are messed
be uh Okay, so the directions are messed
up. Hang on. So this is probably
why. But it's not is the
thing. This is like this is zoom,
thing. This is like this is zoom,
right?
Not Oh, that is zoom. the like.
camera rotation. Maybe.
3D camera split
screen. The third person
Not going to
work. Oh, wait. Camera mode.
Leave it like this. Now
The fact that this is stuck is weird.
a pipe 20. This seems like wrong
a pipe 20. This seems like wrong
indexing. Okay.
Wait,
Wait,
what? Oh, is X like totally screwed up?
Oh, this is totally fine.
What's Hey,
That pipe
That pipe
106 X is some crazy
thing redefined or something.
Like the Y is also screwed up, right?
That's crazy.
Why does it being like
this
d fine?
Okay, X. So, desk X desk Y is totally
Okay, X. So, desk X desk Y is totally
fine. And then X is just screwy for some
fine. And then X is just screwy for some
reason.
Not like a cast thing, right? Like what?
Not like a cast thing, right? Like what?
What is this?
Okay, we're just going to put a break
Okay, we're just going to put a break
point. I like this is
ridiculous. Oh, wait. Specifies
But yeah, it doesn't break on these.
Okay. So we get undefined behavior here.
really weird that that's freaking
really weird that that's freaking
undefined
undefined
behavior. I will say
Oh yeah, that is
outside. What?
Ah, be
20. It's very weird to me that that is
20. It's very weird to me that that is
undefined behavior. Like the hell? It's
undefined behavior. Like the hell? It's
not just uh that's kind of crazy.
Sometimes it just decides that now
Sometimes it just decides that now
you're not moving. It's weird.
Oh, is it the Z?
Dozer height was registered as way
Dozer height was registered as way
higher than it
should. y * m size plus x. Isn't that
should. y * m size plus x. Isn't that
what we do?
All right. Explode.
Okay. So
immediately this is freaking wrong,
immediately this is freaking wrong,
right?
reasonable.
Like am I going nuts somehow?
Like am I going nuts somehow?
Like
why? Oh, this should be fine.
Is that the actual dozer? Why?
Okay. So, it says dozer X is 105, Y
is that doesn't agree with what we have
here. Dozer.x
Axe. Oh, are you dumb? I think I'm dumb.
Axe. Oh, are you dumb? I think I'm dumb.
Hang on. I think I'm real
dumb. Yeah, real real
dumb. Yeah, it's a different dozer.
My bad.
325. Okay, now we can do
this. Okay, but as soon as you run into
this. Okay, but as soon as you run into
something,
it's basically
Okay. So this is good. This is where we
Okay. So this is good. This is where we
want those
want those
X. Okay. So now we actually
get
height. So this says this is 26 which
height. So this says this is 26 which
makes absolutely no sense.
Death tight is correct.
Is this casting
Is this casting
shenanigans? Is that what this
is? Got to be casting shenanigans,
is? Got to be casting shenanigans,
right?
Yeah. You know what this is? This is
Yeah. You know what this is? This is
going to give you like half of a row, I
going to give you like half of a row, I
bet.
No, you actually
No, you actually
get I did I not
rebuild? I
did.
Those are
height. It
claims the position
claims the position
is claims a dozer's on a
is claims a dozer's on a
hill. I do not understand why.
I think this is it either though,
right? Hey,
bet. For some reason, this is still
bet. For some reason, this is still
claiming that the dozer is at
claiming that the dozer is at
Weird height.
six.
I wonder if it's um Hang
on. So, it's not like some memory
on. So, it's not like some memory
overwrite shenanigans.
right there at 3:18.
moves a bit.
No, it's not the destination. The
No, it's not the destination. The
destination is fine.
It's like crazy annoying.
Do I have the indexing just wrong
Do I have the indexing just wrong
somehow?
Now, when I make this
I would be so surprised if
So this immediately fails.
But that doesn't make sense how that
But that doesn't make sense how that
immediately fails.
And the thing is that they
And the thing is that they
were a height map on the
were a height map on the
renderer
fine time size. So this is y * size plus
x y * size plus
x. That's what we
have. Is there just some random like
have. Is there just some random like
single spike in the map? That's
single spike in the map? That's
not No, there can't just be like some
not No, there can't just be like some
random single spike, right?
and like I can't scoop it either. It
and like I can't scoop it either. It
says
bizarre
Come on.
We literally still have this, don't
we? We're fine.
still hit it.
I have absolutely no idea what's
I have absolutely no idea what's
happening. I have no idea. It's like I'm
happening. I have no idea. It's like I'm
rendering the
rendering the
terrain from the same map.
It's very
weird. It's like a super basic sim as
weird. It's like a super basic sim as
well.
well.
We should not be hitting this level of
We should not be hitting this level of
[ __ ] uh this early on into dev of
[ __ ] uh this early on into dev of
the sim. This is like very easy.
especially considering we shouldn't even
especially considering we shouldn't even
hit it here.
hit it here.
Like if anything, it should tell us that
Like if anything, it should tell us that
the destination is too tall. We
the destination is too tall. We
shouldn't be able to get to this tile,
shouldn't be able to get to this tile,
which means that like
You would think it would be
You would think it would be
something something with the
something something with the
indexing, but the indexing looks fine.
So we get like
this like 26
this like 26
whatever. Okay. And
somehow map height freaking change on
somehow map height freaking change on
us.
Okay. So,
Okay. So,
here this is going to catch
it. Go use the restroom real quick. be
it. Go use the restroom real quick. be
back and we'll figure out what the heck
back and we'll figure out what the heck
is going on with this Okay.
Hey,
Hey,
Spencer. I'm stuck on a bug. I'm trying
Spencer. I'm stuck on a bug. I'm trying
to add collisions and I'm stuck on a bug
to add collisions and I'm stuck on a bug
where uh they're like phantom
where uh they're like phantom
collisions. It's a really cool sim
collisions. It's a really cool sim
though. I can show you
though. I can show you
it kind
of. It thinks it's colliding with
of. It thinks it's colliding with
something
here. I added a shader and did a few
here. I added a shader and did a few
other things as well.
That was
want me to work on anything? Uh, once I
want me to work on anything? Uh, once I
figure out this bug
The thing is that this shouldn't be
The thing is that this shouldn't be
possible
because we just checked this above,
because we just checked this above,
right?
Those are velocities five as well.
Yeah. One sec, folks.
Oh, my bad. Probably better. I was
Oh, my bad. Probably better. I was
muted. Just a bunch of swearing at
muted. Just a bunch of swearing at
ridiculous code.
Go check for them.
I don't have that in my branch and it's
I don't have that in my branch and it's
still broken.
I've run Sutton embaro doing independent
I've run Sutton embaro doing independent
research think going for PhD will be
research think going for PhD will be
worth it you do a PhD if you know that
worth it you do a PhD if you know that
you want to do a PhD that's my
you want to do a PhD that's my
recommendation
like you go go like figure out what a
like you go go like figure out what a
PhD entails, publications, you know, the
PhD entails, publications, you know, the
like five years of doing whatever and if
like five years of doing whatever and if
like that appeals to you, you do a PhD.
like that appeals to you, you do a PhD.
If not, you do other
If not, you do other
things. I don't encourage I don't try to
things. I don't encourage I don't try to
make people go do a PhD, right? It's
make people go do a PhD, right? It's
like if you want to do a PhD, do a PhD.
This is still zero reward.
How's this still not freaking fix it is
How's this still not freaking fix it is
my question.
array of int action.
So they don't have this
This is also insane.
This thing gets zero reward.
This never
gets never gets any data into
rewards. They never get any rewards.
Check out this freaking
met. I got to think this thing is
ridiculous. I'm going to just clone
ridiculous. I'm going to just clone
there.
Why they're using make files
ridiculous thing.
probably just pip install pop,
right? No, it's they have a weird setup.
right? No, it's they have a weird setup.
I need help understanding what the hell
I need help understanding what the hell
they've been doing.
You
It's literally like, "Please install AWS
It's literally like, "Please install AWS
CLI on your Mac to run training.
And it's like not even in here.
I like I have no idea what the hell
I like I have no idea what the hell
they're doing with
um like I don't know why the hell they
um like I don't know why the hell they
would have it set up like
like mindbogglingly over complicated.
And like the devs who work on it
And like the devs who work on it
literally don't know where it is in
literally don't know where it is in
their own code because they have too
their own code because they have too
much
I mean, this isn't my fault that they
I mean, this isn't my fault that they
did it this way.
Like I'm trying to get them baselines,
Like I'm trying to get them baselines,
but they introduced a bug where they
but they introduced a bug where they
have all their rewards zero and like
have all their rewards zero and like
they've got 15 engineers and they have
they've got 15 engineers and they have
not been able to figure this out for
not been able to figure this out for
multiple days because of how complicated
multiple days because of how complicated
it is, which is like fair enough. It's
it is, which is like fair enough. It's
hard to like get this stuff simplified
hard to like get this stuff simplified
uh with larger teams, but
uh with larger teams, but
like I mean it's just it's not done in a
like I mean it's just it's not done in a
way that I can help them at all.
You can try. It's not going to make any
You can try. It's not going to make any
sense. I don't even know how to run
sense. I don't even know how to run
their
