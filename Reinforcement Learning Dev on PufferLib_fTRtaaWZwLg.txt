Kind: captions
Language: en
Good
morning. Not sure what happened to the
morning. Not sure what happened to the
stream
overnight. There we go. Hi. We're going
overnight. There we go. Hi. We're going
to do a quick 1 hour stream now before
to do a quick 1 hour stream now before
breakfast. check on some experiments,
breakfast. check on some experiments,
make some plans for the day, do a few
make some plans for the day, do a few
things, and then uh we will be back
things, and then uh we will be back
afterwards for pretty much the whole
afterwards for pretty much the whole
rest of the day afterwards working on
dev. So, first things
first, go check on experiments.
Okay, this is actually still running. I
Okay, this is actually still running. I
totally forgot about this one. I I left
totally forgot about this one. I I left
a sweep going on Neural
a sweep going on Neural
MMO. I don't know if it does
anything.
Oh, we got
Oh, we got
one one good run.
Interesting. I'll let this uh keep going
Interesting. I'll let this uh keep going
then because it is possible we find
then because it is possible we find
something in here. It's just very
difficult. And then I believe this is
difficult. And then I believe this is
what we were going to go for here is the
what we were going to go for here is the
uh the breakout
results. Okay. So we have here
A good number of
curves. You know, this is not really any
curves. You know, this is not really any
better than
better than
before. I believe we got 19 seconds
uh 19 seconds before. Let me see if we
uh 19 seconds before. Let me see if we
can figure out why this
can figure out why this
sweep did not do as
well. Probably this one.
Okay. So if we look at this one right,
Okay. So if we look at this one right,
this one is 50
mil. Heck, this is solved in like 17
mil. Heck, this is solved in like 17
seconds. So what happened that these two
seconds. So what happened that these two
are so different?
Okay, so we have the score. Both of
Okay, so we have the score. Both of
these are good on the
these are good on the
score total time steps. This one is over
here. And this one is actually like
here. And this one is actually like
quite a bit
quite a bit
higher in total time
steps. Oh, did I lock this thing to
steps. Oh, did I lock this thing to
gigantic batch size?
I think I might have locked this to
I think I might have locked this to
gigantic
gigantic
batch by
mistake. Let's go figure that out.
So this is the
run. You have mini batch size
run. You have mini batch size
here and horizon.
Patch size is
auto.
auto.
Ah, yeah, that'll do it.
So, we'll see um with
this. We'll see if this makes a
this. We'll see if this makes a
difference. I'm let this do a few runs
difference. I'm let this do a few runs
just to make sure it it actually is
just to make sure it it actually is
doing something.
environment/score.
H.
So here we have logs.
Interesting. For some reason, there's no
Interesting. For some reason, there's no
score variable here at
all, but I see the score variable.
Oh, we're we have like some logs that
Oh, we're we have like some logs that
don't have it.
I should do this ablation sooner rather
I should do this ablation sooner rather
than later because we have all sorts of
than later because we have all sorts of
annoying things happening from uh from
annoying things happening from uh from
this.
But it'll be fine for
now. What we'll do for now is we'll just
now. What we'll do for now is we'll just
do um
We'll see if this
runs.
Cool. Okay. So, the hope here is that we
Cool. Okay. So, the hope here is that we
get something that is faster wall clock
get something that is faster wall clock
than our uh our previous
than our uh our previous
best, which should be
best, which should be
doable. It should at least match this.
doable. It should at least match this.
17 second
17 second
solve. I don't know if we'll be able to
solve. I don't know if we'll be able to
get a 10-second solve, but a 15-second
get a 10-second solve, but a 15-second
solve would be pretty darn
solve would be pretty darn
cool. Like, I basically I want to get
cool. Like, I basically I want to get
something good enough that we can just
something good enough that we can just
put it in a GIF or whatever on on
put it in a GIF or whatever on on
X. It's the whole like this is solving
X. It's the whole like this is solving
an end
life. All
right. Put this over
right. Put this over
here. Back in. And
what was that from today? Hey, Captain.
what was that from today? Hey, Captain.
Uh 15 ms training with huge batch sizes.
Uh 15 ms training with huge batch sizes.
Cool. How much have you tested large
Cool. How much have you tested large
batch sizes? Not very much at all
batch sizes? Not very much at all
yet. We're doing that stuff now.
We did this. We have it pretty cleaned
We did this. We have it pretty cleaned
up. We did most of the small stuff on
Saturday. We're working on getting nice
Saturday. We're working on getting nice
stable sweep stuff.
stable sweep stuff.
And aside from a few experiments
here, I think we should do the packaging
stuff. And like honestly with
stuff. And like honestly with
um I think that the easiest thing to do
um I think that the easiest thing to do
is actually still to just ship
source. I guess it will depend on how
source. I guess it will depend on how
much slower Puffer is without the custom
kernel. We'll have to see that.
Oh yeah, also I wanted to do
Oh yeah, also I wanted to do
um and I got to pop the chat window out
um and I got to pop the chat window out
with this new setup.
Yeah. So, this is where we were at the
Yeah. So, this is where we were at the
end of the weekend. We had the sea
end of the weekend. We had the sea
build. We had the torch build.
We also go get our scythe.
Believe you have to call siphon eyes on
Believe you have to call siphon eyes on
these, right?
So you have C extensions, torch
So you have C extensions, torch
extensions, Syon
extensions. That is building.
I did not call
Syanize, but that does
build. And then there's like something
build. And then there's like something
about the torch limited API.
Oh, I think we don't even care. I think
Oh, I think we don't even care. I think
we just get rid of this.
We dropped
We dropped
38. Uh what is the
38. Uh what is the
current
Pythoned version?
Okay, so 39 is technically still live.
And then all I have to do now is figure
And then all I have to do now is figure
out this CUDA extension
thing. So there should be like a
thing. So there should be like a
conditional compilation on this.
their setup
file. This
is extension C++ extension.
This is what we wanted here.
So they try to like autofind all the
So they try to like autofind all the
files which we don't really care as much
files which we don't really care as much
about
right and then they compile
right and then they compile
both into one extension
both into one extension
here is fine.
This doesn't seem Hang
on. I don't think that this
on. I don't think that this
works. You can't compile CUDA, right?
works. You can't compile CUDA, right?
Um, if you don't have CUDA dev
Okay. Yeah. So, their example is not
correct. You just check NVCC.
And do they compile with
03? Yeah, they
do. I mean, they have a nice debugging
do. I mean, they have a nice debugging
setup here. I think I can take all of
setup here. I think I can take all of
this, all their debug stuff.
We can go like up hereish.
In fact, I can honestly
In fact, I can honestly
like some of this can be extended even
like some of this can be extended even
to more of the package,
right? I can do
like. Yeah, like up to here maybe.
Okay. So now we just need this one
Okay. So now we just need this one
line. If CUDA home is
line. If CUDA home is
none, you need to check that.
Okay.
So, we actually get
So, we actually get
this. And how do they do
NVCC? Uh, they provide the args either
NVCC? Uh, they provide the args either
way.
Do you recommend you're doing a PhD in
Do you recommend you're doing a PhD in
reinforcement learning? What are your
reinforcement learning? What are your
thoughts on academia? I'm one of the
thoughts on academia? I'm one of the
most negative people on academia at the
most negative people on academia at the
moment, especially in RL. Um, but I
moment, especially in RL. Um, but I
think generally I only recommend doing a
think generally I only recommend doing a
PhD to people who know they want to do a
PhD to people who know they want to do a
PhD.
PhD.
Um, for people who are on the fence
Um, for people who are on the fence
about it, I'd strongly suggest like
about it, I'd strongly suggest like
considering all the other things that
considering all the other things that
you can do. Um, because it's it's five
you can do. Um, because it's it's five
years of your life and like the plus
years of your life and like the plus
side is if you are in a good lab at a
side is if you are in a good lab at a
good university, you don't have funding
good university, you don't have funding
to worry about and your like
to worry about and your like
adviser is supportive, then you get to
adviser is supportive, then you get to
work on like pretty much a very wide
work on like pretty much a very wide
range of stuff for five years. Uh the
range of stuff for five years. Uh the
downside is you're doing so with next to
downside is you're doing so with next to
no resources
no resources
uh and almost like no funding to
uh and almost like no funding to
yourself. Like sometimes you're better
yourself. Like sometimes you're better
off just doing it yourself as a company
off just doing it yourself as a company
um or joining a like a similar startup
um or joining a like a similar startup
or whatever. Uh and the really downside
or whatever. Uh and the really downside
is the way that you have to write papers
is the way that you have to write papers
and how everything in RL like how all
and how everything in RL like how all
work is formulated around the academic
work is formulated around the academic
way of doing things. I I'm not being
way of doing things. I I'm not being
particularly articulate right now. Let's
particularly articulate right now. Let's
just put it this way, right? I did
just put it this way, right? I did
neural MMO for five years. I had some
neural MMO for five years. I had some
like reasonable results, right? I put
like reasonable results, right? I put
out some cool work. Uh but then in the
out some cool work. Uh but then in the
year since I've graduated, I've
year since I've graduated, I've
completely transformed the field. Like
completely transformed the field. Like
if you look at the stuff that we're
if you look at the stuff that we're
doing now in Puffer Lib versus what was
doing now in Puffer Lib versus what was
possible a year ago, it is like
possible a year ago, it is like
completely unthinkable to be able to do
completely unthinkable to be able to do
this type of stuff. Um, and the way that
this type of stuff. Um, and the way that
I was able to do this was by breaking
I was able to do this was by breaking
free of the academic mold. Uh, I had to
free of the academic mold. Uh, I had to
do way more engineering than is
do way more engineering than is
typically accepted or appreciated in
typically accepted or appreciated in
academia. Um, I mean, I really had to go
academia. Um, I mean, I really had to go
deep on a ton of different things that
deep on a ton of different things that
like wouldn't really fit well into
like wouldn't really fit well into
papers or like the type of work that
papers or like the type of work that
academia is going to appreciate. But
academia is going to appreciate. But
now, you know, the results are here. So
now, you know, the results are here. So
I I guess the thing that I would say is
I I guess the thing that I would say is
like a lot of industry is allergic to
like a lot of industry is allergic to
doing real science but then a lot of
doing real science but then a lot of
academia is allergic to doing real
academia is allergic to doing real
engineering and neither of those things
engineering and neither of those things
are
Good. Let me see if I can come up with
Good. Let me see if I can come up with
something like more actionable for you.
something like more actionable for you.
You're asking me first thing in the
You're asking me first thing in the
morning and I'm not particularly
morning and I'm not particularly
articulate here.
articulate here.
Um, okay. Concretely,
right, the like concretely the thing
right, the like concretely the thing
that annoyed me, well, not even annoyed
that annoyed me, well, not even annoyed
me, the thing that I thought was
me, the thing that I thought was
restrictive in academia, right? There is
restrictive in academia, right? There is
a very high premium placed on
a very high premium placed on
theoretical and mathematical
theoretical and mathematical
um
um
improvements even when they're like
improvements even when they're like
completely impractical or useless.
completely impractical or useless.
Um, there's a very large premium placed
Um, there's a very large premium placed
on like cool sounding algorithms. Like
on like cool sounding algorithms. Like
if you have an algorithm that
if you have an algorithm that
intuitively sounds cool that it could
intuitively sounds cool that it could
work like that, like you're going to get
work like that, like you're going to get
something really good published. If you
something really good published. If you
come up with something that's really
come up with something that's really
simple and beats the hell out of that
simple and beats the hell out of that
like really complicated thing, you're
like really complicated thing, you're
not like the simplicity and the making
not like the simplicity and the making
things work and work very well is valued
things work and work very well is valued
less than like a lot of clever sounding
less than like a lot of clever sounding
things that don't actually work. Um
things that don't actually work. Um
there seems to be like an academic
there seems to be like an academic
myopia around
myopia around
that which is very difficult when you
that which is very difficult when you
are actually trying to make things work.
are actually trying to make things work.
uh the lack of focus on engineering me
uh the lack of focus on engineering me
meant that things would just run like a
meant that things would just run like a
thousandx slower than they should in
thousandx slower than they should in
most of RL which was the main limiting
most of RL which was the main limiting
factor. That's the main thing that I
factor. That's the main thing that I
fixed with Puffer Lib. Um it also
fixed with Puffer Lib. Um it also
prevented them ironically from even
prevented them ironically from even
doing good science because they just
doing good science because they just
couldn't run enough experiments to
couldn't run enough experiments to
support any of the claims.
support any of the claims.
Um, and the crazy thing is
Um, and the crazy thing is
that even with all of that, like even
that even with all of that, like even
when you show people like, hey, you can
when you show people like, hey, you can
run stuff 100 times faster, you can
run stuff 100 times faster, you can
solve stuff with simple like methods or
solve stuff with simple like methods or
whatever, like you get push back even
whatever, like you get push back even
when you do that. So, I don't know. I
when you do that. So, I don't know. I
found it like very limiting and
found it like very limiting and
like you would think that like academia
like you would think that like academia
would be a place where there's just all
would be a place where there's just all
sorts of different approaches and
sorts of different approaches and
perspectives and things, but it's really
perspectives and things, but it's really
not. like it's really
like the I I guess it's like the
like the I I guess it's like the
scientific method is it becomes the it
scientific method is it becomes the it
kind of became the goal and not the
kind of became the goal and not the
means if you will like in my view the
means if you will like in my view the
way to do effective research right it's
way to do effective research right it's
you do math you do experiment heavy work
you do math you do experiment heavy work
when it's valuable you do engineering
when it's valuable you do engineering
when it's valuable as is needed to solve
when it's valuable as is needed to solve
your problem but that's not really what
your problem but that's not really what
it is they're kind of stuck into a very
it is they're kind of stuck into a very
specific set of methods. Uh, and as soon
specific set of methods. Uh, and as soon
as they get bottlenecked by engineering,
as they get bottlenecked by engineering,
they're screwed, which is what happened
they're screwed, which is what happened
in
RL there. That's a bit more articulate.
It took a second because you got me
It took a second because you got me
within the first half hour of stream in
within the first half hour of stream in
the morning, but there you go.
You're a huge fan of your channel. Thank
You're a huge fan of your channel. Thank
you. Now, if you are I don't know your
you. Now, if you are I don't know your
background in RL. Um maybe I should. I
background in RL. Um maybe I should. I
don't know may if you're one of the end
don't know may if you're one of the end
contributors or not yet. It's people
contributors or not yet. It's people
have a million different names on the
have a million different names on the
Discord and on the YouTube and whatever.
Discord and on the YouTube and whatever.
Um but if you're looking to do some
Um but if you're looking to do some
really cool RL stuff, you can kind of do
really cool RL stuff, you can kind of do
things right now in Puffer. And uh it's
things right now in Puffer. And uh it's
a pretty special place now because like
a pretty special place now because like
you can make things so fast that you can
you can make things so fast that you can
actually do like Google level
actually do like Google level
experiments on one GPU now. Uh and it
experiments on one GPU now. Uh and it
doesn't take like a huge amount of code
doesn't take like a huge amount of code
or infrastructure setup. We have things
or infrastructure setup. We have things
pretty darn simple. We've got like brand
pretty darn simple. We've got like brand
new people with zero RL experience who
new people with zero RL experience who
are now in my view as effective if not
are now in my view as effective if not
more effective than a lot of RL PhDs
more effective than a lot of RL PhDs
just from having contributed and built
just from having contributed and built
stuff over the last few months.
stuff over the last few months.
And uh it's a good mix of approaches as
And uh it's a good mix of approaches as
well, right? Like we have science side
well, right? Like we have science side
stuff, we have algorithm side stuff, but
stuff, we have algorithm side stuff, but
we also have hard engineering, right?
we also have hard engineering, right?
And we kind of use what is useful at any
And we kind of use what is useful at any
one time and bring them all together to
one time and bring them all together to
make RL actually work.
just finished bachelors and want to use
just finished bachelors and want to use
the summer to get better at RL. Have
the summer to get better at RL. Have
some basic knowledge of the theory. What
some basic knowledge of the theory. What
sort of projects would you recommend?
sort of projects would you recommend?
Oh, then you're in a perfect
Oh, then you're in a perfect
spot. Um, the thing that I always
spot. Um, the thing that I always
recommend to newcomers and I have like a
recommend to newcomers and I have like a
guide on my website for this, but just
guide on my website for this, but just
build a new environment that would be
build a new environment that would be
interesting for RL, something that's
interesting for RL, something that's
only going to be, you know, a few
only going to be, you know, a few
hundred lines of code max, not a huge
hundred lines of code max, not a huge
project. uh and then get RL to work on
project. uh and then get RL to work on
it. You get the whole process of
it. You get the whole process of
building an environment, right? Running
building an environment, right? Running
RL. Uh you actually have to get to see
RL. Uh you actually have to get to see
the types of things that caused your M
the types of things that caused your M
to break and not work. You get to see
to break and not work. You get to see
the common classes of errors. Uh and you
the common classes of errors. Uh and you
get like an end
get like an end
toend RL working on a new environment
toend RL working on a new environment
very very fast out of it. So that's what
very very fast out of it. So that's what
I've had like most of these environments
I've had like most of these environments
are from people doing that.
are from people doing that.
like I built neural MMO, moa, and snake.
like I built neural MMO, moa, and snake.
The rest of these are from contributors,
The rest of these are from contributors,
and they're actually like six more now
and they're actually like six more now
at this point that aren't yet
listed. So that's generally what I
listed. So that's generally what I
recommend to people who are new is like
recommend to people who are new is like
instead of just like studying, studying
instead of just like studying, studying
and studying and studying like go do
and studying and studying like go do
some RL, right?
And generally it's like it's fine to
And generally it's like it's fine to
just like pick any existing game to
just like pick any existing game to
implement and like make it fast and make
implement and like make it fast and make
work with RL. Um I think you're a little
work with RL. Um I think you're a little
better off if you want to like think
better off if you want to like think
about what would be an interesting
about what would be an interesting
problem that would add something like
problem that would add something like
that's different from these like what
that's different from these like what
would be like an interesting thing to
would be like an interesting thing to
look at with RL. Like for instance I got
look at with RL. Like for instance I got
somebody doing voids which is this big
somebody doing voids which is this big
multi- aent swarm type sim right now.
multi- aent swarm type sim right now.
We've got um we've got a driving
We've got um we've got a driving
simulator uh in construction. We've got
simulator uh in construction. We've got
somebody that's done like a like a
somebody that's done like a like a
physics shooter. Those are bigger
physics shooter. Those are bigger
projects. But like I guess the the
projects. But like I guess the the
example of this was like when I made
example of this was like when I made
Snake, right? This is kind of like a
Snake, right? This is kind of like a
different and very interesting
different and very interesting
multi-agent environment and this is only
multi-agent environment and this is only
a couple hundred lines of code. Like if
a couple hundred lines of code. Like if
you find things that would be
you find things that would be
interesting to look at with RL or like
interesting to look at with RL or like
are an interesting challenge in a
are an interesting challenge in a
specific
specific
way that's usually great because then
way that's usually great because then
you get the experience of
you get the experience of
also coming up with like a useful
also coming up with like a useful
problem like that implementing it and
problem like that implementing it and
getting RL to work on it.
also just generally doing stuff in
also just generally doing stuff in
puffer lilib you will become a
puffer lilib you will become a
dramatically better engineer um than
dramatically better engineer um than
most graduating PhD students very very
quickly like most PhD students get
quickly like most PhD students get
through their whole PhDs touching like
through their whole PhDs touching like
nothing I'm a
nothing I'm a
python. It's pretty gross.
This seems to
work. So, I think I just clean this up
work. So, I think I just clean this up
now. And I think we actually have
now. And I think we actually have
um pretty reasonable package
build. I think we spend a good chunk of
build. I think we spend a good chunk of
today on this. And uh this actually is
today on this. And uh this actually is
already in a decent enough
spot. Yeah.
I guess we have to fix uh impulse wars
I guess we have to fix uh impulse wars
as well. But I can chat with Captain. I
as well. But I can chat with Captain. I
don't know if Captain if you're still
don't know if Captain if you're still
here, but um I would like to figure out
here, but um I would like to figure out
the build stuff uh at some point in the
the build stuff uh at some point in the
next few days, if not today.
Make sure my experiment is still
Make sure my experiment is still
running. It is
good. Kind of crazy that this thing is
good. Kind of crazy that this thing is
actually just running like 200
actually just running like 200
experiments in an hour and a half.
Yeah, I think this will be the thing
Yeah, I think this will be the thing
today. Let's get these sweeps working
today. Let's get these sweeps working
and get our packaging nice and clean.
It's pretty messy the way we do our
It's pretty messy the way we do our
install here.
I mean, what's the alternative though?
I mean, what's the alternative though?
It's like just it's this or C make,
right? Like pick your poison.
you add him in the
discord. I am going to go for uh for
discord. I am going to go for uh for
breakfast in a few around 10.
I actually wouldn't mind so much if we
I actually wouldn't mind so much if we
had to
do I guess if we could compile
We could compile ray and like box 2D
We could compile ray and like box 2D
with
with
cmake and then link
cmake and then link
it GCC.
Yeah, I would think here
like we'd have to dynamically link,
right? Okay, I'm going to wait for what
right? Okay, I'm going to wait for what
captain says on that.
captain says on that.
Um, I
think that the assumption in the
think that the assumption in the
meantime is that we aren't going to do
meantime is that we aren't going to do
this.
I think my intuition of not wanting to
I think my intuition of not wanting to
have this in the build process is
have this in the build process is
correct though is like just more garbage
correct though is like just more garbage
for people to deal with, right? Like
for people to deal with, right? Like
when I say, "Hey, come jam some with
when I say, "Hey, come jam some with
us." And people are like, "Eh, that
us." And people are like, "Eh, that
sounds hard." And I say, "Well, do you
sounds hard." And I say, "Well, do you
know how to write if statements and for
know how to write if statements and for
loops?" It's like, "Yeah, okay. That's
loops?" It's like, "Yeah, okay. That's
all we do. This is the code. It's really
all we do. This is the code. It's really
simple. That's fine. But then it's like,
simple. That's fine. But then it's like,
oh, also here's all of
oh, also here's all of
cmake. It's annoying. It's way easier if
cmake. It's annoying. It's way easier if
it's one GCC command, which is what we
it's one GCC command, which is what we
have right
now.
Yeah, I think at the most we use it to
Yeah, I think at the most we use it to
compile dependencies.
Hey, Captain. How close to release are
Hey, Captain. How close to release are
you? A week? Two? I don't know. It's as
you? A week? Two? I don't know. It's as
fast as I can do it, man. I'm trying to
fast as I can do it, man. I'm trying to
finish. I'm trying to cap everything up
finish. I'm trying to cap everything up
together, though. Like, the goal is
together, though. Like, the goal is
clean packaging, good baselines on all
clean packaging, good baselines on all
the M's, including yours. Um, docks,
the M's, including yours. Um, docks,
sweeps, all that.
genuine question. How did you learn to
genuine question. How did you learn to
do good engineering coming from an
do good engineering coming from an
academic background? I know people said
academic background? I know people said
the only way to get good is to do it,
the only way to get good is to do it,
but getting from 10k lines of code from
but getting from 10k lines of code from
a pet project to contributing to a
a pet project to contributing to a
library is
library is
definitely intimidating for me. Okay, so
definitely intimidating for me. Okay, so
here's a few things. One, I really I
here's a few things. One, I really I
just gave a about it. I really
just gave a about it. I really
cared like trying to make my code better
cared like trying to make my code better
and better. Um, most people just didn't.
Um, second of all, I needed to get good
Um, second of all, I needed to get good
at it. In even just in the last year,
at it. In even just in the last year,
I've gotten to be like two or three
I've gotten to be like two or three
better at engineering than I was in the
better at engineering than I was in the
previous 10. Um, mind you, like all the
previous 10. Um, mind you, like all the
stuff I did before set me up for it. So,
stuff I did before set me up for it. So,
like when I went from Python to C, it
like when I went from Python to C, it
literally took me 3 weeks before I was
literally took me 3 weeks before I was
perfectly happy programming everything
perfectly happy programming everything
in C.
in C.
Um, but it, yeah, that's kind of what
Um, but it, yeah, that's kind of what
that was about. Um, but here's the
that was about. Um, but here's the
thing. 10k lines of code. Like the core
thing. 10k lines of code. Like the core
of puffer is less than 10k lines of
of puffer is less than 10k lines of
code. The core of puffer is like 5k
code. The core of puffer is like 5k
lines of code and it solves things in RL
lines of code and it solves things in RL
that like whole gigantic libraries just
that like whole gigantic libraries just
don't. Um and then we have like 30,000
don't. Um and then we have like 30,000
lines of contributed environments. So
lines of contributed environments. So
like you don't need a ton of code to
like you don't need a ton of code to
have a ridiculously impactful project if
have a ridiculously impactful project if
you build stuff reasonably. Um, now if
you build stuff reasonably. Um, now if
you build stuff poorly, like if somebody
you build stuff poorly, like if somebody
if Fang were to try to make Puffer Lib,
if Fang were to try to make Puffer Lib,
like if people in Fang were to like make
like if people in Fang were to like make
an RL library like this, it wouldn't be
an RL library like this, it wouldn't be
as fast and it would be a bajillion
as fast and it would be a bajillion
lines of code, right? Like I've actually
lines of code, right? Like I've actually
put a ton a ton of effort into keeping
put a ton a ton of effort into keeping
it simple. Um, but it's a very good way
it simple. Um, but it's a very good way
to build stuff in general. So I guess
to build stuff in general. So I guess
I've sort of specialized into getting
I've sort of specialized into getting
pretty hard things done with like
pretty hard things done with like
medium-sized projects. Uh, and also like
medium-sized projects. Uh, and also like
contributing to a library, just start
contributing to a library, just start
like literally just start. Like if
like literally just start. Like if
you're interested in RL, come build an M
you're interested in RL, come build an M
and like go through the process of
and like go through the process of
building an environment, integrating
building an environment, integrating
with Puffer and and seeing stuff. I got
with Puffer and and seeing stuff. I got
to run for breakfast, so I will be back
to run for breakfast, so I will be back
right after. But uh

Kind: captions
Language: en
Good
morning. Not sure what happened to the
morning. Not sure what happened to the
stream
overnight. There we go. Hi. We're going
overnight. There we go. Hi. We're going
to do a quick 1 hour stream now before
to do a quick 1 hour stream now before
breakfast. check on some experiments,
breakfast. check on some experiments,
make some plans for the day, do a few
make some plans for the day, do a few
things, and then uh we will be back
things, and then uh we will be back
afterwards for pretty much the whole
afterwards for pretty much the whole
rest of the day afterwards working on
dev. So, first things
first, go check on experiments.
Okay, this is actually still running. I
Okay, this is actually still running. I
totally forgot about this one. I I left
totally forgot about this one. I I left
a sweep going on Neural
a sweep going on Neural
MMO. I don't know if it does
anything.
Oh, we got
Oh, we got
one one good run.
Interesting. I'll let this uh keep going
Interesting. I'll let this uh keep going
then because it is possible we find
then because it is possible we find
something in here. It's just very
difficult. And then I believe this is
difficult. And then I believe this is
what we were going to go for here is the
what we were going to go for here is the
uh the breakout
results. Okay. So we have here
A good number of
curves. You know, this is not really any
curves. You know, this is not really any
better than
better than
before. I believe we got 19 seconds
uh 19 seconds before. Let me see if we
uh 19 seconds before. Let me see if we
can figure out why this
can figure out why this
sweep did not do as
well. Probably this one.
Okay. So if we look at this one right,
Okay. So if we look at this one right,
this one is 50
mil. Heck, this is solved in like 17
mil. Heck, this is solved in like 17
seconds. So what happened that these two
seconds. So what happened that these two
are so different?
Okay, so we have the score. Both of
Okay, so we have the score. Both of
these are good on the
these are good on the
score total time steps. This one is over
here. And this one is actually like
here. And this one is actually like
quite a bit
quite a bit
higher in total time
steps. Oh, did I lock this thing to
steps. Oh, did I lock this thing to
gigantic batch size?
I think I might have locked this to
I think I might have locked this to
gigantic
gigantic
batch by
mistake. Let's go figure that out.
So this is the
run. You have mini batch size
run. You have mini batch size
here and horizon.
Patch size is
auto.
auto.
Ah, yeah, that'll do it.
So, we'll see um with
this. We'll see if this makes a
this. We'll see if this makes a
difference. I'm let this do a few runs
difference. I'm let this do a few runs
just to make sure it it actually is
just to make sure it it actually is
doing something.
environment/score.
H.
So here we have logs.
Interesting. For some reason, there's no
Interesting. For some reason, there's no
score variable here at
all, but I see the score variable.
Oh, we're we have like some logs that
Oh, we're we have like some logs that
don't have it.
I should do this ablation sooner rather
I should do this ablation sooner rather
than later because we have all sorts of
than later because we have all sorts of
annoying things happening from uh from
annoying things happening from uh from
this.
But it'll be fine for
now. What we'll do for now is we'll just
now. What we'll do for now is we'll just
do um
We'll see if this
runs.
Cool. Okay. So, the hope here is that we
Cool. Okay. So, the hope here is that we
get something that is faster wall clock
get something that is faster wall clock
than our uh our previous
than our uh our previous
best, which should be
best, which should be
doable. It should at least match this.
doable. It should at least match this.
17 second
17 second
solve. I don't know if we'll be able to
solve. I don't know if we'll be able to
get a 10-second solve, but a 15-second
get a 10-second solve, but a 15-second
solve would be pretty darn
solve would be pretty darn
cool. Like, I basically I want to get
cool. Like, I basically I want to get
something good enough that we can just
something good enough that we can just
put it in a GIF or whatever on on
put it in a GIF or whatever on on
X. It's the whole like this is solving
X. It's the whole like this is solving
an end
life. All
right. Put this over
right. Put this over
here. Back in. And
what was that from today? Hey, Captain.
what was that from today? Hey, Captain.
Uh 15 ms training with huge batch sizes.
Uh 15 ms training with huge batch sizes.
Cool. How much have you tested large
Cool. How much have you tested large
batch sizes? Not very much at all
batch sizes? Not very much at all
yet. We're doing that stuff now.
We did this. We have it pretty cleaned
We did this. We have it pretty cleaned
up. We did most of the small stuff on
Saturday. We're working on getting nice
Saturday. We're working on getting nice
stable sweep stuff.
stable sweep stuff.
And aside from a few experiments
here, I think we should do the packaging
stuff. And like honestly with
stuff. And like honestly with
um I think that the easiest thing to do
um I think that the easiest thing to do
is actually still to just ship
source. I guess it will depend on how
source. I guess it will depend on how
much slower Puffer is without the custom
kernel. We'll have to see that.
Oh yeah, also I wanted to do
Oh yeah, also I wanted to do
um and I got to pop the chat window out
um and I got to pop the chat window out
with this new setup.
Yeah. So, this is where we were at the
Yeah. So, this is where we were at the
end of the weekend. We had the sea
end of the weekend. We had the sea
build. We had the torch build.
We also go get our scythe.
Believe you have to call siphon eyes on
Believe you have to call siphon eyes on
these, right?
So you have C extensions, torch
So you have C extensions, torch
extensions, Syon
extensions. That is building.
I did not call
Syanize, but that does
build. And then there's like something
build. And then there's like something
about the torch limited API.
Oh, I think we don't even care. I think
Oh, I think we don't even care. I think
we just get rid of this.
We dropped
We dropped
38. Uh what is the
38. Uh what is the
current
Pythoned version?
Okay, so 39 is technically still live.
And then all I have to do now is figure
And then all I have to do now is figure
out this CUDA extension
thing. So there should be like a
thing. So there should be like a
conditional compilation on this.
their setup
file. This
is extension C++ extension.
This is what we wanted here.
So they try to like autofind all the
So they try to like autofind all the
files which we don't really care as much
files which we don't really care as much
about
right and then they compile
right and then they compile
both into one extension
both into one extension
here is fine.
This doesn't seem Hang
on. I don't think that this
on. I don't think that this
works. You can't compile CUDA, right?
works. You can't compile CUDA, right?
Um, if you don't have CUDA dev
Okay. Yeah. So, their example is not
correct. You just check NVCC.
And do they compile with
03? Yeah, they
do. I mean, they have a nice debugging
do. I mean, they have a nice debugging
setup here. I think I can take all of
setup here. I think I can take all of
this, all their debug stuff.
We can go like up hereish.
In fact, I can honestly
In fact, I can honestly
like some of this can be extended even
like some of this can be extended even
to more of the package,
right? I can do
like. Yeah, like up to here maybe.
Okay. So now we just need this one
Okay. So now we just need this one
line. If CUDA home is
line. If CUDA home is
none, you need to check that.
Okay.
So, we actually get
So, we actually get
this. And how do they do
NVCC? Uh, they provide the args either
NVCC? Uh, they provide the args either
way.
Do you recommend you're doing a PhD in
Do you recommend you're doing a PhD in
reinforcement learning? What are your
reinforcement learning? What are your
thoughts on academia? I'm one of the
thoughts on academia? I'm one of the
most negative people on academia at the
most negative people on academia at the
moment, especially in RL. Um, but I
moment, especially in RL. Um, but I
think generally I only recommend doing a
think generally I only recommend doing a
PhD to people who know they want to do a
PhD to people who know they want to do a
PhD.
PhD.
Um, for people who are on the fence
Um, for people who are on the fence
about it, I'd strongly suggest like
about it, I'd strongly suggest like
considering all the other things that
considering all the other things that
you can do. Um, because it's it's five
you can do. Um, because it's it's five
years of your life and like the plus
years of your life and like the plus
side is if you are in a good lab at a
side is if you are in a good lab at a
good university, you don't have funding
good university, you don't have funding
to worry about and your like
to worry about and your like
adviser is supportive, then you get to
adviser is supportive, then you get to
work on like pretty much a very wide
work on like pretty much a very wide
range of stuff for five years. Uh the
range of stuff for five years. Uh the
downside is you're doing so with next to
downside is you're doing so with next to
no resources
no resources
uh and almost like no funding to
uh and almost like no funding to
yourself. Like sometimes you're better
yourself. Like sometimes you're better
off just doing it yourself as a company
off just doing it yourself as a company
um or joining a like a similar startup
um or joining a like a similar startup
or whatever. Uh and the really downside
or whatever. Uh and the really downside
is the way that you have to write papers
is the way that you have to write papers
and how everything in RL like how all
and how everything in RL like how all
work is formulated around the academic
work is formulated around the academic
way of doing things. I I'm not being
way of doing things. I I'm not being
particularly articulate right now. Let's
particularly articulate right now. Let's
just put it this way, right? I did
just put it this way, right? I did
neural MMO for five years. I had some
neural MMO for five years. I had some
like reasonable results, right? I put
like reasonable results, right? I put
out some cool work. Uh but then in the
out some cool work. Uh but then in the
year since I've graduated, I've
year since I've graduated, I've
completely transformed the field. Like
completely transformed the field. Like
if you look at the stuff that we're
if you look at the stuff that we're
doing now in Puffer Lib versus what was
doing now in Puffer Lib versus what was
possible a year ago, it is like
possible a year ago, it is like
completely unthinkable to be able to do
completely unthinkable to be able to do
this type of stuff. Um, and the way that
this type of stuff. Um, and the way that
I was able to do this was by breaking
I was able to do this was by breaking
free of the academic mold. Uh, I had to
free of the academic mold. Uh, I had to
do way more engineering than is
do way more engineering than is
typically accepted or appreciated in
typically accepted or appreciated in
academia. Um, I mean, I really had to go
academia. Um, I mean, I really had to go
deep on a ton of different things that
deep on a ton of different things that
like wouldn't really fit well into
like wouldn't really fit well into
papers or like the type of work that
papers or like the type of work that
academia is going to appreciate. But
academia is going to appreciate. But
now, you know, the results are here. So
now, you know, the results are here. So
I I guess the thing that I would say is
I I guess the thing that I would say is
like a lot of industry is allergic to
like a lot of industry is allergic to
doing real science but then a lot of
doing real science but then a lot of
academia is allergic to doing real
academia is allergic to doing real
engineering and neither of those things
engineering and neither of those things
are
Good. Let me see if I can come up with
Good. Let me see if I can come up with
something like more actionable for you.
something like more actionable for you.
You're asking me first thing in the
You're asking me first thing in the
morning and I'm not particularly
morning and I'm not particularly
articulate here.
articulate here.
Um, okay. Concretely,
right, the like concretely the thing
right, the like concretely the thing
that annoyed me, well, not even annoyed
that annoyed me, well, not even annoyed
me, the thing that I thought was
me, the thing that I thought was
restrictive in academia, right? There is
restrictive in academia, right? There is
a very high premium placed on
a very high premium placed on
theoretical and mathematical
theoretical and mathematical
um
um
improvements even when they're like
improvements even when they're like
completely impractical or useless.
completely impractical or useless.
Um, there's a very large premium placed
Um, there's a very large premium placed
on like cool sounding algorithms. Like
on like cool sounding algorithms. Like
if you have an algorithm that
if you have an algorithm that
intuitively sounds cool that it could
intuitively sounds cool that it could
work like that, like you're going to get
work like that, like you're going to get
something really good published. If you
something really good published. If you
come up with something that's really
come up with something that's really
simple and beats the hell out of that
simple and beats the hell out of that
like really complicated thing, you're
like really complicated thing, you're
not like the simplicity and the making
not like the simplicity and the making
things work and work very well is valued
things work and work very well is valued
less than like a lot of clever sounding
less than like a lot of clever sounding
things that don't actually work. Um
things that don't actually work. Um
there seems to be like an academic
there seems to be like an academic
myopia around
myopia around
that which is very difficult when you
that which is very difficult when you
are actually trying to make things work.
are actually trying to make things work.
uh the lack of focus on engineering me
uh the lack of focus on engineering me
meant that things would just run like a
meant that things would just run like a
thousandx slower than they should in
thousandx slower than they should in
most of RL which was the main limiting
most of RL which was the main limiting
factor. That's the main thing that I
factor. That's the main thing that I
fixed with Puffer Lib. Um it also
fixed with Puffer Lib. Um it also
prevented them ironically from even
prevented them ironically from even
doing good science because they just
doing good science because they just
couldn't run enough experiments to
couldn't run enough experiments to
support any of the claims.
support any of the claims.
Um, and the crazy thing is
Um, and the crazy thing is
that even with all of that, like even
that even with all of that, like even
when you show people like, hey, you can
when you show people like, hey, you can
run stuff 100 times faster, you can
run stuff 100 times faster, you can
solve stuff with simple like methods or
solve stuff with simple like methods or
whatever, like you get push back even
whatever, like you get push back even
when you do that. So, I don't know. I
when you do that. So, I don't know. I
found it like very limiting and
found it like very limiting and
like you would think that like academia
like you would think that like academia
would be a place where there's just all
would be a place where there's just all
sorts of different approaches and
sorts of different approaches and
perspectives and things, but it's really
perspectives and things, but it's really
not. like it's really
like the I I guess it's like the
like the I I guess it's like the
scientific method is it becomes the it
scientific method is it becomes the it
kind of became the goal and not the
kind of became the goal and not the
means if you will like in my view the
means if you will like in my view the
way to do effective research right it's
way to do effective research right it's
you do math you do experiment heavy work
you do math you do experiment heavy work
when it's valuable you do engineering
when it's valuable you do engineering
when it's valuable as is needed to solve
when it's valuable as is needed to solve
your problem but that's not really what
your problem but that's not really what
it is they're kind of stuck into a very
it is they're kind of stuck into a very
specific set of methods. Uh, and as soon
specific set of methods. Uh, and as soon
as they get bottlenecked by engineering,
as they get bottlenecked by engineering,
they're screwed, which is what happened
they're screwed, which is what happened
in
RL there. That's a bit more articulate.
It took a second because you got me
It took a second because you got me
within the first half hour of stream in
within the first half hour of stream in
the morning, but there you go.
You're a huge fan of your channel. Thank
You're a huge fan of your channel. Thank
you. Now, if you are I don't know your
you. Now, if you are I don't know your
background in RL. Um maybe I should. I
background in RL. Um maybe I should. I
don't know may if you're one of the end
don't know may if you're one of the end
contributors or not yet. It's people
contributors or not yet. It's people
have a million different names on the
have a million different names on the
Discord and on the YouTube and whatever.
Discord and on the YouTube and whatever.
Um but if you're looking to do some
Um but if you're looking to do some
really cool RL stuff, you can kind of do
really cool RL stuff, you can kind of do
things right now in Puffer. And uh it's
things right now in Puffer. And uh it's
a pretty special place now because like
a pretty special place now because like
you can make things so fast that you can
you can make things so fast that you can
actually do like Google level
actually do like Google level
experiments on one GPU now. Uh and it
experiments on one GPU now. Uh and it
doesn't take like a huge amount of code
doesn't take like a huge amount of code
or infrastructure setup. We have things
or infrastructure setup. We have things
pretty darn simple. We've got like brand
pretty darn simple. We've got like brand
new people with zero RL experience who
new people with zero RL experience who
are now in my view as effective if not
are now in my view as effective if not
more effective than a lot of RL PhDs
more effective than a lot of RL PhDs
just from having contributed and built
just from having contributed and built
stuff over the last few months.
stuff over the last few months.
And uh it's a good mix of approaches as
And uh it's a good mix of approaches as
well, right? Like we have science side
well, right? Like we have science side
stuff, we have algorithm side stuff, but
stuff, we have algorithm side stuff, but
we also have hard engineering, right?
we also have hard engineering, right?
And we kind of use what is useful at any
And we kind of use what is useful at any
one time and bring them all together to
one time and bring them all together to
make RL actually work.
just finished bachelors and want to use
just finished bachelors and want to use
the summer to get better at RL. Have
the summer to get better at RL. Have
some basic knowledge of the theory. What
some basic knowledge of the theory. What
sort of projects would you recommend?
sort of projects would you recommend?
Oh, then you're in a perfect
Oh, then you're in a perfect
spot. Um, the thing that I always
spot. Um, the thing that I always
recommend to newcomers and I have like a
recommend to newcomers and I have like a
guide on my website for this, but just
guide on my website for this, but just
build a new environment that would be
build a new environment that would be
interesting for RL, something that's
interesting for RL, something that's
only going to be, you know, a few
only going to be, you know, a few
hundred lines of code max, not a huge
hundred lines of code max, not a huge
project. uh and then get RL to work on
project. uh and then get RL to work on
it. You get the whole process of
it. You get the whole process of
building an environment, right? Running
building an environment, right? Running
RL. Uh you actually have to get to see
RL. Uh you actually have to get to see
the types of things that caused your M
the types of things that caused your M
to break and not work. You get to see
to break and not work. You get to see
the common classes of errors. Uh and you
the common classes of errors. Uh and you
get like an end
get like an end
toend RL working on a new environment
toend RL working on a new environment
very very fast out of it. So that's what
very very fast out of it. So that's what
I've had like most of these environments
I've had like most of these environments
are from people doing that.
are from people doing that.
like I built neural MMO, moa, and snake.
like I built neural MMO, moa, and snake.
The rest of these are from contributors,
The rest of these are from contributors,
and they're actually like six more now
and they're actually like six more now
at this point that aren't yet
listed. So that's generally what I
listed. So that's generally what I
recommend to people who are new is like
recommend to people who are new is like
instead of just like studying, studying
instead of just like studying, studying
and studying and studying like go do
and studying and studying like go do
some RL, right?
And generally it's like it's fine to
And generally it's like it's fine to
just like pick any existing game to
just like pick any existing game to
implement and like make it fast and make
implement and like make it fast and make
work with RL. Um I think you're a little
work with RL. Um I think you're a little
better off if you want to like think
better off if you want to like think
about what would be an interesting
about what would be an interesting
problem that would add something like
problem that would add something like
that's different from these like what
that's different from these like what
would be like an interesting thing to
would be like an interesting thing to
look at with RL. Like for instance I got
look at with RL. Like for instance I got
somebody doing voids which is this big
somebody doing voids which is this big
multi- aent swarm type sim right now.
multi- aent swarm type sim right now.
We've got um we've got a driving
We've got um we've got a driving
simulator uh in construction. We've got
simulator uh in construction. We've got
somebody that's done like a like a
somebody that's done like a like a
physics shooter. Those are bigger
physics shooter. Those are bigger
projects. But like I guess the the
projects. But like I guess the the
example of this was like when I made
example of this was like when I made
Snake, right? This is kind of like a
Snake, right? This is kind of like a
different and very interesting
different and very interesting
multi-agent environment and this is only
multi-agent environment and this is only
a couple hundred lines of code. Like if
a couple hundred lines of code. Like if
you find things that would be
you find things that would be
interesting to look at with RL or like
interesting to look at with RL or like
are an interesting challenge in a
are an interesting challenge in a
specific
specific
way that's usually great because then
way that's usually great because then
you get the experience of
you get the experience of
also coming up with like a useful
also coming up with like a useful
problem like that implementing it and
problem like that implementing it and
getting RL to work on it.
also just generally doing stuff in
also just generally doing stuff in
puffer lilib you will become a
puffer lilib you will become a
dramatically better engineer um than
dramatically better engineer um than
most graduating PhD students very very
quickly like most PhD students get
quickly like most PhD students get
through their whole PhDs touching like
through their whole PhDs touching like
nothing I'm a
nothing I'm a
python. It's pretty gross.
This seems to
work. So, I think I just clean this up
work. So, I think I just clean this up
now. And I think we actually have
now. And I think we actually have
um pretty reasonable package
build. I think we spend a good chunk of
build. I think we spend a good chunk of
today on this. And uh this actually is
today on this. And uh this actually is
already in a decent enough
spot. Yeah.
I guess we have to fix uh impulse wars
I guess we have to fix uh impulse wars
as well. But I can chat with Captain. I
as well. But I can chat with Captain. I
don't know if Captain if you're still
don't know if Captain if you're still
here, but um I would like to figure out
here, but um I would like to figure out
the build stuff uh at some point in the
the build stuff uh at some point in the
next few days, if not today.
Make sure my experiment is still
Make sure my experiment is still
running. It is
good. Kind of crazy that this thing is
good. Kind of crazy that this thing is
actually just running like 200
actually just running like 200
experiments in an hour and a half.
Yeah, I think this will be the thing
Yeah, I think this will be the thing
today. Let's get these sweeps working
today. Let's get these sweeps working
and get our packaging nice and clean.
It's pretty messy the way we do our
It's pretty messy the way we do our
install here.
I mean, what's the alternative though?
I mean, what's the alternative though?
It's like just it's this or C make,
right? Like pick your poison.
you add him in the
discord. I am going to go for uh for
discord. I am going to go for uh for
breakfast in a few around 10.
I actually wouldn't mind so much if we
I actually wouldn't mind so much if we
had to
do I guess if we could compile
We could compile ray and like box 2D
We could compile ray and like box 2D
with
with
cmake and then link
cmake and then link
it GCC.
Yeah, I would think here
like we'd have to dynamically link,
right? Okay, I'm going to wait for what
right? Okay, I'm going to wait for what
captain says on that.
captain says on that.
Um, I
think that the assumption in the
think that the assumption in the
meantime is that we aren't going to do
meantime is that we aren't going to do
this.
I think my intuition of not wanting to
I think my intuition of not wanting to
have this in the build process is
have this in the build process is
correct though is like just more garbage
correct though is like just more garbage
for people to deal with, right? Like
for people to deal with, right? Like
when I say, "Hey, come jam some with
when I say, "Hey, come jam some with
us." And people are like, "Eh, that
us." And people are like, "Eh, that
sounds hard." And I say, "Well, do you
sounds hard." And I say, "Well, do you
know how to write if statements and for
know how to write if statements and for
loops?" It's like, "Yeah, okay. That's
loops?" It's like, "Yeah, okay. That's
all we do. This is the code. It's really
all we do. This is the code. It's really
simple. That's fine. But then it's like,
simple. That's fine. But then it's like,
oh, also here's all of
oh, also here's all of
cmake. It's annoying. It's way easier if
cmake. It's annoying. It's way easier if
it's one GCC command, which is what we
it's one GCC command, which is what we
have right
now.
Yeah, I think at the most we use it to
Yeah, I think at the most we use it to
compile dependencies.
Hey, Captain. How close to release are
Hey, Captain. How close to release are
you? A week? Two? I don't know. It's as
you? A week? Two? I don't know. It's as
fast as I can do it, man. I'm trying to
fast as I can do it, man. I'm trying to
finish. I'm trying to cap everything up
finish. I'm trying to cap everything up
together, though. Like, the goal is
together, though. Like, the goal is
clean packaging, good baselines on all
clean packaging, good baselines on all
the M's, including yours. Um, docks,
the M's, including yours. Um, docks,
sweeps, all that.
genuine question. How did you learn to
genuine question. How did you learn to
do good engineering coming from an
do good engineering coming from an
academic background? I know people said
academic background? I know people said
the only way to get good is to do it,
the only way to get good is to do it,
but getting from 10k lines of code from
but getting from 10k lines of code from
a pet project to contributing to a
a pet project to contributing to a
library is
library is
definitely intimidating for me. Okay, so
definitely intimidating for me. Okay, so
here's a few things. One, I really I
here's a few things. One, I really I
just gave a about it. I really
just gave a about it. I really
cared like trying to make my code better
cared like trying to make my code better
and better. Um, most people just didn't.
Um, second of all, I needed to get good
Um, second of all, I needed to get good
at it. In even just in the last year,
at it. In even just in the last year,
I've gotten to be like two or three
I've gotten to be like two or three
better at engineering than I was in the
better at engineering than I was in the
previous 10. Um, mind you, like all the
previous 10. Um, mind you, like all the
stuff I did before set me up for it. So,
stuff I did before set me up for it. So,
like when I went from Python to C, it
like when I went from Python to C, it
literally took me 3 weeks before I was
literally took me 3 weeks before I was
perfectly happy programming everything
perfectly happy programming everything
in C.
in C.
Um, but it, yeah, that's kind of what
Um, but it, yeah, that's kind of what
that was about. Um, but here's the
that was about. Um, but here's the
thing. 10k lines of code. Like the core
thing. 10k lines of code. Like the core
of puffer is less than 10k lines of
of puffer is less than 10k lines of
code. The core of puffer is like 5k
code. The core of puffer is like 5k
lines of code and it solves things in RL
lines of code and it solves things in RL
that like whole gigantic libraries just
that like whole gigantic libraries just
don't. Um and then we have like 30,000
don't. Um and then we have like 30,000
lines of contributed environments. So
lines of contributed environments. So
like you don't need a ton of code to
like you don't need a ton of code to
have a ridiculously impactful project if
have a ridiculously impactful project if
you build stuff reasonably. Um, now if
you build stuff reasonably. Um, now if
you build stuff poorly, like if somebody
you build stuff poorly, like if somebody
if Fang were to try to make Puffer Lib,
if Fang were to try to make Puffer Lib,
like if people in Fang were to like make
like if people in Fang were to like make
an RL library like this, it wouldn't be
an RL library like this, it wouldn't be
as fast and it would be a bajillion
as fast and it would be a bajillion
lines of code, right? Like I've actually
lines of code, right? Like I've actually
put a ton a ton of effort into keeping
put a ton a ton of effort into keeping
it simple. Um, but it's a very good way
it simple. Um, but it's a very good way
to build stuff in general. So I guess
to build stuff in general. So I guess
I've sort of specialized into getting
I've sort of specialized into getting
pretty hard things done with like
pretty hard things done with like
medium-sized projects. Uh, and also like
medium-sized projects. Uh, and also like
contributing to a library, just start
contributing to a library, just start
like literally just start. Like if
like literally just start. Like if
you're interested in RL, come build an M
you're interested in RL, come build an M
and like go through the process of
and like go through the process of
building an environment, integrating
building an environment, integrating
with Puffer and and seeing stuff. I got
with Puffer and and seeing stuff. I got
to run for breakfast, so I will be back
to run for breakfast, so I will be back
right after. But uh
