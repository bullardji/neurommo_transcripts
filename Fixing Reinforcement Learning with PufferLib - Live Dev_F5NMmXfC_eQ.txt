Kind: captions
Language: en
okay we're back
okay we're back
here see if no's
around I'm
tired just the very basic uh limited
tired just the very basic uh limited
training I've been doing it takes a lot
training I've been doing it takes a lot
out of you getting back into stuff
I don't know we'll have to optimize that
I don't know we'll have to optimize that
uh routine to be
faster meantime what do we have
here we
have solv Connect 4
have solv Connect 4
[Music]
and currently about 6 minutes can
and currently about 6 minutes can
definitely be faster than
that this is very slow for some
that this is very slow for some
reason what's the
cost oh yeah the cost is high I'm fine
cost oh yeah the cost is high I'm fine
well we'll see how that goes we'll just
well we'll see how that goes we'll just
leave this
running is that a new message Noah hold
running is that a new message Noah hold
on 12 13 yeah there you are perfect uh
on 12 13 yeah there you are perfect uh
let's review your code hyper prams are
let's review your code hyper prams are
going we got some M to fix that are like
going we got some M to fix that are like
this is freezing up for some reason I
this is freezing up for some reason I
don't quite know why we'll handle all
don't quite know why we'll handle all
that
that
though link your
code I guess actually is there PR
up probably just have a PR don't you
uh guess
uh guess
not go ahead and Link me
uh whatever you
uh whatever you
got I got I think 45 minutes to go
got I got I think 45 minutes to go
through this now maybe
through this now maybe
longer let me see if
longer let me see if
uh I just checked the NYU slack got a
uh I just checked the NYU slack got a
little meeting
there some coffee or something my
gosh literally I just did a 3 kilometers
gosh literally I just did a 3 kilometers
and a very easy dumbbell workout but
and a very easy dumbbell workout but
takes a
takes a
lot takes a lot out of you
just created a
PR Implement
TCG you want me to do a proper code
TCG you want me to do a proper code
review right
here okay I think uh if we put the
here okay I think uh if we put the
actual
actual
names of stuff it you can't patent game
names of stuff it you can't patent game
mechanics you can I mean you can't
mechanics you can I mean you can't
trademark game mechanics but you can
trademark game mechanics but you can
Trad Mark
Trad Mark
um
um
names so if you've imported the actual
names so if you've imported the actual
names this is going to get us sued so
names this is going to get us sued so
let's not do that
um I'm going to have to do something
um I'm going to have to do something
with
with
that let me see
so you'll know to do that um and let me
so you'll know to do that um and let me
look at
look at
this okay we got the C
this okay we got the C
file load from
Jon
Jon
uh makes it
uh makes it
failure Json array for
failure Json array for
each wait
what is is this a method in a
method
method
no what the heck is
this yeah I downloaded it yeah you're
this yeah I downloaded it yeah you're
going to have to generate some stuff for
going to have to generate some stuff for
this
this
um this cannot be in the pr like this
um this cannot be in the pr like this
cannot be in the merge
cannot be in the merge
ever um
I actually don't know what this is I
I actually don't know what this is I
don't actually even know how this is
don't actually even know how this is
valid to see am I just missing
valid to see am I just missing
something is this a
something is this a
struct no what is
struct no what is
this is a generate well what is this
oh this is okay this is imported from
oh this is okay this is imported from
cjson
cjson
okay but then wait this
is but this has an Open Bracket
the is this some like Bizarro Macro for
the is this some like Bizarro Macro for
each Loop
let me see this
let me see this
file is this a library that you
file is this a library that you
found or what is
found or what is
this we'll look at the H file where's
this we'll look at the H file where's
the this is fine to do this in Python
yeah you didn't commit the uh the C date
yeah you didn't commit the uh the C date
you didn't commit the
you didn't commit the
Json if this
is CJ
is CJ
[Music]
song is it
song is it
this oh okay because this is a whole ass
Library oh but it's a single file
okay so this is some gross
okay so this is some gross
macro let's
macro let's
see I really don't like libraries that
see I really don't like libraries that
do this but this is
do this but this is
fine added in build ocean
okay I'm not going to I'm not going to
okay I'm not going to I'm not going to
be too beat up over you using a weird
be too beat up over you using a weird
Json load library at least it's one file
Json load library at least it's one file
I really don't like the macros like
I really don't like the macros like
this but
this but
whatever
whatever
um it's short enough you get
um it's short enough you get
this you
get attack
get attack
okay and
e
we
we
do load
do load
the now to fix this
the now to fix this
path what you do for this is um you use
path what you do for this is um you use
the local path from
the local path from
resources uh you just use the resource
resources uh you just use the resource
path and then in the uh for the python
path and then in the uh for the python
version you have to set the path in the
version you have to set the path in the
scon you can look at like any of the
scon you can look at like any of the
other environments for how to do this so
other environments for how to do this so
here for
mhm could be LS but doesn't really
mhm could be LS but doesn't really
matter and what do we
have one
have one
include this with
include this with
n
figure the Python's fine so let's let's
figure the Python's fine so let's let's
look at the
seat probably also
seat probably also
fixed from
fixed from
Brew yeah that's not going to
work fix
work fix
the
the
paths you can do ab
now let's look at this
now let's look at this
div so this is the big
one okay this is
fine upkeep
fine upkeep
and you
added oh this is just an enum that's
added oh this is just an enum that's
fine I don't usually use enums I usually
fine I don't usually use enums I usually
just pound toine stuff but this is
fine cuz then it's card type. typ land
fine cuz then it's card type. typ land
isn't it if I do like
type oh no it's not hold hold on am I
stupid I guess I'm
stupid I guess I'm
stupid okay I learned
stupid okay I learned
something C enom are nicer than python
something C enom are nicer than python
enums this is totally
good yeah this is actually better so
good yeah this is actually better so
I've been stupid about these I assume
I've been stupid about these I assume
cuz in Python you got to do like Zone
cuz in Python you got to do like Zone
typee do you know whatever it's
typee do you know whatever it's
obnoxious yeah this is really solid
obnoxious yeah this is really solid
okay
um
effect to
description you get a bit of additional
description you get a bit of additional
type
safety me do
safety me do
you what
you what
if you pass an enem to a function what's
if you pass an enem to a function what's
the
the
type I guess it's Zone
type I guess it's Zone
type I see what you mean
type I see what you mean
yeah I guess that makes sense yeah these
yeah I guess that makes sense yeah these
are good I was wrong about these there I
are good I was wrong about these there I
the thing is I assume because in Python
the thing is I assume because in Python
it's like you have to do card type. type
it's like you have to do card type. type
land which is redundant and stupid so
land which is redundant and stupid so
yeah I I wrong I was wrong about these
yeah I I wrong I was wrong about these
yeah from here on if you don't need the
yeah from here on if you don't need the
integer like for the actions I think
integer like for the actions I think
still have to to be pound defined right
still have to to be pound defined right
or whatever because you need the integer
or whatever because you need the integer
but uh yeah these are
but uh yeah these are
good enums are weak in C I mean that's
good enums are weak in C I mean that's
what I want I want them to just be
what I want I want them to just be
something simple and
something simple and
weak activation of
weak activation of
effects okay we can look at that I got a
effects okay we can look at that I got a
good half hour to fiddle with
good half hour to fiddle with
this
this
so this is going to have a trigger a
so this is going to have a trigger a
condition activate
condition activate
Yep this is about what I expected
Yep this is about what I expected
um we don't like to do this all over
um we don't like to do this all over
this place but this is exactly what has
this place but this is exactly what has
to be done
to be done
here and then we get struck stack
item I also did not know that c has
item I also did not know that c has
Union types what is this
um I literally didn't know that I don't
um I literally didn't know that I don't
know if I like Union types but let me
know if I like Union types but let me
see what this
see what this
is so this can either
be a phase
function or it can be an
effect wait what's this thing
you've managed to do some stuff that I
you've managed to do some stuff that I
actually don't even
know name
I'm seeing if I like if this is Sayan or
I'm seeing if I like if this is Sayan or
if this is like
overdone Union
function only one member can be valid
which is currently
valid
valid
case switch item type
and then you have if item phase fun this
and then you have if item phase fun this
is
redundant okay I'm going to withhold
redundant okay I'm going to withhold
judgment on this until I think about it
judgment on this until I think about it
for a bit
for a bit
um the way that I would have done this
um the way that I would have done this
not knowing what this is and being very
not knowing what this is and being very
very simple is I would just put both of
very simple is I would just put both of
these things into the um I would just
these things into the um I would just
put both of these things into the stack
put both of these things into the stack
item and then just check them against
item and then just check them against
null is literally all I would
do because here they're doing the null
do because here they're doing the null
they're basically they're doing the null
they're basically they're doing the null
check anyways for
safety so they're doing both
safety so they're doing both
checks I mean I think this is redundant
checks I mean I think this is redundant
and you can just drop this but then
and you can just drop this but then
you're basically assuming that
you're basically assuming that
because this type is defined that it's
because this type is defined that it's
not
not
null which I think is maybe always true
null which I think is maybe always true
I don't
I don't
know I generally stay away from extra
know I generally stay away from extra
language features unless they really do
language features unless they really do
something I can't really tell if this is
something I can't really tell if this is
really doing anything for
you I do everything in the stupidest way
you I do everything in the stupidest way
possible possible and apply a very very
possible possible and apply a very very
high threshold before I uh do something
high threshold before I uh do something
more complicated you know it's got to
more complicated you know it's got to
really buy you
something never really seen a great need
something never really seen a great need
for the union
types welcome YouTube
types welcome YouTube
folks just you can see what we're
folks just you can see what we're
currently
currently
reviewing this is my initial prototype
reviewing this is my initial prototype
of a trading card game that I made uh
of a trading card game that I made uh
let's see you can do like you can play a
let's see you can do like you can play a
land right you can play this and then
land right you can play this and then
let's see let's play another land let's
let's see let's play another land let's
play this and now we will we will swing
play this and now we will we will swing
with this and this right and we attack
with this and this right and we attack
and all that so basic basic TCG
and all that so basic basic TCG
prototype Noah has gone ahead and uh
prototype Noah has gone ahead and uh
made it into an actual M and expanded on
made it into an actual M and expanded on
a lot of stuff so we're reviewing the
a lot of stuff so we're reviewing the
code for this
okay this is something I kind of that
okay this is something I kind of that
kind of irritates me though I'll have to
kind of irritates me though I'll have to
see how you use it having
like a stack item that
like a stack item that
has having a stack item struck that has
has having a stack item struck that has
let's see this has two things in it one
let's see this has two things in it one
of which is a t a specific enum up here
of which is a t a specific enum up here
and then the stack itself only has two
and then the stack itself only has two
things these enums are like too small
things these enums are like too small
like I mean this these uh these things
like I mean this these uh these things
are like too small i' almost just put
are like too small i' almost just put
the stack well you can't just put the
the stack well you can't just put the
stack thing in there because it's an
stack thing in there because it's an
array maybe this is fine yeah I'm being
array maybe this is fine yeah I'm being
too harsh maybe this is fine
stack.
dat
eh kind of
irritating
irritating
index yeah I guess you kind of want this
index yeah I guess you kind of want this
index I mean the alternative would just
index I mean the alternative would just
be to do back in the class but you
be to do back in the class but you
probably have a bunch of these so okay
probably have a bunch of these so okay
we'll leave this alone for now you push
we'll leave this alone for now you push
to the
to the
stack you change the stack item Yep this
stack you change the stack item Yep this
is
is
fine got card you added a
fine got card you added a
name a
type I wonder if the name is going to
type I wonder if the name is going to
slow stuff up
slow stuff up
down there's a bunch of extra memory to
down there's a bunch of extra memory to
copy around we'll see about this copying
copy around we'll see about this copying
all these strings we might just want to
all these strings we might just want to
do this at eval time we'll
see all right what the heck is
this
Union inline struct
struck with one
element okay this is
element okay this is
definitely before I wasn't sure but this
definitely before I wasn't sure but this
is definitely like overdoing it
right dude yeah this is totally
right dude yeah this is totally
overdoing it
overdoing it
I mean this is just so much extra
I mean this is just so much extra
complicated Machinery that you don't
complicated Machinery that you don't
need we'll see if Captain agrees with me
need we'll see if Captain agrees with me
yo Captain what do you think the way
yo Captain what do you think the way
that I would do this is I would just
that I would do this is I would just
take all of these fields here I would
take all of these fields here I would
stick them as part of the card struct
stick them as part of the card struct
and you know the type here you're just
and you know the type here you're just
going to check this against creature or
going to check this against creature or
spell and if it is you know if it's a
spell and if it is you know if it's a
spell you don't access all this other
spell you don't access all this other
stuff you don't even have to to check it
stuff you don't even have to to check it
against null though is the thing because
against null though is the thing because
you have the type right so you're
you have the type right so you're
literally just going to te check against
literally just going to te check against
creature or spell right and if it's
creature or spell right and if it's
spell you only access effect and if it's
spell you only access effect and if it's
creature you access the other
creature you access the other
stuff does this give you any other type
stuff does this give you any other type
I don't does this even give you anything
I don't does this even give you anything
if you do this is there like extra type
if you do this is there like extra type
safety or extra null checks or like
safety or extra null checks or like
something that like really matters that
something that like really matters that
you can do
here cuz this to me looks this looks
here cuz this to me looks this looks
overbuilt to
me I'm being nitpicky by the way because
me I'm being nitpicky by the way because
your code is actually very very good
your code is actually very very good
like from the first M that you submitted
like from the first M that you submitted
this is like a world
this is like a world
difference forgot about unions don't
difference forgot about unions don't
think you need them it's not really
think you need them it's not really
adding a lot of
adding a lot of
complexity well yeah I'm being somewhat
complexity well yeah I'm being somewhat
nitpicky for
nitpicky for
sure you save me dude you don't save if
sure you save me dude you don't save if
you want to save memory like look at
you want to save memory like look at
this you're using you're loing the name
this you're using you're loing the name
in every single time even when you're
in every single time even when you're
doing uh training here right so it's
doing uh training here right so it's
like this is clearly not designed for
like this is clearly not designed for
that in mind this isn't even struct
that in mind this isn't even struct
packed properly right look there's a
packed properly right look there's a
bull here in between an INT and a struct
bull here in between an INT and a struct
like this isn't even packed correctly so
like this isn't even packed correctly so
like we're not really caring about
like we're not really caring about
that I think it guarantees only one
that I think it guarantees only one
member of the Union has a
value yeah but what does that get
value yeah but what does that get
you so you have to check check you have
you so you have to check check you have
to check the type of this thing which is
to check the type of this thing which is
now redundant because you already have
now redundant because you already have
the type up here right I think so you
the type up here right I think so you
you have to check the type of this thing
you have to check the type of this thing
against creature or against
against creature or against
spell versus just checking this type I
spell versus just checking this type I
mean technically this is a little bit
mean technically this is a little bit
safer but I don't think that the safety
safer but I don't think that the safety
is worth
is worth
the I mean this this is some complexity
the I mean this this is some complexity
being
added I don't really think that this is
added I don't really think that this is
worth worth it I would rather just have
worth worth it I would rather just have
everything be flat and then you don't
everything be flat and then you don't
have to access do data you just access
have to access do data you just access
directly you save the layer of
directly you save the layer of
indirection with this yeah I don't
indirection with this yeah I don't
know I would I would definitely do it
know I would I would definitely do it
the other way it's not terrible um and I
the other way it's not terrible um and I
think even you know good programmers
think even you know good programmers
would disagree with me here potentially
would disagree with me here potentially
but I don't like to use extra language
but I don't like to use extra language
features when uh there's a simpler thing
features when uh there's a simpler thing
that does the job just as well
like I say I'm being nitpicky with you
like I say I'm being nitpicky with you
because your codee's pretty damn
good um card
good um card
array card length Max very
array card length Max very
good um allocate
creature allocate
creature Okay so
creature Okay so
here I potentially take
here I potentially take
issue
because this is an allocate an this is
because this is an allocate an this is
an allocation and an initialization in
an allocation and an initialization in
one so you're not supposed to be I'm
one so you're not supposed to be I'm
going to have to see how you're using
going to have to see how you're using
this but you should not be allocating
this but you should not be allocating
memory um at
memory um at
runtime and by that I mean like after
runtime and by that I mean like after
you initialize the environment you
you initialize the environment you
should not be allocating more memory
should not be allocating more memory
while you're running the
while you're running the
environment so I'm a little bit
environment so I'm a little bit
suspicious when I see something that's
suspicious when I see something that's
an allocate and an init cuz you can call
an allocate and an init cuz you can call
this init Stu you can call this a nit
this init Stu you can call this a nit
once you have the
once you have the
memory um so we'll see how you're using
memory um so we'll see how you're using
this okay same thing with all of
this okay same thing with all of
these if you're not abusing these then
these if you're not abusing these then
it's fine we'll look at
it's fine we'll look at
it lands graveyard opponent lands
it lands graveyard opponent lands
opponent
opponent
graveyard yep very good
graveyard yep very good
this even could potentially be a struck
this even could potentially be a struck
I don't know opponent
hand this could be made a struct it
hand this could be made a struct it
doesn't have to be I think this is good
doesn't have to be I think this is good
flat only use when initializing the end
flat only use when initializing the end
then you're a okay I'm a little confused
then you're a okay I'm a little confused
how that's possible though because you
how that's possible though because you
uh you're loading all the data in in
uh you're loading all the data in in
these functions I guess you don't have
these functions I guess you don't have
like deck randomization or like deck
like deck randomization or like deck
modification capabil abilities but like
modification capabil abilities but like
let's say when you reset the environment
let's say when you reset the environment
that you change the decks right then
that you change the decks right then
what you would want is you'd want this
what you would want is you'd want this
to be you'd want just to do the
to be you'd want just to do the
allocations and then you'd want an
allocations and then you'd want an
initialized function that does this on
initialized function that does this on
top of the allocation
right
right
priority yep okay add charge two
wait okay so this is a little silly um
wait okay so this is a little silly um
you this m parameter is not
you this m parameter is not
used not
used not
used and it's not used here either
used and it's not used here either
because it's not used in either of these
because it's not used in either of these
so yeah so we'll see on the other ones
so yeah so we'll see on the other ones
this one here is silly because you don't
this one here is silly because you don't
actually use the end parameter anywhere
actually use the end parameter anywhere
so what I would do is I would make I
so what I would do is I would make I
would put these functions up with card
would put these functions up with card
array and this can be like this is like
array and this can be like this is like
an add do array you know add card that's
an add do array you know add card that's
fine I'd put the card array first
fine I'd put the card array first
because the card array is the uh the key
because the card array is the uh the key
object here and then it's yeah and then
object here and then it's yeah and then
I'd put the card after also this is a
I'd put the card after also this is a
copy you know this is a copy right is
copy you know this is a copy right is
this supposed to be a copy you're
this supposed to be a copy you're
copying the card
and actually does this card have
and actually does this card have
pointers in it let me
see okay I don't know if this card has
see okay I don't know if this card has
pointers in it but if this card has
pointers in it but if this card has
pointers in it then you're
pointers in it then you're
uh you know you're going to do some
uh you know you're going to do some
screwy stuff and have pointers to
screwy stuff and have pointers to
multiple they can be adjusted for
multiple they can be adjusted for
multiple
multiple
places so you have mix these things up
places so you have mix these things up
I'd
say shouldn't need
prototypes if your code's ordered
prototypes if your code's ordered
reasonably this is fine this is
reasonably this is fine this is
fine oh I'm supposed to be adding
fine oh I'm supposed to be adding
comments for you so it's easy
reference
reference
first
second here
compiling well we do cap our build we do
compiling well we do cap our build we do
like
like
wall I don't know if the wall misses
wall I don't know if the wall misses
anything yeah probably extran
anything yeah probably extran
Panic panic's kind of well panic
Panic panic's kind of well panic
but
but
empty P some
empty P some
debug obviously these don't go in the
debug obviously these don't go in the
main
build
build
build
and my
and my
handful
H wait is there an opponent handful
function I'm confused
oh I see
than
yeah the are yeah I think these are
yeah the are yeah I think these are
redundant uh draw
card
card
generally probably
work it keep
pass the
card it's 15 minute warning on meeting
card it's 15 minute warning on meeting
got to get going here or I'll finish
got to get going here or I'll finish
this
this
after randomized deck yep tapable Mana
after randomized deck yep tapable Mana
okay and then tap L for
okay and then tap L for
[Music]
[Music]
Mana it's perfectly fine
Mana it's perfectly fine
code turn Aries the turn AR is
code turn Aries the turn AR is
everywhere I've got to go right so we'll
everywhere I've got to go right so we'll
have to refactor stuff a little bit for
have to refactor stuff a little bit for
this um and play
card this good
untap oh I think I'm yelling at you over
untap oh I think I'm yelling at you over
my own prints cuz I think I left the
my own prints cuz I think I left the
prints
prints
in Prototype is
in Prototype is
fine
push it's always silly to me when we do
push it's always silly to me when we do
stuff like this because it's like I
stuff like this because it's like I
think this is a copy function anyways
think this is a copy function anyways
yeah this is a copy function so it's
yeah this is a copy function so it's
like we're making a struct and then
like we're making a struct and then
immediately copying it
immediately copying it
probably something better
here I don't know maybe there should be
here I don't know maybe there should be
a version of this that takes type and
a version of this that takes type and
phase function
instead depends if we actually ever push
instead depends if we actually ever push
stack like existing stack
items phase
items phase
upkeep yeah you added Summoning Sickness
upkeep yeah you added Summoning Sickness
very nice nice graveyard as well nice
very nice nice graveyard as well nice
graveyard B
graveyard B
moves no
op
op
yeah
stack ever existing
card switch on the card type it's
card switch on the card type it's
fine and then this return to user to
fine and then this return to user to
stack is pretty cool I like the way that
stack is pretty cool I like the way that
that
happens yeah all all these stack items
happens yeah all all these stack items
are kind of insane
but this is very clean logic otherwise I
but this is very clean logic otherwise I
like this you
attack yeah pretty much the only thing
attack yeah pretty much the only thing
the only thing bothering me is this like
the only thing bothering me is this like
crazy like stack item
everywhere turn to
everywhere turn to
user summoning sickness is
good we might want to have a a print
good we might want to have a a print
macro that uh you know we can enable
macro that uh you know we can enable
with the debug mode or not cuz it's a
with the debug mode or not cuz it's a
pretty complicated M and uh it's an m
pretty complicated M and uh it's an m
that like it's useful to see the order
that like it's useful to see the order
of the stack so probably instead of
of the stack so probably instead of
deleting all the prints we should just
deleting all the prints we should just
make like a you know a print debug macro
make like a you know a print debug macro
or whatever or like a you know print if
or whatever or like a you know print if
or whatever it just prints if a flag is
set it's
set it's
block and I think the compiler will just
block and I think the compiler will just
take that out if it sees a
constant okay that's
constant okay that's
good and
good and
yep
skip what happened
skip what happened
here this is the old attack
here this is the old attack
object I have to see the full file for
this reset attack and defending States
yeah I mean so this is like the the
yeah I mean so this is like the the
thing I was trying to avoid cards of
thing I was trying to avoid cards of
action. dat. creature. like this is a
action. dat. creature. like this is a
lot
[Music]
art what's this
pop okay so there is an Alf
pop okay so there is an Alf
here and
then I would
invert this
it's just kind of
deep biggest thing I see is just the
deep biggest thing I see is just the
massive amount of Stack item thing all
massive amount of Stack item thing all
over the code it's like it's this kind
over the code it's like it's this kind
of ridiculous the way that this is it's
of ridiculous the way that this is it's
just it's adding a lot of stuff then we
just it's adding a lot of stuff then we
have render which you added
have render which you added
you added some text to stuff
instant these get these do get different
instant these get these do get different
positions
positions
interesting sorcery render
interesting sorcery render
card hand one in hand render my
card hand one in hand render my
okay and then we get
this opponent board
this opponent board
y get land you did the land
y get land you did the land
Zone when it
lands it' be nice to be able to just
lands it' be nice to be able to just
have one function for each of these but
have one function for each of these but
probably there's um it's probably
probably there's um it's probably
literally easier the way you've done it
literally easier the way you've done it
to just duplicate the functions it's
to just duplicate the functions it's
probably
probably
easier and this is super
easy get the phase
I'd say very good
I'd say very good
overall I have a couple minor nitpicks I
overall I have a couple minor nitpicks I
mean I got a couple minutes so let me
mean I got a couple minutes so let me
just look at the full
file make sure this still looks good
file make sure this still looks good
when I scroll the full
file yeah these can go ones
oops input on how to implement
oops input on how to implement
activation of effects yeah let me do
activation of effects yeah let me do
that right now how imp so the user
that right now how imp so the user
should be able to select from
should be able to select from
hand field
hand field
graveyard and add a variable amount of
targets well it's not that they're able
targets well it's not that they're able
to select from hand field or graveyard
to select from hand field or graveyard
right it's that there's
right it's that there's
trigger and you can you have the option
trigger and you can you have the option
to activate effects for cards as they're
to activate effects for cards as they're
triggered right so in the actual
triggered right so in the actual
game the when a car well in the in the
game the when a car well in the in the
uh the computer version of the game
uh the computer version of the game
right the activated card will pop up and
right the activated card will pop up and
then you'll have the option to use it
then you'll have the option to use it
right and sometimes it gives you
right and sometimes it gives you
multiple targets or lets you target
multiple targets or lets you target
things so I think it's all
things so I think it's all
contextual right so you'll have to get
contextual right so you'll have to get
those into the observation but as for
those into the observation but as for
the actions for those it's still just
the actions for those it's still just
the number keys because it's like number
the number keys because it's like number
keys and enter or not right so you can
keys and enter or not right so you can
select you know the select the card and
select you know the select the card and
enter to activate it and then if it like
enter to activate it and then if it like
if the card targets your own field
if the card targets your own field
that'll be contextual and it'll just be
that'll be contextual and it'll just be
numpad if the if it targets the enemies
numpad if the if it targets the enemies
then that'll also be contextual and be
then that'll also be contextual and be
numpad and you'll probably what you
numpad and you'll probably what you
should do is you should just have the
should do is you should just have the
observations in the
observations in the
observations uh one of the observations
observations uh one of the observations
should just be the things that you're
should just be the things that you're
currently targeting right the things
currently targeting right the things
that you're num Keys map too I think
that you're num Keys map too I think
that's going to be the best way to do it
that's going to be the best way to do it
does that make sense or am I off on my
does that make sense or am I off on my
understanding here and got to go play
understanding here and got to go play
some more MTG
I'm got a meeting in five
think you're
think you're
right bit of a pain to think of the
right bit of a pain to think of the
recursive logic so it's I want to
recursive logic so it's I want to
separate two things for you right which
separate two things for you right which
is I want to separate
is I want to separate
the the logic of the game from the piece
the the logic of the game from the piece
that's troubling you with RL so the game
that's troubling you with RL so the game
implementing the game with the stack is
implementing the game with the stack is
one thing right um but the piece with
one thing right um but the piece with
the RL it's just whatever the stat gives
the RL it's just whatever the stat gives
you you know it's giving you targeting
you you know it's giving you targeting
options you think of it you have like 10
options you think of it you have like 10
slots or whatever to Target right that
slots or whatever to Target right that
are mapped to your num
are mapped to your num
keys and that's just what is targeted
keys and that's just what is targeted
you press the num keys and that's what
you press the num keys and that's what
you target you press enter to
you target you press enter to
confirm and that's so the action space
confirm and that's so the action space
is very very simple
is very very simple
now in the observations is that gets
now in the observations is that gets
more complicated right instead of just
more complicated right instead of just
being able to see the field we're
being able to see the field we're
probably going to have to add a
probably going to have to add a
contextual buffer so like whatever is in
contextual buffer so like whatever is in
the context at the moment right if you
the context at the moment right if you
have like four targeting options they
have like four targeting options they
should go 1 2 3 4 into that contextual
buffer that should be a
thing but other than that I think that
thing but other than that I think that
the the RL if we design it this way the
the the RL if we design it this way the
RL portion of this environment should be
RL portion of this environment should be
very easy like the RL like the RL side
very easy like the RL like the RL side
doesn't really add any constraints other
doesn't really add any constraints other
than keeping the code fast
right and I'll look through the stack
right and I'll look through the stack
logic I'm going to play this thing right
logic I'm going to play this thing right
add like fix like a couple small things
add like fix like a couple small things
um especially the names and then I will
um especially the names and then I will
we can PR this as it'll still stay a
we can PR this as it'll still stay a
work in progress environment but we can
work in progress environment but we can
PR it and I can play with it a little
PR it and I can play with it a little
bit and I can help you out all
bit and I can help you out all
right maybe we can even start getting
right maybe we can even start getting
some basic models on this that'd be
fun very solid PR very solid
PR only had a couple nit picks
okay I got to go run to my
okay I got to go run to my
meeting if you play Don't
surprise are you still using carbs for
surprise are you still using carbs for
hyper parameter search we are now using
hyper parameter search we are now using
neoc carbs I spent Saturday modifying
neoc carbs I spent Saturday modifying
carbs and uh yeah it's way better now
carbs and uh yeah it's way better now
we've got experiments running and we are
we've got experiments running and we are
kind of crushing it um Al we got like a
kind of crushing it um Al we got like a
several hundred experiments running now
several hundred experiments running now
this is Connect 4 being solved here
this is Connect 4 being solved here
uh burito front's getting very nice as
uh burito front's getting very nice as
well holy look at that okay uh Spencer
well holy look at that okay uh Spencer
you came just as I got a run I got a
you came just as I got a run I got a
meeting that I got to go to in two
meeting that I got to go to in two
minutes and I will be back streaming
minutes and I will be back streaming
after that so for folks on YouTube be
after that so for folks on YouTube be
back in I don't know a little bit uh you
back in I don't know a little bit uh you
can check out all our stuff here on
can check out all our stuff here on
puffer doai star the repo to help us out
puffer doai star the repo to help us out
really helps us out join the Discord if
really helps us out join the Discord if
you want to get involved with Dev or
you want to get involved with Dev or
using puffer lip and then I post all
using puffer lip and then I post all
sorts of RL stuff and articles on X so
sorts of RL stuff and articles on X so
also blog all our demos playable online
also blog all our demos playable online
can watch the agents play etc
can watch the agents play etc
etc thanks folks and

Kind: captions
Language: en
okay we're back
okay we're back
here see if no's
around I'm
tired just the very basic uh limited
tired just the very basic uh limited
training I've been doing it takes a lot
training I've been doing it takes a lot
out of you getting back into stuff
I don't know we'll have to optimize that
I don't know we'll have to optimize that
uh routine to be
faster meantime what do we have
here we
have solv Connect 4
have solv Connect 4
[Music]
and currently about 6 minutes can
and currently about 6 minutes can
definitely be faster than
that this is very slow for some
that this is very slow for some
reason what's the
cost oh yeah the cost is high I'm fine
cost oh yeah the cost is high I'm fine
well we'll see how that goes we'll just
well we'll see how that goes we'll just
leave this
running is that a new message Noah hold
running is that a new message Noah hold
on 12 13 yeah there you are perfect uh
on 12 13 yeah there you are perfect uh
let's review your code hyper prams are
let's review your code hyper prams are
going we got some M to fix that are like
going we got some M to fix that are like
this is freezing up for some reason I
this is freezing up for some reason I
don't quite know why we'll handle all
don't quite know why we'll handle all
that
that
though link your
code I guess actually is there PR
up probably just have a PR don't you
uh guess
uh guess
not go ahead and Link me
uh whatever you
uh whatever you
got I got I think 45 minutes to go
got I got I think 45 minutes to go
through this now maybe
through this now maybe
longer let me see if
longer let me see if
uh I just checked the NYU slack got a
uh I just checked the NYU slack got a
little meeting
there some coffee or something my
gosh literally I just did a 3 kilometers
gosh literally I just did a 3 kilometers
and a very easy dumbbell workout but
and a very easy dumbbell workout but
takes a
takes a
lot takes a lot out of you
just created a
PR Implement
TCG you want me to do a proper code
TCG you want me to do a proper code
review right
here okay I think uh if we put the
here okay I think uh if we put the
actual
actual
names of stuff it you can't patent game
names of stuff it you can't patent game
mechanics you can I mean you can't
mechanics you can I mean you can't
trademark game mechanics but you can
trademark game mechanics but you can
Trad Mark
Trad Mark
um
um
names so if you've imported the actual
names so if you've imported the actual
names this is going to get us sued so
names this is going to get us sued so
let's not do that
um I'm going to have to do something
um I'm going to have to do something
with
with
that let me see
so you'll know to do that um and let me
so you'll know to do that um and let me
look at
look at
this okay we got the C
this okay we got the C
file load from
Jon
Jon
uh makes it
uh makes it
failure Json array for
failure Json array for
each wait
what is is this a method in a
method
method
no what the heck is
this yeah I downloaded it yeah you're
this yeah I downloaded it yeah you're
going to have to generate some stuff for
going to have to generate some stuff for
this
this
um this cannot be in the pr like this
um this cannot be in the pr like this
cannot be in the merge
cannot be in the merge
ever um
I actually don't know what this is I
I actually don't know what this is I
don't actually even know how this is
don't actually even know how this is
valid to see am I just missing
valid to see am I just missing
something is this a
something is this a
struct no what is
struct no what is
this is a generate well what is this
oh this is okay this is imported from
oh this is okay this is imported from
cjson
cjson
okay but then wait this
is but this has an Open Bracket
the is this some like Bizarro Macro for
the is this some like Bizarro Macro for
each Loop
let me see this
let me see this
file is this a library that you
file is this a library that you
found or what is
found or what is
this we'll look at the H file where's
this we'll look at the H file where's
the this is fine to do this in Python
yeah you didn't commit the uh the C date
yeah you didn't commit the uh the C date
you didn't commit the
you didn't commit the
Json if this
is CJ
is CJ
[Music]
song is it
song is it
this oh okay because this is a whole ass
Library oh but it's a single file
okay so this is some gross
okay so this is some gross
macro let's
macro let's
see I really don't like libraries that
see I really don't like libraries that
do this but this is
do this but this is
fine added in build ocean
okay I'm not going to I'm not going to
okay I'm not going to I'm not going to
be too beat up over you using a weird
be too beat up over you using a weird
Json load library at least it's one file
Json load library at least it's one file
I really don't like the macros like
I really don't like the macros like
this but
this but
whatever
whatever
um it's short enough you get
um it's short enough you get
this you
get attack
get attack
okay and
e
we
we
do load
do load
the now to fix this
the now to fix this
path what you do for this is um you use
path what you do for this is um you use
the local path from
the local path from
resources uh you just use the resource
resources uh you just use the resource
path and then in the uh for the python
path and then in the uh for the python
version you have to set the path in the
version you have to set the path in the
scon you can look at like any of the
scon you can look at like any of the
other environments for how to do this so
other environments for how to do this so
here for
mhm could be LS but doesn't really
mhm could be LS but doesn't really
matter and what do we
have one
have one
include this with
include this with
n
figure the Python's fine so let's let's
figure the Python's fine so let's let's
look at the
seat probably also
seat probably also
fixed from
fixed from
Brew yeah that's not going to
work fix
work fix
the
the
paths you can do ab
now let's look at this
now let's look at this
div so this is the big
one okay this is
fine upkeep
fine upkeep
and you
added oh this is just an enum that's
added oh this is just an enum that's
fine I don't usually use enums I usually
fine I don't usually use enums I usually
just pound toine stuff but this is
fine cuz then it's card type. typ land
fine cuz then it's card type. typ land
isn't it if I do like
type oh no it's not hold hold on am I
stupid I guess I'm
stupid I guess I'm
stupid okay I learned
stupid okay I learned
something C enom are nicer than python
something C enom are nicer than python
enums this is totally
good yeah this is actually better so
good yeah this is actually better so
I've been stupid about these I assume
I've been stupid about these I assume
cuz in Python you got to do like Zone
cuz in Python you got to do like Zone
typee do you know whatever it's
typee do you know whatever it's
obnoxious yeah this is really solid
obnoxious yeah this is really solid
okay
um
effect to
description you get a bit of additional
description you get a bit of additional
type
safety me do
safety me do
you what
you what
if you pass an enem to a function what's
if you pass an enem to a function what's
the
the
type I guess it's Zone
type I guess it's Zone
type I see what you mean
type I see what you mean
yeah I guess that makes sense yeah these
yeah I guess that makes sense yeah these
are good I was wrong about these there I
are good I was wrong about these there I
the thing is I assume because in Python
the thing is I assume because in Python
it's like you have to do card type. type
it's like you have to do card type. type
land which is redundant and stupid so
land which is redundant and stupid so
yeah I I wrong I was wrong about these
yeah I I wrong I was wrong about these
yeah from here on if you don't need the
yeah from here on if you don't need the
integer like for the actions I think
integer like for the actions I think
still have to to be pound defined right
still have to to be pound defined right
or whatever because you need the integer
or whatever because you need the integer
but uh yeah these are
but uh yeah these are
good enums are weak in C I mean that's
good enums are weak in C I mean that's
what I want I want them to just be
what I want I want them to just be
something simple and
something simple and
weak activation of
weak activation of
effects okay we can look at that I got a
effects okay we can look at that I got a
good half hour to fiddle with
good half hour to fiddle with
this
this
so this is going to have a trigger a
so this is going to have a trigger a
condition activate
condition activate
Yep this is about what I expected
Yep this is about what I expected
um we don't like to do this all over
um we don't like to do this all over
this place but this is exactly what has
this place but this is exactly what has
to be done
to be done
here and then we get struck stack
item I also did not know that c has
item I also did not know that c has
Union types what is this
um I literally didn't know that I don't
um I literally didn't know that I don't
know if I like Union types but let me
know if I like Union types but let me
see what this
see what this
is so this can either
be a phase
function or it can be an
effect wait what's this thing
you've managed to do some stuff that I
you've managed to do some stuff that I
actually don't even
know name
I'm seeing if I like if this is Sayan or
I'm seeing if I like if this is Sayan or
if this is like
overdone Union
function only one member can be valid
which is currently
valid
valid
case switch item type
and then you have if item phase fun this
and then you have if item phase fun this
is
redundant okay I'm going to withhold
redundant okay I'm going to withhold
judgment on this until I think about it
judgment on this until I think about it
for a bit
for a bit
um the way that I would have done this
um the way that I would have done this
not knowing what this is and being very
not knowing what this is and being very
very simple is I would just put both of
very simple is I would just put both of
these things into the um I would just
these things into the um I would just
put both of these things into the stack
put both of these things into the stack
item and then just check them against
item and then just check them against
null is literally all I would
do because here they're doing the null
do because here they're doing the null
they're basically they're doing the null
they're basically they're doing the null
check anyways for
safety so they're doing both
safety so they're doing both
checks I mean I think this is redundant
checks I mean I think this is redundant
and you can just drop this but then
and you can just drop this but then
you're basically assuming that
you're basically assuming that
because this type is defined that it's
because this type is defined that it's
not
not
null which I think is maybe always true
null which I think is maybe always true
I don't
I don't
know I generally stay away from extra
know I generally stay away from extra
language features unless they really do
language features unless they really do
something I can't really tell if this is
something I can't really tell if this is
really doing anything for
you I do everything in the stupidest way
you I do everything in the stupidest way
possible possible and apply a very very
possible possible and apply a very very
high threshold before I uh do something
high threshold before I uh do something
more complicated you know it's got to
more complicated you know it's got to
really buy you
something never really seen a great need
something never really seen a great need
for the union
types welcome YouTube
types welcome YouTube
folks just you can see what we're
folks just you can see what we're
currently
currently
reviewing this is my initial prototype
reviewing this is my initial prototype
of a trading card game that I made uh
of a trading card game that I made uh
let's see you can do like you can play a
let's see you can do like you can play a
land right you can play this and then
land right you can play this and then
let's see let's play another land let's
let's see let's play another land let's
play this and now we will we will swing
play this and now we will we will swing
with this and this right and we attack
with this and this right and we attack
and all that so basic basic TCG
and all that so basic basic TCG
prototype Noah has gone ahead and uh
prototype Noah has gone ahead and uh
made it into an actual M and expanded on
made it into an actual M and expanded on
a lot of stuff so we're reviewing the
a lot of stuff so we're reviewing the
code for this
okay this is something I kind of that
okay this is something I kind of that
kind of irritates me though I'll have to
kind of irritates me though I'll have to
see how you use it having
like a stack item that
like a stack item that
has having a stack item struck that has
has having a stack item struck that has
let's see this has two things in it one
let's see this has two things in it one
of which is a t a specific enum up here
of which is a t a specific enum up here
and then the stack itself only has two
and then the stack itself only has two
things these enums are like too small
things these enums are like too small
like I mean this these uh these things
like I mean this these uh these things
are like too small i' almost just put
are like too small i' almost just put
the stack well you can't just put the
the stack well you can't just put the
stack thing in there because it's an
stack thing in there because it's an
array maybe this is fine yeah I'm being
array maybe this is fine yeah I'm being
too harsh maybe this is fine
stack.
dat
eh kind of
irritating
irritating
index yeah I guess you kind of want this
index yeah I guess you kind of want this
index I mean the alternative would just
index I mean the alternative would just
be to do back in the class but you
be to do back in the class but you
probably have a bunch of these so okay
probably have a bunch of these so okay
we'll leave this alone for now you push
we'll leave this alone for now you push
to the
to the
stack you change the stack item Yep this
stack you change the stack item Yep this
is
is
fine got card you added a
fine got card you added a
name a
type I wonder if the name is going to
type I wonder if the name is going to
slow stuff up
slow stuff up
down there's a bunch of extra memory to
down there's a bunch of extra memory to
copy around we'll see about this copying
copy around we'll see about this copying
all these strings we might just want to
all these strings we might just want to
do this at eval time we'll
see all right what the heck is
this
Union inline struct
struck with one
element okay this is
element okay this is
definitely before I wasn't sure but this
definitely before I wasn't sure but this
is definitely like overdoing it
right dude yeah this is totally
right dude yeah this is totally
overdoing it
overdoing it
I mean this is just so much extra
I mean this is just so much extra
complicated Machinery that you don't
complicated Machinery that you don't
need we'll see if Captain agrees with me
need we'll see if Captain agrees with me
yo Captain what do you think the way
yo Captain what do you think the way
that I would do this is I would just
that I would do this is I would just
take all of these fields here I would
take all of these fields here I would
stick them as part of the card struct
stick them as part of the card struct
and you know the type here you're just
and you know the type here you're just
going to check this against creature or
going to check this against creature or
spell and if it is you know if it's a
spell and if it is you know if it's a
spell you don't access all this other
spell you don't access all this other
stuff you don't even have to to check it
stuff you don't even have to to check it
against null though is the thing because
against null though is the thing because
you have the type right so you're
you have the type right so you're
literally just going to te check against
literally just going to te check against
creature or spell right and if it's
creature or spell right and if it's
spell you only access effect and if it's
spell you only access effect and if it's
creature you access the other
creature you access the other
stuff does this give you any other type
stuff does this give you any other type
I don't does this even give you anything
I don't does this even give you anything
if you do this is there like extra type
if you do this is there like extra type
safety or extra null checks or like
safety or extra null checks or like
something that like really matters that
something that like really matters that
you can do
here cuz this to me looks this looks
here cuz this to me looks this looks
overbuilt to
me I'm being nitpicky by the way because
me I'm being nitpicky by the way because
your code is actually very very good
your code is actually very very good
like from the first M that you submitted
like from the first M that you submitted
this is like a world
this is like a world
difference forgot about unions don't
difference forgot about unions don't
think you need them it's not really
think you need them it's not really
adding a lot of
adding a lot of
complexity well yeah I'm being somewhat
complexity well yeah I'm being somewhat
nitpicky for
nitpicky for
sure you save me dude you don't save if
sure you save me dude you don't save if
you want to save memory like look at
you want to save memory like look at
this you're using you're loing the name
this you're using you're loing the name
in every single time even when you're
in every single time even when you're
doing uh training here right so it's
doing uh training here right so it's
like this is clearly not designed for
like this is clearly not designed for
that in mind this isn't even struct
that in mind this isn't even struct
packed properly right look there's a
packed properly right look there's a
bull here in between an INT and a struct
bull here in between an INT and a struct
like this isn't even packed correctly so
like this isn't even packed correctly so
like we're not really caring about
like we're not really caring about
that I think it guarantees only one
that I think it guarantees only one
member of the Union has a
value yeah but what does that get
value yeah but what does that get
you so you have to check check you have
you so you have to check check you have
to check the type of this thing which is
to check the type of this thing which is
now redundant because you already have
now redundant because you already have
the type up here right I think so you
the type up here right I think so you
you have to check the type of this thing
you have to check the type of this thing
against creature or against
against creature or against
spell versus just checking this type I
spell versus just checking this type I
mean technically this is a little bit
mean technically this is a little bit
safer but I don't think that the safety
safer but I don't think that the safety
is worth
is worth
the I mean this this is some complexity
the I mean this this is some complexity
being
added I don't really think that this is
added I don't really think that this is
worth worth it I would rather just have
worth worth it I would rather just have
everything be flat and then you don't
everything be flat and then you don't
have to access do data you just access
have to access do data you just access
directly you save the layer of
directly you save the layer of
indirection with this yeah I don't
indirection with this yeah I don't
know I would I would definitely do it
know I would I would definitely do it
the other way it's not terrible um and I
the other way it's not terrible um and I
think even you know good programmers
think even you know good programmers
would disagree with me here potentially
would disagree with me here potentially
but I don't like to use extra language
but I don't like to use extra language
features when uh there's a simpler thing
features when uh there's a simpler thing
that does the job just as well
like I say I'm being nitpicky with you
like I say I'm being nitpicky with you
because your codee's pretty damn
good um card
good um card
array card length Max very
array card length Max very
good um allocate
creature allocate
creature Okay so
creature Okay so
here I potentially take
here I potentially take
issue
because this is an allocate an this is
because this is an allocate an this is
an allocation and an initialization in
an allocation and an initialization in
one so you're not supposed to be I'm
one so you're not supposed to be I'm
going to have to see how you're using
going to have to see how you're using
this but you should not be allocating
this but you should not be allocating
memory um at
memory um at
runtime and by that I mean like after
runtime and by that I mean like after
you initialize the environment you
you initialize the environment you
should not be allocating more memory
should not be allocating more memory
while you're running the
while you're running the
environment so I'm a little bit
environment so I'm a little bit
suspicious when I see something that's
suspicious when I see something that's
an allocate and an init cuz you can call
an allocate and an init cuz you can call
this init Stu you can call this a nit
this init Stu you can call this a nit
once you have the
once you have the
memory um so we'll see how you're using
memory um so we'll see how you're using
this okay same thing with all of
this okay same thing with all of
these if you're not abusing these then
these if you're not abusing these then
it's fine we'll look at
it's fine we'll look at
it lands graveyard opponent lands
it lands graveyard opponent lands
opponent
opponent
graveyard yep very good
graveyard yep very good
this even could potentially be a struck
this even could potentially be a struck
I don't know opponent
hand this could be made a struct it
hand this could be made a struct it
doesn't have to be I think this is good
doesn't have to be I think this is good
flat only use when initializing the end
flat only use when initializing the end
then you're a okay I'm a little confused
then you're a okay I'm a little confused
how that's possible though because you
how that's possible though because you
uh you're loading all the data in in
uh you're loading all the data in in
these functions I guess you don't have
these functions I guess you don't have
like deck randomization or like deck
like deck randomization or like deck
modification capabil abilities but like
modification capabil abilities but like
let's say when you reset the environment
let's say when you reset the environment
that you change the decks right then
that you change the decks right then
what you would want is you'd want this
what you would want is you'd want this
to be you'd want just to do the
to be you'd want just to do the
allocations and then you'd want an
allocations and then you'd want an
initialized function that does this on
initialized function that does this on
top of the allocation
right
right
priority yep okay add charge two
wait okay so this is a little silly um
wait okay so this is a little silly um
you this m parameter is not
you this m parameter is not
used not
used not
used and it's not used here either
used and it's not used here either
because it's not used in either of these
because it's not used in either of these
so yeah so we'll see on the other ones
so yeah so we'll see on the other ones
this one here is silly because you don't
this one here is silly because you don't
actually use the end parameter anywhere
actually use the end parameter anywhere
so what I would do is I would make I
so what I would do is I would make I
would put these functions up with card
would put these functions up with card
array and this can be like this is like
array and this can be like this is like
an add do array you know add card that's
an add do array you know add card that's
fine I'd put the card array first
fine I'd put the card array first
because the card array is the uh the key
because the card array is the uh the key
object here and then it's yeah and then
object here and then it's yeah and then
I'd put the card after also this is a
I'd put the card after also this is a
copy you know this is a copy right is
copy you know this is a copy right is
this supposed to be a copy you're
this supposed to be a copy you're
copying the card
and actually does this card have
and actually does this card have
pointers in it let me
see okay I don't know if this card has
see okay I don't know if this card has
pointers in it but if this card has
pointers in it but if this card has
pointers in it then you're
pointers in it then you're
uh you know you're going to do some
uh you know you're going to do some
screwy stuff and have pointers to
screwy stuff and have pointers to
multiple they can be adjusted for
multiple they can be adjusted for
multiple
multiple
places so you have mix these things up
places so you have mix these things up
I'd
say shouldn't need
prototypes if your code's ordered
prototypes if your code's ordered
reasonably this is fine this is
reasonably this is fine this is
fine oh I'm supposed to be adding
fine oh I'm supposed to be adding
comments for you so it's easy
reference
reference
first
second here
compiling well we do cap our build we do
compiling well we do cap our build we do
like
like
wall I don't know if the wall misses
wall I don't know if the wall misses
anything yeah probably extran
anything yeah probably extran
Panic panic's kind of well panic
Panic panic's kind of well panic
but
but
empty P some
empty P some
debug obviously these don't go in the
debug obviously these don't go in the
main
build
build
build
and my
and my
handful
H wait is there an opponent handful
function I'm confused
oh I see
than
yeah the are yeah I think these are
yeah the are yeah I think these are
redundant uh draw
card
card
generally probably
work it keep
pass the
card it's 15 minute warning on meeting
card it's 15 minute warning on meeting
got to get going here or I'll finish
got to get going here or I'll finish
this
this
after randomized deck yep tapable Mana
after randomized deck yep tapable Mana
okay and then tap L for
okay and then tap L for
[Music]
[Music]
Mana it's perfectly fine
Mana it's perfectly fine
code turn Aries the turn AR is
code turn Aries the turn AR is
everywhere I've got to go right so we'll
everywhere I've got to go right so we'll
have to refactor stuff a little bit for
have to refactor stuff a little bit for
this um and play
card this good
untap oh I think I'm yelling at you over
untap oh I think I'm yelling at you over
my own prints cuz I think I left the
my own prints cuz I think I left the
prints
prints
in Prototype is
in Prototype is
fine
push it's always silly to me when we do
push it's always silly to me when we do
stuff like this because it's like I
stuff like this because it's like I
think this is a copy function anyways
think this is a copy function anyways
yeah this is a copy function so it's
yeah this is a copy function so it's
like we're making a struct and then
like we're making a struct and then
immediately copying it
immediately copying it
probably something better
here I don't know maybe there should be
here I don't know maybe there should be
a version of this that takes type and
a version of this that takes type and
phase function
instead depends if we actually ever push
instead depends if we actually ever push
stack like existing stack
items phase
items phase
upkeep yeah you added Summoning Sickness
upkeep yeah you added Summoning Sickness
very nice nice graveyard as well nice
very nice nice graveyard as well nice
graveyard B
graveyard B
moves no
op
op
yeah
stack ever existing
card switch on the card type it's
card switch on the card type it's
fine and then this return to user to
fine and then this return to user to
stack is pretty cool I like the way that
stack is pretty cool I like the way that
that
happens yeah all all these stack items
happens yeah all all these stack items
are kind of insane
but this is very clean logic otherwise I
but this is very clean logic otherwise I
like this you
attack yeah pretty much the only thing
attack yeah pretty much the only thing
the only thing bothering me is this like
the only thing bothering me is this like
crazy like stack item
everywhere turn to
everywhere turn to
user summoning sickness is
good we might want to have a a print
good we might want to have a a print
macro that uh you know we can enable
macro that uh you know we can enable
with the debug mode or not cuz it's a
with the debug mode or not cuz it's a
pretty complicated M and uh it's an m
pretty complicated M and uh it's an m
that like it's useful to see the order
that like it's useful to see the order
of the stack so probably instead of
of the stack so probably instead of
deleting all the prints we should just
deleting all the prints we should just
make like a you know a print debug macro
make like a you know a print debug macro
or whatever or like a you know print if
or whatever or like a you know print if
or whatever it just prints if a flag is
set it's
set it's
block and I think the compiler will just
block and I think the compiler will just
take that out if it sees a
constant okay that's
constant okay that's
good and
good and
yep
skip what happened
skip what happened
here this is the old attack
here this is the old attack
object I have to see the full file for
this reset attack and defending States
yeah I mean so this is like the the
yeah I mean so this is like the the
thing I was trying to avoid cards of
thing I was trying to avoid cards of
action. dat. creature. like this is a
action. dat. creature. like this is a
lot
[Music]
art what's this
pop okay so there is an Alf
pop okay so there is an Alf
here and
then I would
invert this
it's just kind of
deep biggest thing I see is just the
deep biggest thing I see is just the
massive amount of Stack item thing all
massive amount of Stack item thing all
over the code it's like it's this kind
over the code it's like it's this kind
of ridiculous the way that this is it's
of ridiculous the way that this is it's
just it's adding a lot of stuff then we
just it's adding a lot of stuff then we
have render which you added
have render which you added
you added some text to stuff
instant these get these do get different
instant these get these do get different
positions
positions
interesting sorcery render
interesting sorcery render
card hand one in hand render my
card hand one in hand render my
okay and then we get
this opponent board
this opponent board
y get land you did the land
y get land you did the land
Zone when it
lands it' be nice to be able to just
lands it' be nice to be able to just
have one function for each of these but
have one function for each of these but
probably there's um it's probably
probably there's um it's probably
literally easier the way you've done it
literally easier the way you've done it
to just duplicate the functions it's
to just duplicate the functions it's
probably
probably
easier and this is super
easy get the phase
I'd say very good
I'd say very good
overall I have a couple minor nitpicks I
overall I have a couple minor nitpicks I
mean I got a couple minutes so let me
mean I got a couple minutes so let me
just look at the full
file make sure this still looks good
file make sure this still looks good
when I scroll the full
file yeah these can go ones
oops input on how to implement
oops input on how to implement
activation of effects yeah let me do
activation of effects yeah let me do
that right now how imp so the user
that right now how imp so the user
should be able to select from
should be able to select from
hand field
hand field
graveyard and add a variable amount of
targets well it's not that they're able
targets well it's not that they're able
to select from hand field or graveyard
to select from hand field or graveyard
right it's that there's
right it's that there's
trigger and you can you have the option
trigger and you can you have the option
to activate effects for cards as they're
to activate effects for cards as they're
triggered right so in the actual
triggered right so in the actual
game the when a car well in the in the
game the when a car well in the in the
uh the computer version of the game
uh the computer version of the game
right the activated card will pop up and
right the activated card will pop up and
then you'll have the option to use it
then you'll have the option to use it
right and sometimes it gives you
right and sometimes it gives you
multiple targets or lets you target
multiple targets or lets you target
things so I think it's all
things so I think it's all
contextual right so you'll have to get
contextual right so you'll have to get
those into the observation but as for
those into the observation but as for
the actions for those it's still just
the actions for those it's still just
the number keys because it's like number
the number keys because it's like number
keys and enter or not right so you can
keys and enter or not right so you can
select you know the select the card and
select you know the select the card and
enter to activate it and then if it like
enter to activate it and then if it like
if the card targets your own field
if the card targets your own field
that'll be contextual and it'll just be
that'll be contextual and it'll just be
numpad if the if it targets the enemies
numpad if the if it targets the enemies
then that'll also be contextual and be
then that'll also be contextual and be
numpad and you'll probably what you
numpad and you'll probably what you
should do is you should just have the
should do is you should just have the
observations in the
observations in the
observations uh one of the observations
observations uh one of the observations
should just be the things that you're
should just be the things that you're
currently targeting right the things
currently targeting right the things
that you're num Keys map too I think
that you're num Keys map too I think
that's going to be the best way to do it
that's going to be the best way to do it
does that make sense or am I off on my
does that make sense or am I off on my
understanding here and got to go play
understanding here and got to go play
some more MTG
I'm got a meeting in five
think you're
think you're
right bit of a pain to think of the
right bit of a pain to think of the
recursive logic so it's I want to
recursive logic so it's I want to
separate two things for you right which
separate two things for you right which
is I want to separate
is I want to separate
the the logic of the game from the piece
the the logic of the game from the piece
that's troubling you with RL so the game
that's troubling you with RL so the game
implementing the game with the stack is
implementing the game with the stack is
one thing right um but the piece with
one thing right um but the piece with
the RL it's just whatever the stat gives
the RL it's just whatever the stat gives
you you know it's giving you targeting
you you know it's giving you targeting
options you think of it you have like 10
options you think of it you have like 10
slots or whatever to Target right that
slots or whatever to Target right that
are mapped to your num
are mapped to your num
keys and that's just what is targeted
keys and that's just what is targeted
you press the num keys and that's what
you press the num keys and that's what
you target you press enter to
you target you press enter to
confirm and that's so the action space
confirm and that's so the action space
is very very simple
is very very simple
now in the observations is that gets
now in the observations is that gets
more complicated right instead of just
more complicated right instead of just
being able to see the field we're
being able to see the field we're
probably going to have to add a
probably going to have to add a
contextual buffer so like whatever is in
contextual buffer so like whatever is in
the context at the moment right if you
the context at the moment right if you
have like four targeting options they
have like four targeting options they
should go 1 2 3 4 into that contextual
buffer that should be a
thing but other than that I think that
thing but other than that I think that
the the RL if we design it this way the
the the RL if we design it this way the
RL portion of this environment should be
RL portion of this environment should be
very easy like the RL like the RL side
very easy like the RL like the RL side
doesn't really add any constraints other
doesn't really add any constraints other
than keeping the code fast
right and I'll look through the stack
right and I'll look through the stack
logic I'm going to play this thing right
logic I'm going to play this thing right
add like fix like a couple small things
add like fix like a couple small things
um especially the names and then I will
um especially the names and then I will
we can PR this as it'll still stay a
we can PR this as it'll still stay a
work in progress environment but we can
work in progress environment but we can
PR it and I can play with it a little
PR it and I can play with it a little
bit and I can help you out all
bit and I can help you out all
right maybe we can even start getting
right maybe we can even start getting
some basic models on this that'd be
fun very solid PR very solid
PR only had a couple nit picks
okay I got to go run to my
okay I got to go run to my
meeting if you play Don't
surprise are you still using carbs for
surprise are you still using carbs for
hyper parameter search we are now using
hyper parameter search we are now using
neoc carbs I spent Saturday modifying
neoc carbs I spent Saturday modifying
carbs and uh yeah it's way better now
carbs and uh yeah it's way better now
we've got experiments running and we are
we've got experiments running and we are
kind of crushing it um Al we got like a
kind of crushing it um Al we got like a
several hundred experiments running now
several hundred experiments running now
this is Connect 4 being solved here
this is Connect 4 being solved here
uh burito front's getting very nice as
uh burito front's getting very nice as
well holy look at that okay uh Spencer
well holy look at that okay uh Spencer
you came just as I got a run I got a
you came just as I got a run I got a
meeting that I got to go to in two
meeting that I got to go to in two
minutes and I will be back streaming
minutes and I will be back streaming
after that so for folks on YouTube be
after that so for folks on YouTube be
back in I don't know a little bit uh you
back in I don't know a little bit uh you
can check out all our stuff here on
can check out all our stuff here on
puffer doai star the repo to help us out
puffer doai star the repo to help us out
really helps us out join the Discord if
really helps us out join the Discord if
you want to get involved with Dev or
you want to get involved with Dev or
using puffer lip and then I post all
using puffer lip and then I post all
sorts of RL stuff and articles on X so
sorts of RL stuff and articles on X so
also blog all our demos playable online
also blog all our demos playable online
can watch the agents play etc
can watch the agents play etc
etc thanks folks and
