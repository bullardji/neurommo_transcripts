Kind: captions
Language: en
we are back
live go ahead and post this
mess going to start by saying no I did
mess going to start by saying no I did
not launch a meme coin
not launch a meme coin
obviously it's a [ __ ] who has stolen my
obviously it's a [ __ ] who has stolen my
branding to impersonate me if you fall
branding to impersonate me if you fall
for this you are an
for this you are an
idiot with that out of the way let's get
idiot with that out of the way let's get
to actual work I've had to deal
to actual work I've had to deal
with that Hardware [ __ ] and a ton of
with that Hardware [ __ ] and a ton of
other stuff today so I'm only just now
other stuff today so I'm only just now
getting to this
getting to this
mess um
cool Okay cool so we have some actual
cool Okay cool so we have some actual
users asking about
users asking about
this and then we've got a whole bunch of
this and then we've got a whole bunch of
freaking Bots that are like oh just you
freaking Bots that are like oh just you
know somebody dropped a
know somebody dropped a
coin oh for [ __ ]
coin oh for [ __ ]
sake did they
just
just
okay that's fine
these are all old
accounts you know I'm not going to like
accounts you know I'm not going to like
go through Banning people because I
go through Banning people because I
think that um it's possible that it's
think that um it's possible that it's
just like random crypto people who saw
just like random crypto people who saw
it and then found it through that cuz I
it and then found it through that cuz I
don't actually know which ones are the
don't actually know which ones are the
stupid and which ones aren't [ __ ]
stupid and which ones aren't [ __ ]
pain in the ass I swear like so much
pain in the ass I swear like so much
dumb [ __ ] comes out of crypto
dumb [ __ ] comes out of crypto
[Music]
[Music]
space let's just go Um let's go get some
space let's just go Um let's go get some
actual stuff done here
um what we're doing at the moment is
um what we're doing at the moment is
we've got Isaac gem which is the GPU SIM
we've got Isaac gem which is the GPU SIM
for control robotics all that
for control robotics all that
Shenanigans and uh we're trying to fix
Shenanigans and uh we're trying to fix
the total mess of code that's typically
the total mess of code that's typically
used with it get something nice and
used with it get something nice and
clean bound to
clean bound to
puffer hopefully have it be pretty fast
puffer hopefully have it be pretty fast
so I got this
so I got this
thing basic
thing basic
implementation this
implementation this
should this should roughly
should this should roughly
handle um yeah this should roughly
handle um yeah this should roughly
handle just like starting a scene in
handle just like starting a scene in
Isaac this is much shorter than before
Isaac this is much shorter than before
as
as
well um I also this step function
well um I also this step function
here is not particularly
here is not particularly
good I think what we're going to do is
good I think what we're going to do is
we're going to get rid of
we're going to get rid of
this and then this will be
this and then this will be
on uh on any other environment using
on uh on any other environment using
this
underscore physics
step I don't even think that that is oh
step I don't even think that that is oh
and it calls this
and it calls this
mess
render okay so we can put this here
render okay so we can put this here
right they just there's so many stupid
right they just there's so many stupid
redundant things that they have uh I
redundant things that they have uh I
don't know what this
don't know what this
is and then then post physics step is
is and then then post physics step is
also not matter so we get rid of
also not matter so we get rid of
this and now we're left with something
this and now we're left with something
pretty nice and
sure Isaac needs this much code dude
sure Isaac needs this much code dude
Isaac has thousands and thousands of
Isaac has thousands and thousands of
lines of garbage wrappers written by
lines of garbage wrappers written by
generations of PhD students wrapping
generations of PhD students wrapping
each other's garbage code without like
each other's garbage code without like
without reading it that's what we're
without reading it that's what we're
currently working on fixing at the
currently working on fixing at the
moment it's not that it needs this much
moment it's not that it needs this much
code to work with puffer it needs this
code to work with puffer it needs this
much code to work at all
period this is half of what I started
period this is half of what I started
with and this doesn't even have anything
with and this doesn't even have anything
in the scene this is what Isaac needs to
in the scene this is what Isaac needs to
load in empty
scene okay
scene okay
so now we get to the humanoid now this
so now we get to the humanoid now this
thing is massive this is A600 line file
thing is massive this is A600 line file
luckily most of it is redundant
[ __ ] I thought based on your file
[ __ ] I thought based on your file
path this is what you wrote what do you
path this is what you wrote what do you
mean based on your file
path yeah like I took an existing
path yeah like I took an existing
wrapper and I cut all the fluff out of
wrapper and I cut all the fluff out of
it the wrapper I started with was twice
it the wrapper I started with was twice
this length
Okay so we've got simple
humanoid yeah I know and we need this
humanoid yeah I know and we need this
cuz like so this is technically this is
cuz like so this is technically this is
for a client um you know there's some
for a client um you know there's some
stuff we're doing for them but the key
stuff we're doing for them but the key
thing that enables it is we need to have
thing that enables it is we need to have
a proper uh proper Isaac gy support and
a proper uh proper Isaac gy support and
puffer now we've been using the shitty
puffer now we've been using the shitty
versions that have a million layers of
versions that have a million layers of
wrappers so far but what I'm trying to
wrappers so far but what I'm trying to
do now which is going to help uh help
do now which is going to help uh help
out you know the other guy that I have
out you know the other guy that I have
on this project is to just distill it
on this project is to just distill it
into something that's
into something that's
actually understandable and doesn't have
actually understandable and doesn't have
a million redundant layers now I'm
a million redundant layers now I'm
trying to figure out how
trying to figure out how
fast crappy versions train at it depends
fast crappy versions train at it depends
on the scene it could be 10,000 it could
on the scene it could be 10,000 it could
be 50,000 it really depends on the scene
be 50,000 it really depends on the scene
um you know that's part of what I'm
um you know that's part of what I'm
fixing now as
well so let me see if I can figure out
well so let me see if I can figure out
what it is that this rapper actually
what it is that this rapper actually
thinks it needs to be
thinks it needs to be
doing cuz every single repo has roughly
doing cuz every single repo has roughly
the same code in
the same code in
it I added this okay so what it does is
it I added this okay so what it does is
it gets GPU state
it gets GPU state
tensors after root State depth of field
tensors after root State depth of field
State tensor I imagine sensor tensor
State tensor I imagine sensor tensor
rigid body tensor contact so it gets a
rigid body tensor contact so it gets a
whole bunch of
tensors
tensors
force gy torch. wrap tensor
wrap
tensor
view maybe it's because Isaac Sim uh
view maybe it's because Isaac Sim uh
Isaac Jim returns a non- torch
Isaac Jim returns a non- torch
tensor that's probably what this
tensor that's probably what this
is they probably have their own tensor
is they probably have their own tensor
format and then this wraps it for uh
format and then this wraps it for uh
this is probably a view that's wrapped
this is probably a view that's wrapped
for torch I would imagine
and we've got
and we've got
refresh why do they refresh all these
refresh why do they refresh all these
they literally just declared
them that's got to be redundant
right I wish is there any Isaac gem API
right I wish is there any Isaac gem API
anywhere I haven't been able to find one
anywhere I haven't been able to find one
if there is one
oh I
oh I
see so if you want the docks they docs
see so if you want the docks they docs
literally come with uh with Isaac so
literally come with uh with Isaac so
maybe that's what we should
maybe that's what we should
do let's just do
this um
and
docks okay
docks okay
and then we should just be able to go
and then we should just be able to go
here and now we have docks lovely that's
here and now we have docks lovely that's
kind of funny that they distribute the
kind of funny that they distribute the
docks just like locally with your
docks just like locally with your
build that's actually kind of
build that's actually kind of
cool I don't think I need to do that
cool I don't think I need to do that
with puffer because I can just have them
with puffer because I can just have them
on the website but it's kind of funny
on the website but it's kind of funny
because then you have you know the
because then you have you know the
version of the docs for your specific
version of the docs for your specific
thing and Nvidia doesn't have to manage
thing and Nvidia doesn't have to manage
it
acquire
Gem and then you create a
Gem and then you create a
Sim for
a
plane probably that's one of the
plane probably that's one of the
things
things
here load
assets okay so this will be where you
assets okay so this will be where you
load in
load in
the
humanoid additional
options does not add it to the
options does not add it to the
simulation it gives you a blueprint okay
simulation it gives you a blueprint okay
and then you can instantiate them
separately the environments are
separately the environments are
physically independent of each other but
physically independent of each other but
are rendered together for easy
are rendered together for easy
monitoring oh that's really
monitoring oh that's really
funny see here I thought that there was
funny see here I thought that there was
like some weird Quirk where you had to
like some weird Quirk where you had to
put them all in the same scene together
put them all in the same scene together
no they just do this to be fancy that's
no they just do this to be fancy that's
funny as hell
okay they literally just do this to be
fancy so you don't have to worry about
fancy so you don't have to worry about
like the initial location you know being
like the initial location you know being
defined in a grid or something like that
defined in a grid or something like that
because it's literally they're all in
because it's literally they're all in
their own separate world it's just
their own separate world it's just
they're rendered
together maybe not wait hold on an
together maybe not wait hold on an
important ability to pack multiple
important ability to pack multiple
instances yeah okay so this is parallel
multiple into a single see I don't know
multiple into a single see I don't know
if this actually does mean putting them
if this actually does mean putting them
in the same
scene the environments are physically
scene the environments are physically
dependent
independent simple procedural
independent simple procedural
API so each M has a Zone coordinate
API so each M has a Zone coordinate
space it's embedded in the global
space it's embedded in the global
simulation
space an actor is simply an instance of
space an actor is simply an instance of
a gy
asset cannot have an actor that does not
asset cannot have an actor that does not
belong to an
environment specify with a querian
okay I do something like
okay I do something like
this create actor arguments after the
this create actor arguments after the
pose are
pose are
optional specify a
name Collision group and collision
name Collision group and collision
filter two bodies will only collide with
filter two bodies will only collide with
each other if they belong to the same
each other if they belong to the same
Collision group oh okay so that's that's
Collision group oh okay so that's that's
interesting so technically what you can
interesting so technically what you can
do is you can just stick all the Bots
do is you can just stick all the Bots
into the same environment if you wanted
into the same environment if you wanted
to into the same sim and just have them
to into the same sim and just have them
not collide with each
other Collision filter two bodies will
other Collision filter two bodies will
not Collide if they have a common bit
not Collide if they have a common bit
set used to filter out self collision
set used to filter out self collision
and multibody
actors so you just set this for all like
actors so you just set this for all like
to be the same thing I
guess one Collision group per
guess one Collision group per
environment
prevents actors in different
prevents actors in different
environments okay so they're actually
environments okay so they're actually
very murky on whether they're sticking
very murky on whether they're sticking
multiple Bots into the same sim or
not so we'll have to look at
that Pres procedural API some
that Pres procedural API some
limitations all environments are created
limitations all environments are created
and populated in sequence you create an
and populated in sequence you create an
environment add all actors to it then
environment add all actors to it then
create another environment that'll act
create another environment that'll act
that's
fine yeah this is all fine
simulate Sim fetch result
Sim step Graphics draw okay so they have
this you can add synchronized frame rate
this you can add synchronized frame rate
okay so simulate fetch results step
okay so simulate fetch results step
graphic draw viewers perfect very
graphic draw viewers perfect very
simple API is actually not
simple API is actually not
bad PhD students wrote a bunch of bad
bad PhD students wrote a bunch of bad
code this on its own not
bad we don't care about the viewer goey
bad we don't care about the viewer goey
for now
load assets this is pretty
simple we'll have uh this will have like
simple we'll have uh this will have like
a standard thing for this is not that
a standard thing for this is not that
bad and then physics
Sim
aggregate allow you to tell physics a
aggregate allow you to tell physics a
set of actors will be clustered
set of actors will be clustered
together you can optimize spatial data
together you can optimize spatial data
operations
operations
modest perform
okay begin aggregate end aggregate like
this only actors from the same
this only actors from the same
environment can be included in an
environment can be included in an
aggregate necessary to specify the
aggregate necessary to specify the
maximum number of rigid bodies and
maximum number of rigid bodies and
shapes the total number of bodies and
shapes the total number of bodies and
shapes in all the actors so this is
shapes in all the actors so this is
actually like we can make one
actually like we can make one
environment put everything into
environment put everything into
and then make it
faster and we can filter Collision so
faster and we can filter Collision so
that they don't collide with each
other actors can have their size
other actors can have their size
scaled we don't care
this is the tensor API here that we're
this is the tensor API here that we're
seeing over
seeing over
there and then we
there and then we
have structured numpy this is incredibly
have structured numpy this is incredibly
smart um they're actually way ahead of
smart um they're actually way ahead of
their time here this is something that I
their time here this is something that I
found out about it's a very Niche
found out about it's a very Niche
feature and I have this in puffer lib
feature and I have this in puffer lib
and is amazing so as expected Nvidia
and is amazing so as expected Nvidia
best
devs nid is a cool company
now
pose velocity okay so this is I don't
pose velocity okay so this is I don't
think that this will be in
torch body States equals
rigid body stay away for an actor and
rigid body stay away for an actor and
for the entire
for the entire
Sim okay so this will actually work I
Sim okay so this will actually work I
think with torch it will give you um
think with torch it will give you um
tensors that it'll give you a dictionary
tensors that it'll give you a dictionary
of tensors and then we can M map these
of tensors and then we can M map these
so we these will be very fast you can
so we these will be very fast you can
edit
edit
these then set the state using the
these then set the state using the
corresponding
corresponding
methods
M oh that's weird
M oh that's weird
you have to set the state so so this is
you have to set the state so so this is
a read
only this is bad this is a
copy we'll look at that later but this
copy we'll look at that later but this
is this is very
bad getting in setting States
bad getting in setting States
entirely on the GP so yeah so they have
entirely on the GP so yeah so they have
get and set but they should just have a
get and set but they should just have a
view so that's
view so that's
bad tensor
bad tensor
API copying data back and forth from the
API copying data back and forth from the
host you're still copying data you're
host you're still copying data you're
just copying it on the
just copying it on the
GPU so this is actually not as welld
GPU so this is actually not as welld
designed little disappointed Nvidia
yeah no special API for
manipulating so what it do you still
manipulating so what it do you still
have to set it or is this a
have to set it or is this a
view simulation setup
view simulation setup
so physics
so physics
State acquire state so you acquire it
State acquire state so you acquire it
right and you wrap the
tensor to update the content of these
tensor to update the content of these
tensor with the latest
State dude
okay so this is a nice little
snippet so this is redundant right over
there rout
positions this is silly
degree of
degree of
freedom for and changed you can get this
freedom for and changed you can get this
as well yep we see that there refresh
as well yep we see that there refresh
set same as the same thing
set same as the same thing
before and then there's an index thing
before and then there's an index thing
for tensors far fair
enough I don't think we need the Jacobi
enough I don't think we need the Jacobi
and I help we get contact
tensors for sensors okay we have all
tensors for sensors okay we have all
sorts of different tensors common
sorts of different tensors common
problems tensor
problems tensor
lifetime tensors creating using pie
lifetime tensors creating using pie
torture subject to garbage collection
make sure that the python will not
make sure that the python will not
garbage clect the object while they're
garbage clect the object while they're
still in
use sharing index tensors with
gy need to convert long tensor to a
gy need to convert long tensor to a
32bit consider this
32bit consider this
code
code
is.2 unwrap tensor function gathers
is.2 unwrap tensor function gathers
information about the py tensor in a
information about the py tensor in a
descriptor that's later passed to JY but
descriptor that's later passed to JY but
it doesn't make a copy of the tensor's
it doesn't make a copy of the tensor's
data tensor is a temporary variable
that's
that's
insane dude what the
hell tensor API is only supported for
hell tensor API is only supported for
physics we don't
care for
sensors I mean this is all the
sensors I mean this is all the
same simulation
same simulation
[Music]
[Music]
tuning okay we'll look through
tuning okay we'll look through
this different
solvers don't need this don't need
solvers don't need this don't need
this and we're pretty much set so that's
this and we're pretty much set so that's
the
the
docks once the docks pass
docks once the docks pass
through make sure we got
a on legs gem
okay that's
cool I'm put these docks over on the
cool I'm put these docks over on the
side monitor
side monitor
somewhere um and we are going to start
somewhere um and we are going to start
on
on
this so I at least have some idea of
this so I at least have some idea of
what is going on and why things are
what is going on and why things are
being
done I'm thinking if I want to just copy
done I'm thinking if I want to just copy
all the code
kind of just want to take all this
kind of just want to take all this
stuff giant ass
stuff giant ass
class and uh pull it into
class and uh pull it into
puffer and start deleting
stuff okay so this is 500
lines of 500 lines
right then the rest of this is this
right then the rest of this is this
weird this ball task which we don't care
weird this ball task which we don't care
about so that's not that
about so that's not that
bad and again most of this is going to
bad and again most of this is going to
be redundant
CL so config Sim
CL so config Sim
pams uh these are not going to end up
pams uh these are not going to end up
being
being
needed unfortunately there's too much
needed unfortunately there's too much
code for me to really even think about
code for me to really even think about
at the moment so I've got to let's just
at the moment so I've got to let's just
strip start stripping
stuff see if there's anything obviously
stuff see if there's anything obviously
redundant in
here task
mobs nothing super obviously bad in here
mobs nothing super obviously bad in here
it's going to be uh it's going to take
it's going to be uh it's going to take
more thorough looking at so we'll take
this n
equals Isaac and
control this is
control
oops and we'll just uh
oops and we'll just uh
do control freak inverse to device Cuda
how did I mess the name of this thing
up look at
up look at
this JY
this JY
Mappy oh no gym API this is
fine table
okay you know what I want to do cuz I'm
okay you know what I want to do cuz I'm
going to be editing the top of this I'm
going to be editing the top of this I'm
going to put this underneath the other
going to put this underneath the other
one it just be
one it just be
easier I don't really want these in
easier I don't really want these in
separate files
separate files
um but it'll it's just going to be
um but it'll it's just going to be
easier cuz at least for the first part
easier cuz at least for the first part
of this I'm going to be relying on U on
of this I'm going to be relying on U on
this end which is a shorter piece of
this end which is a shorter piece of
code so we got
this this graphic
this this graphic
just
false I think we're going to take the
false I think we're going to take the
defaults out
defaults out
of out of
of out of
this because I always hate repeated
this because I always hate repeated
defaults
you're never going to make this on its
you're never going to make this on its
own
really so we then we do Isaac n like
this head L true device
Cuda okay and then we do control
Cuda okay and then we do control
free
free
this
device
R now we have our
n um we are not going to need config
n um we are not going to need config
we're not going to need some
prams six
prams six
engine only used in create I
engine only used in create I
believe yep only used in create so most
believe yep only used in create so most
of these things we're not going to
need plain static friction plain Dynamic
need plain static friction plain Dynamic
friction let me see if I did
these uh no I do not have frictions
but that's
fine what's this oh this the old one
lots of stuff
here numb OBS numb
here numb OBS numb
actions where do these Get
Set set up character
props yeah so this is in setup character
props right
here I don't really like
here I don't really like
methods like this that just jump your
methods like this that just jump your
code all over the place for no
reason I'd rather do this
and then we'll add a asset file
here
here
oops
oops
Yeah so now we have our asset
file if yeah it's literally just
we should just call this SM SMX
we should just call this SM SMX
capsule
path where do they load this
thing they loaded anywhere
thing they loaded anywhere
where ah they do load it
where ah they do load it
perfect but they don't need it right
perfect but they don't need it right
yet so this is completely stupid and
redundant this isn't used at
all and uh this is also completely
all and uh this is also completely
stupid
stupid
here this numb action
you see how like there's just all this
you see how like there's just all this
redundant [ __ ]
redundant [ __ ]
everywhere it's like this isn't making
everywhere it's like this isn't making
the code any more General
the code any more General
it's not really making it more readable
it's not really making it more readable
it's just like taking like the logic and
it's just like taking like the logic and
jumping it all over the file until you
jumping it all over the file until you
can't follow it and W and behold there
can't follow it and W and behold there
are hundreds of lines of redundant code
are hundreds of lines of redundant code
as a result don't do
as a result don't do
this I think I put this into the
this I think I put this into the
wrong hold on is this was this this was
wrong hold on is this was this this was
this right literally the action space is
this right literally the action space is
the same as the uh observation space
the same as the uh observation space
that's uh that's kind of weird oh no
that's uh that's kind of weird oh no
this is the yeah this is the action
this is the yeah this is the action
space and then here we have the
space and then here we have the
observation space cool so uh this goes
here
now
now
ref
ref
hoi OB size I bet you this is not what
hoi OB size I bet you this is not what
it's going to actually be I'm going to
it's going to actually be I'm going to
put these here for now because I you
put these here for now because I you
know we can but ref hoi OBS size what is
this this right
this this right
here all right so we put this
here and then this gets to be a tuple
here and then this gets to be a tuple
with a comma in it so that it's a
with a comma in it so that it's a
multi-element and this looks kind of
multi-element and this looks kind of
silly but we'll do
silly but we'll do
this for
Nows yeah I'll do this okay so now we
Nows yeah I'll do this okay so now we
have our OBS and action spaces we get
have our OBS and action spaces we get
rid of
this does this get used anywhere DF
nope see how much garbage there
is okay so now we actually have
is okay so now we actually have
observation spaces to
observation spaces to
find uh and in
find uh and in
fact it would seem to me that this can
fact it would seem to me that this can
be defined much
earlier yeah this can be defined way
earlier yeah this can be defined way
earlier
like say right after the mend
like say right after the mend
maybe I'd actually prefer to put this
maybe I'd actually prefer to put this
before the
before the
mend H right after the m is good put
mend H right after the m is good put
this up here since we know that this
this up here since we know that this
is this is nice and
is this is nice and
condensed
condensed
okay and uh the rest of this we don't
okay and uh the rest of this we don't
know yet I think that these contact
know yet I think that these contact
bodies can go somewhere
PD
PD
control let get
control let get
used
used
does but what's it
does but what's it
mean p d
control build PD action offset
scale set
okay I don't know what this is what
okay I don't know what this is what
we're going to do is something very
silly watch
silly watch
this
this
ah his hoi which we're using as
ah his hoi which we're using as
a reference
a reference
repository they're all the same code so
repository they're all the same code so
it doesn't really matter which one we
it doesn't really matter which one we
use it's all like PhD students wrapping
use it's all like PhD students wrapping
each other's code all basically the
each other's code all basically the
same but for
same but for
now I'm just going to take this whole
code
and paste it into
GPT and then what was the thing PD
GPT and then what was the thing PD
control what does
view proportional
view proportional
derivative simulate operates actions are
derivative simulate operates actions are
interpreted as Target
interpreted as Target
positions for the PD
positions for the PD
controller or they're interpreted
controller or they're interpreted
directly as forces applied to the depths
directly as forces applied to the depths
of field
actions are interpreted as Target
positions
positions
interesting Okay so
yeah so we have have to just test both
yeah so we have have to just test both
of these we'll test both of these and
of these we'll test both of these and
then probably we'll remove one of
then probably we'll remove one of
them PD control humanoid Locomotion PD
them PD control humanoid Locomotion PD
controls likely more efficient and
controls likely more efficient and
robust are there any roboticist watching
robust are there any roboticist watching
that
know and a low Lev physics
what's the default for
this do we have
this do we have
uh do we have a default for this
thing config
yeah
yeah
true
um the thing is I don't quite want to
um the thing is I don't quite want to
delete this yet because
physics are highly optimized for
this and
this and
stability okay
I'm sold on this for
now okay that's a little bit more code
now okay that's a little bit more code
gone
we still have a bunch of
code debug
is yeah okay we still use
is yeah okay we still use
this plane static friction plane Dynamic
friction doesn't do anything anything to
friction doesn't do anything anything to
just stick them in the init for no
just stick them in the init for no
reason
oops my
oops my
bad hit a caps
lock that's a little more code gone
more code
gone create
M that's all that's left in that
M that's all that's left in that
function so I wouldn't pay something
function so I wouldn't pay something
this big in normally if there were more
this big in normally if there were more
stuff but uh
stuff but uh
num
num
M
spacing
spacing
cool and there we
cool and there we
go I'm trying to just turn this into
go I'm trying to just turn this into
like a like a script there's no reason
like a like a script there's no reason
for it to be as chopped up as this
is so any of these like oneoff methods
is so any of these like oneoff methods
that only get
called build PD
there we go
only gets called in one
spot we'll leave these alone for now
stupid two line
stupid two line
functions only get called
once the hope is as well that when you
once the hope is as well that when you
stick all this stuff together you also
stick all this stuff together you also
can find more redundancy it's way harder
can find more redundancy it's way harder
to find redundancy when your code is
to find redundancy when your code is
like just chopped up and split into tons
like just chopped up and split into tons
of methods that are only called
of methods that are only called
once I mean
once I mean
like doesn't mean all your code should
like doesn't mean all your code should
be in one function but like this is a
be in one function but like this is a
creation method I'm going I have all the
creation method I'm going I have all the
freaking creation code in this creation
freaking creation code in this creation
method there's going to be a step
method there's going to be a step
function it's going to have all the step
function it's going to have all the step
F code we're going to have like two big
F code we're going to have like two big
functions instead of freaking 30 tiny
functions instead of freaking 30 tiny
little
little
functions
um like build
and okay this is kind of big
I see the aggregation stuff in there as
I see the aggregation stuff in there as
well how much code are we
well how much code are we
at still a bunch of code
okay
generations of bad code
slowly slowly we get
there really
that code
fixed
fixed
[Music]
camera okay we'll leave that for now
camera okay we'll leave that for now
because I don't know if that'll be
better I scare all the viewers away with
better I scare all the viewers away with
this boring ass freaking refactoring of
this boring ass freaking refactoring of
code
code
this is the important thing to be doing
though I mean is basically your freaking
though I mean is basically your freaking
Sim is useless when your code looks like
Sim is useless when your code looks like
what it was
before and we can understand what the
before and we can understand what the
hell's
happening this is dead code
um I'm not going to get rid of these but
um I'm not going to get rid of these but
I'm going to move them
B
moving stuff where it belongs
[Music]
okay I mean it tells you the caliber the
okay I mean it tells you the caliber the
the programmers when they're doing stuff
the programmers when they're doing stuff
like
like
that which is weird this is was
that which is weird this is was
originally Nvidia code you'd expect it
originally Nvidia code you'd expect it
to be decent so I think this is NVIDIA
to be decent so I think this is NVIDIA
researcher code not Nvidia engineer
code so so many useless
methods we're slowly just cutting code
methods we're slowly just cutting code
off just by removing useless
[ __ ] okay so we have physics
pre-step I think there's a
step yeah so we have physics
prep pre physics step
this goes
here
here
okay and then there is a uh a post step
so this is going to be self. m. step of
so this is going to be self. m. step of
actions n do step of
actions n do step of
actions and then the uh the
actions and then the uh the
post physics step is supposed to go
post physics step is supposed to go
after so they broke this up with this
after so they broke this up with this
janky
API with like all of this
freaking crazy
this all this crazy
this all this crazy
stuff and uh this is all it
is so that's a bit more stuff
removed this mean and log looks a lot
removed this mean and log looks a lot
like uh my my own stuff
interesting oh because it is my
interesting oh because it is my
stuff wrong
step um I managed to put this in the
step um I managed to put this in the
wrong spot didn't
I okay we're going to have to we're
I okay we're going to have to we're
going to have to remedy
that my bed
take
take
these this goes in this step function
these this goes in this step function
where is
it is there not a step
function I don't have a step
function I don't have a step
function I assume yeah cuz they have
function I assume yeah cuz they have
this weird super thing okay so this
this weird super thing okay so this
should just go right
should just go right
after create
after create
Sim reset and then step goes right
Sim reset and then step goes right
here death
step there's
step there's
this preep there's
this preep there's
postep and that
postep and that
s m dos
and then this is going to be turn
and then this is going to be turn
kns we'll have to figure out how to do
that okay
Amateur hour
this gets called once
to
oops it's not
oops it's not
bad and this one
see this one is a this one's valid see
see this one is a this one's valid see
they call this in step and in reset and
they call this in step and in reset and
as well as compute observations so these
as well as compute observations so these
ones are valid and I leave those methods
ones are valid and I leave those methods
alone I'm not a nutcase that puts
alone I'm not a nutcase that puts
everything in one method if it means
everything in one method if it means
duplicating all the code it's just like
duplicating all the code it's just like
they had too much redundant
stuff the function gives you like a
stuff the function gives you like a
little name that kind of collapses the
little name that kind of collapses the
code for you but uh you also have to
code for you but uh you also have to
jump around the file just to see what's
jump around the file just to see what's
happening you have to jump all around
happening you have to jump all around
whereas this gives you all your logic
whereas this gives you all your logic
just
cleanly okay
by
D I do M ID
so we have M
so we have M
byd and
byd and
pointer humanoid acid
pointer humanoid acid
perfect and
perfect and
then
then
build
M and
M and
condense condense this Stu a little
condense condense this Stu a little
bit
there great s
okay we're looking uh looking better
okay we're looking uh looking better
already so we've got the creation
already so we've got the creation
function which has a bunch of stuff in
function which has a bunch of stuff in
it there's still probably going to be
it there's still probably going to be
things to
things to
prune we've got the reset
prune we've got the reset
function we've got most of the step
function we've got most of the step
function and then uh I believe compute
function and then uh I believe compute
reward
doesn't even get
used so wherever this is
from res set mhm
okay now this is I think a legit
one Yep this is legit this is needed by
one Yep this is legit this is needed by
reset and
step task obs
root States tar
States what would it
States what would it
return OB obser
ations there we go
humanoid more [ __ ]
I will probably end up putting a couple
I will probably end up putting a couple
of these functions
of these functions
back but they're probably not going to
back but they're probably not going to
be the
same the same functions uh as
before this should
be ODS
be ODS
and this should
be like this
perfect got a few more of these build
perfect got a few more of these build
EB ID is
so what we're going to do here so we
so what we're going to do here so we
have
build key body
names this so this is just going to be
key
bodies
this
this
okay nice and easy
right the self.
right the self.
T
IDs and then we
IDs and then we
do contct and this is contact
bodies all
bodies all
right we delete
this and this is actually
underscore
cont is
all
right this code feels like it was
right this code feels like it was
written by somebody who
written by somebody who
like I don't know first year CS your
like I don't know first year CS your
functions must be 15 to 20 lines Max
now we can actually do stuff so first of
now we can actually do stuff so first of
all this contact B is redundant we
all this contact B is redundant we
already have this defined up
already have this defined up
top I'm sure we'll find tons of other
top I'm sure we'll find tons of other
redundancies haven't even gone through
redundancies haven't even gone through
the like the actual code I've just gone
the like the actual code I've just gone
through the combinations of code reset
through the combinations of code reset
step
uh this doesn't actually get called but
uh this doesn't actually get called but
it seems like a useful thing to
it seems like a useful thing to
have I'm going to put it at the
bottom refresh Sim
bottom refresh Sim
tensor compute observations these are
tensor compute observations these are
both valid render functions
both valid render functions
valid and it camera
boy we know what's happening
here if you were none turn
I think this is fine you're
I think this is fine you're
preferentially you could actually put
preferentially you could actually put
this in
this in
the conditional
but or you would make this entire thing
but or you would make this entire thing
a function to set up the camera ah this
a function to set up the camera ah this
is fine
whatever this is this will be an
whatever this is this will be an
iterative process
oh you got to be kidding
me this is I'd honestly rather repeat
me this is I'd honestly rather repeat
the code
i' honestly I'd rather do
this and the super line will be gotten
this and the super line will be gotten
rid of
rid of
anyways so now from all of that
code uh We've reduced this to and I'm
code uh We've reduced this to and I'm
going to put this I usually put the
going to put this I usually put the
underscore Methods at the top
create
create
Sim right
here now create
Sim this function we're going to
Sim this function we're going to
actually have to figure out because I
actually have to figure out because I
think this is technically this is all
think this is technically this is all
goes in a
knit you
see yeah this I think this all goes in a
see yeah this I think this all goes in a
knit but at the very least we've um we
knit but at the very least we've um we
have reduced
have reduced
this down
to an init method
a couple underscores for refresh and
a couple underscores for refresh and
compute observations that get used a
compute observations that get used a
couple of
couple of
times create Sim which we're probably
times create Sim which we're probably
going to roll into
going to roll into
init and uh you know dramatically
init and uh you know dramatically
compress there is a reset function gy
compress there is a reset function gy
API SL puffer
API SL puffer
API uh there's a step function there's a
API uh there's a step function there's a
render
render
function and then this thingy which
function and then this thingy which
we're probably going to roll
we're probably going to roll
into into
render actually let's just do that
um
um
mids eh we'll figure out that out
later but this is dramatically let's see
later but this is dramatically let's see
how much code we actually ended up with
how much code we actually ended up with
did we compress press it at all I
did we compress press it at all I
deleted a bunch of
deleted a bunch of
stuff so
298 this is
298 this is
724 lines of
code wait no it isn't that was the uh
code wait no it isn't that was the uh
that was the line number hold on
I want to see how much we've shortened
this okay 427
this okay 427
lines and then I believe this is roughly
lines and then I believe this is roughly
the original though I started messing
the original though I started messing
with it a little
bit
bit
552 so we're already down what was that
552 so we're already down what was that
uh 120
uh 120
lines cut like a sixth off of
lines cut like a sixth off of
it little
it little
more I
believe there should be under 500 by the
believe there should be under 500 by the
time I'm done probably a fair bit
shorter going to use AR rest from real
shorter going to use AR rest from real
quick grab a drink and uh then I will be
quick grab a drink and uh then I will be
back for another half hour hour depend
back for another half hour hour depend
we'll see when uh dinner is going to
we'll see when uh dinner is going to
be uh and then yeah keep working on this
be uh and then yeah keep working on this
and then after dinner I will'll be back
and then after dinner I will'll be back
for another couple hours but be right
for another couple hours but be right
back give me a minute or
two
e
e
e
e
e e
let's see what we can figure out from
here so this this is I this calls Isaac
en and Isaac
en NOP this one
this calls JY create
Sim whereas this one
Sim whereas this one
here this attempts to call super. create
here this attempts to call super. create
Sim uh that is not what we would
like up Axis
idx this is just two
so this literally gets used in one place
so this literally gets used in one place
it's just
two so this entire freaking
thing oops right
thing oops right
here this goes in a
here this goes in a
knet now and it is
gigantic but we will solve that problem
gigantic but we will solve that problem
separately and uh we will see you know
separately and uh we will see you know
what what things are
what what things are
redundant and we will actually be able
redundant and we will actually be able
to do
to do
this now we have all the code associated
this now we have all the code associated
with creating an environment finally in
with creating an environment finally in
one
place cuz I have absolutely no idea what
place cuz I have absolutely no idea what
was going on before
was going on before
honestly okay so you create a ground
honestly okay so you create a ground
plane this is fine
plane this is fine
and
and
then create M so all this asset
then create M so all this asset
Shenanigans we don't really
care gy load
care gy load
asset uh okay so there
asset uh okay so there
is asset
PA dur name
huh
huh
wait asset
root that's a bizarre way of loading a
root that's a bizarre way of loading a
file but
file but
okay uh
fine this is then SM
this is fine don't need
this
load fix space link we don't need this
num
num
M's M
M's M
spacing do we have spacing
no we do
no we do
not
uh
bing ah there it is
five we just do faing equal five
okay so these are some end
okay so these are some end
bounds for
bounds for
R and self.
R and self.
nomm we'll look into
that o lots of code let me see if I can
that o lots of code let me see if I can
figure out what this is doing so create
figure out what this is doing so create
four sensors at feet this is making the
four sensors at feet this is making the
end of
end of
instances this is setting do
limits
limits
interesting build PD action scale and
offset we have
offset we have
key bodies
doesn't get used again until down there
doesn't get used again until down there
but actually I'd rather have this
stuff all
wrappers for different slight okay so
wrappers for different slight okay so
they're doing crazy things
they're doing crazy things
here a lot of this is them doing tensor
here a lot of this is them doing tensor
Shenanigans which we may or may not
need let me kind of try to just get a
need let me kind of try to just get a
whole picture of
whole picture of
this real
this real
quick some tensors
okay task Ops joint
observation some some
observation some some
stuff there's a
reset it's pretty simple and then the
reset it's pretty simple and then the
only thing that's complex
only thing that's complex
maybe oh it's not even that bad it's
maybe oh it's not even that bad it's
just actions you have the tensors
just actions you have the tensors
observations wordss
reset okay really this is not that bad
reset okay really this is not that bad
um oh watch uh did I just miss that
um oh watch uh did I just miss that
message for a long time let me
message for a long time let me
see my bad I missed that message uh
see my bad I missed that message uh
watched your PhD video the other day it
watched your PhD video the other day it
was really good think I'll try on some
Hardware think
I'll uh if you're referring to the coin
I'll uh if you're referring to the coin
thing that's a scam that was not
thing that's a scam that was not
me uh if you're referring to using
me uh if you're referring to using
hardware for RL then yeah awesome
RL awesome yeah I mean uh that'll do
RL awesome yeah I mean uh that'll do
pretty good for you we've got in fact
pretty good for you we've got in fact
like just hop in the Discord cuz we have
like just hop in the Discord cuz we have
all sorts of like active RL projects on
all sorts of like active RL projects on
stuff we have a little of Our Own
stuff we have a little of Our Own
Hardware as well we're getting a lot
Hardware as well we're getting a lot
more quite soon um hang on where is
more quite soon um hang on where is
it yeah this is our setup at the moment
it yeah this is our setup at the moment
we've got uh This plus the one I'm on
we've got uh This plus the one I'm on
we've got nine machines with high-end
we've got nine machines with high-end
CPUs and 490s on them and all our M are
CPUs and 490s on them and all our M are
super fast so we're training at hundreds
super fast so we're training at hundreds
of thousands to a million steps a second
of thousands to a million steps a second
generally like thousand times faster
generally like thousand times faster
than most of the field so uh yeah in a
than most of the field so uh yeah in a
pretty good spot for all of
pretty good spot for all of
this and if you've got hardware and you
this and if you've got hardware and you
want to try some cool stuff out you
want to try some cool stuff out you
definitely have lots of fun projects you
definitely have lots of fun projects you
can get involved
in we're going to be getting 40 nodes
in we're going to be getting 40 nodes
pretty soon expanding
out where's this even use
lower this gets
lower this gets
used here lower and upper right and the
used here lower and upper right and the
num per
num per
row so I don't know why it's all the way
row so I don't know why it's all the way
up
up
here so this should be num does this get
here so this should be num does this get
used as well
used as well
so this all goes it's all
misplaced there should be
here yeah a lot of these environments
here yeah a lot of these environments
were uh created and you know Baseline
were uh created and you know Baseline
set by
contributors and we've got stuff like
contributors and we've got stuff like
some classic Atari games this is our
some classic Atari games this is our
implementation that's much faster than
implementation that's much faster than
the original by a contributor we've got
the original by a contributor we've got
uh you know board games type of things
uh you know board games type of things
Connect
Connect
4 we've got like these grid type
4 we've got like these grid type
environments and
environments and
uh I built a couple more complicated
uh I built a couple more complicated
ones as well and we've got a few other
ones as well and we've got a few other
things that are uh you know being added
things that are uh you know being added
at uh some point some point
soon for
slowly getting
slowly getting
cleaner slowly getting cleaner
I mean it's funny how like how much just
I mean it's funny how like how much just
understanding this very complicated Sim
understanding this very complicated Sim
is just a matter of reacting refactoring
is just a matter of reacting refactoring
all this really bad code
we don't need this
we don't need this
super this is what our Isaac en
does we get contact
bodies or
sensors
okay so find
this doesn't get used
ridiculous this doesn't get used
either is it possible to
either is it possible to
prepare a machine learning model that
prepare a machine learning model that
was created as a result of tennis
was created as a result of tennis
matches created as a result of tennis
matches created as a result of tennis
matches
matches
to do what
start
pose e
okay getting
there this never gets
used never gets used
Jim get asset rigid
body they have the same freaking
body they have the same freaking
variable twice for
think we just slowly
think we just slowly
slowly cut out all the bad
slowly cut out all the bad
code and then we can tell what the hell
code and then we can tell what the hell
is going
on it's
here self gim create actor
here self gim create actor
do I have
do I have
my my docks
somewhere was
somewhere was
this create
actor it's really annoying do they have
actor it's really annoying do they have
the API oh they do have the
API create
actor there you
go so
go so
it's n which
it's n which
is end pointer
asset
pose
pose
[Music]
name so then this is
group
filter zero
segmentation
segmentation
ID
zero there we
go now we no longer need those
go now we no longer need those
things hardcoded like that or um you
things hardcoded like that or um you
know
know
whatever I tend to like to split stuff
whatever I tend to like to split stuff
like this
instead set rigid body
color effect
three set char color
or actually
color and I actually do want to keep the
color and I actually do want to keep the
or original just in
or original just in
case
oops now we no longer need set Char
oops now we no longer need set Char
color cuz we already do it
now we have do
prop
actor hey Joseph just to let uh yep I am
actor hey Joseph just to let uh yep I am
aware nope not making a stupid coin
not going to do any that would do
not going to do any that would do
absolutely nothing but burn
absolutely nothing but burn
credibility that would do absolutely
credibility that would do absolutely
nothing I've been getting dumb bot DMS
nothing I've been getting dumb bot DMS
all damn day
all damn day
long really getting old this is the
long really getting old this is the
second time this has happened as
second time this has happened as
well really not much good coming out of
well really not much good coming out of
crypto
space other than just like the main
space other than just like the main
currencies
[ __ ] just waste my time and make me
[ __ ] just waste my time and make me
deal with
deal with
[ __ ] oh fair enough it's just like it
[ __ ] oh fair enough it's just like it
doesn't it just it really just doesn't
doesn't it just it really just doesn't
do anything you
know we've got a a perfectly good
know we've got a a perfectly good
Community Driven project going on
Community Driven project going on
here having some random mean coin
here having some random mean coin
doesn't help
wait DF
prop okay we'll check this
that's
bizarre get crazy
funding if I wanted funding I'd get
funding if I wanted funding I'd get
funding it it's not hard to get
funding it it's not hard to get
funding I'm like I don't want funding at
funding I'm like I don't want funding at
the moment because I don't want the
the moment because I don't want the
strings I'm trying to do puffer
strings I'm trying to do puffer
bootstrapped thank you yeah yeah I we're
bootstrapped thank you yeah yeah I we're
really we're really aiming at fixing RL
really we're really aiming at fixing RL
this year um the goal for the year is
this year um the goal for the year is
that RL is going to be 10 times easier
that RL is going to be 10 times easier
to get working on a new problem in 2025
to get working on a new problem in 2025
and I think we can do it um it pretty
and I think we can do it um it pretty
much it's going to require that puffer
much it's going to require that puffer
gets a little bit of Revenue so we can
gets a little bit of Revenue so we can
start to scale a few things we have a
start to scale a few things we have a
little now we need a little bit more uh
little now we need a little bit more uh
this is technically part of some client
this is technically part of some client
work uh it's going to require that we
work uh it's going to require that we
start scaling the science side efforts
start scaling the science side efforts
up a little bit more we're going to get
up a little bit more we're going to get
a bigger cluster that's going to happen
a bigger cluster that's going to happen
within the next few months um we have
within the next few months um we have
some really nice hyperparameter sweep
some really nice hyperparameter sweep
work that's underway that's looking very
work that's underway that's looking very
promising and then what we're going to
promising and then what we're going to
have to do is start running thousands
have to do is start running thousands
and thousands of experiments worth of
and thousands of experiments worth of
oblations on common algorithms common
oblations on common algorithms common
architectures these sorts of things to
architectures these sorts of things to
really nail down the portions of RL that
really nail down the portions of RL that
are finicky and difficult to Inuit it
are finicky and difficult to Inuit it
and just make things more stable and
and just make things more stable and
more consistent that's the
plan all right so this piece of code
plan all right so this piece of code
here is nuts but we'll leave this alone
here is nuts but we'll leave this alone
for
now it's weird especially because
now it's weird especially because
it's it's only on m0
getting some slack stuff
okay and we do PD action
offset this looks
fine must have putting a lot yeah this
fine must have putting a lot yeah this
is it's a lot of work um especially
is it's a lot of work um especially
recently I had a major health incident I
recently I had a major health incident I
got pneumonia at nups nearly killed me
got pneumonia at nups nearly killed me
um lost close to 20 lbs few weeks ago
um lost close to 20 lbs few weeks ago
but since I've been out I've been uh
but since I've been out I've been uh
just trying to really grind on the
just trying to really grind on the
project and the pro the progress has
project and the pro the progress has
been really nuts um all the
been really nuts um all the
hyperparameter stuff has happened in
hyperparameter stuff has happened in
like the last week and a half we've done
like the last week and a half we've done
some pretty major stuff for a couple of
some pretty major stuff for a couple of
labs um we like we've gotten some nice
labs um we like we've gotten some nice
results for some clients science side
results for some clients science side
efforts are going well we are starting
efforts are going well we are starting
to merge in more and more contributor
to merge in more and more contributor
environments uh everything's kind of
environments uh everything's kind of
where it needs to go it's just a bunch
where it needs to go it's just a bunch
of work as all but that's
fine yeah it was pretty
fine yeah it was pretty
rough yeah nurs rejects three papers
rough yeah nurs rejects three papers
nearly kills me zero out of 10 do not
nearly kills me zero out of 10 do not
recommend do not recommend
[Music]
ss.
ss.
DT okay what do you need DT
for you don't need self. DT you're just
for you don't need self. DT you're just
declaring useless
declaring useless
variables stupid
variables stupid
code take a quick look some
code take a quick look some
DMS schedule meeting
uh week of February 3rd
actor root State doof State tensor
actor root State doof State tensor
sensor
sensor
tensor don't need
this so what's with this that some of
this so what's with this that some of
these are wrapped and some of them are
not these Refreshers should be
not these Refreshers should be
completely redundant because it
completely redundant because it
literally just acquired them
so what do we have
so what do we have
here this is called curing generational
trauma um this is called taking
trauma um this is called taking
generations of PhD students that have
generations of PhD students that have
just wrapped each other's shitty code
just wrapped each other's shitty code
and fixing
it this code is absolutely terrible
gy.
gy.
wrap
wrap
okay how
about self. root States
about self. root States
equals Jim torch. WP tenser
yeah this is Isaac Jim this is like one
yeah this is Isaac Jim this is like one
of the big uh physics and platforms
of the big uh physics and platforms
people
people
use there's Isaac Sim which is more
use there's Isaac Sim which is more
recent but apparently has a ton of
recent but apparently has a ton of
problems lot a lot of research is still
problems lot a lot of research is still
done on this one
done on this one
um so yeah this is going to be a nice
um so yeah this is going to be a nice
bind for puffer a lot of
bind for puffer a lot of
work a lot of work though
yo you miss sensor tensor
complexity is higher with all a garbage
code okay so they have all these
code okay so they have all these
acquires preemptively comment these
acquires preemptively comment these
before deleting
Monday let see what week is
Monday let see what week is
this Monday through
Thursday Google just tried to add my
Thursday Google just tried to add my
credit credit card number to a uh a name
credit credit card number to a uh a name
field good job
Google okay so doof Force tensor
States um Act
humanoid root
States okay they got a bunch of [ __ ]
here do state
here do state
already did
this
pause and sa kind of
long rigid body state
okay contact
force so this is actually you don't want
force so this is actually you don't want
contact force
contact force
tensor
tensor
apparently oops
uh yeah so they don't actually save this
uh yeah so they don't actually save this
one it's actually contact forces
view termination
view termination
buff termination Heights
I think that's all of them
I don't know what their obsession is
I don't know what their obsession is
with doing [ __ ] out of
order like if you're ever tempted to
order like if you're ever tempted to
have like a bunch of lines that are
have like a bunch of lines that are
grouped like you know do the same
grouped like you know do the same
operation on AB B C D and then do the
operation on AB B C D and then do the
same operation on ABC D and then ABC
same operation on ABC D and then ABC
don't freaking do that do operation on a
don't freaking do that do operation on a
AA and then BBB and then CCC and then
DDD much easier to
DDD much easier to
follow so what's this this is root
follow so what's this this is root
States so this literally is this should
States so this literally is this should
go freaking here
sensor
sensor
tensor on its own
okay that's a little better oops
Eugene liked my schedule where I just
Eugene liked my schedule where I just
filled out available all
hours dude what do you think I'm doing
hours dude what do you think I'm doing
I'm just I'm writing code if I'm not
I'm just I'm writing code if I'm not
eating
eating
sleeping or
exercising that's all I'm freaking
doing do that until burnt out take a few
doing do that until burnt out take a few
days off
repeat I got a little trip coming up for
repeat I got a little trip coming up for
next week so Ryan two weeks super hard
next week so Ryan two weeks super hard
and then all I got to do is a couple
and then all I got to do is a couple
hours in the evenings to uh round out
hours in the evenings to uh round out
some client work
some client work
that's it for next
that's it for next
week well most of next week short
week well most of next week short
trip okay so this is not bad this is
better how many of these things do you
better how many of these things do you
think are
used we kind of have to check don't
we well I think I'll leave them for now
we well I think I'll leave them for now
because the observations they need might
because the observations they need might
not be the exact same as the ones that
not be the exact same as the ones that
we
need but I think some of those are going
need but I think some of those are going
to get
deleted okay so from here we got key
bodies and we get our OBS and action
bodies and we get our OBS and action
spaces
spaces
defined we don't need this freaking
defined we don't need this freaking
comment
comment
let's do
this key body ID is
this key body ID is
tensor contact body IDs
tensor all right and then this is just
tensor all right and then this is just
uh render stuff so that's way cleaner
uh render stuff so that's way cleaner
than
than
before now our init function
is still chunky but that's render stuff
is still chunky but that's render stuff
so 172 lines that's not terrible for
so 172 lines that's not terrible for
like the initialization of this
like the initialization of this
complicated 3D scene including the
complicated 3D scene including the
initialization of all the various data
initialization of all the various data
tens that we're going to need not too
tens that we're going to need not too
bad
refresh Sim
refresh Sim
tensor don't know why there's this
tensor don't know why there's this
random
random
space comput
observations compute
observations called with nids and called
observations called with nids and called
without mids
can you pass none is that a
thing hang on
dude what the heck is
dude what the heck is
the all
right okay torch ran
what is the equivalent of colon is there
what is the equivalent of colon is there
like a way to pass the colon
like a way to pass the colon
Operator Let me see
slice of none
how about
this
this
yeah we do this
instead boom
there we
there we
go and exact the same thing here I think
right TS ms. clone
I think it's literally the same thing
I think it's literally the same thing
right
clamp
uhuhuh
uhuhuh
yep so we just saved a whole bunch of
yep so we just saved a whole bunch of
stupid
stupid
logic pretty sure that should be uh same
logic pretty sure that should be uh same
speed as
well uhoh
oh that's such a screw
oh that's such a screw
up oh that's so bad holy
hell
dude what are they doing that's a copy
dude what are they doing that's a copy
right
right
there that's a freaking copy
get out of here
there we go
all right this is a little
better step
physics I'll leave this comment in at
physics I'll leave this comment in at
the moment no idea if it's
relevant we're going to have to
relevant we're going to have to
understand these buffers in a bit I'm
understand these buffers in a bit I'm
sure
and then we got
render all right what are we at
now 323
now 323
lines down almost half of the code so
lines down almost half of the code so
almost half of the code was [ __ ]
it's
impressive I mean it's irritating it's
impressive I mean it's irritating it's
very
very
irritating to have to W through this
irritating to have to W through this
type of
type of
stuff um you can do it
stuff um you can do it
though and you kind of have to cuz
though and you kind of have to cuz
otherwise how the hell do you know
otherwise how the hell do you know
what's going on I can't read the
what's going on I can't read the
original makes no freaking
original makes no freaking
sense I don't know maybe you're smart
sense I don't know maybe you're smart
enough to follow logic that comol loed
enough to follow logic that comol loed
but I'm
not I want to just commit this stuff
not I want to just commit this stuff
real quick
this is completely unrecognizable did I
this is completely unrecognizable did I
push it yes I did
completely
unrecognizable guess let's go look at
unrecognizable guess let's go look at
the original code and figure out how
the original code and figure out how
they do ops Oh wait hold on it's 6:30 I
they do ops Oh wait hold on it's 6:30 I
should go for dinner uh yeah and I'm
should go for dinner uh yeah and I'm
actually I'm getting a bit tired so this
actually I'm getting a bit tired so this
is a perfect spot so I'm going to go for
is a perfect spot so I'm going to go for
dinner I'll be back in roughly an
dinner I'll be back in roughly an
hour and then uh I will let me see it's
hour and then uh I will let me see it's
6:30 so 7:30 I'll probably work on this
6:30 so 7:30 I'll probably work on this
for roughly another hour and a half to 2
for roughly another hour and a half to 2
hours uh and then yeah that'll be the
hours uh and then yeah that'll be the
day so
day so
unfortunately because I got distracted
unfortunately because I got distracted
by Hardware stuff and various other
by Hardware stuff and various other
things I don't think we're going to
things I don't think we're going to
quite finish this whole thing today it's
quite finish this whole thing today it's
probably going to lead into tomorrow a
probably going to lead into tomorrow a
bit but hey you know this was a lot of
bit but hey you know this was a lot of
code that had to be changed and so we're
code that had to be changed and so we're
going to go through and have to test all
going to go through and have to test all
this stuff and uh you know make sure
this stuff and uh you know make sure
we're loading the scene in and uh you
we're loading the scene in and uh you
know that's that's the main thing with
know that's that's the main thing with
all of this stuff so I'll be back in
all of this stuff so I'll be back in
roughly an hour for uh new folks around
roughly an hour for uh new folks around
here all my work is on Huffer dead AI
here all my work is on Huffer dead AI
it's all open source that we do have
it's all open source that we do have
service packages for companies if you
service packages for companies if you
want to help us out for free check out
want to help us out for free check out
the repo give it a star that really
the repo give it a star that really
helps a out a lot you can join the
helps a out a lot you can join the
Discord we've got lots of people all
Discord we've got lots of people all
building cool RL environments including
building cool RL environments including
uh you know we onboard people that
uh you know we onboard people that
haven't done RL before just need a good
haven't done RL before just need a good
programming background and if you want
programming background and if you want
more RL content you can follow me on X
more RL content you can follow me on X
where I have some articles that you can
where I have some articles that you can
only find there though a lot of them are
only find there though a lot of them are
also on this blog right here

Kind: captions
Language: en
we are back
live go ahead and post this
mess going to start by saying no I did
mess going to start by saying no I did
not launch a meme coin
not launch a meme coin
obviously it's a [ __ ] who has stolen my
obviously it's a [ __ ] who has stolen my
branding to impersonate me if you fall
branding to impersonate me if you fall
for this you are an
for this you are an
idiot with that out of the way let's get
idiot with that out of the way let's get
to actual work I've had to deal
to actual work I've had to deal
with that Hardware [ __ ] and a ton of
with that Hardware [ __ ] and a ton of
other stuff today so I'm only just now
other stuff today so I'm only just now
getting to this
getting to this
mess um
cool Okay cool so we have some actual
cool Okay cool so we have some actual
users asking about
users asking about
this and then we've got a whole bunch of
this and then we've got a whole bunch of
freaking Bots that are like oh just you
freaking Bots that are like oh just you
know somebody dropped a
know somebody dropped a
coin oh for [ __ ]
coin oh for [ __ ]
sake did they
just
just
okay that's fine
these are all old
accounts you know I'm not going to like
accounts you know I'm not going to like
go through Banning people because I
go through Banning people because I
think that um it's possible that it's
think that um it's possible that it's
just like random crypto people who saw
just like random crypto people who saw
it and then found it through that cuz I
it and then found it through that cuz I
don't actually know which ones are the
don't actually know which ones are the
stupid and which ones aren't [ __ ]
stupid and which ones aren't [ __ ]
pain in the ass I swear like so much
pain in the ass I swear like so much
dumb [ __ ] comes out of crypto
dumb [ __ ] comes out of crypto
[Music]
[Music]
space let's just go Um let's go get some
space let's just go Um let's go get some
actual stuff done here
um what we're doing at the moment is
um what we're doing at the moment is
we've got Isaac gem which is the GPU SIM
we've got Isaac gem which is the GPU SIM
for control robotics all that
for control robotics all that
Shenanigans and uh we're trying to fix
Shenanigans and uh we're trying to fix
the total mess of code that's typically
the total mess of code that's typically
used with it get something nice and
used with it get something nice and
clean bound to
clean bound to
puffer hopefully have it be pretty fast
puffer hopefully have it be pretty fast
so I got this
so I got this
thing basic
thing basic
implementation this
implementation this
should this should roughly
should this should roughly
handle um yeah this should roughly
handle um yeah this should roughly
handle just like starting a scene in
handle just like starting a scene in
Isaac this is much shorter than before
Isaac this is much shorter than before
as
as
well um I also this step function
well um I also this step function
here is not particularly
here is not particularly
good I think what we're going to do is
good I think what we're going to do is
we're going to get rid of
we're going to get rid of
this and then this will be
this and then this will be
on uh on any other environment using
on uh on any other environment using
this
underscore physics
step I don't even think that that is oh
step I don't even think that that is oh
and it calls this
and it calls this
mess
render okay so we can put this here
render okay so we can put this here
right they just there's so many stupid
right they just there's so many stupid
redundant things that they have uh I
redundant things that they have uh I
don't know what this
don't know what this
is and then then post physics step is
is and then then post physics step is
also not matter so we get rid of
also not matter so we get rid of
this and now we're left with something
this and now we're left with something
pretty nice and
sure Isaac needs this much code dude
sure Isaac needs this much code dude
Isaac has thousands and thousands of
Isaac has thousands and thousands of
lines of garbage wrappers written by
lines of garbage wrappers written by
generations of PhD students wrapping
generations of PhD students wrapping
each other's garbage code without like
each other's garbage code without like
without reading it that's what we're
without reading it that's what we're
currently working on fixing at the
currently working on fixing at the
moment it's not that it needs this much
moment it's not that it needs this much
code to work with puffer it needs this
code to work with puffer it needs this
much code to work at all
period this is half of what I started
period this is half of what I started
with and this doesn't even have anything
with and this doesn't even have anything
in the scene this is what Isaac needs to
in the scene this is what Isaac needs to
load in empty
scene okay
scene okay
so now we get to the humanoid now this
so now we get to the humanoid now this
thing is massive this is A600 line file
thing is massive this is A600 line file
luckily most of it is redundant
[ __ ] I thought based on your file
[ __ ] I thought based on your file
path this is what you wrote what do you
path this is what you wrote what do you
mean based on your file
path yeah like I took an existing
path yeah like I took an existing
wrapper and I cut all the fluff out of
wrapper and I cut all the fluff out of
it the wrapper I started with was twice
it the wrapper I started with was twice
this length
Okay so we've got simple
humanoid yeah I know and we need this
humanoid yeah I know and we need this
cuz like so this is technically this is
cuz like so this is technically this is
for a client um you know there's some
for a client um you know there's some
stuff we're doing for them but the key
stuff we're doing for them but the key
thing that enables it is we need to have
thing that enables it is we need to have
a proper uh proper Isaac gy support and
a proper uh proper Isaac gy support and
puffer now we've been using the shitty
puffer now we've been using the shitty
versions that have a million layers of
versions that have a million layers of
wrappers so far but what I'm trying to
wrappers so far but what I'm trying to
do now which is going to help uh help
do now which is going to help uh help
out you know the other guy that I have
out you know the other guy that I have
on this project is to just distill it
on this project is to just distill it
into something that's
into something that's
actually understandable and doesn't have
actually understandable and doesn't have
a million redundant layers now I'm
a million redundant layers now I'm
trying to figure out how
trying to figure out how
fast crappy versions train at it depends
fast crappy versions train at it depends
on the scene it could be 10,000 it could
on the scene it could be 10,000 it could
be 50,000 it really depends on the scene
be 50,000 it really depends on the scene
um you know that's part of what I'm
um you know that's part of what I'm
fixing now as
well so let me see if I can figure out
well so let me see if I can figure out
what it is that this rapper actually
what it is that this rapper actually
thinks it needs to be
thinks it needs to be
doing cuz every single repo has roughly
doing cuz every single repo has roughly
the same code in
the same code in
it I added this okay so what it does is
it I added this okay so what it does is
it gets GPU state
it gets GPU state
tensors after root State depth of field
tensors after root State depth of field
State tensor I imagine sensor tensor
State tensor I imagine sensor tensor
rigid body tensor contact so it gets a
rigid body tensor contact so it gets a
whole bunch of
tensors
tensors
force gy torch. wrap tensor
wrap
tensor
view maybe it's because Isaac Sim uh
view maybe it's because Isaac Sim uh
Isaac Jim returns a non- torch
Isaac Jim returns a non- torch
tensor that's probably what this
tensor that's probably what this
is they probably have their own tensor
is they probably have their own tensor
format and then this wraps it for uh
format and then this wraps it for uh
this is probably a view that's wrapped
this is probably a view that's wrapped
for torch I would imagine
and we've got
and we've got
refresh why do they refresh all these
refresh why do they refresh all these
they literally just declared
them that's got to be redundant
right I wish is there any Isaac gem API
right I wish is there any Isaac gem API
anywhere I haven't been able to find one
anywhere I haven't been able to find one
if there is one
oh I
oh I
see so if you want the docks they docs
see so if you want the docks they docs
literally come with uh with Isaac so
literally come with uh with Isaac so
maybe that's what we should
maybe that's what we should
do let's just do
this um
and
docks okay
docks okay
and then we should just be able to go
and then we should just be able to go
here and now we have docks lovely that's
here and now we have docks lovely that's
kind of funny that they distribute the
kind of funny that they distribute the
docks just like locally with your
docks just like locally with your
build that's actually kind of
build that's actually kind of
cool I don't think I need to do that
cool I don't think I need to do that
with puffer because I can just have them
with puffer because I can just have them
on the website but it's kind of funny
on the website but it's kind of funny
because then you have you know the
because then you have you know the
version of the docs for your specific
version of the docs for your specific
thing and Nvidia doesn't have to manage
thing and Nvidia doesn't have to manage
it
acquire
Gem and then you create a
Gem and then you create a
Sim for
a
plane probably that's one of the
plane probably that's one of the
things
things
here load
assets okay so this will be where you
assets okay so this will be where you
load in
load in
the
humanoid additional
options does not add it to the
options does not add it to the
simulation it gives you a blueprint okay
simulation it gives you a blueprint okay
and then you can instantiate them
separately the environments are
separately the environments are
physically independent of each other but
physically independent of each other but
are rendered together for easy
are rendered together for easy
monitoring oh that's really
monitoring oh that's really
funny see here I thought that there was
funny see here I thought that there was
like some weird Quirk where you had to
like some weird Quirk where you had to
put them all in the same scene together
put them all in the same scene together
no they just do this to be fancy that's
no they just do this to be fancy that's
funny as hell
okay they literally just do this to be
fancy so you don't have to worry about
fancy so you don't have to worry about
like the initial location you know being
like the initial location you know being
defined in a grid or something like that
defined in a grid or something like that
because it's literally they're all in
because it's literally they're all in
their own separate world it's just
their own separate world it's just
they're rendered
together maybe not wait hold on an
together maybe not wait hold on an
important ability to pack multiple
important ability to pack multiple
instances yeah okay so this is parallel
multiple into a single see I don't know
multiple into a single see I don't know
if this actually does mean putting them
if this actually does mean putting them
in the same
scene the environments are physically
scene the environments are physically
dependent
independent simple procedural
independent simple procedural
API so each M has a Zone coordinate
API so each M has a Zone coordinate
space it's embedded in the global
space it's embedded in the global
simulation
space an actor is simply an instance of
space an actor is simply an instance of
a gy
asset cannot have an actor that does not
asset cannot have an actor that does not
belong to an
environment specify with a querian
okay I do something like
okay I do something like
this create actor arguments after the
this create actor arguments after the
pose are
pose are
optional specify a
name Collision group and collision
name Collision group and collision
filter two bodies will only collide with
filter two bodies will only collide with
each other if they belong to the same
each other if they belong to the same
Collision group oh okay so that's that's
Collision group oh okay so that's that's
interesting so technically what you can
interesting so technically what you can
do is you can just stick all the Bots
do is you can just stick all the Bots
into the same environment if you wanted
into the same environment if you wanted
to into the same sim and just have them
to into the same sim and just have them
not collide with each
other Collision filter two bodies will
other Collision filter two bodies will
not Collide if they have a common bit
not Collide if they have a common bit
set used to filter out self collision
set used to filter out self collision
and multibody
actors so you just set this for all like
actors so you just set this for all like
to be the same thing I
guess one Collision group per
guess one Collision group per
environment
prevents actors in different
prevents actors in different
environments okay so they're actually
environments okay so they're actually
very murky on whether they're sticking
very murky on whether they're sticking
multiple Bots into the same sim or
not so we'll have to look at
that Pres procedural API some
that Pres procedural API some
limitations all environments are created
limitations all environments are created
and populated in sequence you create an
and populated in sequence you create an
environment add all actors to it then
environment add all actors to it then
create another environment that'll act
create another environment that'll act
that's
fine yeah this is all fine
simulate Sim fetch result
Sim step Graphics draw okay so they have
this you can add synchronized frame rate
this you can add synchronized frame rate
okay so simulate fetch results step
okay so simulate fetch results step
graphic draw viewers perfect very
graphic draw viewers perfect very
simple API is actually not
simple API is actually not
bad PhD students wrote a bunch of bad
bad PhD students wrote a bunch of bad
code this on its own not
bad we don't care about the viewer goey
bad we don't care about the viewer goey
for now
load assets this is pretty
simple we'll have uh this will have like
simple we'll have uh this will have like
a standard thing for this is not that
a standard thing for this is not that
bad and then physics
Sim
aggregate allow you to tell physics a
aggregate allow you to tell physics a
set of actors will be clustered
set of actors will be clustered
together you can optimize spatial data
together you can optimize spatial data
operations
operations
modest perform
okay begin aggregate end aggregate like
this only actors from the same
this only actors from the same
environment can be included in an
environment can be included in an
aggregate necessary to specify the
aggregate necessary to specify the
maximum number of rigid bodies and
maximum number of rigid bodies and
shapes the total number of bodies and
shapes the total number of bodies and
shapes in all the actors so this is
shapes in all the actors so this is
actually like we can make one
actually like we can make one
environment put everything into
environment put everything into
and then make it
faster and we can filter Collision so
faster and we can filter Collision so
that they don't collide with each
other actors can have their size
other actors can have their size
scaled we don't care
this is the tensor API here that we're
this is the tensor API here that we're
seeing over
seeing over
there and then we
there and then we
have structured numpy this is incredibly
have structured numpy this is incredibly
smart um they're actually way ahead of
smart um they're actually way ahead of
their time here this is something that I
their time here this is something that I
found out about it's a very Niche
found out about it's a very Niche
feature and I have this in puffer lib
feature and I have this in puffer lib
and is amazing so as expected Nvidia
and is amazing so as expected Nvidia
best
devs nid is a cool company
now
pose velocity okay so this is I don't
pose velocity okay so this is I don't
think that this will be in
torch body States equals
rigid body stay away for an actor and
rigid body stay away for an actor and
for the entire
for the entire
Sim okay so this will actually work I
Sim okay so this will actually work I
think with torch it will give you um
think with torch it will give you um
tensors that it'll give you a dictionary
tensors that it'll give you a dictionary
of tensors and then we can M map these
of tensors and then we can M map these
so we these will be very fast you can
so we these will be very fast you can
edit
edit
these then set the state using the
these then set the state using the
corresponding
corresponding
methods
M oh that's weird
M oh that's weird
you have to set the state so so this is
you have to set the state so so this is
a read
only this is bad this is a
copy we'll look at that later but this
copy we'll look at that later but this
is this is very
bad getting in setting States
bad getting in setting States
entirely on the GP so yeah so they have
entirely on the GP so yeah so they have
get and set but they should just have a
get and set but they should just have a
view so that's
view so that's
bad tensor
bad tensor
API copying data back and forth from the
API copying data back and forth from the
host you're still copying data you're
host you're still copying data you're
just copying it on the
just copying it on the
GPU so this is actually not as welld
GPU so this is actually not as welld
designed little disappointed Nvidia
yeah no special API for
manipulating so what it do you still
manipulating so what it do you still
have to set it or is this a
have to set it or is this a
view simulation setup
view simulation setup
so physics
so physics
State acquire state so you acquire it
State acquire state so you acquire it
right and you wrap the
tensor to update the content of these
tensor to update the content of these
tensor with the latest
State dude
okay so this is a nice little
snippet so this is redundant right over
there rout
positions this is silly
degree of
degree of
freedom for and changed you can get this
freedom for and changed you can get this
as well yep we see that there refresh
as well yep we see that there refresh
set same as the same thing
set same as the same thing
before and then there's an index thing
before and then there's an index thing
for tensors far fair
enough I don't think we need the Jacobi
enough I don't think we need the Jacobi
and I help we get contact
tensors for sensors okay we have all
tensors for sensors okay we have all
sorts of different tensors common
sorts of different tensors common
problems tensor
problems tensor
lifetime tensors creating using pie
lifetime tensors creating using pie
torture subject to garbage collection
make sure that the python will not
make sure that the python will not
garbage clect the object while they're
garbage clect the object while they're
still in
use sharing index tensors with
gy need to convert long tensor to a
gy need to convert long tensor to a
32bit consider this
32bit consider this
code
code
is.2 unwrap tensor function gathers
is.2 unwrap tensor function gathers
information about the py tensor in a
information about the py tensor in a
descriptor that's later passed to JY but
descriptor that's later passed to JY but
it doesn't make a copy of the tensor's
it doesn't make a copy of the tensor's
data tensor is a temporary variable
that's
that's
insane dude what the
hell tensor API is only supported for
hell tensor API is only supported for
physics we don't
care for
sensors I mean this is all the
sensors I mean this is all the
same simulation
same simulation
[Music]
[Music]
tuning okay we'll look through
tuning okay we'll look through
this different
solvers don't need this don't need
solvers don't need this don't need
this and we're pretty much set so that's
this and we're pretty much set so that's
the
the
docks once the docks pass
docks once the docks pass
through make sure we got
a on legs gem
okay that's
cool I'm put these docks over on the
cool I'm put these docks over on the
side monitor
side monitor
somewhere um and we are going to start
somewhere um and we are going to start
on
on
this so I at least have some idea of
this so I at least have some idea of
what is going on and why things are
what is going on and why things are
being
done I'm thinking if I want to just copy
done I'm thinking if I want to just copy
all the code
kind of just want to take all this
kind of just want to take all this
stuff giant ass
stuff giant ass
class and uh pull it into
class and uh pull it into
puffer and start deleting
stuff okay so this is 500
lines of 500 lines
right then the rest of this is this
right then the rest of this is this
weird this ball task which we don't care
weird this ball task which we don't care
about so that's not that
about so that's not that
bad and again most of this is going to
bad and again most of this is going to
be redundant
CL so config Sim
CL so config Sim
pams uh these are not going to end up
pams uh these are not going to end up
being
being
needed unfortunately there's too much
needed unfortunately there's too much
code for me to really even think about
code for me to really even think about
at the moment so I've got to let's just
at the moment so I've got to let's just
strip start stripping
stuff see if there's anything obviously
stuff see if there's anything obviously
redundant in
here task
mobs nothing super obviously bad in here
mobs nothing super obviously bad in here
it's going to be uh it's going to take
it's going to be uh it's going to take
more thorough looking at so we'll take
this n
equals Isaac and
control this is
control
oops and we'll just uh
oops and we'll just uh
do control freak inverse to device Cuda
how did I mess the name of this thing
up look at
up look at
this JY
this JY
Mappy oh no gym API this is
fine table
okay you know what I want to do cuz I'm
okay you know what I want to do cuz I'm
going to be editing the top of this I'm
going to be editing the top of this I'm
going to put this underneath the other
going to put this underneath the other
one it just be
one it just be
easier I don't really want these in
easier I don't really want these in
separate files
separate files
um but it'll it's just going to be
um but it'll it's just going to be
easier cuz at least for the first part
easier cuz at least for the first part
of this I'm going to be relying on U on
of this I'm going to be relying on U on
this end which is a shorter piece of
this end which is a shorter piece of
code so we got
this this graphic
this this graphic
just
false I think we're going to take the
false I think we're going to take the
defaults out
defaults out
of out of
of out of
this because I always hate repeated
this because I always hate repeated
defaults
you're never going to make this on its
you're never going to make this on its
own
really so we then we do Isaac n like
this head L true device
Cuda okay and then we do control
Cuda okay and then we do control
free
free
this
device
R now we have our
n um we are not going to need config
n um we are not going to need config
we're not going to need some
prams six
prams six
engine only used in create I
engine only used in create I
believe yep only used in create so most
believe yep only used in create so most
of these things we're not going to
need plain static friction plain Dynamic
need plain static friction plain Dynamic
friction let me see if I did
these uh no I do not have frictions
but that's
fine what's this oh this the old one
lots of stuff
here numb OBS numb
here numb OBS numb
actions where do these Get
Set set up character
props yeah so this is in setup character
props right
here I don't really like
here I don't really like
methods like this that just jump your
methods like this that just jump your
code all over the place for no
reason I'd rather do this
and then we'll add a asset file
here
here
oops
oops
Yeah so now we have our asset
file if yeah it's literally just
we should just call this SM SMX
we should just call this SM SMX
capsule
path where do they load this
thing they loaded anywhere
thing they loaded anywhere
where ah they do load it
where ah they do load it
perfect but they don't need it right
perfect but they don't need it right
yet so this is completely stupid and
redundant this isn't used at
all and uh this is also completely
all and uh this is also completely
stupid
stupid
here this numb action
you see how like there's just all this
you see how like there's just all this
redundant [ __ ]
redundant [ __ ]
everywhere it's like this isn't making
everywhere it's like this isn't making
the code any more General
the code any more General
it's not really making it more readable
it's not really making it more readable
it's just like taking like the logic and
it's just like taking like the logic and
jumping it all over the file until you
jumping it all over the file until you
can't follow it and W and behold there
can't follow it and W and behold there
are hundreds of lines of redundant code
are hundreds of lines of redundant code
as a result don't do
as a result don't do
this I think I put this into the
this I think I put this into the
wrong hold on is this was this this was
wrong hold on is this was this this was
this right literally the action space is
this right literally the action space is
the same as the uh observation space
the same as the uh observation space
that's uh that's kind of weird oh no
that's uh that's kind of weird oh no
this is the yeah this is the action
this is the yeah this is the action
space and then here we have the
space and then here we have the
observation space cool so uh this goes
here
now
now
ref
ref
hoi OB size I bet you this is not what
hoi OB size I bet you this is not what
it's going to actually be I'm going to
it's going to actually be I'm going to
put these here for now because I you
put these here for now because I you
know we can but ref hoi OBS size what is
this this right
this this right
here all right so we put this
here and then this gets to be a tuple
here and then this gets to be a tuple
with a comma in it so that it's a
with a comma in it so that it's a
multi-element and this looks kind of
multi-element and this looks kind of
silly but we'll do
silly but we'll do
this for
Nows yeah I'll do this okay so now we
Nows yeah I'll do this okay so now we
have our OBS and action spaces we get
have our OBS and action spaces we get
rid of
this does this get used anywhere DF
nope see how much garbage there
is okay so now we actually have
is okay so now we actually have
observation spaces to
observation spaces to
find uh and in
find uh and in
fact it would seem to me that this can
fact it would seem to me that this can
be defined much
earlier yeah this can be defined way
earlier yeah this can be defined way
earlier
like say right after the mend
like say right after the mend
maybe I'd actually prefer to put this
maybe I'd actually prefer to put this
before the
before the
mend H right after the m is good put
mend H right after the m is good put
this up here since we know that this
this up here since we know that this
is this is nice and
is this is nice and
condensed
condensed
okay and uh the rest of this we don't
okay and uh the rest of this we don't
know yet I think that these contact
know yet I think that these contact
bodies can go somewhere
PD
PD
control let get
control let get
used
used
does but what's it
does but what's it
mean p d
control build PD action offset
scale set
okay I don't know what this is what
okay I don't know what this is what
we're going to do is something very
silly watch
silly watch
this
this
ah his hoi which we're using as
ah his hoi which we're using as
a reference
a reference
repository they're all the same code so
repository they're all the same code so
it doesn't really matter which one we
it doesn't really matter which one we
use it's all like PhD students wrapping
use it's all like PhD students wrapping
each other's code all basically the
each other's code all basically the
same but for
same but for
now I'm just going to take this whole
code
and paste it into
GPT and then what was the thing PD
GPT and then what was the thing PD
control what does
view proportional
view proportional
derivative simulate operates actions are
derivative simulate operates actions are
interpreted as Target
interpreted as Target
positions for the PD
positions for the PD
controller or they're interpreted
controller or they're interpreted
directly as forces applied to the depths
directly as forces applied to the depths
of field
actions are interpreted as Target
positions
positions
interesting Okay so
yeah so we have have to just test both
yeah so we have have to just test both
of these we'll test both of these and
of these we'll test both of these and
then probably we'll remove one of
then probably we'll remove one of
them PD control humanoid Locomotion PD
them PD control humanoid Locomotion PD
controls likely more efficient and
controls likely more efficient and
robust are there any roboticist watching
robust are there any roboticist watching
that
know and a low Lev physics
what's the default for
this do we have
this do we have
uh do we have a default for this
thing config
yeah
yeah
true
um the thing is I don't quite want to
um the thing is I don't quite want to
delete this yet because
physics are highly optimized for
this and
this and
stability okay
I'm sold on this for
now okay that's a little bit more code
now okay that's a little bit more code
gone
we still have a bunch of
code debug
is yeah okay we still use
is yeah okay we still use
this plane static friction plane Dynamic
friction doesn't do anything anything to
friction doesn't do anything anything to
just stick them in the init for no
just stick them in the init for no
reason
oops my
oops my
bad hit a caps
lock that's a little more code gone
more code
gone create
M that's all that's left in that
M that's all that's left in that
function so I wouldn't pay something
function so I wouldn't pay something
this big in normally if there were more
this big in normally if there were more
stuff but uh
stuff but uh
num
num
M
spacing
spacing
cool and there we
cool and there we
go I'm trying to just turn this into
go I'm trying to just turn this into
like a like a script there's no reason
like a like a script there's no reason
for it to be as chopped up as this
is so any of these like oneoff methods
is so any of these like oneoff methods
that only get
called build PD
there we go
only gets called in one
spot we'll leave these alone for now
stupid two line
stupid two line
functions only get called
once the hope is as well that when you
once the hope is as well that when you
stick all this stuff together you also
stick all this stuff together you also
can find more redundancy it's way harder
can find more redundancy it's way harder
to find redundancy when your code is
to find redundancy when your code is
like just chopped up and split into tons
like just chopped up and split into tons
of methods that are only called
of methods that are only called
once I mean
once I mean
like doesn't mean all your code should
like doesn't mean all your code should
be in one function but like this is a
be in one function but like this is a
creation method I'm going I have all the
creation method I'm going I have all the
freaking creation code in this creation
freaking creation code in this creation
method there's going to be a step
method there's going to be a step
function it's going to have all the step
function it's going to have all the step
F code we're going to have like two big
F code we're going to have like two big
functions instead of freaking 30 tiny
functions instead of freaking 30 tiny
little
little
functions
um like build
and okay this is kind of big
I see the aggregation stuff in there as
I see the aggregation stuff in there as
well how much code are we
well how much code are we
at still a bunch of code
okay
generations of bad code
slowly slowly we get
there really
that code
fixed
fixed
[Music]
camera okay we'll leave that for now
camera okay we'll leave that for now
because I don't know if that'll be
better I scare all the viewers away with
better I scare all the viewers away with
this boring ass freaking refactoring of
this boring ass freaking refactoring of
code
code
this is the important thing to be doing
though I mean is basically your freaking
though I mean is basically your freaking
Sim is useless when your code looks like
Sim is useless when your code looks like
what it was
before and we can understand what the
before and we can understand what the
hell's
happening this is dead code
um I'm not going to get rid of these but
um I'm not going to get rid of these but
I'm going to move them
B
moving stuff where it belongs
[Music]
okay I mean it tells you the caliber the
okay I mean it tells you the caliber the
the programmers when they're doing stuff
the programmers when they're doing stuff
like
like
that which is weird this is was
that which is weird this is was
originally Nvidia code you'd expect it
originally Nvidia code you'd expect it
to be decent so I think this is NVIDIA
to be decent so I think this is NVIDIA
researcher code not Nvidia engineer
code so so many useless
methods we're slowly just cutting code
methods we're slowly just cutting code
off just by removing useless
[ __ ] okay so we have physics
pre-step I think there's a
step yeah so we have physics
prep pre physics step
this goes
here
here
okay and then there is a uh a post step
so this is going to be self. m. step of
so this is going to be self. m. step of
actions n do step of
actions n do step of
actions and then the uh the
actions and then the uh the
post physics step is supposed to go
post physics step is supposed to go
after so they broke this up with this
after so they broke this up with this
janky
API with like all of this
freaking crazy
this all this crazy
this all this crazy
stuff and uh this is all it
is so that's a bit more stuff
removed this mean and log looks a lot
removed this mean and log looks a lot
like uh my my own stuff
interesting oh because it is my
interesting oh because it is my
stuff wrong
step um I managed to put this in the
step um I managed to put this in the
wrong spot didn't
I okay we're going to have to we're
I okay we're going to have to we're
going to have to remedy
that my bed
take
take
these this goes in this step function
these this goes in this step function
where is
it is there not a step
function I don't have a step
function I don't have a step
function I assume yeah cuz they have
function I assume yeah cuz they have
this weird super thing okay so this
this weird super thing okay so this
should just go right
should just go right
after create
after create
Sim reset and then step goes right
Sim reset and then step goes right
here death
step there's
step there's
this preep there's
this preep there's
postep and that
postep and that
s m dos
and then this is going to be turn
and then this is going to be turn
kns we'll have to figure out how to do
that okay
Amateur hour
this gets called once
to
oops it's not
oops it's not
bad and this one
see this one is a this one's valid see
see this one is a this one's valid see
they call this in step and in reset and
they call this in step and in reset and
as well as compute observations so these
as well as compute observations so these
ones are valid and I leave those methods
ones are valid and I leave those methods
alone I'm not a nutcase that puts
alone I'm not a nutcase that puts
everything in one method if it means
everything in one method if it means
duplicating all the code it's just like
duplicating all the code it's just like
they had too much redundant
stuff the function gives you like a
stuff the function gives you like a
little name that kind of collapses the
little name that kind of collapses the
code for you but uh you also have to
code for you but uh you also have to
jump around the file just to see what's
jump around the file just to see what's
happening you have to jump all around
happening you have to jump all around
whereas this gives you all your logic
whereas this gives you all your logic
just
cleanly okay
by
D I do M ID
so we have M
so we have M
byd and
byd and
pointer humanoid acid
pointer humanoid acid
perfect and
perfect and
then
then
build
M and
M and
condense condense this Stu a little
condense condense this Stu a little
bit
there great s
okay we're looking uh looking better
okay we're looking uh looking better
already so we've got the creation
already so we've got the creation
function which has a bunch of stuff in
function which has a bunch of stuff in
it there's still probably going to be
it there's still probably going to be
things to
things to
prune we've got the reset
prune we've got the reset
function we've got most of the step
function we've got most of the step
function and then uh I believe compute
function and then uh I believe compute
reward
doesn't even get
used so wherever this is
from res set mhm
okay now this is I think a legit
one Yep this is legit this is needed by
one Yep this is legit this is needed by
reset and
step task obs
root States tar
States what would it
States what would it
return OB obser
ations there we go
humanoid more [ __ ]
I will probably end up putting a couple
I will probably end up putting a couple
of these functions
of these functions
back but they're probably not going to
back but they're probably not going to
be the
same the same functions uh as
before this should
be ODS
be ODS
and this should
be like this
perfect got a few more of these build
perfect got a few more of these build
EB ID is
so what we're going to do here so we
so what we're going to do here so we
have
build key body
names this so this is just going to be
key
bodies
this
this
okay nice and easy
right the self.
right the self.
T
IDs and then we
IDs and then we
do contct and this is contact
bodies all
bodies all
right we delete
this and this is actually
underscore
cont is
all
right this code feels like it was
right this code feels like it was
written by somebody who
written by somebody who
like I don't know first year CS your
like I don't know first year CS your
functions must be 15 to 20 lines Max
now we can actually do stuff so first of
now we can actually do stuff so first of
all this contact B is redundant we
all this contact B is redundant we
already have this defined up
already have this defined up
top I'm sure we'll find tons of other
top I'm sure we'll find tons of other
redundancies haven't even gone through
redundancies haven't even gone through
the like the actual code I've just gone
the like the actual code I've just gone
through the combinations of code reset
through the combinations of code reset
step
uh this doesn't actually get called but
uh this doesn't actually get called but
it seems like a useful thing to
it seems like a useful thing to
have I'm going to put it at the
bottom refresh Sim
bottom refresh Sim
tensor compute observations these are
tensor compute observations these are
both valid render functions
both valid render functions
valid and it camera
boy we know what's happening
here if you were none turn
I think this is fine you're
I think this is fine you're
preferentially you could actually put
preferentially you could actually put
this in
this in
the conditional
but or you would make this entire thing
but or you would make this entire thing
a function to set up the camera ah this
a function to set up the camera ah this
is fine
whatever this is this will be an
whatever this is this will be an
iterative process
oh you got to be kidding
me this is I'd honestly rather repeat
me this is I'd honestly rather repeat
the code
i' honestly I'd rather do
this and the super line will be gotten
this and the super line will be gotten
rid of
rid of
anyways so now from all of that
code uh We've reduced this to and I'm
code uh We've reduced this to and I'm
going to put this I usually put the
going to put this I usually put the
underscore Methods at the top
create
create
Sim right
here now create
Sim this function we're going to
Sim this function we're going to
actually have to figure out because I
actually have to figure out because I
think this is technically this is all
think this is technically this is all
goes in a
knit you
see yeah this I think this all goes in a
see yeah this I think this all goes in a
knit but at the very least we've um we
knit but at the very least we've um we
have reduced
have reduced
this down
to an init method
a couple underscores for refresh and
a couple underscores for refresh and
compute observations that get used a
compute observations that get used a
couple of
couple of
times create Sim which we're probably
times create Sim which we're probably
going to roll into
going to roll into
init and uh you know dramatically
init and uh you know dramatically
compress there is a reset function gy
compress there is a reset function gy
API SL puffer
API SL puffer
API uh there's a step function there's a
API uh there's a step function there's a
render
render
function and then this thingy which
function and then this thingy which
we're probably going to roll
we're probably going to roll
into into
render actually let's just do that
um
um
mids eh we'll figure out that out
later but this is dramatically let's see
later but this is dramatically let's see
how much code we actually ended up with
how much code we actually ended up with
did we compress press it at all I
did we compress press it at all I
deleted a bunch of
deleted a bunch of
stuff so
298 this is
298 this is
724 lines of
code wait no it isn't that was the uh
code wait no it isn't that was the uh
that was the line number hold on
I want to see how much we've shortened
this okay 427
this okay 427
lines and then I believe this is roughly
lines and then I believe this is roughly
the original though I started messing
the original though I started messing
with it a little
bit
bit
552 so we're already down what was that
552 so we're already down what was that
uh 120
uh 120
lines cut like a sixth off of
lines cut like a sixth off of
it little
it little
more I
believe there should be under 500 by the
believe there should be under 500 by the
time I'm done probably a fair bit
shorter going to use AR rest from real
shorter going to use AR rest from real
quick grab a drink and uh then I will be
quick grab a drink and uh then I will be
back for another half hour hour depend
back for another half hour hour depend
we'll see when uh dinner is going to
we'll see when uh dinner is going to
be uh and then yeah keep working on this
be uh and then yeah keep working on this
and then after dinner I will'll be back
and then after dinner I will'll be back
for another couple hours but be right
for another couple hours but be right
back give me a minute or
two
e
e
e
e
e e
let's see what we can figure out from
here so this this is I this calls Isaac
en and Isaac
en NOP this one
this calls JY create
Sim whereas this one
Sim whereas this one
here this attempts to call super. create
here this attempts to call super. create
Sim uh that is not what we would
like up Axis
idx this is just two
so this literally gets used in one place
so this literally gets used in one place
it's just
two so this entire freaking
thing oops right
thing oops right
here this goes in a
here this goes in a
knet now and it is
gigantic but we will solve that problem
gigantic but we will solve that problem
separately and uh we will see you know
separately and uh we will see you know
what what things are
what what things are
redundant and we will actually be able
redundant and we will actually be able
to do
to do
this now we have all the code associated
this now we have all the code associated
with creating an environment finally in
with creating an environment finally in
one
place cuz I have absolutely no idea what
place cuz I have absolutely no idea what
was going on before
was going on before
honestly okay so you create a ground
honestly okay so you create a ground
plane this is fine
plane this is fine
and
and
then create M so all this asset
then create M so all this asset
Shenanigans we don't really
care gy load
care gy load
asset uh okay so there
asset uh okay so there
is asset
PA dur name
huh
huh
wait asset
root that's a bizarre way of loading a
root that's a bizarre way of loading a
file but
file but
okay uh
fine this is then SM
this is fine don't need
this
load fix space link we don't need this
num
num
M's M
M's M
spacing do we have spacing
no we do
no we do
not
uh
bing ah there it is
five we just do faing equal five
okay so these are some end
okay so these are some end
bounds for
bounds for
R and self.
R and self.
nomm we'll look into
that o lots of code let me see if I can
that o lots of code let me see if I can
figure out what this is doing so create
figure out what this is doing so create
four sensors at feet this is making the
four sensors at feet this is making the
end of
end of
instances this is setting do
limits
limits
interesting build PD action scale and
offset we have
offset we have
key bodies
doesn't get used again until down there
doesn't get used again until down there
but actually I'd rather have this
stuff all
wrappers for different slight okay so
wrappers for different slight okay so
they're doing crazy things
they're doing crazy things
here a lot of this is them doing tensor
here a lot of this is them doing tensor
Shenanigans which we may or may not
need let me kind of try to just get a
need let me kind of try to just get a
whole picture of
whole picture of
this real
this real
quick some tensors
okay task Ops joint
observation some some
observation some some
stuff there's a
reset it's pretty simple and then the
reset it's pretty simple and then the
only thing that's complex
only thing that's complex
maybe oh it's not even that bad it's
maybe oh it's not even that bad it's
just actions you have the tensors
just actions you have the tensors
observations wordss
reset okay really this is not that bad
reset okay really this is not that bad
um oh watch uh did I just miss that
um oh watch uh did I just miss that
message for a long time let me
message for a long time let me
see my bad I missed that message uh
see my bad I missed that message uh
watched your PhD video the other day it
watched your PhD video the other day it
was really good think I'll try on some
Hardware think
I'll uh if you're referring to the coin
I'll uh if you're referring to the coin
thing that's a scam that was not
thing that's a scam that was not
me uh if you're referring to using
me uh if you're referring to using
hardware for RL then yeah awesome
RL awesome yeah I mean uh that'll do
RL awesome yeah I mean uh that'll do
pretty good for you we've got in fact
pretty good for you we've got in fact
like just hop in the Discord cuz we have
like just hop in the Discord cuz we have
all sorts of like active RL projects on
all sorts of like active RL projects on
stuff we have a little of Our Own
stuff we have a little of Our Own
Hardware as well we're getting a lot
Hardware as well we're getting a lot
more quite soon um hang on where is
more quite soon um hang on where is
it yeah this is our setup at the moment
it yeah this is our setup at the moment
we've got uh This plus the one I'm on
we've got uh This plus the one I'm on
we've got nine machines with high-end
we've got nine machines with high-end
CPUs and 490s on them and all our M are
CPUs and 490s on them and all our M are
super fast so we're training at hundreds
super fast so we're training at hundreds
of thousands to a million steps a second
of thousands to a million steps a second
generally like thousand times faster
generally like thousand times faster
than most of the field so uh yeah in a
than most of the field so uh yeah in a
pretty good spot for all of
pretty good spot for all of
this and if you've got hardware and you
this and if you've got hardware and you
want to try some cool stuff out you
want to try some cool stuff out you
definitely have lots of fun projects you
definitely have lots of fun projects you
can get involved
in we're going to be getting 40 nodes
in we're going to be getting 40 nodes
pretty soon expanding
out where's this even use
lower this gets
lower this gets
used here lower and upper right and the
used here lower and upper right and the
num per
num per
row so I don't know why it's all the way
row so I don't know why it's all the way
up
up
here so this should be num does this get
here so this should be num does this get
used as well
used as well
so this all goes it's all
misplaced there should be
here yeah a lot of these environments
here yeah a lot of these environments
were uh created and you know Baseline
were uh created and you know Baseline
set by
contributors and we've got stuff like
contributors and we've got stuff like
some classic Atari games this is our
some classic Atari games this is our
implementation that's much faster than
implementation that's much faster than
the original by a contributor we've got
the original by a contributor we've got
uh you know board games type of things
uh you know board games type of things
Connect
Connect
4 we've got like these grid type
4 we've got like these grid type
environments and
environments and
uh I built a couple more complicated
uh I built a couple more complicated
ones as well and we've got a few other
ones as well and we've got a few other
things that are uh you know being added
things that are uh you know being added
at uh some point some point
soon for
slowly getting
slowly getting
cleaner slowly getting cleaner
I mean it's funny how like how much just
I mean it's funny how like how much just
understanding this very complicated Sim
understanding this very complicated Sim
is just a matter of reacting refactoring
is just a matter of reacting refactoring
all this really bad code
we don't need this
we don't need this
super this is what our Isaac en
does we get contact
bodies or
sensors
okay so find
this doesn't get used
ridiculous this doesn't get used
either is it possible to
either is it possible to
prepare a machine learning model that
prepare a machine learning model that
was created as a result of tennis
was created as a result of tennis
matches created as a result of tennis
matches created as a result of tennis
matches
matches
to do what
start
pose e
okay getting
there this never gets
used never gets used
Jim get asset rigid
body they have the same freaking
body they have the same freaking
variable twice for
think we just slowly
think we just slowly
slowly cut out all the bad
slowly cut out all the bad
code and then we can tell what the hell
code and then we can tell what the hell
is going
on it's
here self gim create actor
here self gim create actor
do I have
do I have
my my docks
somewhere was
somewhere was
this create
actor it's really annoying do they have
actor it's really annoying do they have
the API oh they do have the
API create
actor there you
go so
go so
it's n which
it's n which
is end pointer
asset
pose
pose
[Music]
name so then this is
group
filter zero
segmentation
segmentation
ID
zero there we
go now we no longer need those
go now we no longer need those
things hardcoded like that or um you
things hardcoded like that or um you
know
know
whatever I tend to like to split stuff
whatever I tend to like to split stuff
like this
instead set rigid body
color effect
three set char color
or actually
color and I actually do want to keep the
color and I actually do want to keep the
or original just in
or original just in
case
oops now we no longer need set Char
oops now we no longer need set Char
color cuz we already do it
now we have do
prop
actor hey Joseph just to let uh yep I am
actor hey Joseph just to let uh yep I am
aware nope not making a stupid coin
not going to do any that would do
not going to do any that would do
absolutely nothing but burn
absolutely nothing but burn
credibility that would do absolutely
credibility that would do absolutely
nothing I've been getting dumb bot DMS
nothing I've been getting dumb bot DMS
all damn day
all damn day
long really getting old this is the
long really getting old this is the
second time this has happened as
second time this has happened as
well really not much good coming out of
well really not much good coming out of
crypto
space other than just like the main
space other than just like the main
currencies
[ __ ] just waste my time and make me
[ __ ] just waste my time and make me
deal with
deal with
[ __ ] oh fair enough it's just like it
[ __ ] oh fair enough it's just like it
doesn't it just it really just doesn't
doesn't it just it really just doesn't
do anything you
know we've got a a perfectly good
know we've got a a perfectly good
Community Driven project going on
Community Driven project going on
here having some random mean coin
here having some random mean coin
doesn't help
wait DF
prop okay we'll check this
that's
bizarre get crazy
funding if I wanted funding I'd get
funding if I wanted funding I'd get
funding it it's not hard to get
funding it it's not hard to get
funding I'm like I don't want funding at
funding I'm like I don't want funding at
the moment because I don't want the
the moment because I don't want the
strings I'm trying to do puffer
strings I'm trying to do puffer
bootstrapped thank you yeah yeah I we're
bootstrapped thank you yeah yeah I we're
really we're really aiming at fixing RL
really we're really aiming at fixing RL
this year um the goal for the year is
this year um the goal for the year is
that RL is going to be 10 times easier
that RL is going to be 10 times easier
to get working on a new problem in 2025
to get working on a new problem in 2025
and I think we can do it um it pretty
and I think we can do it um it pretty
much it's going to require that puffer
much it's going to require that puffer
gets a little bit of Revenue so we can
gets a little bit of Revenue so we can
start to scale a few things we have a
start to scale a few things we have a
little now we need a little bit more uh
little now we need a little bit more uh
this is technically part of some client
this is technically part of some client
work uh it's going to require that we
work uh it's going to require that we
start scaling the science side efforts
start scaling the science side efforts
up a little bit more we're going to get
up a little bit more we're going to get
a bigger cluster that's going to happen
a bigger cluster that's going to happen
within the next few months um we have
within the next few months um we have
some really nice hyperparameter sweep
some really nice hyperparameter sweep
work that's underway that's looking very
work that's underway that's looking very
promising and then what we're going to
promising and then what we're going to
have to do is start running thousands
have to do is start running thousands
and thousands of experiments worth of
and thousands of experiments worth of
oblations on common algorithms common
oblations on common algorithms common
architectures these sorts of things to
architectures these sorts of things to
really nail down the portions of RL that
really nail down the portions of RL that
are finicky and difficult to Inuit it
are finicky and difficult to Inuit it
and just make things more stable and
and just make things more stable and
more consistent that's the
plan all right so this piece of code
plan all right so this piece of code
here is nuts but we'll leave this alone
here is nuts but we'll leave this alone
for
now it's weird especially because
now it's weird especially because
it's it's only on m0
getting some slack stuff
okay and we do PD action
offset this looks
fine must have putting a lot yeah this
fine must have putting a lot yeah this
is it's a lot of work um especially
is it's a lot of work um especially
recently I had a major health incident I
recently I had a major health incident I
got pneumonia at nups nearly killed me
got pneumonia at nups nearly killed me
um lost close to 20 lbs few weeks ago
um lost close to 20 lbs few weeks ago
but since I've been out I've been uh
but since I've been out I've been uh
just trying to really grind on the
just trying to really grind on the
project and the pro the progress has
project and the pro the progress has
been really nuts um all the
been really nuts um all the
hyperparameter stuff has happened in
hyperparameter stuff has happened in
like the last week and a half we've done
like the last week and a half we've done
some pretty major stuff for a couple of
some pretty major stuff for a couple of
labs um we like we've gotten some nice
labs um we like we've gotten some nice
results for some clients science side
results for some clients science side
efforts are going well we are starting
efforts are going well we are starting
to merge in more and more contributor
to merge in more and more contributor
environments uh everything's kind of
environments uh everything's kind of
where it needs to go it's just a bunch
where it needs to go it's just a bunch
of work as all but that's
fine yeah it was pretty
fine yeah it was pretty
rough yeah nurs rejects three papers
rough yeah nurs rejects three papers
nearly kills me zero out of 10 do not
nearly kills me zero out of 10 do not
recommend do not recommend
[Music]
ss.
ss.
DT okay what do you need DT
for you don't need self. DT you're just
for you don't need self. DT you're just
declaring useless
declaring useless
variables stupid
variables stupid
code take a quick look some
code take a quick look some
DMS schedule meeting
uh week of February 3rd
actor root State doof State tensor
actor root State doof State tensor
sensor
sensor
tensor don't need
this so what's with this that some of
this so what's with this that some of
these are wrapped and some of them are
not these Refreshers should be
not these Refreshers should be
completely redundant because it
completely redundant because it
literally just acquired them
so what do we have
so what do we have
here this is called curing generational
trauma um this is called taking
trauma um this is called taking
generations of PhD students that have
generations of PhD students that have
just wrapped each other's shitty code
just wrapped each other's shitty code
and fixing
it this code is absolutely terrible
gy.
gy.
wrap
wrap
okay how
about self. root States
about self. root States
equals Jim torch. WP tenser
yeah this is Isaac Jim this is like one
yeah this is Isaac Jim this is like one
of the big uh physics and platforms
of the big uh physics and platforms
people
people
use there's Isaac Sim which is more
use there's Isaac Sim which is more
recent but apparently has a ton of
recent but apparently has a ton of
problems lot a lot of research is still
problems lot a lot of research is still
done on this one
done on this one
um so yeah this is going to be a nice
um so yeah this is going to be a nice
bind for puffer a lot of
bind for puffer a lot of
work a lot of work though
yo you miss sensor tensor
complexity is higher with all a garbage
code okay so they have all these
code okay so they have all these
acquires preemptively comment these
acquires preemptively comment these
before deleting
Monday let see what week is
Monday let see what week is
this Monday through
Thursday Google just tried to add my
Thursday Google just tried to add my
credit credit card number to a uh a name
credit credit card number to a uh a name
field good job
Google okay so doof Force tensor
States um Act
humanoid root
States okay they got a bunch of [ __ ]
here do state
here do state
already did
this
pause and sa kind of
long rigid body state
okay contact
force so this is actually you don't want
force so this is actually you don't want
contact force
contact force
tensor
tensor
apparently oops
uh yeah so they don't actually save this
uh yeah so they don't actually save this
one it's actually contact forces
view termination
view termination
buff termination Heights
I think that's all of them
I don't know what their obsession is
I don't know what their obsession is
with doing [ __ ] out of
order like if you're ever tempted to
order like if you're ever tempted to
have like a bunch of lines that are
have like a bunch of lines that are
grouped like you know do the same
grouped like you know do the same
operation on AB B C D and then do the
operation on AB B C D and then do the
same operation on ABC D and then ABC
same operation on ABC D and then ABC
don't freaking do that do operation on a
don't freaking do that do operation on a
AA and then BBB and then CCC and then
DDD much easier to
DDD much easier to
follow so what's this this is root
follow so what's this this is root
States so this literally is this should
States so this literally is this should
go freaking here
sensor
sensor
tensor on its own
okay that's a little better oops
Eugene liked my schedule where I just
Eugene liked my schedule where I just
filled out available all
hours dude what do you think I'm doing
hours dude what do you think I'm doing
I'm just I'm writing code if I'm not
I'm just I'm writing code if I'm not
eating
eating
sleeping or
exercising that's all I'm freaking
doing do that until burnt out take a few
doing do that until burnt out take a few
days off
repeat I got a little trip coming up for
repeat I got a little trip coming up for
next week so Ryan two weeks super hard
next week so Ryan two weeks super hard
and then all I got to do is a couple
and then all I got to do is a couple
hours in the evenings to uh round out
hours in the evenings to uh round out
some client work
some client work
that's it for next
that's it for next
week well most of next week short
week well most of next week short
trip okay so this is not bad this is
better how many of these things do you
better how many of these things do you
think are
used we kind of have to check don't
we well I think I'll leave them for now
we well I think I'll leave them for now
because the observations they need might
because the observations they need might
not be the exact same as the ones that
not be the exact same as the ones that
we
need but I think some of those are going
need but I think some of those are going
to get
deleted okay so from here we got key
bodies and we get our OBS and action
bodies and we get our OBS and action
spaces
spaces
defined we don't need this freaking
defined we don't need this freaking
comment
comment
let's do
this key body ID is
this key body ID is
tensor contact body IDs
tensor all right and then this is just
tensor all right and then this is just
uh render stuff so that's way cleaner
uh render stuff so that's way cleaner
than
than
before now our init function
is still chunky but that's render stuff
is still chunky but that's render stuff
so 172 lines that's not terrible for
so 172 lines that's not terrible for
like the initialization of this
like the initialization of this
complicated 3D scene including the
complicated 3D scene including the
initialization of all the various data
initialization of all the various data
tens that we're going to need not too
tens that we're going to need not too
bad
refresh Sim
refresh Sim
tensor don't know why there's this
tensor don't know why there's this
random
random
space comput
observations compute
observations called with nids and called
observations called with nids and called
without mids
can you pass none is that a
thing hang on
dude what the heck is
dude what the heck is
the all
right okay torch ran
what is the equivalent of colon is there
what is the equivalent of colon is there
like a way to pass the colon
like a way to pass the colon
Operator Let me see
slice of none
how about
this
this
yeah we do this
instead boom
there we
there we
go and exact the same thing here I think
right TS ms. clone
I think it's literally the same thing
I think it's literally the same thing
right
clamp
uhuhuh
uhuhuh
yep so we just saved a whole bunch of
yep so we just saved a whole bunch of
stupid
stupid
logic pretty sure that should be uh same
logic pretty sure that should be uh same
speed as
well uhoh
oh that's such a screw
oh that's such a screw
up oh that's so bad holy
hell
dude what are they doing that's a copy
dude what are they doing that's a copy
right
right
there that's a freaking copy
get out of here
there we go
all right this is a little
better step
physics I'll leave this comment in at
physics I'll leave this comment in at
the moment no idea if it's
relevant we're going to have to
relevant we're going to have to
understand these buffers in a bit I'm
understand these buffers in a bit I'm
sure
and then we got
render all right what are we at
now 323
now 323
lines down almost half of the code so
lines down almost half of the code so
almost half of the code was [ __ ]
it's
impressive I mean it's irritating it's
impressive I mean it's irritating it's
very
very
irritating to have to W through this
irritating to have to W through this
type of
type of
stuff um you can do it
stuff um you can do it
though and you kind of have to cuz
though and you kind of have to cuz
otherwise how the hell do you know
otherwise how the hell do you know
what's going on I can't read the
what's going on I can't read the
original makes no freaking
original makes no freaking
sense I don't know maybe you're smart
sense I don't know maybe you're smart
enough to follow logic that comol loed
enough to follow logic that comol loed
but I'm
not I want to just commit this stuff
not I want to just commit this stuff
real quick
this is completely unrecognizable did I
this is completely unrecognizable did I
push it yes I did
completely
unrecognizable guess let's go look at
unrecognizable guess let's go look at
the original code and figure out how
the original code and figure out how
they do ops Oh wait hold on it's 6:30 I
they do ops Oh wait hold on it's 6:30 I
should go for dinner uh yeah and I'm
should go for dinner uh yeah and I'm
actually I'm getting a bit tired so this
actually I'm getting a bit tired so this
is a perfect spot so I'm going to go for
is a perfect spot so I'm going to go for
dinner I'll be back in roughly an
dinner I'll be back in roughly an
hour and then uh I will let me see it's
hour and then uh I will let me see it's
6:30 so 7:30 I'll probably work on this
6:30 so 7:30 I'll probably work on this
for roughly another hour and a half to 2
for roughly another hour and a half to 2
hours uh and then yeah that'll be the
hours uh and then yeah that'll be the
day so
day so
unfortunately because I got distracted
unfortunately because I got distracted
by Hardware stuff and various other
by Hardware stuff and various other
things I don't think we're going to
things I don't think we're going to
quite finish this whole thing today it's
quite finish this whole thing today it's
probably going to lead into tomorrow a
probably going to lead into tomorrow a
bit but hey you know this was a lot of
bit but hey you know this was a lot of
code that had to be changed and so we're
code that had to be changed and so we're
going to go through and have to test all
going to go through and have to test all
this stuff and uh you know make sure
this stuff and uh you know make sure
we're loading the scene in and uh you
we're loading the scene in and uh you
know that's that's the main thing with
know that's that's the main thing with
all of this stuff so I'll be back in
all of this stuff so I'll be back in
roughly an hour for uh new folks around
roughly an hour for uh new folks around
here all my work is on Huffer dead AI
here all my work is on Huffer dead AI
it's all open source that we do have
it's all open source that we do have
service packages for companies if you
service packages for companies if you
want to help us out for free check out
want to help us out for free check out
the repo give it a star that really
the repo give it a star that really
helps a out a lot you can join the
helps a out a lot you can join the
Discord we've got lots of people all
Discord we've got lots of people all
building cool RL environments including
building cool RL environments including
uh you know we onboard people that
uh you know we onboard people that
haven't done RL before just need a good
haven't done RL before just need a good
programming background and if you want
programming background and if you want
more RL content you can follow me on X
more RL content you can follow me on X
where I have some articles that you can
where I have some articles that you can
only find there though a lot of them are
only find there though a lot of them are
also on this blog right here
