Kind: captions
Language: en
We are back
We are back
live. I'm kind of tired
today. Still a bunch of stuff to get
today. Still a bunch of stuff to get
done though. I think we're going to
done though. I think we're going to
see I'm going to try to get at least an
see I'm going to try to get at least an
initial version of this binding out.
initial version of this binding out.
Uh and then there are a few other things
Uh and then there are a few other things
I got to look into today as well. Let's
I got to look into today as well. Let's
see if we can get this done first.
What's wrong with this
thing? Static
thing? Static
int. Uh, this should be pi object.
You turn null for this
You turn null for this
thing. No, you can't.
My long void
pointer when returning type pi op
star a
star redep.
definition. So you can't redefine this
definition. So you can't redefine this
thing. You can just do
thing. You can just do
this. That works.
One M1 worker. We're
One M1 worker. We're
good. Seg faults.
Huh? Okay.
Super, I didn't see your previous
Super, I didn't see your previous
message if there was one. If all I see
message if there was one. If all I see
is what's uh what's
here. Okay, that's saying false.
This what we have. We have
This what we have. We have
uh prototype,
uh prototype,
right? Bar arcs, keyword
arcs. I think that's
fine. Is the signature wrong?
fine. Is the signature wrong?
Do you ever heard of
Do you ever heard of
any OS
dro
dro
especially? No, you just use whatever.
especially? No, you just use whatever.
There's no like you don't need an
There's no like you don't need an
operating
operating
system for that.
system for that.
Like if you want to run stuff that runs
Like if you want to run stuff that runs
on Windows, you use Windows. Otherwise,
on Windows, you use Windows. Otherwise,
you use whatever Linux you want.
Generally, Abuntu is the easiest out of
Generally, Abuntu is the easiest out of
the box.
Well, I can just see where this is
Well, I can just see where this is
seging, right? I forgot I can do that.
If pylong check
val seven
val seven
ah
ah
really n doesn't
get that's weird.
Thought we did this binding. Nums equal
nums. Do I need to pass like empty arms
nums. Do I need to pass like empty arms
or something?
Maybe there's a reason for this. Let's
Maybe there's a reason for this. Let's
see. I didn't think there
was. Now you should be able to just call
was. Now you should be able to just call
this thing
Key is noms.
That's really
weird. Something definitely is not
weird. Something definitely is not
getting passed
getting passed
correctly. Is it the signature?
You need this part. Can I just do
this key work? I just do this
thing. What did we get? Shared method.
thing. What did we get? Shared method.
Bad call flags.
Python C
API parsing arguments and building
API parsing arguments and building
values.
working
on custom Linux
based. Yeah. I don't see how any well
based. Yeah. I don't see how any well
way I don't see how there's any way
way I don't see how there's any way
you're going to get Nate. Like there's
you're going to get Nate. Like there's
no way you're going to get native
no way you're going to get native
support for PC games
support for PC games
working. Like the most you're going to
working. Like the most you're going to
be able to do is run stuff. You're
be able to do is run stuff. You're
probably just going to end up running
probably just going to end up running
stuff via Proton, which is literally
stuff via Proton, which is literally
built into Steam on Linux.
more like a college project.
more like a college project.
Yeah, an operating system is not a
Yeah, an operating system is not a
college project unless you're absolutely
college project unless you're absolutely
sure you know what you're doing.
Unless you're Torbolts, I
guess. I mean, heck, I started neural
guess. I mean, heck, I started neural
MMO as an undergrad
MMO as an undergrad
project. Yeah. Like uh what are we like
project. Yeah. Like uh what are we like
eight years
later? Turned out to be kind of hard.
Good luck.
Oh yeah, you learn
Oh yeah, you learn
plenty. You're setting yourself up for
plenty. You're setting yourself up for
something very difficult, but yeah,
something very difficult, but yeah,
you'll learn a lot of
you'll learn a lot of
stuff. If that's your goal, then yeah,
stuff. If that's your goal, then yeah,
go take on like the most challenging
go take on like the most challenging
things you possibly can. No reason not
things you possibly can. No reason not
to.
What is the damn signature for this
thing? Pi object module. Is this how it
works? Do you need this
works? Do you need this
module? I might have messed up.
module? I might have messed up.
Hang on. What What's the signature on
Hang on. What What's the signature on
like
like
these? Uh yeah, it's got this self thing
these? Uh yeah, it's got this self thing
on
it, which is the module, I
it, which is the module, I
guess. Okay, I messed that up. My
bad. I don't know if you can just have
bad. I don't know if you can just have
keyword args either.
keyword args either.
I think we'll keep the
I think we'll keep the
uh signature. I have
team are you all like good low-level
team are you all like good low-level
systems devs?
systems devs?
So, like building an operating system is
So, like building an operating system is
technically like yeah, there there's an
technically like yeah, there there's an
operating systems course you can take at
operating systems course you can take at
Stanford that'll take you like 40 hours
Stanford that'll take you like 40 hours
a week and you kind of build an
a week and you kind of build an
operating system sort
of. I don't know. I'd probably have fun
of. I don't know. I'd probably have fun
with it at least. Lowle dev is great.
though it gets more fun the better you
though it gets more fun the better you
know what you're
doing. Okay. So this is the state
signature. What I did wrong here? My
signature. What I did wrong here? My
object. You have to add it here,
dummy. That builds
Yay, we
Yay, we
run
run
fuel. Um, I didn't think that we had
fuel. Um, I didn't think that we had
subprocesses though. So, why is it
stalled? Like, what happened?
M
M
workers uh vec
multiprocessing. Uh so this can go to
multiprocessing. Uh so this can go to
native, can
it? And then if this goes to
native, we can actually put a break
native, we can actually put a break
point in here.
Okay.
So yeah, you do get the state. This is
So yeah, you do get the state. This is
just a
just a
pointer. Um this
pointer. Um this
is a thing that you technically have.
So now what we can
So now what we can
do is
like I can do like state equals selfc
like I can do like state equals selfc
state or
state or
whatever.
whatever.
Yeah. And
now I do have to unpack this
now I do have to unpack this
custom. So you will need Python API
shenanigans. Just grab the end code that
shenanigans. Just grab the end code that
I use.
Unpack ends.
Yeah. So, you can't reuse this directly
Yeah. So, you can't reuse this directly
because this is
double. Let me see how bad this is.
So you want this here on a knit,
So you want this here on a knit,
right? You do like a nit grid or
right? You do like a nit grid or
whatever. And
then this key is just going to be like
state. And then we go and get
the the code for unpack
the the code for unpack
M. So I can see
M. So I can see
API handle
object. Yeah, it's something like this.
and go
up. Then you just do
state state
state state
Yeah, that's pretty well
it. And then one is error. So we do like
it. And then one is error. So we do like
this. Okay, so this gives you a state.
this. Okay, so this gives you a state.
Let's see if this runs without blowing
Let's see if this runs without blowing
up.
Yeah. So that runs without blowing up.
Yeah. So that runs without blowing up.
Cool. So now all we have to do is
Cool. So now all we have to do is
um we just have to reformat some code
um we just have to reformat some code
essentially.
We just have to reformat a little bit of
code. Let me see what the current one
code. Let me see what the current one
looks like.
state maze
level. Yes. So this
is so I can pretty much just do this
is so I can pretty much just do this
code in the share, right?
And then all this has to do is randomly
And then all this has to do is randomly
pick an
end on reset
end on reset
and whenever it's
and whenever it's
done. That's not too
done. That's not too
bad. We can do
bad. We can do
that. We'll have to figure out what we
that. We'll have to figure out what we
want to change with this for curriculum
want to change with this for curriculum
learning, but this will be enough for me
learning, but this will be enough for me
to show Aaron. And
to show Aaron. And
um this shouldn't take me very long.
um this shouldn't take me very long.
Let's say I finish
Let's say I finish
this by
this by
six. That gives me time to check.
six. That gives me time to check.
There's one other thing I want to spend
There's one other thing I want to spend
like an hour on
like an hour on
maybe. And then hopefully we can
maybe. And then hopefully we can
actually get a little time to
actually get a little time to
uh figure out what's wrong with our
uh figure out what's wrong with our
machines and set up experiments and all
machines and set up experiments and all
that jazz because there's still some
that jazz because there's still some
stuff we have to figure out. And days go
stuff we have to figure out. And days go
by too fast. It's like you need
by too fast. It's like you need
unlimited dev hours in order to get
unlimited dev hours in order to get
stuff
done. All
right. So, this is your
state levels.
This should be numb
maps. So you get numb maps
here. And then what is size?
size and max
size. I guess you need this kind of in
size. I guess you need this kind of in
both, don't
you? But this is pretty easy.
What's the call
max? Now we do if size is negative
one random
percent. How do you do that actually?
Five and max
size. I think you just assert that max
size. I think you just assert that max
size has to be greater than five.
This could honestly get pasted into the
This could honestly get pasted into the
C as
C as
well. Well, it it will be C. So, it's
well. Well, it it will be C. So, it's
actually very easy to just move this
actually very easy to just move this
back and forth between this and the grid
back and forth between this and the grid
file. It's not bad.
file. It's not bad.
Uh now the thing that I was trying to
Uh now the thing that I was trying to
figure out is a really basic thing. I
figure out is a really basic thing. I
think it's just like
think it's just like
five
five
plus percent max
plus percent max
size minus five. Is this it? Something
size minus five. Is this it? Something
like
this. If this is zero, does it
break? Yeah, it does.
Oh, I see.
We have to make all the maps.
What's the uh the and float
What's the uh the and float
whatever. There's like a common thing
whatever. There's like a common thing
people use for
this. Yeah, it's this
this. Yeah, it's this
thing. You got to divide by the rand
thing. You got to divide by the rand
max.
What's
a
one? It gives you a difficulty.
one? It gives you a difficulty.
Uh you do need an end to uh you need a
Uh you do need an end to uh you need a
temporary
temporary
end. So let's just make
one. Create maze
level. Create maze. Just rely
level. Create maze. Just rely
on height.
I think you do want to enit the
thing max size. Yeah, you do want to
thing max size. Yeah, you do want to
init your thing
init your thing
here.
here.
Um, that's slightly annoying.
Um, that's slightly annoying.
So you just do
n you set max
n you set max
size and then you do indent
grid. And now we can create maze
grid. And now we can create maze
level
level
and size difficulty I that's
fine and we do init
fine and we do init
state on levels of
state on levels of
I max
I max
size and we can do get state
something like this.
something like this.
So that should the
levels And then I think the uh the rest
levels And then I think the uh the rest
of the logic has to go into the end
of the logic has to go into the end
itself,
right? Maybe this will take a little
right? Maybe this will take a little
longer than 40
minutes. It's not that bad.
Yeah, it's not that
bad. I think you need
bad. I think you need
um numb maps as well, right?
Or no, not really.
You want to
You want to
do set state and and then
state rand% num
state rand% num
maps. The x equals
mouse. And then I think the reset
condition is in step
Yes, you return done
here, but you need to reset some
stuff. You actually do call
reset, meaning that can't be breaking
reset, meaning that can't be breaking
anything.
So we'll just
call Why does this thing have an
call Why does this thing have an
extra? It doesn't making up.
And then you can ignore the other
And then you can ignore the other
bit. Okay. So I think we debug this and
bit. Okay. So I think we debug this and
like whatever I broke in here. I think
like whatever I broke in here. I think
that's all the code. I don't think I
that's all the code. I don't think I
missed
missed
anything. We will see. But I think that
anything. We will see. But I think that
that should be
that should be
about what we want.
really wasn't that
bad, right? So, it needs numb maps and
bad, right? So, it needs numb maps and
it needs levels. No big deal.
maps and then state star
levels unknown type state that needs to
levels unknown type state that needs to
be declared I
guess just move this up to the
top incompatible type or set state set
top incompatible type or set state set
state this wants
star. This is just a missing n
percent. This n
percent undeclared
What I
What I
do? This is not
max size.
like
this. Oh yeah, that's just
this. Oh yeah, that's just
dot. And does there a dot max size on
dot. And does there a dot max size on
this? There is,
this? There is,
right? No.
right? No.
And
then how these became columns
then how these became columns
but boom. All right.
but boom. All right.
this thing
this thing
run
run
or do we
seg I really should just build a debug
seg I really should just build a debug
compile mode into this because then I
compile mode into this because then I
wouldn't even have to deal with it
wouldn't even have to deal with it
seging I would just get the error trace.
seging I would just get the error trace.
It's still easy enough with the way this
It's still easy enough with the way this
is
is
though. Uh, I'm guessing I forgot
a Yeah, I'm guessing I forgot some arms
a Yeah, I'm guessing I forgot some arms
maps max
size. Yeah, I definitely just forgot
size. Yeah, I definitely just forgot
some
stuff. Okay, so shared N. It needs num
stuff. Okay, so shared N. It needs num
maps. This is invalid
R and these are all required keywords.
max
max
size and
then is there not a size
par? Yeah, there
is max map size.
We'll call this max
size
consistency. This needs to be mapped as
consistency. This needs to be mapped as
well. I
well. I
guess kind of doesn't
really well.
We will uh leave it for now and we'll
We will uh leave it for now and we'll
see because I think we'll need it in a
second fault
here in a reset. It looks like
cannot access memory
address.
H
H
267. Yeah. So this is in set
267. Yeah. So this is in set
state. It's fall from here.
Um, this got set correctly,
Um, this got set correctly,
right? Hey,
Linky,
Linky,
welcome. I got to figure out that
welcome. I got to figure out that
freaking cluster status like today. I've
freaking cluster status like today. I've
been putting it off because of a lot of
been putting it off because of a lot of
I've been dealing with, but
also. Yes, Star
also. Yes, Star
Puffer. Thanks for that
Puffer. Thanks for that
reminder. If you enjoy all this stuff
reminder. If you enjoy all this stuff
and want to help me out for free, just
and want to help me out for free, just
start the repo. Huffer.ai. Try the repo.
start the repo. Huffer.ai. Try the repo.
Try to hit 2K really helps. That's all.
Oh, this doesn't get
Oh, this doesn't get
set. Yeah, this doesn't get
set. Okay. Right. Right. Because I
set. Okay. Right. Right. Because I
didn't actually
didn't actually
unpack. I didn't assign this to the
unpack. I didn't assign this to the
end. I do end
end. I do end
state end levels equals state like this.
We do
Yes. Cool. And we don't immediately
Yes. Cool. And we don't immediately
crash.
Do we actually get any infos back from
Do we actually get any infos back from
this
thing? I forget whether it just takes a
thing? I forget whether it just takes a
while or
while or
not. No, I think there's something still
not. No, I think there's something still
broken.
So, we're definitely
closer. Let's make sure we're actually
closer. Let's make sure we're actually
calling the logging function
first. Okay, so report interval. Yeah,
first. Okay, so report interval. Yeah,
this should be getting
called. So, this is empty for some
called. So, this is empty for some
reason.
We definitely log though, don't we? Oh,
We definitely log though, don't we? Oh,
we did we forget to increment
we did we forget to increment
n? No, this is valid, right?
n? No, this is valid, right?
So, this is one path
So, this is one path
here. We should just make an add log
here. We should just make an add log
function.
Make an add log
function somewhere after these
function somewhere after these
allocates. Yeah,
allocates. Yeah,
this void add
this void add
log n.
I will
take this
take this
is yeah something like
is yeah something like
this
tick do
There should be a second one which is
There should be a second one which is
running out of uh time. Right.
Well, now it should definitely be
Well, now it should definitely be
logging. The fact that it isn't
logging. The fact that it isn't
is concerning.
I'm not like zeroing this somewhere
I'm not like zeroing this somewhere
stupid,
right? No, this is fine. Okay, so we
right? No, this is fine. Okay, so we
just have to figure out where uh where
just have to figure out where uh where
this is going wrong, I guess.
Just get a break point into this thing.
Just get a break point into this thing.
Maybe
Uh, we're not getting
here. Maybe this
Yeah, there we go.
Where is
step? Is that maybe
set
set
state. Now, none of this stuff should
state. Now, none of this stuff should
mess anything
up. None of this should mess anything up
up. None of this should mess anything up
at
all. You're not calling compute
all. You're not calling compute
observations actually in this, are
you? Oh, no. It gets called here.
you? Oh, no. It gets called here.
gets called
gets called
here. Done as
here. Done as
false. This is done as
true. Reset should clear
terminals. Reset does not clear
terminals. Reset does not clear
terminals, right? Because you need to
terminals, right? Because you need to
wait
Yeah, it gets called here, which is
correct, man. I don't know why this
correct, man. I don't know why this
isn't logging. This is very odd.
Do we not ever hit add
Do we just never
step backstab sol
Okay. What are you
Okay. What are you
programming? This is a procedurally
programming? This is a procedurally
generated maze environment uh for
generated maze environment uh for
Puffer. I've had this for a while. I'm
Puffer. I've had this for a while. I'm
trying to update it to use the native
trying to update it to use the native
Python C API instead of Syon which will
Python C API instead of Syon which will
make this thing way more useful for a
make this thing way more useful for a
lot of the let's say a lot of the
lot of the let's say a lot of the
reinforcement learning testing we do.
reinforcement learning testing we do.
This is a really useful environment and
This is a really useful environment and
uh the Syon is kind of a limiting factor
uh the Syon is kind of a limiting factor
right now. So this will make it a lot
right now. So this will make it a lot
easier once I get this in place.
Do we not increment the tick
Do we not increment the tick
ever?
Wait.
Wait.
Oh, that should technically still work.
Oh, that should technically still work.
I don't know why it wouldn't work
I don't know why it wouldn't work
there. It's better here,
there. It's better here,
but there should be one
agent. Oh, does agents also have to get
agent. Oh, does agents also have to get
set? Hang on. Maybe I uh maybe that's
set? Hang on. Maybe I uh maybe that's
what I
missed. I bet you that's what I
missed. I bet you that's what I
missed. New to programming? You don't
missed. New to programming? You don't
know how people make real apps, for
know how people make real apps, for
loops and if statements, and just print
loops and if statements, and just print
things to the terminal. Well, good news
things to the terminal. Well, good news
for you. Uh, for loops and if statements
for you. Uh, for loops and if statements
are bread and
are bread and
butter,
butter,
like
like
there you might even be able to read
there you might even be able to read
this. You kind of need to know what a
this. You kind of need to know what a
pointer
pointer
is,
is,
but other than that, I'll show you
but other than that, I'll show you
something cool.
something cool.
I love getting new programmers excited
I love getting new programmers excited
about being able to build full stuff
about being able to build full stuff
rather
rather
easily. Okay, so this file here is 325
easily. Okay, so this file here is 325
lines of actual code. In fact, it's
lines of actual code. In fact, it's
going to be even shorter in the new
going to be even shorter in the new
version. In the new
version, I merged this
Whatever. In the new version, it
Whatever. In the new version, it
is. Oh, huh. I guess I didn't update
is. Oh, huh. I guess I didn't update
this one yet, but whatever. It's like
this one yet, but whatever. It's like
less than 300 in the new version. So,
less than 300 in the new version. So,
let me link you
this. This
this. This
is mostly for loops and if
is mostly for loops and if
statements. What does this implement?
massively multi-agent snake that runs in
massively multi-agent snake that runs in
your browser. Each of these snakes is
your browser. Each of these snakes is
also happens to be controlled by a
also happens to be controlled by a
neural network. A little bit more code
neural network. A little bit more code
for that one, but yeah, you can build
for that one, but yeah, you can build
some pretty cool
some pretty cool
stuff with uh very simple
tools. So, point of this stream is I
tools. So, point of this stream is I
kind of just hang around and stream all
kind of just hang around and stream all
my reinforcement learning dev. I'm a
my reinforcement learning dev. I'm a
researcher. My goal is to make
researcher. My goal is to make
reinforcement learning a lot easier than
reinforcement learning a lot easier than
it is
now. And you can build upon stuff like
now. And you can build upon stuff like
this.
Yep. Right there. Got it. That's the
culprit. I'm just going to hardcode it
culprit. I'm just going to hardcode it
here.
How do people make that though? How to
How do people make that though? How to
make
make
people make visual applications? Well, I
people make visual applications? Well, I
linked to the code, didn't
linked to the code, didn't
I? This doesn't seem too bad,
I? This doesn't seem too bad,
right? That's it. It's like 50 lines of
right? That's it. It's like 50 lines of
code with
code with
Rayb. Ray is a very lightweight graphics
Rayb. Ray is a very lightweight graphics
library.
Define some colors. Define a str. Set up
Define some colors. Define a str. Set up
rendering
rendering
client. Couple of for loops in a net
client. Couple of for loops in a net
statement. That's it.
Yeah, I highly highly suggest Rail. Um,
Yeah, I highly highly suggest Rail. Um,
it has bindings for every language
it has bindings for every language
pretty much. It's just a very simple
pretty much. It's just a very simple
API. There's really not that much to
API. There's really not that much to
distract you or to like confuse you.
distract you or to like confuse you.
Just like keep things very simple and
Just like keep things very simple and
you can do a
lot. You just keep things very
simple. Simple isn't bad. You can get a
simple. Simple isn't bad. You can get a
lot done with simple.
Are you supposed to make
applications? Uh so technically what I
applications? Uh so technically what I
do this will run as a desktop
do this will run as a desktop
application as is.
application as is.
You compile it to web assembly using
You compile it to web assembly using
mcript in which is like a JavaScript
mcript in which is like a JavaScript
wrapper that loads a very small amount
wrapper that loads a very small amount
of well you end up with a JavaScript
of well you end up with a JavaScript
wrapper that loads a very small amount
wrapper that loads a very small amount
of binding code around web assembly. Uh
of binding code around web assembly. Uh
you don't really need to deal with any
you don't really need to deal with any
of it though. you can kind of just like
of it though. you can kind of just like
write your C and run it
write your C and run it
wherever. This not every language can do
wherever. This not every language can do
that, right? But languages that you can
that, right? But languages that you can
compile to web assembly are very nice
compile to web assembly are very nice
because then you don't have to deal with
because then you don't have to deal with
writing a bunch of JavaScript. I
writing a bunch of JavaScript. I
wouldn't be able to write the code the
wouldn't be able to write the code the
same way in JavaScript. I'd have to do
same way in JavaScript. I'd have to do
something more complicated because
something more complicated because
JavaScript is too slow.
Seg vault.
Seg vault.
Lovely. At least now we get something.
Why are we so faulting in
CUDA? Like for a video chat application,
CUDA? Like for a video chat application,
can I make that in pure
can I make that in pure
Java?
Java?
Um, it kind of depends what you mean.
Um, it kind of depends what you mean.
like low-level video processing is
like low-level video processing is
absolutely not going to be written in
absolutely not going to be written in
Java. Now if you mean can you write a a
Java. Now if you mean can you write a a
front-end wrapper around like some
front-end wrapper around like some
existing library that's probably in C++
existing library that's probably in C++
actually it's probably f ofmpeg which is
actually it's probably f ofmpeg which is
in a mix of C and assembly uh and has
in a mix of C and assembly uh and has
bindings for other languages then yeah
bindings for other languages then yeah
then you can do
then you can do
that if you want to actually write like
that if you want to actually write like
if you want to do video encoding and
if you want to do video encoding and
stuff probably
not also Java is gen generally really
not also Java is gen generally really
not a fun
language. I do not suggest Java to
language. I do not suggest Java to
anybody ever for any
anybody ever for any
purposes. It also started in Java. It
purposes. It also started in Java. It
was not fun.
comput
comput
J won't seem
weird. Yeah, everyone does that. Job is
weird. Yeah, everyone does that. Job is
not fun.
the A
range. This has got to be like my
range. This has got to be like my
fernal,
right? Oh, I know what I can do.
Unaligned PC
pumped.
Really? Can I compile this thing with
Really? Can I compile this thing with
address
address
sanitizer or is that going to like
sanitizer or is that going to like
compile Python with address sanitizer?
compile Python with address sanitizer?
I think I can, right?
Compile arms.
I think this is like
missing. I think I'm like missing some
missing. I think I'm like missing some
uh is this
LLVM
this system or Python doesn't have
sound. I already have
that. Okay, so that's slightly
that. Okay, so that's slightly
obnoxious.
Yep. These before. This is like some
Yep. These before. This is like some
weird It's like some weirdo alignment
weird It's like some weirdo alignment
issue, isn't it?
Now I don't get the
Now I don't get the
message real invalid
message real invalid
pointer. I never call
realloc and that code is not changed.
This gets
This gets
calked. This ought to be
fine. And you return levels, which is
fine. And you return levels, which is
Yeah. Also fine.
Is it not like
this? That shouldn't be an issue.
How is this throwing an error in the
How is this throwing an error in the
CUDA code? That doesn't make any sense
CUDA code? That doesn't make any sense
to
me. How about
this peak thread kill implementation?
Is this some weirdo thing with the
Is this some weirdo thing with the
Python
API? Oh, this can just literally be any
API? Oh, this can just literally be any
memory.
Yeah. So, F sanitize would fix the whole
Yeah. So, F sanitize would fix the whole
thing.
Um, Malak print
error. Do we actually have a
See, this doesn't actually give
me. Yeah, this doesn't give me anything.
Do you need it in link as
Do you need it in link as
well? Maybe you need it in link as
well. Worth spending a few
well. Worth spending a few
minutes to see if we can um we can get
minutes to see if we can um we can get
this to work because it would just make
this to work because it would just make
debugging everything so much
debugging everything so much
easier. Like is genuinely not hard to
easier. Like is genuinely not hard to
debug if you
debug if you
have address sanitizer. Otherwise, it's
help. Okay. Can I do this?
What?
What?
Um. Oh,
Um. Oh,
dummy. What? Why did you do
dummy. What? Why did you do
this? This is the completely
this? This is the completely
wrong wrong spot, dummy.
There we
go. Should have dg in it,
right? Runtime does not
come first in initial library
list. Is this a
bank? Not being looked early
enough.
enough.
Okay. Oops.
Why is it still giving me stupid
Why is it still giving me stupid
options?
Okay, there we
go. It's not that crashing.
I'm getting some like weird stuff
I'm getting some like weird stuff
happening
happening
in in
torch. Get device count.
Hang on. Can I run like three other
Hang on. Can I run like three other
ends?
I
see patient state.
Okay, that runs.
Got to love how everything in C is easy.
Got to love how everything in C is easy.
Everything in Python is easy. And then
Everything in Python is easy. And then
whenever the two meet, welcome to pain.
So, yeah, this works and somehow the
So, yeah, this works and somehow the
other one doesn't.
app size.
Well, I may as well get the pure C demo
Well, I may as well get the pure C demo
working,
right? I doubt that tells me anything,
right? I doubt that tells me anything,
but maybe
This egg
This egg
false. Wait, this is compiled without
sanitiz breaking on me.
overlay.
And this gets calic
right five by
side. Seems
side. Seems
off. That's what I have in
off. That's what I have in
here. There's my
main. Yeah. No.
main. Yeah. No.
With Oh, no. Create maze level
5x5 11. Yeah.
It's like volon
41. How does that make any sense?
and fight.
It's very weird.
corner.
I don't even need that thing at
I don't even need that thing at
all. I doubt that's the actual problem.
all. I doubt that's the actual problem.
That would be so weird.
Okay, that actually came up on the
screen. M maps.
Also don't need this anymore.
Now pointer passes argument
one.
How end levels
I'm going to do this in the
side. So when I did this
side. So when I did this
here, create the
here, create the
level. Grab a net state.
size agents.
size agents.
You get the
state detected memory
base. Why does render never
base. Why does render never
happen? Oh, because you have to call
happen? Oh, because you have to call
render once.
What's this demo supposed to do?
What's this demo supposed to do?
Is it supposed to
Is it supposed to
be actions of I? You know, it's supposed
be actions of I? You know, it's supposed
to be moving.
Yeah, nothing's really
happening. Is it getting reset every
happening. Is it getting reset every
time?
It's getting reset freaking constantly.
Oh,
There we go.
I only made one level though. So, how is
I only made one level though. So, how is
it
resetting? Uh, it's
not
Was that just because I was controlling
Was that just because I was controlling
it? No, it keep overflows.
513. I don't know what's wrong with this
513. I don't know what's wrong with this
stupid overlay. Like, I'm not even using
it. It must just be getting allocated to
it. It must just be getting allocated to
the wrong size somehow.
the wrong size somehow.
We're not using it
anyways. This seems
fine. Now, do I dare take control of the
fine. Now, do I dare take control of the
puffer?
Yeah, we probably need to fix some
Yeah, we probably need to fix some
things. But uh before I
forget, let's
see. Did we remember to fall in its
see. Did we remember to fall in its
state after we make the
level
level
for I guess that's in binding, isn't it?
Yeah. No, we do call it state on
Yeah. No, we do call it state on
it. Okay.
Oh, hello YouTube folks.
Oh, hello YouTube folks.
This is currently getting a procedurally
This is currently getting a procedurally
generated maze and ported from Syon
generated maze and ported from Syon
bindings to
bindings to
Cbindings so that we can use it as a
Cbindings so that we can use it as a
reinforcement learning benchmark for
reinforcement learning benchmark for
some of the curriculum learning
some of the curriculum learning
algorithm dev that uh has been going on
algorithm dev that uh has been going on
in
Puffer. We're just having a
Puffer. We're just having a
few binding troubles
here. Nothing too
big. Okay.
So, and now it runs locally and see at
So, and now it runs locally and see at
least. Do we actually get a trace?
No, we just get P thread
killed. Yeah, this is not a real trace.
I got to be like screwing up the memory
I got to be like screwing up the memory
in this binding file somehow. You would
in this binding file somehow. You would
think, right?
Oh, wait. Is this I Hang on. Isn't this
Oh, wait. Is this I Hang on. Isn't this
numb
agent? That could be a
problem. No, that's seed.
problem. No, that's seed.
Seed is
fine and it state gets max
size one agent.
I really wish there were a better way to
I really wish there were a better way to
get Python to not just eat all the
get Python to not just eat all the
errors for no apparent reason.
I guess I could go check whether it
I guess I could go check whether it
happens on a knit or on step.
Uh, how do I not get to there? Wait,
Uh, how do I not get to there? Wait,
does it fail right
here? Uh, that just doesn't even make
here? Uh, that just doesn't even make
sense.
Yeah. So, it's not
even This works,
right? Yeah, it is. This
ends. Is it as soon as you load
ends. Is it as soon as you load
it? How would that make any sense?
What if I do
this? Surely can't break
them.
Interesting. So if you import it, it
Interesting. So if you import it, it
breaks before you even get to do
breaks before you even get to do
anything.
anything.
I don't see how you could possibly be
I don't see how you could possibly be
breaking stuff on
import. Um, yeah,
import. Um, yeah,
let's This is super
let's This is super
cursed. This is incredibly incredibly
cursed. This is incredibly incredibly
cursed.
cursed.
Apparently, we have 10 people watching
Apparently, we have 10 people watching
me debug horribly cursed Python
me debug horribly cursed Python
bindings. Welcome, you
bindings. Welcome, you
masochists. Sadist
maybe. I'm going to try something that's
maybe. I'm going to try something that's
kind of out
kind of out
there. There is like this niche bug I am
there. There is like this niche bug I am
aware
aware
of.
of.
Um, there's this like really niche bug.
Um, there's this like really niche bug.
It would be super weird if this were the
It would be super weird if this were the
issue. I don't even need to do all of
issue. I don't even need to do all of
them. I just need to do step,
honestly. Where's
step? Oh, hang on. This returns a bull.
step? Oh, hang on. This returns a bull.
No, but that's the
No, but that's the
agent. This is not supposed to return a
bull. How does that
compile? Could that be it?
I didn't even know you could do
that. You don't need to return
done. Then this step is going to be
done. Then this step is going to be
undefined
because is it
binding.h. So, there's this really niche
binding.h. So, there's this really niche
bug as well. I don't know even know if
bug as well. I don't know even know if
it's remotely related, but um there's
it's remotely related, but um there's
step to find I think it's like some
step to find I think it's like some
random reg x routine in C that can get
random reg x routine in C that can get
screwed
screwed
up.
up.
Um, okay, that
Um, okay, that
runs or that compiles
rather. Okay, we no longer fail on
import, but we still
import, but we still
fail. We fail later, but we still fail.
Do we get an error
message? This is now
CUDA. I don't know how we get CUDA
CUDA. I don't know how we get CUDA
errors from that.
Now, of course, we don't get a
Now, of course, we don't get a
reasonable error message. We still get
reasonable error message. We still get
this peak
kill.
kill.
Why? Why do we get this? Why?
And here I was about to uh I thought
And here I was about to uh I thought
that we'd gotten
that we'd gotten
it. Maybe I should look around for more
it. Maybe I should look around for more
of those. Do we have any other functions
of those. Do we have any other functions
with weird signatures?
with weird signatures?
This is void. This is supposed to be
void. It's just like render step and
void. It's just like render step and
close and stuff, isn't
it? I think that was the only weird
one. Yeah. Rest of these are void.
Step agents allowed to be a bull void
reset. Yeah, everything else is
void. Me rerun the C again. Make sure I
void. Me rerun the C again. Make sure I
didn't break anything there.
didn't break anything there.
I'm sure I did
actually. It's got to be
Cat. This is
done. This is now auto reset.
Yep. So, this runs
now. Doesn't run here though.
Are there any other
Are there any other
um are there any other things that I'm
um are there any other things that I'm
not
setting? Like what else do we set
here? What about like
here? What about like
horizon? I don't see horizon getting set
horizon? I don't see horizon getting set
anywhere.
It gets auto set from
It gets auto set from
this. Wait, does
this. Wait, does
it hang
on? Ryzen doesn't get set here.
max age agent speed. All this stuff is
set. We call this a nit
set. We call this a nit
grid and calling it
state. We don't actually set the state
state. We don't actually set the state
of this effort, do
we? Okay.
Yeah, we don't ever call set state. But
Yeah, we don't ever call set state. But
then the first thing we should do is
then the first thing we should do is
call reset. It should do it.
No. Yeah. This call set
state and levels of index.
which should set width, height,
which should set width, height,
horizon, numb agents, all
that
Any other weird stuff going
on? Max
size. Create maze level.
Width
height width
height width
height size is already set.
height size is already set.
See
grid?
Nope. Really don't see anything wrong.
Also, why is this running in a
Also, why is this running in a
thread? Why do I get like a random
thread? Why do I get like a random
thread kill instead of getting a real
thread kill instead of getting a real
freaking stack price, you know?
now. Do I go back to the address
now. Do I go back to the address
sanitizer?
Hey, where's that LD
line? You know what? Let's learn
line? You know what? Let's learn
something today. What's the reverse
something today. What's the reverse
command? Oh
command? Oh
Control R.
[Music]
[Music]
Uh yeah, that's literally
Uh yeah, that's literally
it. I don't know why. Literally never
it. I don't know why. Literally never
use
that. Asan check
failed. Why is it failing in torch?
When I'm training in CPU
When I'm training in CPU
[Music]
mode, this is failing in get device
mode, this is failing in get device
count. That doesn't make any sense at
count. That doesn't make any sense at
all.
Right. Yeah, that makes absolutely no
Right. Yeah, that makes absolutely no
sense.
Oh, and wait. This is with Puffer Pong
Oh, and wait. This is with Puffer Pong
as well. So, you just straight up can't
as well. So, you just straight up can't
run a dress sanitizer with
run a dress sanitizer with
um with torch, I guess. Yeah, that
um with torch, I guess. Yeah, that
sucks.
one map chunk. I'm unm
At least doesn't fail on import
anymore. I don't think it fails on like
anymore. I don't think it fails on like
any of the operations.
related to the end
either. Yeah, back resets just fine,
either. Yeah, back resets just fine,
right? The back
step. Yeah, I know. See, it gets through
step. Yeah, I know. See, it gets through
back reset, but then it fails before
back reset, but then it fails before
backst step somehow.
I'm not even doing anything weird memory
I'm not even doing anything weird memory
wise. I don't think I am. At
wise. I don't think I am. At
least you can numb maps
least you can numb maps
levels. I didn't mess up these two
levels. I didn't mess up these two
things, right?
Yeah, you have num maps and num
Yeah, you have num maps and num
ms, right? This gets num ms. This one
ms, right? This gets num ms. This one
has num
maps. Maps, max size, size, max
maps. Maps, max size, size, max
size, num max.
My internet's
My internet's
down. Hello. Are we
back? Internet cut out for a
second. Uh oh.
This might be reream switching servers
This might be reream switching servers
on
us. Yeah, internet's
us. Yeah, internet's
fine. Okay, I think it's
fine. Okay, I think it's
back. I think we're
back. I think we're
good. That was
good. That was
weird. Get out of here, Twitchbot.
weird. Get out of here, Twitchbot.
I build the
bots. This is a tough
bots. This is a tough
one. This is definitely a tough one.
Let me make sure this is exactly how I
Let me make sure this is exactly how I
was doing it
before. I didn't miss anything,
right? And gets assigned max
right? And gets assigned max
size, numbum agents, vision,
size, numbum agents, vision,
speed, discretize. And I assign all
speed, discretize. And I assign all
these things in the init grid function.
Now then you pull a
Now then you pull a
knit. Just make double
sh. Yeah, these are just there
now.
now.
Oh, that might be it right there.
I just pasted these at the
I just pasted these at the
bottom. That could be
bottom. That could be
it. That could totally be on me.
bizarrely
bizarrely
slow. Do
this. There we
this. There we
are. My
are. My
bad. Uninitialized variable.
I'm trying to think if there's anything
I'm trying to think if there's anything
I could have done to prevent that.
Where does that even factor
in? I'm sure that this gets used in a
in? I'm sure that this gets used in a
memory allocation somewhere. So, I
memory allocation somewhere. So, I
thought I was allocating the memory, but
thought I was allocating the memory, but
I wasn't because it was
zero. Um, that was
silly. Let's see whether uh this does
silly. Let's see whether uh this does
anything now.
Believe we had some baselines for
Believe we had some baselines for
comparison at some point earlier today,
comparison at some point earlier today,
didn't we?
Let me find the graph that I had from
Let me find the graph that I had from
earlier
today. I think it was this. I think we
today. I think it was this. I think we
got like 80%
got like 80%
in 100 mil steps
in 100 mil steps
before. So, we're not doing that right
now. I have to see if it's apples to
now. I have to see if it's apples to
apples, though.
Also, while we're
Also, while we're
here, we may as well
um we should have a neural MMO
um we should have a neural MMO
experiment still
running. Yeah. Okay. Something
running. Yeah. Okay. Something
definitely wrong. These tests are not
definitely wrong. These tests are not
since we added the advantage filtering
since we added the advantage filtering
stuff has not been working fully
correctly. This is still training but
correctly. This is still training but
it's not training as quickly as
before. But this will pass for
before. But this will pass for
um interface. So like we can actually
um interface. So like we can actually
test the interface at
test the interface at
least and then I will have to deal with
least and then I will have to deal with
the rest of this. I think we shipped
the rest of this. I think we shipped
this for
this for
now. Uh let me double check really
quick. Max map size
n maps. No, I think this is correct. I
n maps. No, I think this is correct. I
think these were the same settings we
think these were the same settings we
were using.
Not like zeroing out the reward or
Not like zeroing out the reward or
anything. Dumb,
anything. Dumb,
right? Red
right? Red
counts. No, that's fine.
Okay. Well, we will leave this be.
Okay. Well, we will leave this be.
Actually, this is not bad. I'm seeing
Actually, this is not bad. I'm seeing
now that we're only at 100 mil. This is
6. That's lower than before, but it's
6. That's lower than before, but it's
not like ridiculously low.
And it's possible we played with some
And it's possible we played with some
other stuff in the
other stuff in the
meantime. All
meantime. All
right,
cool. I'm satisfied with that.
Cool. So,
Cool. So,
um, let me switch gears to something
um, let me switch gears to something
real
quick. Do we have Isaac on here?
quick. Do we have Isaac on here?
Now, we don't have any of this stuff set
Now, we don't have any of this stuff set
up. That's
unfortunate. Let me go get all that. I
unfortunate. Let me go get all that. I
have to
have to
uh we shipped some code a while ago on
uh we shipped some code a while ago on
robotic
robotic
stuff and I just have to make sure
stuff and I just have to make sure
uh I just have to make sure
that it works the way we thought it
did. So, some folks are having some
did. So, some folks are having some
trouble loading
trouble loading
it. No, Isaac thing in
it. No, Isaac thing in
here. I think I just put it in the repo,
maybe. Let me go find the exact one.
Let me find the link and then we will go
Let me find the link and then we will go
do that.
It's not covered chat. It was nice and
It's not covered chat. It was nice and
quiet tonight.
Don't want to redo the whole container.
Don't want to redo the whole container.
I just want to get this one thing
I just want to get this one thing
running.
We'll see if that is enough to uh to run
it.
What? Let me also find the model that we
What? Let me also find the model that we
trained.
trained.
So, we're going to see if we can load
So, we're going to see if we can load
that in.
Can you copy a
link? Whatever.
We will
We will
um grab the
um grab the
policy. We having connectivity problems
again. Stream shows it's fine, but X now
again. Stream shows it's fine, but X now
shows it's
offline. So this is a uh animation
offline. So this is a uh animation
generation
generation
model. It goes through a physics sim. It
model. It goes through a physics sim. It
uses reinforcement learning to correct
uses reinforcement learning to correct
motions by like running the physics and
motions by like running the physics and
making sure that it makes sense.
Uh all I got to do on this just a real
Uh all I got to do on this just a real
quick job. I have to uh make sure that
quick job. I have to uh make sure that
this thing actually runs the way uh we
this thing actually runs the way uh we
expect it to because some folks using
expect it to because some folks using
this were having some trouble.
a lot of checkpoints.
Let's delay this
one. 37
Right. Have to get Isaac
Right. Have to get Isaac
gem. It's
gem. It's
annoying. It is quite easy to get at
annoying. It is quite easy to get at
least.
I thought I had it in
the Yeah, I do have it there, right?
All right. What dependency did I forget?
probably just a case that this Um,
some
sim. Is this a pip install? Is this in
sim. Is this a pip install? Is this in
the dependencies here?
Let me just ask him if he's around.
Oh, wait. This is the wrong one, isn't
Oh, wait. This is the wrong one, isn't
it? Yeah. Yeah. Yeah. It's not warp.
it? Yeah. Yeah. Yeah. It's not warp.
It's
It's
whatever. What did he name this?
should
be. Yeah, this is me being
dumb. What did you call
this? Oh, it is morph, isn't it?
This this is definitely killing editing
This this is definitely killing editing
Yes.
Maybe there's a morph
on. See anything?
and try this one.
Yeah, this is set up with Pixie
Yeah, this is set up with Pixie
annoyingly.
There's like so many domain specific
There's like so many domain specific
applications that we could make work.
applications that we could make work.
It's just there's like so much sludge to
It's just there's like so much sludge to
wade
wade
through. This is after cleaning
through. This is after cleaning
everything up.
takes forever.
The unit code
The unit code
um loading is kind of funny
though. Oh, did I miss a
though. Oh, did I miss a
message? I don't know when that was
message? I don't know when that was
from. Is that Did I miss that from a
from. Is that Did I miss that from a
long time ago? No. Four minutes. All
long time ago? No. Four minutes. All
right. I just started understanding RL
right. I just started understanding RL
implementation of breakout
implementation of breakout
DQN on your ocean breakout.
I want to know if it does a fire
I want to know if it does a fire
reset on it. Yeah, it'll auto
reset on it. Yeah, it'll auto
reset.
reset.
So, I forget what fire reset. I think
So, I forget what fire reset. I think
that's the
uh is that when it like it'll fire
uh is that when it like it'll fire
automatically? If so,
automatically? If so,
yes. It can't just sit around and like
yes. It can't just sit around and like
keep the ball on the paddle. Also, the
keep the ball on the paddle. Also, the
environment will auto reset. You don't
environment will auto reset. You don't
need to reset it. You will get the done
need to reset it. You will get the done
signal back from the environment, but
signal back from the environment, but
you will not need to reset
you will not need to reset
it if that
helps. I believe that's on latest
helps. I believe that's on latest
version as well. Uh the 2.0
version as well. Uh the 2.0
version, it may or may not fire the ball
version, it may or may not fire the ball
on its own. I forget whether we have
on its own. I forget whether we have
that on 2.0. Definitely the dev branch.
that on 2.0. Definitely the dev branch.
Uh it fires on its
Uh it fires on its
own. Either way, it'll auto
own. Either way, it'll auto
reset. Yeah, I just I missed that for a
reset. Yeah, I just I missed that for a
few minutes. My bad. I had windows
few minutes. My bad. I had windows
covering the chat
covering the chat
up. I have like way too many random
up. I have like way too many random
projects floating around in my head at
projects floating around in my head at
the moment. need to like finish this
the moment. need to like finish this
stuff up, fix the cluster, and uh set
stuff up, fix the cluster, and uh set
aside some good dev time to fix all the
aside some good dev time to fix all the
things I've been working on lately.
All good. Thanks for entering. Yep.
Where is
Jim? Oh, inside VS Code. We don't need
Jim? Oh, inside VS Code. We don't need
that.
I thought I had these already actually.
I thought I had these already actually.
Don't I do I not have these Ready?
torch. So, I do need to get that working
keep it rust.
Maybe I can just do this.
Yeah. So this is supposed to be the
Yeah. So this is supposed to be the
specific model I guess right
Where is the art on this?
So that's the individual motion file.
You
found I need to go get the data files,
found I need to go get the data files,
don't I?
Uh, how do you unzip these too?
Interesting. Give it a second, I guess.
It's kind of crazy that this
works. That's like a ridiculously hard
works. That's like a ridiculously hard
motion.
work. Great. This gives me a hard
What the hell happened to my
What the hell happened to my
button?
Okay. Well, whatever the hell that
Okay. Well, whatever the hell that
was didn't freaking work.
Much
easier. Uh, this looks to be a different
easier. Uh, this looks to be a different
format
though. pickle files, right?
I'll have to check back with him.
Okay. Well, I got this up and running.
Okay. Well, I got this up and running.
At least I need to figure out the uh the
At least I need to figure out the uh the
data. Kim will tell me what the data
data. Kim will tell me what the data
format was for this. No big deal. Um
format was for this. No big deal. Um
what time is it? 7:43.
what time is it? 7:43.
Yeah, I think we've got this is enough
Yeah, I think we've got this is enough
that we'll be able to quickly sort this
that we'll be able to quickly sort this
out tomorrow.
send a quick message on that and then we
send a quick message on that and then we
will uh I'll take two and then we will
will uh I'll take two and then we will
do some other
All
right, that's set. There's the restroom
right, that's set. There's the restroom
real quick. And then I
real quick. And then I
think we do also have to fix the damn
cluster. So that might be more of a
cluster. So that might be more of a
tomorrow morning kind of a thing.
tomorrow morning kind of a thing.
We will
We will
see. There's definitely still some stuff
see. There's definitely still some stuff
I need to finish
I need to finish
tonight. Tomorrow might be a lot of
tonight. Tomorrow might be a lot of
cluster depth.
Um, I'll be right back and then we'll
Um, I'll be right back and then we'll
see what we're going to do. One second.
Well, of course I checked my texts and I
Well, of course I checked my texts and I
have more bug messages for stuff I am
have more bug messages for stuff I am
supporting. So, I'm going to go deal
supporting. So, I'm going to go deal
with that one. This one should actually
with that one. This one should actually
be quick.
And then hopefully I'll at least have
And then hopefully I'll at least have
like an hour to
like an hour to
do a little bit of follow-up stuff on
do a little bit of follow-up stuff on
the main
repo. We still have some things to fix
repo. We still have some things to fix
there as
well. Get the
well. Get the
Slack. Find the repo.
Slack. Find the repo.
See if they've given me repro
instructions.
Okay. Dev branch
random loop of random actions without
random loop of random actions without
sampling. It seems that there is no fire
sampling. It seems that there is no fire
reset
reset
as the OBS remains the same. Yeah,
as the OBS remains the same. Yeah,
that's possible. Um I think on the main
that's possible. Um I think on the main
2.0 I'm pretty sure that we didn't it
2.0 I'm pretty sure that we didn't it
there yet?
there yet?
Uh without sampling fire equals
Uh without sampling fire equals
one. If you sample random actions, it
one. If you sample random actions, it
should
fire. It's just in there as uh as one of
fire. It's just in there as uh as one of
the actions it can
the actions it can
take. Let me find it for you.
Okay. So, no op is zero, fire is one,
Okay. So, no op is zero, fire is one,
left is two, and right is
left is two, and right is
three in the uh the
code.
Yeah. And you're getting ops remain the
Yeah. And you're getting ops remain the
same.
Check if it I rejected when the sampler
Check if it I rejected when the sampler
gives
one. Oh, okay. I see. Yeah. So, we
one. Oh, okay. I see. Yeah. So, we
changed this.
changed this.
Um, in
Um, in
2.0 it works, I believe, like breakout
2.0 it works, I believe, like breakout
does without that wrapper. And then we
does without that wrapper. And then we
realized that what can happen is if you
realized that what can happen is if you
get really bad hyperparameters,
get really bad hyperparameters,
uh, you can never fire the ball. So you
uh, you can never fire the ball. So you
never get any score and it breaks
never get any score and it breaks
logging. So I just made it auto fire
logging. So I just made it auto fire
after that because it really doesn't
after that because it really doesn't
change anything with the learning
change anything with the learning
problem if you think about it. And it
problem if you think about it. And it
just like prevents that annoying edge
just like prevents that annoying edge
case from happening.
case from happening.
It would be the type of thing where
It would be the type of thing where
you'd run like a sweep of 50 experiments
you'd run like a sweep of 50 experiments
and then one would like hang with no
and then one would like hang with no
data because, you know, you need at
data because, you know, you need at
least some data to log and it's just
least some data to log and it's just
sitting there not firing the
ball. But that doesn't happen with good
ball. But that doesn't happen with good
hyperparameters. That only happens if
hyperparameters. That only happens if
you're like sweeping arbitrary
you're like sweeping arbitrary
hyperparameters and your model's really
hyperparameters and your model's really
bad.
Also, the whole code for Breakout
Also, the whole code for Breakout
is I guess it's kind of long. We did
is I guess it's kind of long. We did
some like stuff on the physics in here
some like stuff on the physics in here
like to improve cuz the original Atari
like to improve cuz the original Atari
has a bunch of physics bugs. So, we
has a bunch of physics bugs. So, we
tried to improve on that a little bit.
tried to improve on that a little bit.
So, there's some extra physics in here,
but 2.0 is current. Yeah, 2.0 0 is the
but 2.0 is current. Yeah, 2.0 0 is the
current version that same people use
current version that same people use
unless you're trying to do like bleeding
unless you're trying to do like bleeding
ed edge dead stuff on the version of
ed edge dead stuff on the version of
puffer lib that I'm allowed to break
puffer lib that I'm allowed to break
without notice. So
without notice. So
uh 2.0 know is now
uh 2.0 know is now
like January, February, March, April is
like January, February, March, April is
four months behind
four months behind
uh is four months behind dev and we have
uh is four months behind dev and we have
a lot of new cool new stuff in dev. But
a lot of new cool new stuff in dev. But
it's also a mess and like I need to
it's also a mess and like I need to
clean up a whole bunch of stuff before
clean up a whole bunch of stuff before
everything is good and stable there cuz
everything is good and stable there cuz
our release cycles are pretty long. You
our release cycles are pretty long. You
know, we we usually do like six month
know, we we usually do like six month
release cycle or
release cycle or
whatever and then there's a lot of stuff
whatever and then there's a lot of stuff
in those
releases. 2.0 is also the default
releases. 2.0 is also the default
branch. So that's what you'll get if you
branch. So that's what you'll get if you
just know clone the
just know clone the
basic clone it and like don't branch
Okay, I need
the I need this
the I need this
thing public, right?
I need that file. I guess
Let me figure out where that file comes
from. It's this random data file.
Oh, it didn't add me to the G
drive. Is this in the
It's not in here. Target
is All
right. Whatever. Can't test this until
right. Whatever. Can't test this until
they give me access to data files. So,
they give me access to data files. So,
we get a little bit of a repeat for now.
Um, so the main
Um, so the main
thing there are a few things I want to
thing there are a few things I want to
do, but really the biggest most
do, but really the biggest most
important thing at the moment
important thing at the moment
is figuring
is figuring
out the perf. We're
seeing Yeah, this episode return kind of
seeing Yeah, this episode return kind of
just gets screwed up.
It's not like anything is horrible early
It's not like anything is horrible early
on
on
here. There's a big entropy crash here,
here. There's a big entropy crash here,
but it's already dead by
then. This Okay, value loss spike could
then. This Okay, value loss spike could
explain
something. I guess I want to just run
something. I guess I want to just run
some
some
basic basic experiments real quick.
But with this, it could definitely be
But with this, it could definitely be
the
same. Let's do actually
token.
This still
works. 20 million steps. Yep, this still
works. 20 million steps. Yep, this still
totally works.
Oh, break up's
Oh, break up's
broken. How'd that happen?
Yeah, that's definitely broken.
Um, cool. Cuz I had this working earlier
Um, cool. Cuz I had this working earlier
today.
Yeah, this is off. So, this shouldn't be
Yeah, this is off. So, this shouldn't be
affecting
anything. Horizon of
64. Yeah, this is also the
same. Uh this is also wait native
Entry
Entry
processing. That shouldn't be it.
if we can see it
here. 10 12 20
40. That's a weird index.
Oh, no. That's
2048. Yeah, that makes sense.
Why are the first ones on the
zero? That's definitely weird.
Okay. Zero through this, right?
Oh, you don't need to zero this. This is
Oh, you don't need to zero this. This is
bad. Yeah, don't zero this.
Hey, what is
this? Uh, this thing breaks somehow.
Okay. Yeah. So in this case pull
Okay. Yeah. So in this case pull
is these ones are all Yeah. Okay.
indices. Now it's at
4096 on episode lengths. Is supposed to
4096 on episode lengths. Is supposed to
be
This is supposed to get zeroed, I
guess. Yeah.
Okay. 61 144
rows. So there's got to be an assert
rows. So there's got to be an assert
there, I think. But this should be
there, I think. But this should be
correct. This gives you precisely
Like you're missing one step at the end
Like you're missing one step at the end
of this trajectory.
But it's otherwise
okay. This makes sense.
use this
use this
for that's just
for that's just
logs f length f indices
Yes. I think we use that
Now we
Yeah, this seems
fine. We do batch rows.
for all your data.
Let me check a couple
things. Does this work?
Yeah, it
Yeah, it
does. So, this
trains. So, I'm probably batching
trains. So, I'm probably batching
something wrong, right? There's probably
something wrong, right? There's probably
like some edge
case. Yeah, cuz this matches like the
case. Yeah, cuz this matches like the
previous
solves. Oh, I didn't see that. I got
solves. Oh, I didn't see that. I got
Insta added to that.
Insta added to that.
Let me go do that real quick.
Just real quick go do that thing.
That is a 1 gigabyte
That is a 1 gigabyte
CSV. That is
CSV. That is
impressive. One gigabyte CSV.
It
sounds not in space.
32. There's no way this is that silly of
32. There's no way this is that silly of
an
an
error. Is this
actually I literally told them about
actually I literally told them about
this one, didn't I?
Where's the
Where's the
end? This
Uh, batch size. Mini batch
size. Oh my god. Batch size
32. It's not even made for size that
32. It's not even made for size that
small,
mate. That's not even made for something
mate. That's not even made for something
that small. That's crazy.
I guess this one's not got to be like
I guess this one's not got to be like
this or something, right?
That looks like it's going to take
That looks like it's going to take
forever to
run. Yep, that's actually going to take
run. Yep, that's actually going to take
forever to run. That's crazy. It's like
forever to run. That's crazy. It's like
manually loading that file a billion
manually loading that file a billion
times. We're going to do like
eight
six like
crazy
slow. I think it's like plotting or some
slow. I think it's like plotting or some
crap though. They haven't tried to
crap though. They haven't tried to
optimize this at all.
So, I'll let them screw with that for a
So, I'll let them screw with that for a
while. I unblock them at
while. I unblock them at
least. Back to the real work
here. Um, new dev branch somehow.
So, we know for sure it's uh some sort
So, we know for sure it's uh some sort
of
of
weird issue, right? Cuz this one doesn't
weird issue, right? Cuz this one doesn't
work. It works with one and not with
work. It works with one and not with
two.
Yeah. So, see it starts working and then
Yeah. So, see it starts working and then
it
crashes, which is
interesting. Do we just have to zero all
interesting. Do we just have to zero all
the buffers?
We do values
work. Oh, that doesn't solve it.
still crashing. So, it's not zeroing
still crashing. So, it's not zeroing
buffers. Got to be like writing the
buffers. Got to be like writing the
index wrong,
right? You would think
right? You would think
so. I mean, this is a fiddly little bit
so. I mean, this is a fiddly little bit
of logic.
What's my J look like?
Yeah, this is like simple simple J.
Yeah, this is like simple simple J.
There's nothing wrong here.
So,
Yeah. Okay. So, this is this looks good
Yeah. Okay. So, this is this looks good
to me.
This all seems
reasonable. I don't think there's any
reasonable. I don't think there's any
trouble you can even get into after you
trouble you can even get into after you
um you get to the sampling stage, right?
You kind of already have all your data
You kind of already have all your data
by
by
then, I guess. Like
technically plus equals Z. You add it
technically plus equals Z. You add it
though. Yeah. Plus plus equals. This is
though. Yeah. Plus plus equals. This is
fine.
Not this thing,
right? No, because these indices come
right? No, because these indices come
from here. These are unrelated.
I thought that this was working before
I thought that this was working before
as well. It doesn't like suddenly work
as well. It doesn't like suddenly work
if I do this right.
No, it
doesn't. Oh,
actually, no, it doesn't. Okay,
so we definitely had this thing working
before. Definitely had this working
before. Definitely had this working
before.
And it still works with one
And it still works with one
end as the kicker. So I definitely just
end as the kicker. So I definitely just
screwed up some of this indexing and I'm
screwed up some of this indexing and I'm
not seeing
not seeing
it. 834. I'm going to give it like a
it. 834. I'm going to give it like a
good 20 minutes right now. See if we can
good 20 minutes right now. See if we can
find it. And if not, it's going to be
find it. And if not, it's going to be
for the morning.
See how I call
See how I call
this state of value action.
very
weird. A lot of weird bugs today
weird. A lot of weird bugs today
though. A lot of weird bugs
today. It's not a masking bug. We don't
today. It's not a masking bug. We don't
use masking for this.
It's got to be either in store or the
It's got to be either in store or the
way that we're using those indices, I
way that we're using those indices, I
would
think. But it seems pretty simple.
Try one other Okay.
Something is wrong
Something is wrong
there. Something is in fact wrong
there. Something is in fact wrong
there. Why the f length's
there. Why the f length's
55? Doesn't make sense, right?
Oh, did the M's get desynced
somehow. If that's going to be the
somehow. If that's going to be the
case, that's going to be pretty gross.
The heck of the plate zero.
You got to be kidding
me. Well, that's awful.
Not multiprocessing
Not multiprocessing
save. Cool.
Yeah, that's really
Yeah, that's really
bad. Okay. Well,
bad. Okay. Well,
uh, we found
it. I think we'll even do this. Let's
it. I think we'll even do this. Let's
just make sure it works with this as
well. We'll push
well. We'll push
this. We'll run neural MMO. We'll see if
this. We'll run neural MMO. We'll see if
we can actually get the to train
we can actually get the to train
now. I'm pretty damn sure this is a
now. I'm pretty damn sure this is a
problem,
though. So, what happened
though. So, what happened
is since we're collecting trajectory
is since we're collecting trajectory
segments, we're kind of assuming they're
segments, we're kind of assuming they're
a fixed length.
Now, I mean, I have here like I have
Now, I mean, I have here like I have
ways around this and ways to fix this
ways around this and ways to fix this
stuff, but it's going to require a
stuff, but it's going to require a
little bit of care.
At least we'll be able to test neural
At least we'll be able to test neural
MMO tonight. That's the thing. I didn't
MMO tonight. That's the thing. I didn't
want to waste a night of having like no
want to waste a night of having like no
runs
runs
overnight. This even looks a little
overnight. This even looks a little
better than the previous. This is
better than the previous. This is
good. Okay. Advanced filtering. Good.
Oh, we have to fix the
uh No big deal.
23% time on the ends without the uh
23% time on the ends without the uh
multipprocessing, but it'll be enough
multipprocessing, but it'll be enough
for us to run an experiment.
Well, we found that
today. Definitely need to up the back
today. Definitely need to up the back
prop horizon as well.
completely
crashed.
Whatever. Then I commit this file,
Whatever. Then I commit this file,
dummy.
Okay. Still trains
500k. Good enough.
All right, we found the
All right, we found the
bug. Very
bug. Very
good. I'm going to do a couple more
good. I'm going to do a couple more
things. I think we'll see. But,
things. I think we'll see. But,
um, for folks watching, since we do have
um, for folks watching, since we do have
a fair few folks on at the moment, I
a fair few folks on at the moment, I
stream all my dev. This is mostly it's
stream all my dev. This is mostly it's
semi-educational but also just like
semi-educational but also just like
watch RL research happen live. I guess
watch RL research happen live. I guess
it's a good mix of science and
it's a good mix of science and
engineering. Um, if you want to help me
engineering. Um, if you want to help me
out for free, start the GitHub. It's all
out for free, start the GitHub. It's all
open source.
open source.
Huffer.ai. It's all right here. Start
Huffer.ai. It's all right here. Start
the repo. We're trying to hit 2K. If you
the repo. We're trying to hit 2K. If you
want to get involved with dev, join the
want to get involved with dev, join the
Discord.
Discord.
Many of our best contributors now came
Many of our best contributors now came
in with zero RL experience. Frankly,
in with zero RL experience. Frankly,
just having like a decent programming
just having like a decent programming
background and being able to write very
background and being able to write very
simple low-level code without making a
simple low-level code without making a
mess is probably more valuable coming
mess is probably more valuable coming
in. And if you want more RL content, you
in. And if you want more RL content, you
can just follow me on X as well, where I
can just follow me on X as well, where I
post pretty much exclusively RL content
post pretty much exclusively RL content
there,
there,
too. Let's see what we finish up with
too. Let's see what we finish up with
tonight. Good day overall.
tonight. Good day overall.
Good day
overall. See this
thing. Oh, did I make score equal to
thing. Oh, did I make score equal to
mincom prof? I think I think I did do
mincom prof? I think I think I did do
that,
that,
right? Yeah. So, I made everything have
right? Yeah. So, I made everything have
a score so that it would be easier.
Yeah. So there we'll see how this
goes. Um I guess I can talk through
goes. Um I guess I can talk through
since I usually end at like nine. I'll
since I usually end at like nine. I'll
uh I'll talk through a few things with
uh I'll talk through a few things with
the buffer design. So basically what
the buffer design. So basically what
happened here
One second. I need to send one
message. All
right. So,
oops. Here's what happened with the
oops. Here's what happened with the
buffer,
buffer,
right?
right?
Before you were getting batches of
Before you were getting batches of
experience. So, you have like this big
experience. So, you have like this big
bank of
bank of
environments, right? Ms.
All right. Then what would happen is
All right. Then what would happen is
like you would get a batch of experience
like you would get a batch of experience
like
like
this and then you would get like a batch
this and then you would get like a batch
of experience like
of experience like
this. Uh but they aren't necessarily
this. Uh but they aren't necessarily
going to all come alternating, right? So
going to all come alternating, right? So
you could do something like
you could do something like
this. You know, they come in whatever
this. You know, they come in whatever
order they happen to be ready in.
order they happen to be ready in.
So before I was essentially taking all
So before I was essentially taking all
this data as it came in and putting it
this data as it came in and putting it
into a big flat buffer, but I was also
into a big flat buffer, but I was also
tracking
indices. So what would happen is if uh
indices. So what would happen is if uh
if you got more data from one than the
if you got more data from one than the
other, you know, maybe this would be
other, you know, maybe this would be
like one, two, three,
like one, two, three,
four, and then you had like one, two,
four, and then you had like one, two,
three, four, whatever. You could
three, four, whatever. You could
actually reassemble them into the order
actually reassemble them into the order
so that like one and four are
so that like one and four are
contiguous, two and three are
contiguous, two and three are
contiguous, and everything is happy.
contiguous, and everything is happy.
The problem is uh I don't want to be
The problem is uh I don't want to be
storing data flat like this. Now with
storing data flat like this. Now with
the new experience buffer
design, it makes it very hard to do
design, it makes it very hard to do
advantage
advantage
filtering. What I have now is we still
filtering. What I have now is we still
have the same
have the same
M. Okay, but the experience buffer is no
M. Okay, but the experience buffer is no
longer flat. It looks like
longer flat. It looks like
this. So you have a certain number of
this. So you have a certain number of
rows
rows
And then this is the trajectory segment
length. And what happens now is like
length. And what happens now is like
let's say you get your experience
let's say you get your experience
buffers. All right. So this is your M's
buffers. All right. So this is your M's
again and they come in out of
again and they come in out of
order. Let's draw a few more of them
order. Let's draw a few more of them
this time.
What happens is that you fill in one,
What happens is that you fill in one,
two. So you fill in this with here. Then
two. So you fill in this with here. Then
you fill in this from here. But you've
you fill in this from here. But you've
actually filled
actually filled
in you filled in all of
this. And what happens is as soon as you
this. And what happens is as soon as you
get to the end of one of
get to the end of one of
these, as soon as you get to the end of
these, as soon as you get to the end of
one of these, um, it just says, "Okay,
one of these, um, it just says, "Okay,
we're
we're
done." And you say, "Well, what about
done." And you say, "Well, what about
all this data?" Well, it doesn't account
all this data?" Well, it doesn't account
for it. So, now you have partial
for it. So, now you have partial
trajectories in
trajectories in
here, and that can really screw stuff
up. So,
It's a little tricky the way
It's a little tricky the way
vectorization is written at the
moment. The easiest fix I could come up
moment. The easiest fix I could come up
with for this would be to do a round
with for this would be to do a round
robin type of a
robin type of a
thing, right? And I could just instead
thing, right? And I could just instead
of changing the experience buffer, I
of changing the experience buffer, I
could change the
could change the
vectorzation so that it just does the
roundroin. So you know, then the data
roundroin. So you know, then the data
comes in like this and then like this
comes in like this and then like this
and then like this and like
and then like this and like
this. And with all of our amps, that'll
this. And with all of our amps, that'll
still be nice and fast.
It's kind of not
bad. I probably could even come up with
bad. I probably could even come up with
smart way to do
smart way to do
it because like so slower MS typically
it because like so slower MS typically
have a bunch of processes so it's not
have a bunch of processes so it's not
just like two big buffers going back and
just like two big buffers going back and
forth it's like 20 little
forth it's like 20 little
buffers. I could probably even do it so
buffers. I could probably even do it so
that instead of it having to be
that instead of it having to be
roundroin it could be just
roundroin it could be just
like you're guaranteed that you get one
like you're guaranteed that you get one
step from each end before it starts
step from each end before it starts
repeating. You
repeating. You
know, I could do
that.
that.
Okay, that's not a bad fix. That's not a
Okay, that's not a bad fix. That's not a
bad fix at
all. I don't have time to implement that
all. I don't have time to implement that
tonight, but that's what we'll do in the
morning. Hello, Neural MMO.
We're not going to see mincom prof,
We're not going to see mincom prof,
right?
right?
Score. Yeah, score is going to be flat
Score. Yeah, score is going to be flat
for quite a while. I don't expect that
for quite a while. I don't expect that
to be magically better. It takes a long
to be magically better. It takes a long
time to get any score in neural mo. It's
time to get any score in neural mo. It's
a very hard end. You see the return go
a very hard end. You see the return go
up. So, you're getting rewards, but
up. So, you're getting rewards, but
you're not getting scoring points.
you're not getting scoring points.
Points are way harder to get than
Points are way harder to get than
reward.
Only other thing I can do to to think to
Only other thing I can do to to think to
do is look at the network, but I've only
do is look at the network, but I've only
got a few minutes. Um, I try to keep
got a few minutes. Um, I try to keep
my, you know, one of the things I've
my, you know, one of the things I've
noticed with all this the work that I do
noticed with all this the work that I do
on this, I mean, I pretty much just
on this, I mean, I pretty much just
work, eat, sleep,
work, eat, sleep,
exercise.
exercise.
Um, it's pretty hard to keep that
Um, it's pretty hard to keep that
schedule if you get out of sync. at
schedule if you get out of sync. at
least it is for me. But if I keep sleep
least it is for me. But if I keep sleep
on schedule, get good sleep, get a good
on schedule, get good sleep, get a good
diet and everything, get my exercise in
diet and everything, get my exercise in
and everything's kind of well
and everything's kind of well
regimented, then it's pretty easy to
regimented, then it's pretty easy to
keep working the longer
hours. But yeah, tomorrow we will fix
hours. But yeah, tomorrow we will fix
this buffer. Uh fixing this buffer
this buffer. Uh fixing this buffer
should hopefully mean that we can merge
should hopefully mean that we can merge
all this good stuff into the dev branch
all this good stuff into the dev branch
pretty soon. So we return to nice stable
pretty soon. So we return to nice stable
dev branch once again.
dev branch once again.
Um, we should be able to start
Um, we should be able to start
benchmarking advantage filtering
benchmarking advantage filtering
properly and then we can also start
properly and then we can also start
messing with the other algorithms that
messing with the other algorithms that
we've been playing with with a bit more
we've been playing with with a bit more
confidence than before because that was
confidence than before because that was
uh an issue, right? We were getting
uh an issue, right? We were getting
inconsistent
inconsistent
results. The really major one I'm
results. The really major one I'm
looking at at the moment is this uh
looking at at the moment is this uh
variant of diversity is all you need.
variant of diversity is all you need.
The goal is to learn conditioned
The goal is to learn conditioned
policies that are visually
policies that are visually
distinguishable. So you can kind of tell
distinguishable. So you can kind of tell
uh you can tell policies, hey, do
uh you can tell policies, hey, do
different stuff and you'll be able to
different stuff and you'll be able to
see different agents doing different
see different agents doing different
stuff, playing differently. It's a good
stuff, playing differently. It's a good
exploration method. It's good for a lot
exploration method. It's good for a lot
of stuff. Um I've been working on that.
of stuff. Um I've been working on that.
I've been working on the advantage
I've been working on the advantage
filtering stuff. Uh I still have P30. I
filtering stuff. Uh I still have P30. I
have to get back to that. That is the
have to get back to that. That is the
new advantage
new advantage
function that I've been working on
function that I've been working on
because we definitely need to replace
because we definitely need to replace
generalized advantage
generalized advantage
estimation. And then there are a few
estimation. And then there are a few
other little miscellaneous things
other little miscellaneous things
around. Oh yeah, curriculum learning the
around. Oh yeah, curriculum learning the
end finding stuff for curriculum
end finding stuff for curriculum
learning. I had to tell Aaron, let me go
learning. I had to tell Aaron, let me go
link Aaron that real quick.
this binding file that we wrote today.
Okay.
Okay.
Well, how are folks doing
tonight? I kind of just jumped from one
tonight? I kind of just jumped from one
thing to uh the next all day
thing to uh the next all day
since when did I start?
since when did I start?
9:30 a little before
9:30 a little before
maybe 12
hoursish if anyone's looking to get into
hoursish if anyone's looking to get into
RL. Actually, one thing that uh I
RL. Actually, one thing that uh I
usually point folks
usually point folks
to, we do have this blog here. It
to, we do have this blog here. It
doesn't have all the articles. I do like
doesn't have all the articles. I do like
random sort of out there stuff on X
random sort of out there stuff on X
sometimes mostly AI related but uh the
sometimes mostly AI related but uh the
better ones go here and this quick start
better ones go here and this quick start
guide in
guide in
particular is a really way to get
particular is a really way to get
involved with
involved with
RL I give you a few pretty easy to go
RL I give you a few pretty easy to go
through references compared to what's
through references compared to what's
usually suggested pretty small number of
usually suggested pretty small number of
core papers to read some blog posts that
core papers to read some blog posts that
are easier to digest as well a little
are easier to digest as well a little
bit of my perspective on how I think
bit of my perspective on how I think
about of research, too. I definitely
about of research, too. I definitely
suggest
that. I'm sure I'm going to have to keep
that. I'm sure I'm going to have to keep
updating that as we uh learn more and
updating that as we uh learn more and
more things because we know a lot more
more things because we know a lot more
about RL now than even a few months ago
about RL now than even a few months ago
with all the stuff in Puffer.
Tomorrow will
Tomorrow will
be fix uh the vectorzation for the new
be fix uh the vectorzation for the new
experience buffer. Do
experience buffer. Do
roundroin. Fix our
roundroin. Fix our
servers. Make sure the robotics thing
servers. Make sure the robotics thing
works. Hopefully we get some good
works. Hopefully we get some good
results back on neural
results back on neural
3 and then keep going on the algorithm
3 and then keep going on the algorithm
stuff.
Okay. Well, I'm going to call it for the
Okay. Well, I'm going to call it for the
night. So, thanks for tuning in, folks.
night. So, thanks for tuning in, folks.
We'll be back in the morning. And I'm
We'll be back in the morning. And I'm
pretty much the next like twoish two and
pretty much the next like twoish two and
a half weeks, uh, I'm pretty much just
a half weeks, uh, I'm pretty much just
going to be streaming streaming and
going to be streaming streaming and
debing. kind of gotten my calendar
debing. kind of gotten my calendar
cleared and uh there's a lot of stuff to
cleared and uh there's a lot of stuff to
do on puffer. So, we're aiming towards
do on puffer. So, we're aiming towards
the next major
the next major
release hopefully in the next month or
release hopefully in the next month or
two. Yep. Star the repo once again.
two. Yep. Star the repo once again.
Really want to see this at 2K. That'd be
Really want to see this at 2K. That'd be
great.
great.
But

Kind: captions
Language: en
We are back
We are back
live. I'm kind of tired
today. Still a bunch of stuff to get
today. Still a bunch of stuff to get
done though. I think we're going to
done though. I think we're going to
see I'm going to try to get at least an
see I'm going to try to get at least an
initial version of this binding out.
initial version of this binding out.
Uh and then there are a few other things
Uh and then there are a few other things
I got to look into today as well. Let's
I got to look into today as well. Let's
see if we can get this done first.
What's wrong with this
thing? Static
thing? Static
int. Uh, this should be pi object.
You turn null for this
You turn null for this
thing. No, you can't.
My long void
pointer when returning type pi op
star a
star redep.
definition. So you can't redefine this
definition. So you can't redefine this
thing. You can just do
thing. You can just do
this. That works.
One M1 worker. We're
One M1 worker. We're
good. Seg faults.
Huh? Okay.
Super, I didn't see your previous
Super, I didn't see your previous
message if there was one. If all I see
message if there was one. If all I see
is what's uh what's
here. Okay, that's saying false.
This what we have. We have
This what we have. We have
uh prototype,
uh prototype,
right? Bar arcs, keyword
arcs. I think that's
fine. Is the signature wrong?
fine. Is the signature wrong?
Do you ever heard of
Do you ever heard of
any OS
dro
dro
especially? No, you just use whatever.
especially? No, you just use whatever.
There's no like you don't need an
There's no like you don't need an
operating
operating
system for that.
system for that.
Like if you want to run stuff that runs
Like if you want to run stuff that runs
on Windows, you use Windows. Otherwise,
on Windows, you use Windows. Otherwise,
you use whatever Linux you want.
Generally, Abuntu is the easiest out of
Generally, Abuntu is the easiest out of
the box.
Well, I can just see where this is
Well, I can just see where this is
seging, right? I forgot I can do that.
If pylong check
val seven
val seven
ah
ah
really n doesn't
get that's weird.
Thought we did this binding. Nums equal
nums. Do I need to pass like empty arms
nums. Do I need to pass like empty arms
or something?
Maybe there's a reason for this. Let's
Maybe there's a reason for this. Let's
see. I didn't think there
was. Now you should be able to just call
was. Now you should be able to just call
this thing
Key is noms.
That's really
weird. Something definitely is not
weird. Something definitely is not
getting passed
getting passed
correctly. Is it the signature?
You need this part. Can I just do
this key work? I just do this
thing. What did we get? Shared method.
thing. What did we get? Shared method.
Bad call flags.
Python C
API parsing arguments and building
API parsing arguments and building
values.
working
on custom Linux
based. Yeah. I don't see how any well
based. Yeah. I don't see how any well
way I don't see how there's any way
way I don't see how there's any way
you're going to get Nate. Like there's
you're going to get Nate. Like there's
no way you're going to get native
no way you're going to get native
support for PC games
support for PC games
working. Like the most you're going to
working. Like the most you're going to
be able to do is run stuff. You're
be able to do is run stuff. You're
probably just going to end up running
probably just going to end up running
stuff via Proton, which is literally
stuff via Proton, which is literally
built into Steam on Linux.
more like a college project.
more like a college project.
Yeah, an operating system is not a
Yeah, an operating system is not a
college project unless you're absolutely
college project unless you're absolutely
sure you know what you're doing.
Unless you're Torbolts, I
guess. I mean, heck, I started neural
guess. I mean, heck, I started neural
MMO as an undergrad
MMO as an undergrad
project. Yeah. Like uh what are we like
project. Yeah. Like uh what are we like
eight years
later? Turned out to be kind of hard.
Good luck.
Oh yeah, you learn
Oh yeah, you learn
plenty. You're setting yourself up for
plenty. You're setting yourself up for
something very difficult, but yeah,
something very difficult, but yeah,
you'll learn a lot of
you'll learn a lot of
stuff. If that's your goal, then yeah,
stuff. If that's your goal, then yeah,
go take on like the most challenging
go take on like the most challenging
things you possibly can. No reason not
things you possibly can. No reason not
to.
What is the damn signature for this
thing? Pi object module. Is this how it
works? Do you need this
works? Do you need this
module? I might have messed up.
module? I might have messed up.
Hang on. What What's the signature on
Hang on. What What's the signature on
like
like
these? Uh yeah, it's got this self thing
these? Uh yeah, it's got this self thing
on
it, which is the module, I
it, which is the module, I
guess. Okay, I messed that up. My
bad. I don't know if you can just have
bad. I don't know if you can just have
keyword args either.
keyword args either.
I think we'll keep the
I think we'll keep the
uh signature. I have
team are you all like good low-level
team are you all like good low-level
systems devs?
systems devs?
So, like building an operating system is
So, like building an operating system is
technically like yeah, there there's an
technically like yeah, there there's an
operating systems course you can take at
operating systems course you can take at
Stanford that'll take you like 40 hours
Stanford that'll take you like 40 hours
a week and you kind of build an
a week and you kind of build an
operating system sort
of. I don't know. I'd probably have fun
of. I don't know. I'd probably have fun
with it at least. Lowle dev is great.
though it gets more fun the better you
though it gets more fun the better you
know what you're
doing. Okay. So this is the state
signature. What I did wrong here? My
signature. What I did wrong here? My
object. You have to add it here,
dummy. That builds
Yay, we
Yay, we
run
run
fuel. Um, I didn't think that we had
fuel. Um, I didn't think that we had
subprocesses though. So, why is it
stalled? Like, what happened?
M
M
workers uh vec
multiprocessing. Uh so this can go to
multiprocessing. Uh so this can go to
native, can
it? And then if this goes to
native, we can actually put a break
native, we can actually put a break
point in here.
Okay.
So yeah, you do get the state. This is
So yeah, you do get the state. This is
just a
just a
pointer. Um this
pointer. Um this
is a thing that you technically have.
So now what we can
So now what we can
do is
like I can do like state equals selfc
like I can do like state equals selfc
state or
state or
whatever.
whatever.
Yeah. And
now I do have to unpack this
now I do have to unpack this
custom. So you will need Python API
shenanigans. Just grab the end code that
shenanigans. Just grab the end code that
I use.
Unpack ends.
Yeah. So, you can't reuse this directly
Yeah. So, you can't reuse this directly
because this is
double. Let me see how bad this is.
So you want this here on a knit,
So you want this here on a knit,
right? You do like a nit grid or
right? You do like a nit grid or
whatever. And
then this key is just going to be like
state. And then we go and get
the the code for unpack
the the code for unpack
M. So I can see
M. So I can see
API handle
object. Yeah, it's something like this.
and go
up. Then you just do
state state
state state
Yeah, that's pretty well
it. And then one is error. So we do like
it. And then one is error. So we do like
this. Okay, so this gives you a state.
this. Okay, so this gives you a state.
Let's see if this runs without blowing
Let's see if this runs without blowing
up.
Yeah. So that runs without blowing up.
Yeah. So that runs without blowing up.
Cool. So now all we have to do is
Cool. So now all we have to do is
um we just have to reformat some code
um we just have to reformat some code
essentially.
We just have to reformat a little bit of
code. Let me see what the current one
code. Let me see what the current one
looks like.
state maze
level. Yes. So this
is so I can pretty much just do this
is so I can pretty much just do this
code in the share, right?
And then all this has to do is randomly
And then all this has to do is randomly
pick an
end on reset
end on reset
and whenever it's
and whenever it's
done. That's not too
done. That's not too
bad. We can do
bad. We can do
that. We'll have to figure out what we
that. We'll have to figure out what we
want to change with this for curriculum
want to change with this for curriculum
learning, but this will be enough for me
learning, but this will be enough for me
to show Aaron. And
to show Aaron. And
um this shouldn't take me very long.
um this shouldn't take me very long.
Let's say I finish
Let's say I finish
this by
this by
six. That gives me time to check.
six. That gives me time to check.
There's one other thing I want to spend
There's one other thing I want to spend
like an hour on
like an hour on
maybe. And then hopefully we can
maybe. And then hopefully we can
actually get a little time to
actually get a little time to
uh figure out what's wrong with our
uh figure out what's wrong with our
machines and set up experiments and all
machines and set up experiments and all
that jazz because there's still some
that jazz because there's still some
stuff we have to figure out. And days go
stuff we have to figure out. And days go
by too fast. It's like you need
by too fast. It's like you need
unlimited dev hours in order to get
unlimited dev hours in order to get
stuff
done. All
right. So, this is your
state levels.
This should be numb
maps. So you get numb maps
here. And then what is size?
size and max
size. I guess you need this kind of in
size. I guess you need this kind of in
both, don't
you? But this is pretty easy.
What's the call
max? Now we do if size is negative
one random
percent. How do you do that actually?
Five and max
size. I think you just assert that max
size. I think you just assert that max
size has to be greater than five.
This could honestly get pasted into the
This could honestly get pasted into the
C as
C as
well. Well, it it will be C. So, it's
well. Well, it it will be C. So, it's
actually very easy to just move this
actually very easy to just move this
back and forth between this and the grid
back and forth between this and the grid
file. It's not bad.
file. It's not bad.
Uh now the thing that I was trying to
Uh now the thing that I was trying to
figure out is a really basic thing. I
figure out is a really basic thing. I
think it's just like
think it's just like
five
five
plus percent max
plus percent max
size minus five. Is this it? Something
size minus five. Is this it? Something
like
this. If this is zero, does it
break? Yeah, it does.
Oh, I see.
We have to make all the maps.
What's the uh the and float
What's the uh the and float
whatever. There's like a common thing
whatever. There's like a common thing
people use for
this. Yeah, it's this
this. Yeah, it's this
thing. You got to divide by the rand
thing. You got to divide by the rand
max.
What's
a
one? It gives you a difficulty.
one? It gives you a difficulty.
Uh you do need an end to uh you need a
Uh you do need an end to uh you need a
temporary
temporary
end. So let's just make
one. Create maze
level. Create maze. Just rely
level. Create maze. Just rely
on height.
I think you do want to enit the
thing max size. Yeah, you do want to
thing max size. Yeah, you do want to
init your thing
init your thing
here.
here.
Um, that's slightly annoying.
Um, that's slightly annoying.
So you just do
n you set max
n you set max
size and then you do indent
grid. And now we can create maze
grid. And now we can create maze
level
level
and size difficulty I that's
fine and we do init
fine and we do init
state on levels of
state on levels of
I max
I max
size and we can do get state
something like this.
something like this.
So that should the
levels And then I think the uh the rest
levels And then I think the uh the rest
of the logic has to go into the end
of the logic has to go into the end
itself,
right? Maybe this will take a little
right? Maybe this will take a little
longer than 40
minutes. It's not that bad.
Yeah, it's not that
bad. I think you need
bad. I think you need
um numb maps as well, right?
Or no, not really.
You want to
You want to
do set state and and then
state rand% num
state rand% num
maps. The x equals
mouse. And then I think the reset
condition is in step
Yes, you return done
here, but you need to reset some
stuff. You actually do call
reset, meaning that can't be breaking
reset, meaning that can't be breaking
anything.
So we'll just
call Why does this thing have an
call Why does this thing have an
extra? It doesn't making up.
And then you can ignore the other
And then you can ignore the other
bit. Okay. So I think we debug this and
bit. Okay. So I think we debug this and
like whatever I broke in here. I think
like whatever I broke in here. I think
that's all the code. I don't think I
that's all the code. I don't think I
missed
missed
anything. We will see. But I think that
anything. We will see. But I think that
that should be
that should be
about what we want.
really wasn't that
bad, right? So, it needs numb maps and
bad, right? So, it needs numb maps and
it needs levels. No big deal.
maps and then state star
levels unknown type state that needs to
levels unknown type state that needs to
be declared I
guess just move this up to the
top incompatible type or set state set
top incompatible type or set state set
state this wants
star. This is just a missing n
percent. This n
percent undeclared
What I
What I
do? This is not
max size.
like
this. Oh yeah, that's just
this. Oh yeah, that's just
dot. And does there a dot max size on
dot. And does there a dot max size on
this? There is,
this? There is,
right? No.
right? No.
And
then how these became columns
then how these became columns
but boom. All right.
but boom. All right.
this thing
this thing
run
run
or do we
seg I really should just build a debug
seg I really should just build a debug
compile mode into this because then I
compile mode into this because then I
wouldn't even have to deal with it
wouldn't even have to deal with it
seging I would just get the error trace.
seging I would just get the error trace.
It's still easy enough with the way this
It's still easy enough with the way this
is
is
though. Uh, I'm guessing I forgot
a Yeah, I'm guessing I forgot some arms
a Yeah, I'm guessing I forgot some arms
maps max
size. Yeah, I definitely just forgot
size. Yeah, I definitely just forgot
some
stuff. Okay, so shared N. It needs num
stuff. Okay, so shared N. It needs num
maps. This is invalid
R and these are all required keywords.
max
max
size and
then is there not a size
par? Yeah, there
is max map size.
We'll call this max
size
consistency. This needs to be mapped as
consistency. This needs to be mapped as
well. I
well. I
guess kind of doesn't
really well.
We will uh leave it for now and we'll
We will uh leave it for now and we'll
see because I think we'll need it in a
second fault
here in a reset. It looks like
cannot access memory
address.
H
H
267. Yeah. So this is in set
267. Yeah. So this is in set
state. It's fall from here.
Um, this got set correctly,
Um, this got set correctly,
right? Hey,
Linky,
Linky,
welcome. I got to figure out that
welcome. I got to figure out that
freaking cluster status like today. I've
freaking cluster status like today. I've
been putting it off because of a lot of
been putting it off because of a lot of
I've been dealing with, but
also. Yes, Star
also. Yes, Star
Puffer. Thanks for that
Puffer. Thanks for that
reminder. If you enjoy all this stuff
reminder. If you enjoy all this stuff
and want to help me out for free, just
and want to help me out for free, just
start the repo. Huffer.ai. Try the repo.
start the repo. Huffer.ai. Try the repo.
Try to hit 2K really helps. That's all.
Oh, this doesn't get
Oh, this doesn't get
set. Yeah, this doesn't get
set. Okay. Right. Right. Because I
set. Okay. Right. Right. Because I
didn't actually
didn't actually
unpack. I didn't assign this to the
unpack. I didn't assign this to the
end. I do end
end. I do end
state end levels equals state like this.
We do
Yes. Cool. And we don't immediately
Yes. Cool. And we don't immediately
crash.
Do we actually get any infos back from
Do we actually get any infos back from
this
thing? I forget whether it just takes a
thing? I forget whether it just takes a
while or
while or
not. No, I think there's something still
not. No, I think there's something still
broken.
So, we're definitely
closer. Let's make sure we're actually
closer. Let's make sure we're actually
calling the logging function
first. Okay, so report interval. Yeah,
first. Okay, so report interval. Yeah,
this should be getting
called. So, this is empty for some
called. So, this is empty for some
reason.
We definitely log though, don't we? Oh,
We definitely log though, don't we? Oh,
we did we forget to increment
we did we forget to increment
n? No, this is valid, right?
n? No, this is valid, right?
So, this is one path
So, this is one path
here. We should just make an add log
here. We should just make an add log
function.
Make an add log
function somewhere after these
function somewhere after these
allocates. Yeah,
allocates. Yeah,
this void add
this void add
log n.
I will
take this
take this
is yeah something like
is yeah something like
this
tick do
There should be a second one which is
There should be a second one which is
running out of uh time. Right.
Well, now it should definitely be
Well, now it should definitely be
logging. The fact that it isn't
logging. The fact that it isn't
is concerning.
I'm not like zeroing this somewhere
I'm not like zeroing this somewhere
stupid,
right? No, this is fine. Okay, so we
right? No, this is fine. Okay, so we
just have to figure out where uh where
just have to figure out where uh where
this is going wrong, I guess.
Just get a break point into this thing.
Just get a break point into this thing.
Maybe
Uh, we're not getting
here. Maybe this
Yeah, there we go.
Where is
step? Is that maybe
set
set
state. Now, none of this stuff should
state. Now, none of this stuff should
mess anything
up. None of this should mess anything up
up. None of this should mess anything up
at
all. You're not calling compute
all. You're not calling compute
observations actually in this, are
you? Oh, no. It gets called here.
you? Oh, no. It gets called here.
gets called
gets called
here. Done as
here. Done as
false. This is done as
true. Reset should clear
terminals. Reset does not clear
terminals. Reset does not clear
terminals, right? Because you need to
terminals, right? Because you need to
wait
Yeah, it gets called here, which is
correct, man. I don't know why this
correct, man. I don't know why this
isn't logging. This is very odd.
Do we not ever hit add
Do we just never
step backstab sol
Okay. What are you
Okay. What are you
programming? This is a procedurally
programming? This is a procedurally
generated maze environment uh for
generated maze environment uh for
Puffer. I've had this for a while. I'm
Puffer. I've had this for a while. I'm
trying to update it to use the native
trying to update it to use the native
Python C API instead of Syon which will
Python C API instead of Syon which will
make this thing way more useful for a
make this thing way more useful for a
lot of the let's say a lot of the
lot of the let's say a lot of the
reinforcement learning testing we do.
reinforcement learning testing we do.
This is a really useful environment and
This is a really useful environment and
uh the Syon is kind of a limiting factor
uh the Syon is kind of a limiting factor
right now. So this will make it a lot
right now. So this will make it a lot
easier once I get this in place.
Do we not increment the tick
Do we not increment the tick
ever?
Wait.
Wait.
Oh, that should technically still work.
Oh, that should technically still work.
I don't know why it wouldn't work
I don't know why it wouldn't work
there. It's better here,
there. It's better here,
but there should be one
agent. Oh, does agents also have to get
agent. Oh, does agents also have to get
set? Hang on. Maybe I uh maybe that's
set? Hang on. Maybe I uh maybe that's
what I
missed. I bet you that's what I
missed. I bet you that's what I
missed. New to programming? You don't
missed. New to programming? You don't
know how people make real apps, for
know how people make real apps, for
loops and if statements, and just print
loops and if statements, and just print
things to the terminal. Well, good news
things to the terminal. Well, good news
for you. Uh, for loops and if statements
for you. Uh, for loops and if statements
are bread and
are bread and
butter,
butter,
like
like
there you might even be able to read
there you might even be able to read
this. You kind of need to know what a
this. You kind of need to know what a
pointer
pointer
is,
is,
but other than that, I'll show you
but other than that, I'll show you
something cool.
something cool.
I love getting new programmers excited
I love getting new programmers excited
about being able to build full stuff
about being able to build full stuff
rather
rather
easily. Okay, so this file here is 325
easily. Okay, so this file here is 325
lines of actual code. In fact, it's
lines of actual code. In fact, it's
going to be even shorter in the new
going to be even shorter in the new
version. In the new
version, I merged this
Whatever. In the new version, it
Whatever. In the new version, it
is. Oh, huh. I guess I didn't update
is. Oh, huh. I guess I didn't update
this one yet, but whatever. It's like
this one yet, but whatever. It's like
less than 300 in the new version. So,
less than 300 in the new version. So,
let me link you
this. This
this. This
is mostly for loops and if
is mostly for loops and if
statements. What does this implement?
massively multi-agent snake that runs in
massively multi-agent snake that runs in
your browser. Each of these snakes is
your browser. Each of these snakes is
also happens to be controlled by a
also happens to be controlled by a
neural network. A little bit more code
neural network. A little bit more code
for that one, but yeah, you can build
for that one, but yeah, you can build
some pretty cool
some pretty cool
stuff with uh very simple
tools. So, point of this stream is I
tools. So, point of this stream is I
kind of just hang around and stream all
kind of just hang around and stream all
my reinforcement learning dev. I'm a
my reinforcement learning dev. I'm a
researcher. My goal is to make
researcher. My goal is to make
reinforcement learning a lot easier than
reinforcement learning a lot easier than
it is
now. And you can build upon stuff like
now. And you can build upon stuff like
this.
Yep. Right there. Got it. That's the
culprit. I'm just going to hardcode it
culprit. I'm just going to hardcode it
here.
How do people make that though? How to
How do people make that though? How to
make
make
people make visual applications? Well, I
people make visual applications? Well, I
linked to the code, didn't
linked to the code, didn't
I? This doesn't seem too bad,
I? This doesn't seem too bad,
right? That's it. It's like 50 lines of
right? That's it. It's like 50 lines of
code with
code with
Rayb. Ray is a very lightweight graphics
Rayb. Ray is a very lightweight graphics
library.
Define some colors. Define a str. Set up
Define some colors. Define a str. Set up
rendering
rendering
client. Couple of for loops in a net
client. Couple of for loops in a net
statement. That's it.
Yeah, I highly highly suggest Rail. Um,
Yeah, I highly highly suggest Rail. Um,
it has bindings for every language
it has bindings for every language
pretty much. It's just a very simple
pretty much. It's just a very simple
API. There's really not that much to
API. There's really not that much to
distract you or to like confuse you.
distract you or to like confuse you.
Just like keep things very simple and
Just like keep things very simple and
you can do a
lot. You just keep things very
simple. Simple isn't bad. You can get a
simple. Simple isn't bad. You can get a
lot done with simple.
Are you supposed to make
applications? Uh so technically what I
applications? Uh so technically what I
do this will run as a desktop
do this will run as a desktop
application as is.
application as is.
You compile it to web assembly using
You compile it to web assembly using
mcript in which is like a JavaScript
mcript in which is like a JavaScript
wrapper that loads a very small amount
wrapper that loads a very small amount
of well you end up with a JavaScript
of well you end up with a JavaScript
wrapper that loads a very small amount
wrapper that loads a very small amount
of binding code around web assembly. Uh
of binding code around web assembly. Uh
you don't really need to deal with any
you don't really need to deal with any
of it though. you can kind of just like
of it though. you can kind of just like
write your C and run it
write your C and run it
wherever. This not every language can do
wherever. This not every language can do
that, right? But languages that you can
that, right? But languages that you can
compile to web assembly are very nice
compile to web assembly are very nice
because then you don't have to deal with
because then you don't have to deal with
writing a bunch of JavaScript. I
writing a bunch of JavaScript. I
wouldn't be able to write the code the
wouldn't be able to write the code the
same way in JavaScript. I'd have to do
same way in JavaScript. I'd have to do
something more complicated because
something more complicated because
JavaScript is too slow.
Seg vault.
Seg vault.
Lovely. At least now we get something.
Why are we so faulting in
CUDA? Like for a video chat application,
CUDA? Like for a video chat application,
can I make that in pure
can I make that in pure
Java?
Java?
Um, it kind of depends what you mean.
Um, it kind of depends what you mean.
like low-level video processing is
like low-level video processing is
absolutely not going to be written in
absolutely not going to be written in
Java. Now if you mean can you write a a
Java. Now if you mean can you write a a
front-end wrapper around like some
front-end wrapper around like some
existing library that's probably in C++
existing library that's probably in C++
actually it's probably f ofmpeg which is
actually it's probably f ofmpeg which is
in a mix of C and assembly uh and has
in a mix of C and assembly uh and has
bindings for other languages then yeah
bindings for other languages then yeah
then you can do
then you can do
that if you want to actually write like
that if you want to actually write like
if you want to do video encoding and
if you want to do video encoding and
stuff probably
not also Java is gen generally really
not also Java is gen generally really
not a fun
language. I do not suggest Java to
language. I do not suggest Java to
anybody ever for any
anybody ever for any
purposes. It also started in Java. It
purposes. It also started in Java. It
was not fun.
comput
comput
J won't seem
weird. Yeah, everyone does that. Job is
weird. Yeah, everyone does that. Job is
not fun.
the A
range. This has got to be like my
range. This has got to be like my
fernal,
right? Oh, I know what I can do.
Unaligned PC
pumped.
Really? Can I compile this thing with
Really? Can I compile this thing with
address
address
sanitizer or is that going to like
sanitizer or is that going to like
compile Python with address sanitizer?
compile Python with address sanitizer?
I think I can, right?
Compile arms.
I think this is like
missing. I think I'm like missing some
missing. I think I'm like missing some
uh is this
LLVM
this system or Python doesn't have
sound. I already have
that. Okay, so that's slightly
that. Okay, so that's slightly
obnoxious.
Yep. These before. This is like some
Yep. These before. This is like some
weird It's like some weirdo alignment
weird It's like some weirdo alignment
issue, isn't it?
Now I don't get the
Now I don't get the
message real invalid
message real invalid
pointer. I never call
realloc and that code is not changed.
This gets
This gets
calked. This ought to be
fine. And you return levels, which is
fine. And you return levels, which is
Yeah. Also fine.
Is it not like
this? That shouldn't be an issue.
How is this throwing an error in the
How is this throwing an error in the
CUDA code? That doesn't make any sense
CUDA code? That doesn't make any sense
to
me. How about
this peak thread kill implementation?
Is this some weirdo thing with the
Is this some weirdo thing with the
Python
API? Oh, this can just literally be any
API? Oh, this can just literally be any
memory.
Yeah. So, F sanitize would fix the whole
Yeah. So, F sanitize would fix the whole
thing.
Um, Malak print
error. Do we actually have a
See, this doesn't actually give
me. Yeah, this doesn't give me anything.
Do you need it in link as
Do you need it in link as
well? Maybe you need it in link as
well. Worth spending a few
well. Worth spending a few
minutes to see if we can um we can get
minutes to see if we can um we can get
this to work because it would just make
this to work because it would just make
debugging everything so much
debugging everything so much
easier. Like is genuinely not hard to
easier. Like is genuinely not hard to
debug if you
debug if you
have address sanitizer. Otherwise, it's
help. Okay. Can I do this?
What?
What?
Um. Oh,
Um. Oh,
dummy. What? Why did you do
dummy. What? Why did you do
this? This is the completely
this? This is the completely
wrong wrong spot, dummy.
There we
go. Should have dg in it,
right? Runtime does not
come first in initial library
list. Is this a
bank? Not being looked early
enough.
enough.
Okay. Oops.
Why is it still giving me stupid
Why is it still giving me stupid
options?
Okay, there we
go. It's not that crashing.
I'm getting some like weird stuff
I'm getting some like weird stuff
happening
happening
in in
torch. Get device count.
Hang on. Can I run like three other
Hang on. Can I run like three other
ends?
I
see patient state.
Okay, that runs.
Got to love how everything in C is easy.
Got to love how everything in C is easy.
Everything in Python is easy. And then
Everything in Python is easy. And then
whenever the two meet, welcome to pain.
So, yeah, this works and somehow the
So, yeah, this works and somehow the
other one doesn't.
app size.
Well, I may as well get the pure C demo
Well, I may as well get the pure C demo
working,
right? I doubt that tells me anything,
right? I doubt that tells me anything,
but maybe
This egg
This egg
false. Wait, this is compiled without
sanitiz breaking on me.
overlay.
And this gets calic
right five by
side. Seems
side. Seems
off. That's what I have in
off. That's what I have in
here. There's my
main. Yeah. No.
main. Yeah. No.
With Oh, no. Create maze level
5x5 11. Yeah.
It's like volon
41. How does that make any sense?
and fight.
It's very weird.
corner.
I don't even need that thing at
I don't even need that thing at
all. I doubt that's the actual problem.
all. I doubt that's the actual problem.
That would be so weird.
Okay, that actually came up on the
screen. M maps.
Also don't need this anymore.
Now pointer passes argument
one.
How end levels
I'm going to do this in the
side. So when I did this
side. So when I did this
here, create the
here, create the
level. Grab a net state.
size agents.
size agents.
You get the
state detected memory
base. Why does render never
base. Why does render never
happen? Oh, because you have to call
happen? Oh, because you have to call
render once.
What's this demo supposed to do?
What's this demo supposed to do?
Is it supposed to
Is it supposed to
be actions of I? You know, it's supposed
be actions of I? You know, it's supposed
to be moving.
Yeah, nothing's really
happening. Is it getting reset every
happening. Is it getting reset every
time?
It's getting reset freaking constantly.
Oh,
There we go.
I only made one level though. So, how is
I only made one level though. So, how is
it
resetting? Uh, it's
not
Was that just because I was controlling
Was that just because I was controlling
it? No, it keep overflows.
513. I don't know what's wrong with this
513. I don't know what's wrong with this
stupid overlay. Like, I'm not even using
it. It must just be getting allocated to
it. It must just be getting allocated to
the wrong size somehow.
the wrong size somehow.
We're not using it
anyways. This seems
fine. Now, do I dare take control of the
fine. Now, do I dare take control of the
puffer?
Yeah, we probably need to fix some
Yeah, we probably need to fix some
things. But uh before I
forget, let's
see. Did we remember to fall in its
see. Did we remember to fall in its
state after we make the
level
level
for I guess that's in binding, isn't it?
Yeah. No, we do call it state on
Yeah. No, we do call it state on
it. Okay.
Oh, hello YouTube folks.
Oh, hello YouTube folks.
This is currently getting a procedurally
This is currently getting a procedurally
generated maze and ported from Syon
generated maze and ported from Syon
bindings to
bindings to
Cbindings so that we can use it as a
Cbindings so that we can use it as a
reinforcement learning benchmark for
reinforcement learning benchmark for
some of the curriculum learning
some of the curriculum learning
algorithm dev that uh has been going on
algorithm dev that uh has been going on
in
Puffer. We're just having a
Puffer. We're just having a
few binding troubles
here. Nothing too
big. Okay.
So, and now it runs locally and see at
So, and now it runs locally and see at
least. Do we actually get a trace?
No, we just get P thread
killed. Yeah, this is not a real trace.
I got to be like screwing up the memory
I got to be like screwing up the memory
in this binding file somehow. You would
in this binding file somehow. You would
think, right?
Oh, wait. Is this I Hang on. Isn't this
Oh, wait. Is this I Hang on. Isn't this
numb
agent? That could be a
problem. No, that's seed.
problem. No, that's seed.
Seed is
fine and it state gets max
size one agent.
I really wish there were a better way to
I really wish there were a better way to
get Python to not just eat all the
get Python to not just eat all the
errors for no apparent reason.
I guess I could go check whether it
I guess I could go check whether it
happens on a knit or on step.
Uh, how do I not get to there? Wait,
Uh, how do I not get to there? Wait,
does it fail right
here? Uh, that just doesn't even make
here? Uh, that just doesn't even make
sense.
Yeah. So, it's not
even This works,
right? Yeah, it is. This
ends. Is it as soon as you load
ends. Is it as soon as you load
it? How would that make any sense?
What if I do
this? Surely can't break
them.
Interesting. So if you import it, it
Interesting. So if you import it, it
breaks before you even get to do
breaks before you even get to do
anything.
anything.
I don't see how you could possibly be
I don't see how you could possibly be
breaking stuff on
import. Um, yeah,
import. Um, yeah,
let's This is super
let's This is super
cursed. This is incredibly incredibly
cursed. This is incredibly incredibly
cursed.
cursed.
Apparently, we have 10 people watching
Apparently, we have 10 people watching
me debug horribly cursed Python
me debug horribly cursed Python
bindings. Welcome, you
bindings. Welcome, you
masochists. Sadist
maybe. I'm going to try something that's
maybe. I'm going to try something that's
kind of out
kind of out
there. There is like this niche bug I am
there. There is like this niche bug I am
aware
aware
of.
of.
Um, there's this like really niche bug.
Um, there's this like really niche bug.
It would be super weird if this were the
It would be super weird if this were the
issue. I don't even need to do all of
issue. I don't even need to do all of
them. I just need to do step,
honestly. Where's
step? Oh, hang on. This returns a bull.
step? Oh, hang on. This returns a bull.
No, but that's the
No, but that's the
agent. This is not supposed to return a
bull. How does that
compile? Could that be it?
I didn't even know you could do
that. You don't need to return
done. Then this step is going to be
done. Then this step is going to be
undefined
because is it
binding.h. So, there's this really niche
binding.h. So, there's this really niche
bug as well. I don't know even know if
bug as well. I don't know even know if
it's remotely related, but um there's
it's remotely related, but um there's
step to find I think it's like some
step to find I think it's like some
random reg x routine in C that can get
random reg x routine in C that can get
screwed
screwed
up.
up.
Um, okay, that
Um, okay, that
runs or that compiles
rather. Okay, we no longer fail on
import, but we still
import, but we still
fail. We fail later, but we still fail.
Do we get an error
message? This is now
CUDA. I don't know how we get CUDA
CUDA. I don't know how we get CUDA
errors from that.
Now, of course, we don't get a
Now, of course, we don't get a
reasonable error message. We still get
reasonable error message. We still get
this peak
kill.
kill.
Why? Why do we get this? Why?
And here I was about to uh I thought
And here I was about to uh I thought
that we'd gotten
that we'd gotten
it. Maybe I should look around for more
it. Maybe I should look around for more
of those. Do we have any other functions
of those. Do we have any other functions
with weird signatures?
with weird signatures?
This is void. This is supposed to be
void. It's just like render step and
void. It's just like render step and
close and stuff, isn't
it? I think that was the only weird
one. Yeah. Rest of these are void.
Step agents allowed to be a bull void
reset. Yeah, everything else is
void. Me rerun the C again. Make sure I
void. Me rerun the C again. Make sure I
didn't break anything there.
didn't break anything there.
I'm sure I did
actually. It's got to be
Cat. This is
done. This is now auto reset.
Yep. So, this runs
now. Doesn't run here though.
Are there any other
Are there any other
um are there any other things that I'm
um are there any other things that I'm
not
setting? Like what else do we set
here? What about like
here? What about like
horizon? I don't see horizon getting set
horizon? I don't see horizon getting set
anywhere.
It gets auto set from
It gets auto set from
this. Wait, does
this. Wait, does
it hang
on? Ryzen doesn't get set here.
max age agent speed. All this stuff is
set. We call this a nit
set. We call this a nit
grid and calling it
state. We don't actually set the state
state. We don't actually set the state
of this effort, do
we? Okay.
Yeah, we don't ever call set state. But
Yeah, we don't ever call set state. But
then the first thing we should do is
then the first thing we should do is
call reset. It should do it.
No. Yeah. This call set
state and levels of index.
which should set width, height,
which should set width, height,
horizon, numb agents, all
that
Any other weird stuff going
on? Max
size. Create maze level.
Width
height width
height width
height size is already set.
height size is already set.
See
grid?
Nope. Really don't see anything wrong.
Also, why is this running in a
Also, why is this running in a
thread? Why do I get like a random
thread? Why do I get like a random
thread kill instead of getting a real
thread kill instead of getting a real
freaking stack price, you know?
now. Do I go back to the address
now. Do I go back to the address
sanitizer?
Hey, where's that LD
line? You know what? Let's learn
line? You know what? Let's learn
something today. What's the reverse
something today. What's the reverse
command? Oh
command? Oh
Control R.
[Music]
[Music]
Uh yeah, that's literally
Uh yeah, that's literally
it. I don't know why. Literally never
it. I don't know why. Literally never
use
that. Asan check
failed. Why is it failing in torch?
When I'm training in CPU
When I'm training in CPU
[Music]
mode, this is failing in get device
mode, this is failing in get device
count. That doesn't make any sense at
count. That doesn't make any sense at
all.
Right. Yeah, that makes absolutely no
Right. Yeah, that makes absolutely no
sense.
Oh, and wait. This is with Puffer Pong
Oh, and wait. This is with Puffer Pong
as well. So, you just straight up can't
as well. So, you just straight up can't
run a dress sanitizer with
run a dress sanitizer with
um with torch, I guess. Yeah, that
um with torch, I guess. Yeah, that
sucks.
one map chunk. I'm unm
At least doesn't fail on import
anymore. I don't think it fails on like
anymore. I don't think it fails on like
any of the operations.
related to the end
either. Yeah, back resets just fine,
either. Yeah, back resets just fine,
right? The back
step. Yeah, I know. See, it gets through
step. Yeah, I know. See, it gets through
back reset, but then it fails before
back reset, but then it fails before
backst step somehow.
I'm not even doing anything weird memory
I'm not even doing anything weird memory
wise. I don't think I am. At
wise. I don't think I am. At
least you can numb maps
least you can numb maps
levels. I didn't mess up these two
levels. I didn't mess up these two
things, right?
Yeah, you have num maps and num
Yeah, you have num maps and num
ms, right? This gets num ms. This one
ms, right? This gets num ms. This one
has num
maps. Maps, max size, size, max
maps. Maps, max size, size, max
size, num max.
My internet's
My internet's
down. Hello. Are we
back? Internet cut out for a
second. Uh oh.
This might be reream switching servers
This might be reream switching servers
on
us. Yeah, internet's
us. Yeah, internet's
fine. Okay, I think it's
fine. Okay, I think it's
back. I think we're
back. I think we're
good. That was
good. That was
weird. Get out of here, Twitchbot.
weird. Get out of here, Twitchbot.
I build the
bots. This is a tough
bots. This is a tough
one. This is definitely a tough one.
Let me make sure this is exactly how I
Let me make sure this is exactly how I
was doing it
before. I didn't miss anything,
right? And gets assigned max
right? And gets assigned max
size, numbum agents, vision,
size, numbum agents, vision,
speed, discretize. And I assign all
speed, discretize. And I assign all
these things in the init grid function.
Now then you pull a
Now then you pull a
knit. Just make double
sh. Yeah, these are just there
now.
now.
Oh, that might be it right there.
I just pasted these at the
I just pasted these at the
bottom. That could be
bottom. That could be
it. That could totally be on me.
bizarrely
bizarrely
slow. Do
this. There we
this. There we
are. My
are. My
bad. Uninitialized variable.
I'm trying to think if there's anything
I'm trying to think if there's anything
I could have done to prevent that.
Where does that even factor
in? I'm sure that this gets used in a
in? I'm sure that this gets used in a
memory allocation somewhere. So, I
memory allocation somewhere. So, I
thought I was allocating the memory, but
thought I was allocating the memory, but
I wasn't because it was
zero. Um, that was
silly. Let's see whether uh this does
silly. Let's see whether uh this does
anything now.
Believe we had some baselines for
Believe we had some baselines for
comparison at some point earlier today,
comparison at some point earlier today,
didn't we?
Let me find the graph that I had from
Let me find the graph that I had from
earlier
today. I think it was this. I think we
today. I think it was this. I think we
got like 80%
got like 80%
in 100 mil steps
in 100 mil steps
before. So, we're not doing that right
now. I have to see if it's apples to
now. I have to see if it's apples to
apples, though.
Also, while we're
Also, while we're
here, we may as well
um we should have a neural MMO
um we should have a neural MMO
experiment still
running. Yeah. Okay. Something
running. Yeah. Okay. Something
definitely wrong. These tests are not
definitely wrong. These tests are not
since we added the advantage filtering
since we added the advantage filtering
stuff has not been working fully
correctly. This is still training but
correctly. This is still training but
it's not training as quickly as
before. But this will pass for
before. But this will pass for
um interface. So like we can actually
um interface. So like we can actually
test the interface at
test the interface at
least and then I will have to deal with
least and then I will have to deal with
the rest of this. I think we shipped
the rest of this. I think we shipped
this for
this for
now. Uh let me double check really
quick. Max map size
n maps. No, I think this is correct. I
n maps. No, I think this is correct. I
think these were the same settings we
think these were the same settings we
were using.
Not like zeroing out the reward or
Not like zeroing out the reward or
anything. Dumb,
anything. Dumb,
right? Red
right? Red
counts. No, that's fine.
Okay. Well, we will leave this be.
Okay. Well, we will leave this be.
Actually, this is not bad. I'm seeing
Actually, this is not bad. I'm seeing
now that we're only at 100 mil. This is
6. That's lower than before, but it's
6. That's lower than before, but it's
not like ridiculously low.
And it's possible we played with some
And it's possible we played with some
other stuff in the
other stuff in the
meantime. All
meantime. All
right,
cool. I'm satisfied with that.
Cool. So,
Cool. So,
um, let me switch gears to something
um, let me switch gears to something
real
quick. Do we have Isaac on here?
quick. Do we have Isaac on here?
Now, we don't have any of this stuff set
Now, we don't have any of this stuff set
up. That's
unfortunate. Let me go get all that. I
unfortunate. Let me go get all that. I
have to
have to
uh we shipped some code a while ago on
uh we shipped some code a while ago on
robotic
robotic
stuff and I just have to make sure
stuff and I just have to make sure
uh I just have to make sure
that it works the way we thought it
did. So, some folks are having some
did. So, some folks are having some
trouble loading
trouble loading
it. No, Isaac thing in
it. No, Isaac thing in
here. I think I just put it in the repo,
maybe. Let me go find the exact one.
Let me find the link and then we will go
Let me find the link and then we will go
do that.
It's not covered chat. It was nice and
It's not covered chat. It was nice and
quiet tonight.
Don't want to redo the whole container.
Don't want to redo the whole container.
I just want to get this one thing
I just want to get this one thing
running.
We'll see if that is enough to uh to run
it.
What? Let me also find the model that we
What? Let me also find the model that we
trained.
trained.
So, we're going to see if we can load
So, we're going to see if we can load
that in.
Can you copy a
link? Whatever.
We will
We will
um grab the
um grab the
policy. We having connectivity problems
again. Stream shows it's fine, but X now
again. Stream shows it's fine, but X now
shows it's
offline. So this is a uh animation
offline. So this is a uh animation
generation
generation
model. It goes through a physics sim. It
model. It goes through a physics sim. It
uses reinforcement learning to correct
uses reinforcement learning to correct
motions by like running the physics and
motions by like running the physics and
making sure that it makes sense.
Uh all I got to do on this just a real
Uh all I got to do on this just a real
quick job. I have to uh make sure that
quick job. I have to uh make sure that
this thing actually runs the way uh we
this thing actually runs the way uh we
expect it to because some folks using
expect it to because some folks using
this were having some trouble.
a lot of checkpoints.
Let's delay this
one. 37
Right. Have to get Isaac
Right. Have to get Isaac
gem. It's
gem. It's
annoying. It is quite easy to get at
annoying. It is quite easy to get at
least.
I thought I had it in
the Yeah, I do have it there, right?
All right. What dependency did I forget?
probably just a case that this Um,
some
sim. Is this a pip install? Is this in
sim. Is this a pip install? Is this in
the dependencies here?
Let me just ask him if he's around.
Oh, wait. This is the wrong one, isn't
Oh, wait. This is the wrong one, isn't
it? Yeah. Yeah. Yeah. It's not warp.
it? Yeah. Yeah. Yeah. It's not warp.
It's
It's
whatever. What did he name this?
should
be. Yeah, this is me being
dumb. What did you call
this? Oh, it is morph, isn't it?
This this is definitely killing editing
This this is definitely killing editing
Yes.
Maybe there's a morph
on. See anything?
and try this one.
Yeah, this is set up with Pixie
Yeah, this is set up with Pixie
annoyingly.
There's like so many domain specific
There's like so many domain specific
applications that we could make work.
applications that we could make work.
It's just there's like so much sludge to
It's just there's like so much sludge to
wade
wade
through. This is after cleaning
through. This is after cleaning
everything up.
takes forever.
The unit code
The unit code
um loading is kind of funny
though. Oh, did I miss a
though. Oh, did I miss a
message? I don't know when that was
message? I don't know when that was
from. Is that Did I miss that from a
from. Is that Did I miss that from a
long time ago? No. Four minutes. All
long time ago? No. Four minutes. All
right. I just started understanding RL
right. I just started understanding RL
implementation of breakout
implementation of breakout
DQN on your ocean breakout.
I want to know if it does a fire
I want to know if it does a fire
reset on it. Yeah, it'll auto
reset on it. Yeah, it'll auto
reset.
reset.
So, I forget what fire reset. I think
So, I forget what fire reset. I think
that's the
uh is that when it like it'll fire
uh is that when it like it'll fire
automatically? If so,
automatically? If so,
yes. It can't just sit around and like
yes. It can't just sit around and like
keep the ball on the paddle. Also, the
keep the ball on the paddle. Also, the
environment will auto reset. You don't
environment will auto reset. You don't
need to reset it. You will get the done
need to reset it. You will get the done
signal back from the environment, but
signal back from the environment, but
you will not need to reset
you will not need to reset
it if that
helps. I believe that's on latest
helps. I believe that's on latest
version as well. Uh the 2.0
version as well. Uh the 2.0
version, it may or may not fire the ball
version, it may or may not fire the ball
on its own. I forget whether we have
on its own. I forget whether we have
that on 2.0. Definitely the dev branch.
that on 2.0. Definitely the dev branch.
Uh it fires on its
Uh it fires on its
own. Either way, it'll auto
own. Either way, it'll auto
reset. Yeah, I just I missed that for a
reset. Yeah, I just I missed that for a
few minutes. My bad. I had windows
few minutes. My bad. I had windows
covering the chat
covering the chat
up. I have like way too many random
up. I have like way too many random
projects floating around in my head at
projects floating around in my head at
the moment. need to like finish this
the moment. need to like finish this
stuff up, fix the cluster, and uh set
stuff up, fix the cluster, and uh set
aside some good dev time to fix all the
aside some good dev time to fix all the
things I've been working on lately.
All good. Thanks for entering. Yep.
Where is
Jim? Oh, inside VS Code. We don't need
Jim? Oh, inside VS Code. We don't need
that.
I thought I had these already actually.
I thought I had these already actually.
Don't I do I not have these Ready?
torch. So, I do need to get that working
keep it rust.
Maybe I can just do this.
Yeah. So this is supposed to be the
Yeah. So this is supposed to be the
specific model I guess right
Where is the art on this?
So that's the individual motion file.
You
found I need to go get the data files,
found I need to go get the data files,
don't I?
Uh, how do you unzip these too?
Interesting. Give it a second, I guess.
It's kind of crazy that this
works. That's like a ridiculously hard
works. That's like a ridiculously hard
motion.
work. Great. This gives me a hard
What the hell happened to my
What the hell happened to my
button?
Okay. Well, whatever the hell that
Okay. Well, whatever the hell that
was didn't freaking work.
Much
easier. Uh, this looks to be a different
easier. Uh, this looks to be a different
format
though. pickle files, right?
I'll have to check back with him.
Okay. Well, I got this up and running.
Okay. Well, I got this up and running.
At least I need to figure out the uh the
At least I need to figure out the uh the
data. Kim will tell me what the data
data. Kim will tell me what the data
format was for this. No big deal. Um
format was for this. No big deal. Um
what time is it? 7:43.
what time is it? 7:43.
Yeah, I think we've got this is enough
Yeah, I think we've got this is enough
that we'll be able to quickly sort this
that we'll be able to quickly sort this
out tomorrow.
send a quick message on that and then we
send a quick message on that and then we
will uh I'll take two and then we will
will uh I'll take two and then we will
do some other
All
right, that's set. There's the restroom
right, that's set. There's the restroom
real quick. And then I
real quick. And then I
think we do also have to fix the damn
cluster. So that might be more of a
cluster. So that might be more of a
tomorrow morning kind of a thing.
tomorrow morning kind of a thing.
We will
We will
see. There's definitely still some stuff
see. There's definitely still some stuff
I need to finish
I need to finish
tonight. Tomorrow might be a lot of
tonight. Tomorrow might be a lot of
cluster depth.
Um, I'll be right back and then we'll
Um, I'll be right back and then we'll
see what we're going to do. One second.
Well, of course I checked my texts and I
Well, of course I checked my texts and I
have more bug messages for stuff I am
have more bug messages for stuff I am
supporting. So, I'm going to go deal
supporting. So, I'm going to go deal
with that one. This one should actually
with that one. This one should actually
be quick.
And then hopefully I'll at least have
And then hopefully I'll at least have
like an hour to
like an hour to
do a little bit of follow-up stuff on
do a little bit of follow-up stuff on
the main
repo. We still have some things to fix
repo. We still have some things to fix
there as
well. Get the
well. Get the
Slack. Find the repo.
Slack. Find the repo.
See if they've given me repro
instructions.
Okay. Dev branch
random loop of random actions without
random loop of random actions without
sampling. It seems that there is no fire
sampling. It seems that there is no fire
reset
reset
as the OBS remains the same. Yeah,
as the OBS remains the same. Yeah,
that's possible. Um I think on the main
that's possible. Um I think on the main
2.0 I'm pretty sure that we didn't it
2.0 I'm pretty sure that we didn't it
there yet?
there yet?
Uh without sampling fire equals
Uh without sampling fire equals
one. If you sample random actions, it
one. If you sample random actions, it
should
fire. It's just in there as uh as one of
fire. It's just in there as uh as one of
the actions it can
the actions it can
take. Let me find it for you.
Okay. So, no op is zero, fire is one,
Okay. So, no op is zero, fire is one,
left is two, and right is
left is two, and right is
three in the uh the
code.
Yeah. And you're getting ops remain the
Yeah. And you're getting ops remain the
same.
Check if it I rejected when the sampler
Check if it I rejected when the sampler
gives
one. Oh, okay. I see. Yeah. So, we
one. Oh, okay. I see. Yeah. So, we
changed this.
changed this.
Um, in
Um, in
2.0 it works, I believe, like breakout
2.0 it works, I believe, like breakout
does without that wrapper. And then we
does without that wrapper. And then we
realized that what can happen is if you
realized that what can happen is if you
get really bad hyperparameters,
get really bad hyperparameters,
uh, you can never fire the ball. So you
uh, you can never fire the ball. So you
never get any score and it breaks
never get any score and it breaks
logging. So I just made it auto fire
logging. So I just made it auto fire
after that because it really doesn't
after that because it really doesn't
change anything with the learning
change anything with the learning
problem if you think about it. And it
problem if you think about it. And it
just like prevents that annoying edge
just like prevents that annoying edge
case from happening.
case from happening.
It would be the type of thing where
It would be the type of thing where
you'd run like a sweep of 50 experiments
you'd run like a sweep of 50 experiments
and then one would like hang with no
and then one would like hang with no
data because, you know, you need at
data because, you know, you need at
least some data to log and it's just
least some data to log and it's just
sitting there not firing the
ball. But that doesn't happen with good
ball. But that doesn't happen with good
hyperparameters. That only happens if
hyperparameters. That only happens if
you're like sweeping arbitrary
you're like sweeping arbitrary
hyperparameters and your model's really
hyperparameters and your model's really
bad.
Also, the whole code for Breakout
Also, the whole code for Breakout
is I guess it's kind of long. We did
is I guess it's kind of long. We did
some like stuff on the physics in here
some like stuff on the physics in here
like to improve cuz the original Atari
like to improve cuz the original Atari
has a bunch of physics bugs. So, we
has a bunch of physics bugs. So, we
tried to improve on that a little bit.
tried to improve on that a little bit.
So, there's some extra physics in here,
but 2.0 is current. Yeah, 2.0 0 is the
but 2.0 is current. Yeah, 2.0 0 is the
current version that same people use
current version that same people use
unless you're trying to do like bleeding
unless you're trying to do like bleeding
ed edge dead stuff on the version of
ed edge dead stuff on the version of
puffer lib that I'm allowed to break
puffer lib that I'm allowed to break
without notice. So
without notice. So
uh 2.0 know is now
uh 2.0 know is now
like January, February, March, April is
like January, February, March, April is
four months behind
four months behind
uh is four months behind dev and we have
uh is four months behind dev and we have
a lot of new cool new stuff in dev. But
a lot of new cool new stuff in dev. But
it's also a mess and like I need to
it's also a mess and like I need to
clean up a whole bunch of stuff before
clean up a whole bunch of stuff before
everything is good and stable there cuz
everything is good and stable there cuz
our release cycles are pretty long. You
our release cycles are pretty long. You
know, we we usually do like six month
know, we we usually do like six month
release cycle or
release cycle or
whatever and then there's a lot of stuff
whatever and then there's a lot of stuff
in those
releases. 2.0 is also the default
releases. 2.0 is also the default
branch. So that's what you'll get if you
branch. So that's what you'll get if you
just know clone the
just know clone the
basic clone it and like don't branch
Okay, I need
the I need this
the I need this
thing public, right?
I need that file. I guess
Let me figure out where that file comes
from. It's this random data file.
Oh, it didn't add me to the G
drive. Is this in the
It's not in here. Target
is All
right. Whatever. Can't test this until
right. Whatever. Can't test this until
they give me access to data files. So,
they give me access to data files. So,
we get a little bit of a repeat for now.
Um, so the main
Um, so the main
thing there are a few things I want to
thing there are a few things I want to
do, but really the biggest most
do, but really the biggest most
important thing at the moment
important thing at the moment
is figuring
is figuring
out the perf. We're
seeing Yeah, this episode return kind of
seeing Yeah, this episode return kind of
just gets screwed up.
It's not like anything is horrible early
It's not like anything is horrible early
on
on
here. There's a big entropy crash here,
here. There's a big entropy crash here,
but it's already dead by
then. This Okay, value loss spike could
then. This Okay, value loss spike could
explain
something. I guess I want to just run
something. I guess I want to just run
some
some
basic basic experiments real quick.
But with this, it could definitely be
But with this, it could definitely be
the
same. Let's do actually
token.
This still
works. 20 million steps. Yep, this still
works. 20 million steps. Yep, this still
totally works.
Oh, break up's
Oh, break up's
broken. How'd that happen?
Yeah, that's definitely broken.
Um, cool. Cuz I had this working earlier
Um, cool. Cuz I had this working earlier
today.
Yeah, this is off. So, this shouldn't be
Yeah, this is off. So, this shouldn't be
affecting
anything. Horizon of
64. Yeah, this is also the
same. Uh this is also wait native
Entry
Entry
processing. That shouldn't be it.
if we can see it
here. 10 12 20
40. That's a weird index.
Oh, no. That's
2048. Yeah, that makes sense.
Why are the first ones on the
zero? That's definitely weird.
Okay. Zero through this, right?
Oh, you don't need to zero this. This is
Oh, you don't need to zero this. This is
bad. Yeah, don't zero this.
Hey, what is
this? Uh, this thing breaks somehow.
Okay. Yeah. So in this case pull
Okay. Yeah. So in this case pull
is these ones are all Yeah. Okay.
indices. Now it's at
4096 on episode lengths. Is supposed to
4096 on episode lengths. Is supposed to
be
This is supposed to get zeroed, I
guess. Yeah.
Okay. 61 144
rows. So there's got to be an assert
rows. So there's got to be an assert
there, I think. But this should be
there, I think. But this should be
correct. This gives you precisely
Like you're missing one step at the end
Like you're missing one step at the end
of this trajectory.
But it's otherwise
okay. This makes sense.
use this
use this
for that's just
for that's just
logs f length f indices
Yes. I think we use that
Now we
Yeah, this seems
fine. We do batch rows.
for all your data.
Let me check a couple
things. Does this work?
Yeah, it
Yeah, it
does. So, this
trains. So, I'm probably batching
trains. So, I'm probably batching
something wrong, right? There's probably
something wrong, right? There's probably
like some edge
case. Yeah, cuz this matches like the
case. Yeah, cuz this matches like the
previous
solves. Oh, I didn't see that. I got
solves. Oh, I didn't see that. I got
Insta added to that.
Insta added to that.
Let me go do that real quick.
Just real quick go do that thing.
That is a 1 gigabyte
That is a 1 gigabyte
CSV. That is
CSV. That is
impressive. One gigabyte CSV.
It
sounds not in space.
32. There's no way this is that silly of
32. There's no way this is that silly of
an
an
error. Is this
actually I literally told them about
actually I literally told them about
this one, didn't I?
Where's the
Where's the
end? This
Uh, batch size. Mini batch
size. Oh my god. Batch size
32. It's not even made for size that
32. It's not even made for size that
small,
mate. That's not even made for something
mate. That's not even made for something
that small. That's crazy.
I guess this one's not got to be like
I guess this one's not got to be like
this or something, right?
That looks like it's going to take
That looks like it's going to take
forever to
run. Yep, that's actually going to take
run. Yep, that's actually going to take
forever to run. That's crazy. It's like
forever to run. That's crazy. It's like
manually loading that file a billion
manually loading that file a billion
times. We're going to do like
eight
six like
crazy
slow. I think it's like plotting or some
slow. I think it's like plotting or some
crap though. They haven't tried to
crap though. They haven't tried to
optimize this at all.
So, I'll let them screw with that for a
So, I'll let them screw with that for a
while. I unblock them at
while. I unblock them at
least. Back to the real work
here. Um, new dev branch somehow.
So, we know for sure it's uh some sort
So, we know for sure it's uh some sort
of
of
weird issue, right? Cuz this one doesn't
weird issue, right? Cuz this one doesn't
work. It works with one and not with
work. It works with one and not with
two.
Yeah. So, see it starts working and then
Yeah. So, see it starts working and then
it
crashes, which is
interesting. Do we just have to zero all
interesting. Do we just have to zero all
the buffers?
We do values
work. Oh, that doesn't solve it.
still crashing. So, it's not zeroing
still crashing. So, it's not zeroing
buffers. Got to be like writing the
buffers. Got to be like writing the
index wrong,
right? You would think
right? You would think
so. I mean, this is a fiddly little bit
so. I mean, this is a fiddly little bit
of logic.
What's my J look like?
Yeah, this is like simple simple J.
Yeah, this is like simple simple J.
There's nothing wrong here.
So,
Yeah. Okay. So, this is this looks good
Yeah. Okay. So, this is this looks good
to me.
This all seems
reasonable. I don't think there's any
reasonable. I don't think there's any
trouble you can even get into after you
trouble you can even get into after you
um you get to the sampling stage, right?
You kind of already have all your data
You kind of already have all your data
by
by
then, I guess. Like
technically plus equals Z. You add it
technically plus equals Z. You add it
though. Yeah. Plus plus equals. This is
though. Yeah. Plus plus equals. This is
fine.
Not this thing,
right? No, because these indices come
right? No, because these indices come
from here. These are unrelated.
I thought that this was working before
I thought that this was working before
as well. It doesn't like suddenly work
as well. It doesn't like suddenly work
if I do this right.
No, it
doesn't. Oh,
actually, no, it doesn't. Okay,
so we definitely had this thing working
before. Definitely had this working
before. Definitely had this working
before.
And it still works with one
And it still works with one
end as the kicker. So I definitely just
end as the kicker. So I definitely just
screwed up some of this indexing and I'm
screwed up some of this indexing and I'm
not seeing
not seeing
it. 834. I'm going to give it like a
it. 834. I'm going to give it like a
good 20 minutes right now. See if we can
good 20 minutes right now. See if we can
find it. And if not, it's going to be
find it. And if not, it's going to be
for the morning.
See how I call
See how I call
this state of value action.
very
weird. A lot of weird bugs today
weird. A lot of weird bugs today
though. A lot of weird bugs
today. It's not a masking bug. We don't
today. It's not a masking bug. We don't
use masking for this.
It's got to be either in store or the
It's got to be either in store or the
way that we're using those indices, I
way that we're using those indices, I
would
think. But it seems pretty simple.
Try one other Okay.
Something is wrong
Something is wrong
there. Something is in fact wrong
there. Something is in fact wrong
there. Why the f length's
there. Why the f length's
55? Doesn't make sense, right?
Oh, did the M's get desynced
somehow. If that's going to be the
somehow. If that's going to be the
case, that's going to be pretty gross.
The heck of the plate zero.
You got to be kidding
me. Well, that's awful.
Not multiprocessing
Not multiprocessing
save. Cool.
Yeah, that's really
Yeah, that's really
bad. Okay. Well,
bad. Okay. Well,
uh, we found
it. I think we'll even do this. Let's
it. I think we'll even do this. Let's
just make sure it works with this as
well. We'll push
well. We'll push
this. We'll run neural MMO. We'll see if
this. We'll run neural MMO. We'll see if
we can actually get the to train
we can actually get the to train
now. I'm pretty damn sure this is a
now. I'm pretty damn sure this is a
problem,
though. So, what happened
though. So, what happened
is since we're collecting trajectory
is since we're collecting trajectory
segments, we're kind of assuming they're
segments, we're kind of assuming they're
a fixed length.
Now, I mean, I have here like I have
Now, I mean, I have here like I have
ways around this and ways to fix this
ways around this and ways to fix this
stuff, but it's going to require a
stuff, but it's going to require a
little bit of care.
At least we'll be able to test neural
At least we'll be able to test neural
MMO tonight. That's the thing. I didn't
MMO tonight. That's the thing. I didn't
want to waste a night of having like no
want to waste a night of having like no
runs
runs
overnight. This even looks a little
overnight. This even looks a little
better than the previous. This is
better than the previous. This is
good. Okay. Advanced filtering. Good.
Oh, we have to fix the
uh No big deal.
23% time on the ends without the uh
23% time on the ends without the uh
multipprocessing, but it'll be enough
multipprocessing, but it'll be enough
for us to run an experiment.
Well, we found that
today. Definitely need to up the back
today. Definitely need to up the back
prop horizon as well.
completely
crashed.
Whatever. Then I commit this file,
Whatever. Then I commit this file,
dummy.
Okay. Still trains
500k. Good enough.
All right, we found the
All right, we found the
bug. Very
bug. Very
good. I'm going to do a couple more
good. I'm going to do a couple more
things. I think we'll see. But,
things. I think we'll see. But,
um, for folks watching, since we do have
um, for folks watching, since we do have
a fair few folks on at the moment, I
a fair few folks on at the moment, I
stream all my dev. This is mostly it's
stream all my dev. This is mostly it's
semi-educational but also just like
semi-educational but also just like
watch RL research happen live. I guess
watch RL research happen live. I guess
it's a good mix of science and
it's a good mix of science and
engineering. Um, if you want to help me
engineering. Um, if you want to help me
out for free, start the GitHub. It's all
out for free, start the GitHub. It's all
open source.
open source.
Huffer.ai. It's all right here. Start
Huffer.ai. It's all right here. Start
the repo. We're trying to hit 2K. If you
the repo. We're trying to hit 2K. If you
want to get involved with dev, join the
want to get involved with dev, join the
Discord.
Discord.
Many of our best contributors now came
Many of our best contributors now came
in with zero RL experience. Frankly,
in with zero RL experience. Frankly,
just having like a decent programming
just having like a decent programming
background and being able to write very
background and being able to write very
simple low-level code without making a
simple low-level code without making a
mess is probably more valuable coming
mess is probably more valuable coming
in. And if you want more RL content, you
in. And if you want more RL content, you
can just follow me on X as well, where I
can just follow me on X as well, where I
post pretty much exclusively RL content
post pretty much exclusively RL content
there,
there,
too. Let's see what we finish up with
too. Let's see what we finish up with
tonight. Good day overall.
tonight. Good day overall.
Good day
overall. See this
thing. Oh, did I make score equal to
thing. Oh, did I make score equal to
mincom prof? I think I think I did do
mincom prof? I think I think I did do
that,
that,
right? Yeah. So, I made everything have
right? Yeah. So, I made everything have
a score so that it would be easier.
Yeah. So there we'll see how this
goes. Um I guess I can talk through
goes. Um I guess I can talk through
since I usually end at like nine. I'll
since I usually end at like nine. I'll
uh I'll talk through a few things with
uh I'll talk through a few things with
the buffer design. So basically what
the buffer design. So basically what
happened here
One second. I need to send one
message. All
right. So,
oops. Here's what happened with the
oops. Here's what happened with the
buffer,
buffer,
right?
right?
Before you were getting batches of
Before you were getting batches of
experience. So, you have like this big
experience. So, you have like this big
bank of
bank of
environments, right? Ms.
All right. Then what would happen is
All right. Then what would happen is
like you would get a batch of experience
like you would get a batch of experience
like
like
this and then you would get like a batch
this and then you would get like a batch
of experience like
of experience like
this. Uh but they aren't necessarily
this. Uh but they aren't necessarily
going to all come alternating, right? So
going to all come alternating, right? So
you could do something like
you could do something like
this. You know, they come in whatever
this. You know, they come in whatever
order they happen to be ready in.
order they happen to be ready in.
So before I was essentially taking all
So before I was essentially taking all
this data as it came in and putting it
this data as it came in and putting it
into a big flat buffer, but I was also
into a big flat buffer, but I was also
tracking
indices. So what would happen is if uh
indices. So what would happen is if uh
if you got more data from one than the
if you got more data from one than the
other, you know, maybe this would be
other, you know, maybe this would be
like one, two, three,
like one, two, three,
four, and then you had like one, two,
four, and then you had like one, two,
three, four, whatever. You could
three, four, whatever. You could
actually reassemble them into the order
actually reassemble them into the order
so that like one and four are
so that like one and four are
contiguous, two and three are
contiguous, two and three are
contiguous, and everything is happy.
contiguous, and everything is happy.
The problem is uh I don't want to be
The problem is uh I don't want to be
storing data flat like this. Now with
storing data flat like this. Now with
the new experience buffer
design, it makes it very hard to do
design, it makes it very hard to do
advantage
advantage
filtering. What I have now is we still
filtering. What I have now is we still
have the same
have the same
M. Okay, but the experience buffer is no
M. Okay, but the experience buffer is no
longer flat. It looks like
longer flat. It looks like
this. So you have a certain number of
this. So you have a certain number of
rows
rows
And then this is the trajectory segment
length. And what happens now is like
length. And what happens now is like
let's say you get your experience
let's say you get your experience
buffers. All right. So this is your M's
buffers. All right. So this is your M's
again and they come in out of
again and they come in out of
order. Let's draw a few more of them
order. Let's draw a few more of them
this time.
What happens is that you fill in one,
What happens is that you fill in one,
two. So you fill in this with here. Then
two. So you fill in this with here. Then
you fill in this from here. But you've
you fill in this from here. But you've
actually filled
actually filled
in you filled in all of
this. And what happens is as soon as you
this. And what happens is as soon as you
get to the end of one of
get to the end of one of
these, as soon as you get to the end of
these, as soon as you get to the end of
one of these, um, it just says, "Okay,
one of these, um, it just says, "Okay,
we're
we're
done." And you say, "Well, what about
done." And you say, "Well, what about
all this data?" Well, it doesn't account
all this data?" Well, it doesn't account
for it. So, now you have partial
for it. So, now you have partial
trajectories in
trajectories in
here, and that can really screw stuff
up. So,
It's a little tricky the way
It's a little tricky the way
vectorization is written at the
moment. The easiest fix I could come up
moment. The easiest fix I could come up
with for this would be to do a round
with for this would be to do a round
robin type of a
robin type of a
thing, right? And I could just instead
thing, right? And I could just instead
of changing the experience buffer, I
of changing the experience buffer, I
could change the
could change the
vectorzation so that it just does the
roundroin. So you know, then the data
roundroin. So you know, then the data
comes in like this and then like this
comes in like this and then like this
and then like this and like
and then like this and like
this. And with all of our amps, that'll
this. And with all of our amps, that'll
still be nice and fast.
It's kind of not
bad. I probably could even come up with
bad. I probably could even come up with
smart way to do
smart way to do
it because like so slower MS typically
it because like so slower MS typically
have a bunch of processes so it's not
have a bunch of processes so it's not
just like two big buffers going back and
just like two big buffers going back and
forth it's like 20 little
forth it's like 20 little
buffers. I could probably even do it so
buffers. I could probably even do it so
that instead of it having to be
that instead of it having to be
roundroin it could be just
roundroin it could be just
like you're guaranteed that you get one
like you're guaranteed that you get one
step from each end before it starts
step from each end before it starts
repeating. You
repeating. You
know, I could do
that.
that.
Okay, that's not a bad fix. That's not a
Okay, that's not a bad fix. That's not a
bad fix at
all. I don't have time to implement that
all. I don't have time to implement that
tonight, but that's what we'll do in the
morning. Hello, Neural MMO.
We're not going to see mincom prof,
We're not going to see mincom prof,
right?
right?
Score. Yeah, score is going to be flat
Score. Yeah, score is going to be flat
for quite a while. I don't expect that
for quite a while. I don't expect that
to be magically better. It takes a long
to be magically better. It takes a long
time to get any score in neural mo. It's
time to get any score in neural mo. It's
a very hard end. You see the return go
a very hard end. You see the return go
up. So, you're getting rewards, but
up. So, you're getting rewards, but
you're not getting scoring points.
you're not getting scoring points.
Points are way harder to get than
Points are way harder to get than
reward.
Only other thing I can do to to think to
Only other thing I can do to to think to
do is look at the network, but I've only
do is look at the network, but I've only
got a few minutes. Um, I try to keep
got a few minutes. Um, I try to keep
my, you know, one of the things I've
my, you know, one of the things I've
noticed with all this the work that I do
noticed with all this the work that I do
on this, I mean, I pretty much just
on this, I mean, I pretty much just
work, eat, sleep,
work, eat, sleep,
exercise.
exercise.
Um, it's pretty hard to keep that
Um, it's pretty hard to keep that
schedule if you get out of sync. at
schedule if you get out of sync. at
least it is for me. But if I keep sleep
least it is for me. But if I keep sleep
on schedule, get good sleep, get a good
on schedule, get good sleep, get a good
diet and everything, get my exercise in
diet and everything, get my exercise in
and everything's kind of well
and everything's kind of well
regimented, then it's pretty easy to
regimented, then it's pretty easy to
keep working the longer
hours. But yeah, tomorrow we will fix
hours. But yeah, tomorrow we will fix
this buffer. Uh fixing this buffer
this buffer. Uh fixing this buffer
should hopefully mean that we can merge
should hopefully mean that we can merge
all this good stuff into the dev branch
all this good stuff into the dev branch
pretty soon. So we return to nice stable
pretty soon. So we return to nice stable
dev branch once again.
dev branch once again.
Um, we should be able to start
Um, we should be able to start
benchmarking advantage filtering
benchmarking advantage filtering
properly and then we can also start
properly and then we can also start
messing with the other algorithms that
messing with the other algorithms that
we've been playing with with a bit more
we've been playing with with a bit more
confidence than before because that was
confidence than before because that was
uh an issue, right? We were getting
uh an issue, right? We were getting
inconsistent
inconsistent
results. The really major one I'm
results. The really major one I'm
looking at at the moment is this uh
looking at at the moment is this uh
variant of diversity is all you need.
variant of diversity is all you need.
The goal is to learn conditioned
The goal is to learn conditioned
policies that are visually
policies that are visually
distinguishable. So you can kind of tell
distinguishable. So you can kind of tell
uh you can tell policies, hey, do
uh you can tell policies, hey, do
different stuff and you'll be able to
different stuff and you'll be able to
see different agents doing different
see different agents doing different
stuff, playing differently. It's a good
stuff, playing differently. It's a good
exploration method. It's good for a lot
exploration method. It's good for a lot
of stuff. Um I've been working on that.
of stuff. Um I've been working on that.
I've been working on the advantage
I've been working on the advantage
filtering stuff. Uh I still have P30. I
filtering stuff. Uh I still have P30. I
have to get back to that. That is the
have to get back to that. That is the
new advantage
new advantage
function that I've been working on
function that I've been working on
because we definitely need to replace
because we definitely need to replace
generalized advantage
generalized advantage
estimation. And then there are a few
estimation. And then there are a few
other little miscellaneous things
other little miscellaneous things
around. Oh yeah, curriculum learning the
around. Oh yeah, curriculum learning the
end finding stuff for curriculum
end finding stuff for curriculum
learning. I had to tell Aaron, let me go
learning. I had to tell Aaron, let me go
link Aaron that real quick.
this binding file that we wrote today.
Okay.
Okay.
Well, how are folks doing
tonight? I kind of just jumped from one
tonight? I kind of just jumped from one
thing to uh the next all day
thing to uh the next all day
since when did I start?
since when did I start?
9:30 a little before
9:30 a little before
maybe 12
hoursish if anyone's looking to get into
hoursish if anyone's looking to get into
RL. Actually, one thing that uh I
RL. Actually, one thing that uh I
usually point folks
usually point folks
to, we do have this blog here. It
to, we do have this blog here. It
doesn't have all the articles. I do like
doesn't have all the articles. I do like
random sort of out there stuff on X
random sort of out there stuff on X
sometimes mostly AI related but uh the
sometimes mostly AI related but uh the
better ones go here and this quick start
better ones go here and this quick start
guide in
guide in
particular is a really way to get
particular is a really way to get
involved with
involved with
RL I give you a few pretty easy to go
RL I give you a few pretty easy to go
through references compared to what's
through references compared to what's
usually suggested pretty small number of
usually suggested pretty small number of
core papers to read some blog posts that
core papers to read some blog posts that
are easier to digest as well a little
are easier to digest as well a little
bit of my perspective on how I think
bit of my perspective on how I think
about of research, too. I definitely
about of research, too. I definitely
suggest
that. I'm sure I'm going to have to keep
that. I'm sure I'm going to have to keep
updating that as we uh learn more and
updating that as we uh learn more and
more things because we know a lot more
more things because we know a lot more
about RL now than even a few months ago
about RL now than even a few months ago
with all the stuff in Puffer.
Tomorrow will
Tomorrow will
be fix uh the vectorzation for the new
be fix uh the vectorzation for the new
experience buffer. Do
experience buffer. Do
roundroin. Fix our
roundroin. Fix our
servers. Make sure the robotics thing
servers. Make sure the robotics thing
works. Hopefully we get some good
works. Hopefully we get some good
results back on neural
results back on neural
3 and then keep going on the algorithm
3 and then keep going on the algorithm
stuff.
Okay. Well, I'm going to call it for the
Okay. Well, I'm going to call it for the
night. So, thanks for tuning in, folks.
night. So, thanks for tuning in, folks.
We'll be back in the morning. And I'm
We'll be back in the morning. And I'm
pretty much the next like twoish two and
pretty much the next like twoish two and
a half weeks, uh, I'm pretty much just
a half weeks, uh, I'm pretty much just
going to be streaming streaming and
going to be streaming streaming and
debing. kind of gotten my calendar
debing. kind of gotten my calendar
cleared and uh there's a lot of stuff to
cleared and uh there's a lot of stuff to
do on puffer. So, we're aiming towards
do on puffer. So, we're aiming towards
the next major
the next major
release hopefully in the next month or
release hopefully in the next month or
two. Yep. Star the repo once again.
two. Yep. Star the repo once again.
Really want to see this at 2K. That'd be
Really want to see this at 2K. That'd be
great.
great.
But
