Kind: captions
Language: en
live
here let me make sure YouTube actually
here let me make sure YouTube actually
sinks
sinks
up this cutting the top of my head off
up this cutting the top of my head off
no we're good okay so there's some stuff
no we're good okay so there's some stuff
to do
to do
today
today
um oops let's go grab Xander
vision is a little weird though I think
vision is a little weird though I think
I
I
like we're good though
um okay Xander's got an M for code
um okay Xander's got an M for code
review I think that's the only thing I
review I think that's the only thing I
have other than will might message me
have other than will might message me
for uh puffer onboarding as well
oh on the side monitor real quick I got
oh on the side monitor real quick I got
to check for one one quick email and
to check for one one quick email and
then we'll start on some
Dev no we're good nothing urgent
uh I don't know why this machine is
uh I don't know why this machine is
slower we'll figure that out over time
slower we'll figure that out over time
but it's going to be fast enough for
now I think now we get to just start
now I think now we get to just start
going
going
through all the
through all the
environments and checking the baselines
environments and checking the baselines
and updating those
right that's going to be a major
thing oh wait hold on there
was there's some naming stuff as
well let's actually just do like this
got to go grab one b key this is a new
machine also do I have my chat visible
here I think I have to until I fix chat
here I think I have to until I fix chat
I'm just going to grab a rest stream iio
window so I think I won't be able to see
window so I think I won't be able to see
anything that's been typed yet but from
anything that's been typed yet but from
now on I will be able to
now on I will be able to
see
see
chat
yes let's go get my WB key
and what we're going to do is we're just
and what we're going to do is we're just
going to go through all the different
going to go through all the different
baselines and uh we're going to start
baselines and uh we're going to start
trying to finalize some of these trained
models Toof that
can okay I'm going to grabb my
key
key
good so here is our pong
model did just drop a point for no
reason this doesn't look great
let's figure out what's going on with
this just going to go through all the
this just going to go through all the
M's one by one and figure out what is
M's one by one and figure out what is
wrong
okay so this is the
Run no this
Run no this
is this run
is this run
right okay this is a solid 21 score
right okay this is a solid 21 score
perfect for right
no frame
skip these prams aren't updated either I
assume
right I know these are
yeah so this looks all correct
then shouldn't be dropping points in
then shouldn't be dropping points in
that case right
unless this just means that it wins all
unless this just means that it wins all
the
time let's
time let's
see so we have scores 21
I see so this just means that you've won
I see so this just means that you've won
the game it doesn't mean that you drop
the game it doesn't mean that you drop
that you don't drop
points we should actually watch it to
points we should actually watch it to
see how good of a policy it is then
yeah it's still h
why is it missing stuff like
that is it trained for too
that is it trained for too
long I get to be unstable
doesn't look like the
doesn't look like the
horrible
Spike does it not get a negative reward
Spike does it not get a negative reward
for losing a
point it would seem it doesn't
but
it this is worse than the one that we
it this is worse than the one that we
have on the website I think
8 to 15
missed at the start like
missed at the start like
twice okay
so it's going to win like every game but
so it's going to win like every game but
the return is questionable
gets a reward of one for
hitting for winning the
point0 one for bouncing the ball
it's the original
Atari e
this is like
sketchy there's no way of
sketchy there's no way of
differentiating games that have
separate score right I actually I think
separate score right I actually I think
the original goes from - 20 to 20
the original goes from - 20 to 20
doesn't
it I think we're going to do this
that's got to be
that's got to be
it it's just sub optimal hypers um
it it's just sub optimal hypers um
because there's no way to break there's
because there's no way to break there's
no way to find out which model is better
no way to find out which model is better
between two models that both win
between two models that both win
regardless of how many points they drop
regardless of how many points they drop
because of the structure of the score
because of the structure of the score
I'm pretty sure that
I'm pretty sure that
uh I can just
find Benchmark
okay you see it starts
okay you see it starts
20 then it goes to 21 it seems
be
rer e
this needs to
be there's no negative reward
here we're going to have to try
something this is negative one
what happens if we train it like
this the heck
something screwed up
something must have set up differently
something must have set up differently
this
time e
this is
correct
correct
uh that's very odd
we'll look at this
after I want to do pong right now one at
after I want to do pong right now one at
a
time okay it's in snake as well well
time okay it's in snake as well well
this one I know definitely
compiles so something is scre
did cython break
something possible syon broke something
something possible syon broke something
in a new version and I don't have it
in a new version and I don't have it
pinned
okay so this just does not
editable installs was recently
introduced did setup tools just break
introduced did setup tools just break
some stuff
I hate I hate the python ecosystem
I hate I hate the python ecosystem
honestly it's like so stupid
okay so that's a legit thing that I just
okay so that's a legit thing that I just
forgot a
forgot a
semicolon but that can't be what was
semicolon but that can't be what was
causing
causing
uh everything
else e
okay so that looks like it built
this has to be puff
pong so same params as
pong so same params as
before different reward
before different reward
function we will probably have to rerun
function we will probably have to rerun
this
s what the heck this something's wrong
s what the heck this something's wrong
with this GPU it's
with this GPU it's
not I mean did I like forget to remove
I was literally looking to see if I
I was literally looking to see if I
forgot to remove
forgot to remove
um like packaging or something because I
um like packaging or something because I
don't know why the heck the he would be
don't know why the heck the he would be
that
I think that this is
I think that this is
[Music]
better let's
see yeah look at that
see yeah look at that
so you can see it starts at -20
this will actually be better though
this will actually be better though
because we will be able to now at least
because we will be able to now at least
see it shouldn't be dropping points
see it shouldn't be dropping points
now right because we changed the
now right because we changed the
score it should be dropping at most one
point
oops for
so here's poer
pal possibly worth running another Sweep
pal possibly worth running another Sweep
with
with
this to see if we can beat it faster
this is immediately
better I Spencer is not going to be
better I Spencer is not going to be
happy about
that
e it's almost like the Jitters are less
e it's almost like the Jitters are less
too inspire me to optimize a bit my
too inspire me to optimize a bit my
Asing P now only uses 15% SPS coming
Asing P now only uses 15% SPS coming
from plr computation rather than sils
from plr computation rather than sils
very good engineering
very good engineering
op engineering
op engineering
op uh for some reason this desktop that
op uh for some reason this desktop that
I've been got I've been given is like
I've been got I've been given is like
the 490 is running at like half speed
the 490 is running at like half speed
somehow and it doesn't seem like it's
somehow and it doesn't seem like it's
just because of
streaming look that perfect perfect
streaming look that perfect perfect
play cursed Hardware
play cursed Hardware
problems I don't know we'll ask I'll
problems I don't know we'll ask I'll
figure out with the main gear guys this
figure out with the main gear guys this
is a brand new desktop
noticed a lot of RL Bas
noticed a lot of RL Bas
lines compute actions and values
um we don't have separate networks
um we don't have separate networks
Ryan so value should just be like one
Ryan so value should just be like one
tiny linear
tiny linear
layer we don't have yeah it's a shared
layer we don't have yeah it's a shared
network
yeah no I'm saying that ours are by
yeah no I'm saying that ours are by
default we don't have separate Target
default we don't have separate Target
networks I don't see the point
really slow yeah there's a weird thing
really slow yeah there's a weird thing
that guy found something similar there
that guy found something similar there
as
as
well and I got to get myself a
token there's definitely some stuff to
token there's definitely some stuff to
optimize in our Baseline but this is the
optimize in our Baseline but this is the
same code this is just Hardware is being
same code this is just Hardware is being
weird today
oops where's my
oops where's my
chat here we go good luck going to get
chat here we go good luck going to get
lunch see you around may I suggest my,
lunch see you around may I suggest my,
calorie
mug
e
e
e e
hey Gamers did Discord invite only nope
hey Gamers did Discord invite only nope
everything that you see here everything
everything that you see here everything
is open source public um contributors
is open source public um contributors
welcome it's discord.gg puffer there are
welcome it's discord.gg puffer there are
like 7 800 people in
here yeah
here yeah
795 welcome number
796 e
okay break out
so here what's he
so here what's he
doing he have sweeps going
let me
let me
see let's see what Spencer is up to oh
see let's see what Spencer is up to oh
wow
uh that's encouraging
8:37 and 5
8:37 and 5
minutes what he
said yeah so he's very very close
thank you really enjoyed your thesis
thank you really enjoyed your thesis
defense no worries um if you haven't
defense no worries um if you haven't
seen my RL Iceberg video or like RL
seen my RL Iceberg video or like RL
quick start guide those are uh I'd
quick start guide those are uh I'd
recommend those as well there are a
recommend those as well there are a
couple pieces of content out now that I
couple pieces of content out now that I
put some effort into
there's some weird stuff going
on me see if he links me that run
update
epox that's a weird
epox that's a weird
one to be linked
I'm interested to see what this is
I'm interested to see what this is
though
h
Connect
Connect
Four we also want to look
Four we also want to look
at knew that in the meantime we we wait
at knew that in the meantime we we wait
for this
well that's not particularly helpful now
well that's not particularly helpful now
is
it where's his sweep e
where did you say that he got 830 some
where did you say that he got 830 some
odd in 300
odd in 300
seconds I
seconds I
see in 500
seconds like if I were going to grab
seconds like if I were going to grab
this point right
here like it's a weird
here like it's a weird
bump
entropy matches this no it
entropy matches this no it
doesn't okay so you can see here that
doesn't okay so you can see here that
this is not a stable param set it's like
this is not a stable param set it's like
slowly diverging
doesn't do a great job with the value
doesn't do a great job with the value
loss
loss
either it's pretty odd that this set
either it's pretty odd that this set
does this
well
score what is it chosen here that's like
score what is it chosen here that's like
so
ridiculous this is fine
value function
coefficient just going with a really low
coefficient just going with a really low
value function
coefficient we might just not want to
coefficient we might just not want to
let models play with
this it's very weird though that they
this it's very weird though that they
like doing that
like doing that
that the uh The Sweep will just set that
that the uh The Sweep will just set that
so
low let me
see yeah you see how all of these are
see yeah you see how all of these are
like down
here
e e
okay so he'll look at that
okay so that handles these
okay so that handles these
two Connect
4 let's go check our Connect 4 run
okay so this score is not
okay so this score is not
good it's needs to sweep or
something e
we good on the mobile
I don't have a baseline for it do I
lots of Ms needing work
mhm that's
fair I'm trying to think what else we
fair I'm trying to think what else we
should do right now with this
I think these just need to be swept
I think these just need to be swept
mostly I've already had the conversation
mostly I've already had the conversation
with Spencer with the minor tweaks
with Spencer with the minor tweaks
needed for
needed for
these MOA does have a good policy we
these MOA does have a good policy we
just need to fix some small things bull
just need to fix some small things bull
should be here as well 23
should be here as well 23
minutes okay
I the thing is the other box I have now
I the thing is the other box I have now
is occupied I mean I can let me see if I
is occupied I mean I can let me see if I
can in the mean time while I'm wait and
can in the mean time while I'm wait and
try to figure out why this box is so
try to figure out why this box is so
weirdly slow welcome YouTube folks as
weirdly slow welcome YouTube folks as
well
so it's using 40% GPU right now because
so it's using 40% GPU right now because
of stream let me
of stream let me
pause let me pause some of these
previews why do
I let me piix some stuff here so I can
I let me piix some stuff here so I can
actually pause previews
have they broke it
okay
I disable this
preview yeah the GPU goes down a bit
the darn re stream
chat there we go so this is at 11k for
chat there we go so this is at 11k for
some
some
reason 7K
53c so it's cooling is fine
the Ule is very
bad maybe I just set up maybe hold
on 16 * 3 is 48
on 16 * 3 is 48
right I
right I
stupid yeah hold on no I'm stupid
stupid yeah hold on no I'm stupid
right that's right
um okay so the optimal that I had before
um okay so the optimal that I had before
was with a
was with a
48 batch size 16
workers is this valid let's see
yeah so that is actually
valid
11.4k so we actually have good M time
11.4k so we actually have good M time
now we're stuck in forward for some
now we're stuck in forward for some
reason
oh when did that change
is there performance regression in
is there performance regression in
towards 2.4
need compile or
something e
I know that I had it at 20K the OA 4
do they switch the
GPU this is PN
y ny4
yeah this is what I have
h
holy how long does this take to
anybody know like a easy GPU Benchmark
anybody know like a easy GPU Benchmark
so I can see if this 490 is actually
so I can see if this 490 is actually
getting uh the perf it's supposed to be
getting I'm trying to think what other
getting I'm trying to think what other
things I could have been missing
that took forever to compile
that took forever to compile
three minute compile
time it's not even like noticeably
faster interestingly the workload is
faster interestingly the workload is
shifted completely
I think there is something actually
I think there is something actually
going wonky at the Cuda level
going wonky at the Cuda level
because the Ford pass was taking up a
because the Ford pass was taking up a
ton before and now it's all in
ton before and now it's all in
learning for and learn
really
odd it's only four gigs memory
okay frame skip four this is
fine yo did you like this other run
fine yo did you like this other run
better let me
better let me
see link
see link
it oh my bad now wait
where well that's good I didn't I didn't
where well that's good I didn't I didn't
see this in the sweep though like I
see this in the sweep though like I
didn't see this run in the the most
didn't see this run in the the most
recent sweep
okay this is at least like more stable
okay this is at least like more stable
it's still slowly diverging a little
it's still slowly diverging a little
bit something weird happen here as
well happened
well happened
here see any spikes
and see the parameters for
this
this
so this is
fine mhm
do you see what's happening
here so what's happening in your
sweep first of all this is crazy this
sweep first of all this is crazy this
mini batch to batch ratio is insane and
mini batch to batch ratio is insane and
then with four updates that's like
then with four updates that's like
crazy um but then it's the value
crazy um but then it's the value
function coefficient
and it's weird that it's selecting these
and it's weird that it's selecting these
because apparently they're working
because apparently they're working
better though it might be like some
better though it might be like some
weird local Optima I don't know
um you can see it right here I linked
um you can see it right here I linked
the image in the
the image in the
Discord like look all your
Discord like look all your
runs they're in like this band of like
runs they're in like this band of like
really low clip for some
really low clip for some
reason is are there no runs that are
reason is are there no runs that are
better
better
that's
that's
bizarre I mean this could be stuff with
bizarre I mean this could be stuff with
our J implementation to be
fair I mean to be fair this is probably
fair I mean to be fair this is probably
fine because
like I think this is this one is is
like I think this is this one is is
probably fine though like uh we have
probably fine though like uh we have
enough baselines to worry about that I'm
enough baselines to worry about that I'm
fine like taking this as our Baseline
fine like taking this as our Baseline
run for now
I mean we'll just run it a little longer
right crazy mies yeah let's just take
right crazy mies yeah let's just take
that foram run it a little longer see if
that foram run it a little longer see if
it beats the game and be done with that
it beats the game and be done with that
one then you can free up the sweep you
one then you can free up the sweep you
can run a quick pong sweep pong sweep
can run a quick pong sweep pong sweep
should be done by morning that's like a
should be done by morning that's like a
very quick little
very quick little
sweep just to see if it solves any
sweep just to see if it solves any
faster and then like we really want to
faster and then like we really want to
get want to get the Connect 4 Baseline I
get want to get the Connect 4 Baseline I
want to get the go Baseline I want to
want to get the go Baseline I want to
get the triple Triad Baseline I mean
get the triple Triad Baseline I mean
mostly these baselines are now the main
mostly these baselines are now the main
thing holding back the uh the release
thing holding back the uh the release
I'd say so sooner we get these done the
I'd say so sooner we get these done the
better and I have my own running as well
better and I have my own running as well
you know I thought that this machine was
you know I thought that this machine was
going to be
going to be
better I really don't know what's
better I really don't know what's
happened here it's very
happened here it's very
odd I'm still trying to figure out cuz
odd I'm still trying to figure out cuz
the core rate ratios are also
different but like
different but like
yeah this is very
yeah this is very
disappointing update epox
disappointing update epox
2 oh maybe was this a different set of
2 oh maybe was this a different set of
hypers or
hypers or
something I still think this is too
something I still think this is too
ridiculous I will look into this though
Connect 4 is also too low it's only
Connect 4 is also too low it's only
winning like 60% of the games here
we'll see I have Xander and will
we'll see I have Xander and will
potentially don't want to check in code
potentially don't want to check in code
or check on code did
or check on code did
I I figured out the pong thing real
quick and see which other of these we
quick and see which other of these we
can do anything
on mostly just about the experiment
experiments then B has uro to
submit to be fair there's a bunch of
submit to be fair there's a bunch of
other cleanup work I can probably
other cleanup work I can probably
do um this perf difference is bothering
do um this perf difference is bothering
me
though it definitely should not be this
slow let me go check
slow let me go check
my other sweep
h
my other sweep is still um
my other sweep is still um
progressing a little
bit to look at
bit to look at
that yeah another there's definitely
that yeah another there's definitely
okay I had to do that one off stream
though man I was expecting right now to
though man I was expecting right now to
be working on uh stuff
be working on uh stuff
with Xander or
well you may first come first serve
I mean there are a few other things we
I mean there are a few other things we
can potentially look at here it's just
can potentially look at here it's just
like okay so in my mind for the release
like okay so in my mind for the release
right the key difficult thing that I
right the key difficult thing that I
actually like want to prioritize because
actually like want to prioritize because
it's the only thing that I don't know
it's the only thing that I don't know
how long it's going to take is
how long it's going to take is
baselines and then they're docks docks
baselines and then they're docks docks
are mostly done I just have to make some
are mostly done I just have to make some
fixes smaller
fixes smaller
fixes um and then there
fixes um and then there
are any sort of like Library
are any sort of like Library
improvements Baseline like model tweaks
improvements Baseline like model tweaks
and things and that's like nice to have
and things and that's like nice to have
it's like on the nice to have
list oh I know what I can do real quick
we need one name
just be
Sandy
e e
okay so this is a very quick to train
okay so this is a very quick to train
thing just that these hypers don't seem
thing just that these hypers don't seem
to perform very well
um this is 32
back very high learning
rate very high learning rate
this one did way better as
well I'm not going to manually tune
these so Connect Four is inconsistent
these so Connect Four is inconsistent
but there are parameters to be found
but there are parameters to be found
it's just need be
adjusted it's actually does that have
adjusted it's actually does that have
RNN on it yes it does
do it make you go
500k it's better
I might have to go help will with this
thing all right so Will's coming
thing all right so Will's coming
by cool
interestingly this makes it totally
interestingly this makes it totally
fail these hypers are definitely
sensitive resource U
D do on Discord work cool
all right I totally missed a message
all right I totally missed a message
from Nathan
hey Will how's it
hey Will how's it
going I can check uh resource Ule and
stuff what are you currently training
stuff what are you currently training
link yeah go ahead I'll look Wan b or
link yeah go ahead I'll look Wan b or
whatever
o
[Music]
[Music]
go I just need experiments on all these
go I just need experiments on all these
mostly really like to know why
mostly really like to know why
this machine is nowhere near as fast as
this machine is nowhere near as fast as
it should be
all doing
all doing
this can I get desktop
this can I get desktop
audio
audio
probably we'll see if this
works
W conferencing will in on stream hello
W conferencing will in on stream hello
look look at
look look at
this I'm interrupting your live stream I
this I'm interrupting your live stream I
wonder if I can hear
wonder if I can hear
you oh I
you oh I
can yeah totally doesn't work [ __ ] I can
can yeah totally doesn't work [ __ ] I can
hear
hear
you it does
you it does
work you know wait I think that there
work you know wait I think that there
was a weird thing with this headset
was a weird thing with this headset
where it needs this extension
where it needs this extension
cable let me try the back audio port
we're on live stream
together that's
together that's
funny which one of these is
[Music]
[Music]
which
which
yes
yes
no all right I'm going to get a better
no all right I'm going to get a better
headset for now I'm move this on to the
headset for now I'm move this on to the
stupid just going to move this on to
stupid just going to move this on to
my how's this I can hear you no I can
my how's this I can hear you no I can
yes yes there we go f well I just didn't
yes yes there we go f well I just didn't
I didn't have audio out ah okay I see
I didn't have audio out ah okay I see
yeah I heard you the whole time oh [ __ ]
yeah I heard you the whole time oh [ __ ]
hopefully this doesn't Echo a
hopefully this doesn't Echo a
ton chat will yell at me promptly and if
ton chat will yell at me promptly and if
not I'll just end stream and we'll just
not I'll just end stream and we'll just
do this private but um yeah new setup
do this private but um yeah new setup
look I'm a I'm a puffer lib I'm a puffer
look I'm a I'm a puffer lib I'm a puffer
lib user now okay I'm I'm not your ideal
lib user now okay I'm I'm not your ideal
puffer lib user but I am puffer lip
puffer lib user but I am puffer lip
user yeah well let's take a look at uh
user yeah well let's take a look at uh
let's take a look at udle and see what's
let's take a look at udle and see what's
going on with you yeah so so let's see I
going on with you yeah so so let's see I
mean my entry point here is not using
mean my entry point here is not using
demo. py which probably is the big
demo. py which probably is the big
problem right um but let me show you so
problem right um but let me show you so
I've been bench Can you see my screen
I've been bench Can you see my screen
I'll Zoom it
I'll Zoom it
in Great okay so I'm benchmarking this
in Great okay so I'm benchmarking this
uh pqn algorithm where I was just
uh pqn algorithm where I was just
playing around with with some changes
playing around with with some changes
here that made it slightly better um and
here that made it slightly better um and
they this is the clean RL version of pqn
they this is the clean RL version of pqn
which is basically like you have a Q
which is basically like you have a Q
Network you do some layer Norm inside of
Network you do some layer Norm inside of
it and then the big upshot is you use Q
it and then the big upshot is you use Q
Lambda for return calculation and you
Lambda for return calculation and you
average across a bunch of environments
average across a bunch of environments
and it's stable is and you don't need a
and it's stable is and you don't need a
replay buffer which is like kind of nice
replay buffer which is like kind of nice
because the Q learning algorithms are
because the Q learning algorithms are
are interesting but that's not really
are interesting but that's not really
relevant the um the relevant piece is
relevant the um the relevant piece is
puffer Liv 1.0 right so um the way I'm
puffer Liv 1.0 right so um the way I'm
creating these M here is with this you
creating these M here is with this you
know puffer lib you know here's my make
know puffer lib you know here's my make
M function M Creator here from class
M function M Creator here from class
puffer li. environments classic control
puffer li. environments classic control
which I don't know if you've seen this
which I don't know if you've seen this
in a while but if I go to classic
in a while but if I go to classic
control uh here's here's this thing and
control uh here's here's this thing and
I have modified your classic control so
I have modified your classic control so
we can just let me just remove fast
we can just let me just remove fast
carpool and Fast Mountain car um but the
carpool and Fast Mountain car um but the
tldr here is that it's just this you
tldr here is that it's just this you
have you had some sort of if statement
have you had some sort of if statement
here about if the name was cpool and uh
here about if the name was cpool and uh
if it was then you used the gymnasium
if it was then you used the gymnasium
card Poole as your M class that was the
card Poole as your M class that was the
big statement there and then after that
big statement there and then after that
you wrapped it in this EP episode stats
you wrapped it in this EP episode stats
thing and uh gymnasium puffer M there
thing and uh gymnasium puffer M there
was some like minor thing here around I
was some like minor thing here around I
can make a PR for it but episode stats
can make a PR for it but episode stats
wasn't actually correctly calculating
wasn't actually correctly calculating
the return and length yeah and then but
the return and length yeah and then but
but no worries no worries about that
but no worries no worries about that
that's not the main thing the main thing
that's not the main thing the main thing
is first of all vector vector M speeds
is first of all vector vector M speeds
[ __ ] up by like orders of magnitude
[ __ ] up by like orders of magnitude
which is really exciting um but I am
which is really exciting um but I am
surprised so I have this fast card pole
surprised so I have this fast card pole
implementation here which is just the
implementation here which is just the
same thing except like a little bit more
same thing except like a little bit more
nump High okay so I have this Carle
nump High okay so I have this Carle
implementation here I am surprised to
implementation here I am surprised to
see and I did this with a G gymnasium
see and I did this with a G gymnasium
gymnasium I say gymnasium because it's
gymnasium I say gymnasium because it's
the German way of saying this is how you
the German way of saying this is how you
spell it but gymnasium yes gymnasium
spell it but gymnasium yes gymnasium
implementation is that um if you go
implementation is that um if you go
let's go to like pqn if I scale the
let's go to like pqn if I scale the
number of Ms here so I use Vector M here
number of Ms here so I use Vector M here
I'm making the M multip I have this make
I'm making the M multip I have this make
M function and the reason why I have
M function and the reason why I have
this make M function as such is that
this make M function as such is that
basically I have to pass in different
basically I have to pass in different
seats to these these Ms but as I scale
seats to these these Ms but as I scale
the number of NS M's here um I
the number of NS M's here um I
get this weird here I'll just show you
get this weird here I'll just show you
so like uh let's just do num M here I
so like uh let's just do num M here I
think that's let me just double check to
think that's let me just double check to
see if that's the
see if that's the
right yeah okay uh let's just try so and
right yeah okay uh let's just try so and
for the context the machine here is like
for the context the machine here is like
a I mean this is old but it's like it
a I mean this is old but it's like it
was the best AMD machine at the time uh
was the best AMD machine at the time uh
so7 2019 so just have an am I just got
so7 2019 so just have an am I just got
an AMD machine today and uh unless
an AMD machine today and uh unless
there's something wrong with the
there's something wrong with the
benchmarks because the GPU also seem
benchmarks because the GPU also seem
slower than it should be uh Intel still
slower than it should be uh Intel still
kicks amd's ass yeah so that's good to
kicks amd's ass yeah so that's good to
know but what's okay so here's I'm at
know but what's okay so here's I'm at
Ute I'm like at you know zero Ute this
Ute I'm like at you know zero Ute this
is like just the system right now
is like just the system right now
hanging out with some Docker container
hanging out with some Docker container
running or something like this right you
running or something like this right you
can see it's pretty low U so let's just
can see it's pretty low U so let's just
run with like 30 HS right and I'm not oh
run with like 30 HS right and I'm not oh
you want me to do 100 let's look at
you want me to do 100 let's look at
32 it will go to 100 right yeah but
32 it will go to 100 right yeah but
that's just that doesn't tell you [ __ ]
that's just that doesn't tell you [ __ ]
it's busy waiting dude okay I thought
it's busy waiting dude okay I thought
you would get a little red little red
you would get a little red little red
indicator so this is fine so basically
indicator so this is fine so basically
like if I were to like scale the number
like if I were to like scale the number
of like M's here to what what's the
of like M's here to what what's the
scale that you typically use just for
scale that you typically use just for
shits and giggles uh it's dependent on
shits and giggles uh it's dependent on
the forward pass batch size that you
the forward pass batch size that you
want so for really simple M you usually
want so for really simple M you usually
and really simple M and really small
and really simple M and really small
models usually you target 4096 for pass
models usually you target 4096 for pass
batch
batch
size all right so let's
size all right so let's
just let's just see here um if this
just let's just see here um if this
makes a meaningful difference I had no
makes a meaningful difference I had no
idea this is where I was I was thinking
idea this is where I was I was thinking
okay like this isn't working and I SC I
okay like this isn't working and I SC I
like plotted out the steps per second
like plotted out the steps per second
obviously there's like a little bit of a
obviously there's like a little bit of a
um you know I'm going back to GPU but I
um you know I'm going back to GPU but I
would have expected something little bit
would have expected something little bit
more substantial here so okay so yeah
more substantial here so okay so yeah
here we're back we've got a ton of you
here we're back we've got a ton of you
here of course it doesn't mean anything
here of course it doesn't mean anything
so that literally that utilization
so that literally that utilization
literally means nothing it will always
literally means nothing it will always
be 100% in puffer because we have busy
be 100% in puffer because we have busy
waiting I see and so is there okay this
waiting I see and so is there okay this
is great
is great
um the busy waiting is essential by the
um the busy waiting is essential by the
way it's like there's not a good way
way it's like there's not a good way
around it in Python I spent a lot of
around it in Python I spent a lot of
time on it uh it actually gives you perf
time on it uh it actually gives you perf
um but it will SP your course I see is
um but it will SP your course I see is
there some spin up time
there some spin up time
here uh I've not seen a single iteration
here uh I've not seen a single iteration
yet on all the course and it shouldn't
yet on all the course and it shouldn't
be like puffer shouldn't be adding
be like puffer shouldn't be adding
overhead there it's just however long it
overhead there it's just however long it
takes to make all these sub
takes to make all these sub
processes I see so so the main thing now
processes I see so so the main thing now
like if I'm let's just pretend like I
like if I'm let's just pretend like I
was being a dumbass which I was um the
was being a dumbass which I was um the
main thing I I need to think about as a
main thing I I need to think about as a
researcher is basically like the optim
researcher is basically like the optim
optim iation of the step right so like
optim iation of the step right so like
the roll out should be as fast as it
the roll out should be as fast as it
possibly can be yes look at my demo
possibly can be yes look at my demo
because there's an extended API you're
because there's an extended API you're
probably using Sync API there's an async
probably using Sync API there's an async
API that enables you to do nend pool
API that enables you to do nend pool
style stuff so you can do like I don't
style stuff so you can do like I don't
know 8192 or even like 10K it doesn't
know 8192 or even like 10K it doesn't
have to be an even multiple uh you can
have to be an even multiple uh you can
have like more M's and then you will
have like more M's and then you will
essentially you can get 0% M time we
essentially you can get 0% M time we
have this nice dashboard here let me
have this nice dashboard here let me
show you let me show you on stream real
show you let me show you on stream real
quick um I've been playing mute toggle
quick um I've been playing mute toggle
because I think my mic is garbage so
because I think my mic is garbage so
here if I do like puffer connect
for and this is just some random ass
for and this is just some random ass
right yeah random setting so here 0%
right yeah random setting so here 0%
time is spent waiting on the environment
time is spent waiting on the environment
and this is slow this will go up to a
and this is slow this will go up to a
million with a better uh
million with a better uh
machine um but this is literally the end
machine um but this is literally the end
is free because it's ASN
is free because it's ASN
so all of the time is being spent on
so all of the time is being spent on
forward path on training and like a
forward path on training and like a
little bit of like additional MK stuff
little bit of like additional MK stuff
for like Cuda transfer and stuff so this
for like Cuda transfer and stuff so this
this is what you want uh and the way
this is what you want uh and the way
that you get this is by having a fast M
that you get this is by having a fast M
and having an async buffer factor of
and having an async buffer factor of
usually around two or three depending
usually around two or three depending
how fast your EMP
how fast your EMP
is that's I see so so this I mean this
is that's I see so so this I mean this
async thing is actually kind of crucial
async thing is actually kind of crucial
here I think in some sense
here I think in some sense
okay yeah that okay so basically use
okay yeah that okay so basically use
demo. py it's the thing that's a little
demo. py it's the thing that's a little
tricky though it's like it's not trivial
tricky though it's like it's not trivial
because uh we do have we have an
because uh we do have we have an
experienced buffer for po that's not
experienced buffer for po that's not
like an off policy thing it's just that
like an off policy thing it's just that
when you're doing async you can get
when you're doing async you can get
samples in a random order so you have to
samples in a random order so you have to
be able to account for um you have to
be able to account for um you have to
basically be able to account for getting
basically be able to account for getting
different length trajectory segments
different length trajectory segments
randomly
randomly
and uh it turns out that that's also
and uh it turns out that that's also
really convenient for handling
really convenient for handling
multi-agent so we have that in place but
multi-agent so we have that in place but
like n logic or I mean RL logic itself
like n logic or I mean RL logic itself
you can just swap stuff around and it's
you can just swap stuff around and it's
clean RL and then you get that nice
clean RL and then you get that nice
little you get that nice little
little you get that nice little
dashboard you get hyper pram integration
dashboard you get hyper pram integration
hyper pram scoop with carbs you get all
hyper pram scoop with carbs you get all
of our stuff and it's only it's like a
of our stuff and it's only it's like a
thousand lines of code total maybe three
thousand lines of code total maybe three
400 lines for po total and then the rest
400 lines for po total and then the rest
just like logging Ule and stuff like
just like logging Ule and stuff like
that
that
yeah I I I genuinely think that you
yeah I I I genuinely think that you
should make uh demo. py like a
should make uh demo. py like a
framework like my my after like I I see
framework like my my after like I I see
the promise of puffer as I start going
the promise of puffer as I start going
through it but it's like almost like if
through it but it's like almost like if
there was just a even if it were in a
there was just a even if it were in a
framework but it were just like insert
framework but it were just like insert
your algorithm here which is probably
your algorithm here which is probably
demod pi and it's just like this is like
demod pi and it's just like this is like
the de facto thing you do the plot you
the de facto thing you do the plot you
put in your paper is like everybody uses
put in your paper is like everybody uses
that one plotting mechanism it's just
that one plotting mechanism it's just
like run your algorithm against demod py
like run your algorithm against demod py
and it generates like this is you know
and it generates like this is you know
the def facto standard comparison it
the def facto standard comparison it
does the carbs thing so you have like
does the carbs thing so you have like
carbs to carbs comparison on you know
carbs to carbs comparison on you know
the PO carbs on this standard set of
the PO carbs on this standard set of
benchmarks plus your algorithm carbs on
benchmarks plus your algorithm carbs on
standard set of benchmarks therefore the
standard set of benchmarks therefore the
comparison is Meaningful that is like if
comparison is Meaningful that is like if
you do that and which you probably have
you do that and which you probably have
if you but you know if that's if that's
if you but you know if that's if that's
the standard in deit up high then like
the standard in deit up high then like
this is very very very good yeah I mean
this is very very very good yeah I mean
it's the it's basically you can do that
it's the it's basically you can do that
now it's just instead of having to read
now it's just instead of having to read
my API on like how you add your code in
my API on like how you add your code in
and like maybe you want to modify
and like maybe you want to modify
something that I didn't think about it's
something that I didn't think about it's
clean RL style so like you just put your
clean RL style so like you just put your
logic where the PO logic is now and
logic where the PO logic is now and
anything else you need to screw with you
anything else you need to screw with you
screw with so I like the thing that I
screw with so I like the thing that I
think is going to likely be more useful
think is going to likely be more useful
is just as we play with stuff and figure
is just as we play with stuff and figure
out what's important first of all this
out what's important first of all this
PO implementation is going to get way
PO implementation is going to get way
better because the next phase of puffer
better because the next phase of puffer
is a bunch of science side stuff where
is a bunch of science side stuff where
we do a on what actually matters at
we do a on what actually matters at
massive scale so that's going to get
massive scale so that's going to get
better and then hopefully the file is
better and then hopefully the file is
going to slowly get shorter over time as
going to slowly get shorter over time as
well so you know maybe we get that down
well so you know maybe we get that down
to like 7 800 lines with all the logging
to like 7 800 lines with all the logging
and stuff and then you now have like a
and stuff and then you now have like a
very nice clean easy thing that you can
very nice clean easy thing that you can
swap your logic into uh very nicely yeah
swap your logic into uh very nicely yeah
and then the only way that P I mean
and then the only way that P I mean
perer is getting like 4X bigger in the
perer is getting like 4X bigger in the
next update but it's all just C
next update but it's all just C
environment code pretty much all the
environment code pretty much all the
course the same
course the same
yeah I mean the yeah the the the
yeah I mean the yeah the the the
environment stuff like from what I could
environment stuff like from what I could
tell it's like obviously 1.0 just you
tell it's like obviously 1.0 just you
had to support so many environments but
had to support so many environments but
be great to have like you know a lot
be great to have like you know a lot
faster M for like the classic control
faster M for like the classic control
stuff and oh we have here I'll show you
stuff and oh we have here I'll show you
so this is what we're going to do for
so this is what we're going to do for
next update um these are all like
next update um these are all like
million step per second per core
million step per second per core
environments I haven't fixed this
environments I haven't fixed this
website fully yet but this is multi
website fully yet but this is multi
agent snake running locally with
agent snake running locally with
policies we've got like
policies we've got like
pong know there's some Classics here but
pong know there's some Classics here but
they're way
they're way
faster uh there's like stuff like
faster uh there's like stuff like
Connect 4 and you can even do more fancy
Connect 4 and you can even do more fancy
stuff right like the Moa is obviously
stuff right like the Moa is obviously
way
way
fancier there's this tactics M that was
fancier there's this tactics M that was
contributed to us it's going to take
contributed to us it's going to take
some time to get policies for there's an
some time to get policies for there's an
implementation of go by Spencer it's
implementation of go by Spencer it's
pretty cool we can do this for whatever
pretty cool we can do this for whatever
board size uh and then this TCG project
board size uh and then this TCG project
need some love but this is like very
need some love but this is like very
very
very
basic Magic the Gathering s
basic Magic the Gathering s
style uh thing right so this needs work
style uh thing right so this needs work
but yeah we're growing out this
but yeah we're growing out this
collection the kind of the goal is we're
collection the kind of the goal is we're
just going to replace all the M's with
just going to replace all the M's with
stuff that runs a million stuff per a
stuff that runs a million stuff per a
second um because it's it's honestly
second um because it's it's honestly
pathetic like the problem wasn't that
pathetic like the problem wasn't that
people needed Jack the problem was
people needed Jack the problem was
people needed to stop writing God awful
people needed to stop writing God awful
python code that's literally it y i AB
python code that's literally it y i AB
absolutely agree with that I absolutely
absolutely agree with that I absolutely
agree with that okay well then we'll
agree with that okay well then we'll
just uh I'll see what I can do to move
just uh I'll see what I can do to move
over most of this pqn code to the sort
over most of this pqn code to the sort
of demo depy regime because it still
of demo depy regime because it still
seems like you know I mean like here's
seems like you know I mean like here's
like 300 M right my steps per seconds is
like 300 M right my steps per seconds is
like 17 1733 my steps per second peaked
like 17 1733 my steps per second peaked
on my system with this implementation I
on my system with this implementation I
sent you at I think uh 32 amps which is
sent you at I think uh 32 amps which is
the number of cores I had which was
the number of cores I had which was
really with
really with
vectorization with the dot Vector not
vectorization with the dot Vector not
serial um is that with wait with my
serial um is that with wait with my
vectorization it Peaks at 32 Ms yep so
vectorization it Peaks at 32 Ms yep so
like here here's here's what it is what
like here here's here's what it is what
is it 300 Ms and then just and maybe
is it 300 Ms and then just and maybe
this is you know let's go back to 32 how
this is you know let's go back to 32 how
did you set it did you just set M or did
did you set it did you just set M or did
you did you like screw with the work so
you did you like screw with the work so
this is it right here I do this make
this is it right here I do this make
thing and I have a different make
thing and I have a different make
function for each of the MS well I did
function for each of the MS well I did
before when I was doing CD
before when I was doing CD
um this puffer li. vector.
make and maybe that's the wrong way to
make and maybe that's the wrong way to
do
do
it that is a valid way to do it you can
it that is a valid way to do it you can
pass like that so I get like 8,000 steps
pass like that so I get like 8,000 steps
per second here right and um if I were
per second here right and um if I were
to sort of time I could do relative
to sort of time I could do relative
timings here so I could just add just
timings here so I could just add just
tell it to it puffer V should let you
tell it to it puffer V should let you
scale the more M's than gy M like gyve
scale the more M's than gy M like gyve
gyve just makes a process for every it's
gyve just makes a process for every it's
really dumb right right and I I I I
really dumb right right and I I I I
agree with that it's just interesting to
agree with that it's just interesting to
me that once I go above 32 my steps per
me that once I go above 32 my steps per
second is decreases and that's probably
second is decreases and that's probably
like something in this code that's async
like something in this code that's async
potentially it's not necessarily like it
potentially it's not necessarily like it
could just be
could just be
that I mean if the Nets are small enough
that I mean if the Nets are small enough
I mean they're super small right I mean
I mean they're super small right I mean
I I could even I could even do this all
I I could even I could even do this all
CPU if if we wanted to just see what
CPU if if we wanted to just see what
that looked like right um but even yeah
that looked like right um but even yeah
64m I start getting
64m I start getting
degradation which is just weird to me I
degradation which is just weird to me I
was like that's very coincidental like
was like that's very coincidental like
64m now my steps per second is down to
64m now my steps per second is down to
1,000 well there's an autotune tool you
1,000 well there's an autotune tool you
should try you should time separately
should try you should time separately
because we have there's an autotuner uh
because we have there's an autotuner uh
with Vector that you can use that will
with Vector that you can use that will
get you just the M time so what is the
get you just the M time so what is the
maximum M through put paralized on your
maximum M through put paralized on your
machine and it will sweep like it'll try
machine and it will sweep like it'll try
a whole bunch of common configs based on
a whole bunch of common configs based on
your 4 count and stuff um for like a
your 4 count and stuff um for like a
specific Target batch size so like let's
specific Target batch size so like let's
say that you want a batch size of 64 you
say that you want a batch size of 64 you
know that's what's good for your GPU
know that's what's good for your GPU
it'll try like tons of different ways to
it'll try like tons of different ways to
get you that and that's usually pretty
get you that and that's usually pretty
good okay great yeah I'll definitely
good okay great yeah I'll definitely
check that out you also like stuff like
check that out you also like stuff like
um the way that I don't know how this is
um the way that I don't know how this is
doing if it's doing like torch dot how's
doing if it's doing like torch dot how's
it putting those tensors in memory if
it putting those tensors in memory if
it's not from array it's probably going
it's not from array it's probably going
to drop a lot of time there's stuff like
to drop a lot of time there's stuff like
that you got to watch for that we've
that you got to watch for that we've
done in
done in
demo okay I see yeah I'll I'll look
demo okay I see yeah I'll I'll look
around to see what the actual bottleneck
around to see what the actual bottleneck
is here but just wanted to let you know
is here but just wanted to let you know
that there's like this interesting thing
that there's like this interesting thing
was going on and probably uh I think as
was going on and probably uh I think as
well I think where like puffer Li would
well I think where like puffer Li would
shine is if it indeed had this
shine is if it indeed had this
like it it was too like it was it was it
like it it was too like it was it was it
was there was like a framework on top of
was there was like a framework on top of
that was such that basically you could
that was such that basically you could
Implement these algorithms very simply
Implement these algorithms very simply
that where you would never run into like
that where you would never run into like
oh I need to do the specific thing to
oh I need to do the specific thing to
anticipate the performance gains on like
anticipate the performance gains on like
sort of M to algorithm interaction right
sort of M to algorithm interaction right
like from away like things like this
like from away like things like this
where just like right because it's like
where just like right because it's like
there's a lot there are a lot of
there's a lot there are a lot of
variables that can potentially interact
variables that can potentially interact
here yeah um so for instance like
here yeah um so for instance like
there's also just M speed is not also
there's also just M speed is not also
going to necessarily give you perf cuz
going to necessarily give you perf cuz
like let's say you go to 4096 batch we
like let's say you go to 4096 batch we
end up having to go to uh train batch
end up having to go to uh train batch
size of like Millions because you need
size of like Millions because you need
to have sufficient Horizon to compute J
to have sufficient Horizon to compute J
so yeah sometimes we get like really
so yeah sometimes we get like really
good SPS but then the sample efficiency
good SPS but then the sample efficiency
can suffer massively which we don't care
can suffer massively which we don't care
if our Nets are small but we do a our ns
if our Nets are small but we do a our ns
are large so there's like there are a
are large so there's like there are a
lot of balancing acts here that yeah we
lot of balancing acts here that yeah we
can eventually have an auto Auto thing
can eventually have an auto Auto thing
for that but that's going to require
for that but that's going to require
like heavy heavy research on scaling
like heavy heavy research on scaling
laws interactions correlations between
laws interactions correlations between
variables that's what we're doing after
variables that's what we're doing after
we ship all the new M's because
we ship all the new M's because
essentially these M are so fast that we
essentially these M are so fast that we
have eight or nine gpus but we may as
have eight or nine gpus but we may as
well have eight or ,000 because the
well have eight or ,000 because the
experiments Run a thousand times faster
experiments Run a thousand times faster
than anyone else's like they run a
than anyone else's like they run a
million steps a second on one GPU yeah y
million steps a second on one GPU yeah y
I see
I see
at at the moment and it's just I've been
at at the moment and it's just I've been
stuck finishing finishing all this a lot
stuck finishing finishing all this a lot
of yeah know and I think that's going to
of yeah know and I think that's going to
be huge like like even if if puffer lib
be huge like like even if if puffer lib
actually contained like just like a good
actually contained like just like a good
meaningful set of Ms too like just from
meaningful set of Ms too like just from
from a research perspective where I
from a research perspective where I
don't have to think about okay like now
don't have to think about okay like now
I have to mostly rewrite all of my
I have to mostly rewrite all of my
dependency management so that I can test
dependency management so that I can test
on Atari blah BL blah you know what I
on Atari blah BL blah you know what I
mean it's like contain like the de facto
mean it's like contain like the de facto
set of M's for for the RL literature
set of M's for for the RL literature
then everything you know yeah then it's
then everything you know yeah then it's
just like one Library one problem right
just like one Library one problem right
and like nobody else is ever going to do
and like nobody else is ever going to do
this because nobody's crazy enough to
this because nobody's crazy enough to
sit down and write 15,000 lines of sea
sit down and write 15,000 lines of sea
um so yeah I this was this was the
um so yeah I this was this was the
initial seat of this this is we're also
initial seat of this this is we're also
going to start doing some of the science
going to start doing some of the science
ourselves now but I figured that this is
ourselves now but I figured that this is
this is a good test set for research and
this is a good test set for research and
for industry frankly because industry
for industry frankly because industry
they sometimes they do wank uh they do
they sometimes they do wank uh they do
Jank stuff and it's like yeah it would
Jank stuff and it's like yeah it would
be really nice if you could test your
be really nice if you could test your
Jank thing that you're trying to do at a
Jank thing that you're trying to do at a
million steps per second instead of like
million steps per second instead of like
1500 yeah
1500 yeah
totally yeah we'll find out let me let
totally yeah we'll find out let me let
me just do one last thing before we jump
me just do one last thing before we jump
off I want to see if uh if I
off I want to see if uh if I
just do the the m i just Bo the M with
just do the the m i just Bo the M with
random actions how fast I get yeah so
random actions how fast I get yeah so
okay here's the maybe this is the
okay here's the maybe this is the
problem um if I just do random actions
problem um if I just do random actions
from this m created in this way no net
from this m created in this way no net
no torch
no torch
uh I get 1,00 steps per second on 64 HS
uh I get 1,00 steps per second on 64 HS
so really that's interesting right yeah
so really that's interesting right yeah
with your V so I think with yeah your
with your V so I think with yeah your
here you can see puffer li. vector. make
here you can see puffer li. vector. make
okay backend puffer puffer Li Vector
okay backend puffer puffer Li Vector
multiprocessing I don't know if that's
multiprocessing I don't know if that's
the right one but that's the one we did
the right one but that's the one we did
okay and this is all [ __ ] AR num m
okay and this is all [ __ ] AR num m
is it like actually doing stuff
is it like actually doing stuff
correctly um let's see you want me to go
correctly um let's see you want me to go
look at the function here go look at it
look at the function here go look at it
yeah yeah okay
yeah yeah okay
Vector sorry that's the wrong one not
Vector sorry that's the wrong one not
version Vector all right uh
version Vector all right uh
make yeah so num Ms coming in yep it's
make yeah so num Ms coming in yep it's
validated four I in Num
validated four I in Num
Ms okay M
Ms okay M
creators back in a Serial okay then it
creators back in a Serial okay then it
uses the back end with numm so like yeah
uses the back end with numm so like yeah
it's getting it's getting num Ms
it's getting it's getting num Ms
correctly I believe if I go to the
correctly I believe if I go to the
vector back or the
vector back or the
multiprocessing um
multiprocessing um
backend if I actually look here yeah it
backend if I actually look here yeah it
looks like these M creators are coming
looks like these M creators are coming
in correctly how many so num
in correctly how many so num
workers oh it does do num workers equals
workers oh it does do num workers equals
numm which is interesting if it's not
numm which is interesting if it's not
set oh [ __ ] yeah that fix that
set oh [ __ ] yeah that fix that
I just set it to 16 for shits and
I just set it to 16 for shits and
giggles let's see if that well you can
giggles let's see if that well you can
fix it in your code but sure yeah yeah I
fix it in your code but sure yeah yeah I
know well actually can I so if I yeah
know well actually can I so if I yeah
you just set num num it'll take numb
you just set num num it'll take numb
workers as a bark I see this make
workers as a bark I see this make
function is a little weird well it's
function is a little weird well it's
because they different back ends that
because they different back ends that
take different ARS I see okay I didn't
take different ARS I see okay I didn't
see I need to do better checking on
see I need to do better checking on
stuff like that yeah yeah yeah I think
stuff like that yeah yeah yeah I think
this this is probably maybe the one
this this is probably maybe the one
piece oh [ __ ] dude that was the bug dude
piece oh [ __ ] dude that was the bug dude
what do you get now oh it's so [ __ ]
what do you get now oh it's so [ __ ]
fast 50,000 dude oh yeah's really really
fast 50,000 dude oh yeah's really really
fast there are a couple places where
fast there are a couple places where
they're like well finally I get to see
they're like well finally I get to see
it dude I was like I was like oh you
it dude I was like I was like oh you
know I mean I'm sure 32 might even be F
know I mean I'm sure 32 might even be F
let's see it depend two physical cores
let's see it depend two physical cores
or not it yeah probably not let's see it
or not it yeah probably not let's see it
might actually be
might actually be
16 that's crazy yeah okay it's oh dude
16 that's crazy yeah okay it's oh dude
as soon as you go above your actual core
as soon as you go above your actual core
count it shits itself yeah you don't
count it shits itself yeah you don't
because of the busy waiting it's the
because of the busy waiting it's the
architecture of our multiprocessing it's
architecture of our multiprocessing it's
really not designed to go 35 why do I
really not designed to go 35 why do I
have 35 virtual cores that's not even
have 35 virtual cores that's not even
divisible by two oh I have 36 okay great
divisible by two oh I have 36 okay great
so now now crank up the number of
so now now crank up the number of
environments now that you have work set
environments now that you have work set
correctly uh let's try uh 6,000 or let
correctly uh let's try uh 6,000 or let
no let's just let's do 2,000 just for
no let's just let's do 2,000 just for
Giggles I don't know what that's going
Giggles I don't know what that's going
to got to be divisible or it'll complain
to got to be divisible or it'll complain
I see
I see
okay well 1024 oh Jesus Christ that is
okay well 1024 oh Jesus Christ that is
actually one of the places where we did
actually one of the places where we did
put errors so that you don't shoot
put errors so that you don't shoot
yourself in the foot
nice that's probably G to take a second
nice that's probably G to take a second
to spin all those
to spin all those
up eventually the stupid back is just
up eventually the stupid back is just
getting ported to see and we'll sand
getting ported to see and we'll sand
some rough edges off that way yeah yeah
some rough edges off that way yeah yeah
yeah ah okay oh num Ms needs to be
yeah ah okay oh num Ms needs to be
divisible all right I see what you're
divisible all right I see what you're
saying that makes
saying that makes
sense I have 18 physical cores
sense I have 18 physical cores
for whatever reason whatever you're
for whatever reason whatever you're
getting you basically at least double it
getting you basically at least double it
for
for
asyn dude you're going to watch me have
asyn dude you're going to watch me have
a real life reaction to the speed up
a real life reaction to the speed up
here this is
here this is
exciting I'll be I I actually think the
exciting I'll be I I actually think the
spin up time might be faster than
spin up time might be faster than
training this algorithm like carpo or
training this algorithm like carpo or
whatever
whatever
F Well the spin up time puffer doesn't
F Well the spin up time puffer doesn't
add spin up time it's just however long
add spin up time it's just however long
no it's yeah it's my M spinning up that
no it's yeah it's my M spinning up that
CU like we have we have M that you can
CU like we have we have M that you can
spin up like thousands of copies
spin up like thousands of copies
instantly so the V just starts up
instantly so the V just starts up
immediately it's like faster than
immediately it's like faster than
importing torch yeah yeah yeah I can't
importing torch yeah yeah yeah I can't
wait to do that so um what's your
wait to do that so um what's your
opinion on how qual
opinion on how qual
like how uh how meaningful are the ocean
like how uh how meaningful are the ocean
amps like maybe this is your chance to
amps like maybe this is your chance to
pitch that because I didn't really get
pitch that because I didn't really get
to hear that before like they VAR in
to hear that before like they VAR in
difficulty right you have stuff that is
difficulty right you have stuff that is
like um Atari M from State on the
like um Atari M from State on the
simpler side and then you have stuff
simpler side and then you have stuff
like the Moa and like this tactical end
like the Moa and like this tactical end
and like the secret one that are way
and like the secret one that are way
more complex and then there's like
more complex and then there's like
there's stuff like Connect 4 in there
there's stuff like Connect 4 in there
there's stuff like run and go on smaller
there's stuff like run and go on smaller
boards or medium boards so the goal is
boards or medium boards so the goal is
it's just a bunch of different types of
it's just a bunch of different types of
M's with a pretty decent range of
M's with a pretty decent range of
difficulties and like we're really not
difficulties and like we're really not
limited in any way in terms of what we
limited in any way in terms of what we
can put in Ocean cuz we're not writing
can put in Ocean cuz we're not writing
Jacks we're just writing arbitrary code
Jacks we're just writing arbitrary code
so literally the only limitation is
so literally the only limitation is
number of contributors willing to WR M's
number of contributors willing to WR M's
and uh if you open up any of this C code
and uh if you open up any of this C code
it's literally like a first year
it's literally like a first year
undergrad taking a systems course can
undergrad taking a systems course can
already start writing this like these
already start writing this like these
M's yeah um so it's really just that
M's yeah um so it's really just that
that bottom NE so at this point we have
that bottom NE so at this point we have
about 10 M's 10 or 12 M's I think in
about 10 M's 10 or 12 M's I think in
development it's around 15,000 lines of
development it's around 15,000 lines of
code about half of that is my code half
code about half of that is my code half
of it is uh contributor
of it is uh contributor
code very good yeah okay we we'll be
code very good yeah okay we we'll be
we'll be testing on that that's [ __ ]
we'll be testing on that that's [ __ ]
insane dude 100 th steps per second I
insane dude 100 th steps per second I
know that's not a lot relative to you
know that's not a lot relative to you
this is shitty py that's slow by our
this is shitty py that's slow by our
standards what m is this H this is just
standards what m is this H this is just
a uh carple right just shits and gigles
a uh carple right just shits and gigles
um we have cart pole running at millions
um we have cart pole running at millions
in our paper benchmarks that is actually
in our paper benchmarks that is actually
quite interesting then I wonder why that
quite interesting then I wonder why that
why that's the case so let me Che I'll
come you
know on
know on
2,000 I mean this is with 1,24 M I
2,000 I mean this is with 1,24 M I
probably could go higher right um if I
probably could go higher right um if I
were to let's see let me check this out
were to let's see let me check this out
let's see
let's see
um and this is just like the M itself
um and this is just like the M itself
which your paper isn't actually PO on
which your paper isn't actually PO on
this it's just the M running right so
this it's just the M running right so
yeah so M uh as of when this paper was
yeah so M uh as of when this paper was
published JY and sv3 will cap around
published JY and sv3 will cap around
100,000 steps per second if you get them
100,000 steps per second if you get them
correct um puffer lib just on its own
correct um puffer lib just on its own
will go to 460k on cartpole
will go to 460k on cartpole
um and it will go up to three million
um and it will go up to three million
with a nicely tuned async so so I have
with a nicely tuned async so so I have
more [ __ ] to do here to get this
more [ __ ] to do here to get this
[ __ ] well as magic like async is just
[ __ ] well as magic like async is just
kind of magic yeah especially for the
kind of magic yeah especially for the
fast Ms it's just like they're so fast
fast Ms it's just like they're so fast
there's just like a little bit of silly
there's just like a little bit of silly
overhead here and there and as soon as
overhead here and there and as soon as
you turn async on it's just like M are
you turn async on it's just like M are
ready immediately just drive time down
ready immediately just drive time down
to
to
zero yeah yeah I'll I'll play around
zero yeah yeah I'll I'll play around
with this a little bit more I'm sure
with this a little bit more I'm sure
there's like some other optimization I'm
there's like some other optimization I'm
missing here and it's actually kind of
missing here and it's actually kind of
funny that since this paper like we now
funny that since this paper like we now
have I mean the V now scales to tens of
have I mean the V now scales to tens of
millions of steps per second if you do
millions of steps per second if you do
it
it
right see this is this is what I want to
right see this is this is what I want to
be easy for your users like I really
be easy for your users like I really
think you would get every RL
think you would get every RL
researcher on board which you will if it
researcher on board which you will if it
were that easy if I just like the moment
were that easy if I just like the moment
I spin up without demo. like if I if I
I spin up without demo. like if I if I
read the docs and I'm just trying to
read the docs and I'm just trying to
implement it like use it on my own if
implement it like use it on my own if
we're that easy to uh to get up to these
we're that easy to uh to get up to these
numbers like there's so many little
numbers like there's so many little
things in implement the like people
things in implement the like people
working on llms they have like the giant
working on llms they have like the giant
code bases that they're used to and like
code bases that they're used to and like
also they don't have to worry about a
also they don't have to worry about a
ton of these different classes of
ton of these different classes of
optimizations like when you really want
optimizations like when you really want
to turn through a million OBS per second
to turn through a million OBS per second
there are a lot lot of things that you
there are a lot lot of things that you
have to care about um that if I just say
have to care about um that if I just say
yeah go write your own code like
yeah go write your own code like
researchers don't know how to engineer
researchers don't know how to engineer
anything they're going to drop 90% of
anything they're going to drop 90% of
the perf so like it's almost
the perf so like it's almost
fundamentally impossible to get people
fundamentally impossible to get people
to not drop your perf unless you just
to not drop your perf unless you just
give them St I mean we're going to get
give them St I mean we're going to get
closer to that for sure
closer to that for sure
um but yeah for now the for now the uh
um but yeah for now the for now the uh
the way we get around this right is I
the way we get around this right is I
just do really good support on Discord
just do really good support on Discord
or stream it's really easy to get help
or stream it's really easy to get help
help I do free support you're doing it
help I do free support you're doing it
on stream right now for me this is great
on stream right now for me this is great
yeah I do free support for academic Labs
yeah I do free support for academic Labs
as well and then uh companies can pay
as well and then uh companies can pay
for PRI support packages yeah well
for PRI support packages yeah well
that's a you know that's great but if
that's a you know that's great but if
you do like I I guarantee you if you
you do like I I guarantee you if you
make it like dead [ __ ] simple after
make it like dead [ __ ] simple after
you do all the science it's gonna it's
you do all the science it's gonna it's
gonna pay off because this is insane
gonna pay off because this is insane
science right is the hard we've seen
science right is the hard we've seen
like crazy cursed things in all the
like crazy cursed things in all the
experiments like basically at this point
experiments like basically at this point
it's nobody understands it's pretty
it's nobody understands it's pretty
clear nobody understands how the hell RL
clear nobody understands how the hell RL
Works um with like the the hypers that
Works um with like the the hypers that
end up doing well and such it's it's
end up doing well and such it's it's
really weird um yeah it's like it's like
really weird um yeah it's like it's like
if you had if you could pull out the the
if you had if you could pull out the the
Deep learning part because I think
Deep learning part because I think
that's where a lot of confounding is
that's where a lot of confounding is
happening where like the there's like a
happening where like the there's like a
set of skills you acquire like getting
set of skills you acquire like getting
really good at optimizing deep neural
really good at optimizing deep neural
networks which are like almost
networks which are like almost
independent of the algorithm
independent of the algorithm
considerations of of RL and I think if
considerations of of RL and I think if
we were like able to Benchmark these
we were like able to Benchmark these
algorithms like when you pull out the
algorithms like when you pull out the
Deep part in the Deep RL um I think we
Deep part in the Deep RL um I think we
might see a little bit more clarity as
might see a little bit more clarity as
to like what configurations actually
to like what configurations actually
work so that's like you know you have
work so that's like you know you have
meaningful enough features right from
meaningful enough features right from
the environment or something like this
the environment or something like this
fixed features where you're just not
fixed features where you're just not
optimizing over this this really really
optimizing over this this really really
hard parameter space still but the thing
hard parameter space still but the thing
is it's like it's still I mean we have
is it's like it's still I mean we have
stuff where like the the latest thing as
stuff where like the the latest thing as
of today is that uh hyper pram s loves
of today is that uh hyper pram s loves
setting the value function coefficient
setting the value function coefficient
to almost zero so it just likes not
to almost zero so it just likes not
training the value function at all and
training the value function at all and
that somehow makes it do better yeah
that somehow makes it do better yeah
shit's
shit's
weird
weird
yeah
yeah
yeah well hopefully figur it out this
yeah well hopefully figur it out this
exciting oh we will it just it takes
exciting oh we will it just it takes
some time so I mean this next update
some time so I mean this next update
we're going to release a ton of these M
we're going to release a ton of these M
you're going to have this nice test we
you're going to have this nice test we
uh you can do RL at a million steps per
uh you can do RL at a million steps per
second and then we're not just going to
second and then we're not just going to
wait for other people to do that right
wait for other people to do that right
we're immediately going to start doing
we're immediately going to start doing
that ourselves um yeah this is no longer
that ourselves um yeah this is no longer
just a library and toolkit anymore right
just a library and toolkit anymore right
this is like we are fixing RL like we're
this is like we are fixing RL like we're
providing our tools to other researchers
providing our tools to other researchers
to help fix RL as well
to help fix RL as well
but even if they don't we're going to do
but even if they don't we're going to do
it like we're fixing RL now that's the
it like we're fixing RL now that's the
deal
deal
MH it's
MH it's
exciting very exciting okay well I'll
exciting very exciting okay well I'll
I'll play around with uh this a little
I'll play around with uh this a little
bit more but that you know he already
bit more but that you know he already
got me up to some I mean I'm at a 100,00
got me up to some I mean I'm at a 100,00
if I can get to a million I'll be happy
if I can get to a million I'll be happy
boy all right I'll play around with it
boy all right I'll play around with it
more but a million um you can look at
more but a million um you can look at
some of the Nets I have in Dev like
some of the Nets I have in Dev like
they're very small they're like 150ish k
they're very small they're like 150ish k
I'm not even using dude I'm doing random
I'm not even using dude I'm doing random
actions so this is just you can
actions so this is just you can
definitely do it then um so like decent
definitely do it then um so like decent
little Nets that work I've gotten uh
little Nets that work I've gotten uh
this the thing that I've gotten to a
this the thing that I've gotten to a
million that's probably the most
million that's probably the most
complicated is like you can do con con I
complicated is like you can do con con I
think one fully connected and then like
think one fully connected and then like
an lstm like all 12 Hidden dim will get
an lstm like all 12 Hidden dim will get
a million um if you use sufficiently
a million um if you use sufficiently
large bat size we've gotten that with
large bat size we've gotten that with
snake and breakout and I think pong a
snake and breakout and I think pong a
few other things as well that's one
few other things as well that's one
update per sample uh as well since the
update per sample uh as well since the
data is free you may as well get fresh
data is free you may as well get fresh
data um yeah so you have to set some
data um yeah so you have to set some
things to get that for sure and by the
things to get that for sure and by the
way I think that we're only running at
way I think that we're only running at
like half of our theoretical capacity as
like half of our theoretical capacity as
well because there's just so much
well because there's just so much
overhead from Cuda launch and like torch
overhead from Cuda launch and like torch
compiles really obnoxious so we don't
compiles really obnoxious so we don't
use it most of the time um so it can
use it most of the time um so it can
probably be 2 million just straight up
probably be 2 million just straight up
yeah very cool I mean I'm surprised that
yeah very cool I mean I'm surprised that
I'm not getting a million right now but
I'm not getting a million right now but
I will I know
I will I know
it somehow um have you just written like
it somehow um have you just written like
a standalone timing Loop for cart pole
a standalone timing Loop for cart pole
yeah yeah I'll look uh I'll look into
yeah yeah I'll look uh I'll look into
this let me
this let me
see it gets to it got up to 460k is what
see it gets to it got up to 460k is what
we had on our like really good ships um
we had on our like really good ships um
with right yeah this might be one of
with right yeah this might be one of
those situations where this is like how
those situations where this is like how
old is this [ __ ] computer you know
old is this [ __ ] computer you know
yeah I wouldn't be surprised that
yeah I wouldn't be surprised that
there's like a 3X difference or whatever
there's like a 3X difference or whatever
so on my laptop uh my laptop got cart
so on my laptop uh my laptop got cart
pull up to 110k without async and then
pull up to 110k without async and then
200k with async okay that's [ __ ]
200k with async okay that's [ __ ]
that you saying my laptop is your
that you saying my laptop is your
laptop's as fast as this [ __ ]
laptop's as fast as this [ __ ]
computer I guess I guess
computer I guess I guess
laptop yeah I guess so but it's got 30
laptop yeah I guess so but it's got 30
[ __ ] it's got what 16 18 cores it's
[ __ ] it's got what 16 18 cores it's
got 18 cores is it a server is it like a
got 18 cores is it a server is it like a
Zeon is it like a server processor no no
Zeon is it like a server processor no no
it's one of those thread rippers I think
it's one of those thread rippers I think
back in the day that should be okay I
back in the day that should be okay I
don't know I'll send you this this small
don't know I'll send you this this small
Loop and you can you can see what I'm
Loop and you can you can see what I'm
doing wrong but this is more than enough
doing wrong but this is more than enough
for today now now that I know the secret
for today now now that I know the secret
of uh numb
of uh numb
workers yeah I really should check for
workers yeah I really should check for
that one or at least like set it to your
that one or at least like set it to your
core count or something I was trying to
core count or something I was trying to
figure out if I wanted to do that but
figure out if I wanted to do that but
it's kind of tricky cuz like you
it's kind of tricky cuz like you
actually have to sort of do some Auto
actually have to sort of do some Auto
math and it's really hard to always get
math and it's really hard to always get
it right um maybe I should just force
it right um maybe I should just force
you to set num workers manually if
you to set num workers manually if
you're going to use multiprocessing
you're going to use multiprocessing
maybe that would you absolutely should
maybe that would you absolutely should
and then you should give a warning if
and then you should give a warning if
it's more than the core count divided by
it's more than the core count divided by
two I probably will just do that that's
two I probably will just do that that's
that's because that would I mean I I'm
that's because that would I mean I I'm
sure now that this will train in like
sure now that this will train in like
one
one
second I'm sure now I you know carple
second I'm sure now I you know carple
could be trained very very [ __ ]
could be trained very very [ __ ]
quickly with this it's really fun to see
quickly with this it's really fun to see
um like three billion step per hour
um like three billion step per hour
training cuz that's a thing you can do
training cuz that's a thing you can do
yeah well cool dude this is exciting
yeah well cool dude this is exciting
thanks for taking the time to chat with
thanks for taking the time to chat with
me sure thing good to see you doing some
me sure thing good to see you doing some
again well you know I was getting a
again well you know I was getting a
little fed up seeing some of these
little fed up seeing some of these
papers so I'm it just like I get angry
papers so I'm it just like I get angry
and I'm like all right you want to know
and I'm like all right you want to know
the secret is I don't actually read any
the secret is I don't actually read any
RL papers anymore man I just assume
RL papers anymore man I just assume
[ __ ] I assume that they're all long
[ __ ] I assume that they're all long
until proven otherwise after and like
until proven otherwise after and like
yeah I just if you literally you need to
yeah I just if you literally you need to
do this like just make a [ __ ] make a
do this like just make a [ __ ] make a
script make and maybe it's dem5 but
script make and maybe it's dem5 but
literally just make a script and say
literally just make a script and say
like eval your algorithm in the script
like eval your algorithm in the script
and that's like the standard if you do
and that's like the standard if you do
that and just let other people copy
that and just let other people copy
paste it it might be demo I'm totally
paste it it might be demo I'm totally
cool if it is just tell me right now but
cool if it is just tell me right now but
if if that's the script and it has like
if if that's the script and it has like
five okay that that plus the the cleaner
five okay that that plus the the cleaner
all stuff and uh the of the set of like
all stuff and uh the of the set of like
five M you need to to demo on yeah no we
five M you need to to demo on yeah no we
have that as well like we have we have
have that as well like we have we have
run scripts for that stuff uh it needs
run scripts for that stuff uh it needs
to be a little simpler like it's
to be a little simpler like it's
annoying because we also have carbs
annoying because we also have carbs
integration and carbs is like a pain in
integration and carbs is like a pain in
the ass it's really good but it's a pain
the ass it's really good but it's a pain
in the ass so that'll get better that'll
in the ass so that'll get better that'll
be part of science side like it just it
be part of science side like it just it
takes some time man there's a lot a lot
takes some time man there's a lot a lot
of work behind this no but let me know
of work behind this no but let me know
when that happens because I think
when that happens because I think
there's like it's a I would love to just
there's like it's a I would love to just
like use that and then then finally
like use that and then then finally
iterate because like this is my problem
iterate because like this is my problem
like I don't want to do this stuff
like I don't want to do this stuff
because it's all it's not rigorous like
because it's all it's not rigorous like
literally all you do is you just if you
literally all you do is you just if you
want to do different algorithms you just
want to do different algorithms you just
clean puff RL is clean RL PP lstm plus
clean puff RL is clean RL PP lstm plus
our souped up stuff you just swap your
our souped up stuff you just swap your
algo logic in there man and that
algo logic in there man and that
includes a runner against all the
includes a runner against all the
environments with all the CLI args and
environments with all the CLI args and
like tons of config any files that's all
like tons of config any files that's all
in De is this on is this on oh it's on
in De is this on is this on oh it's on
dev okay it's clean paparo
dev okay it's clean paparo
it is in main it's just the configs are
it is in main it's just the configs are
in yamal that are a little Messier and
in yamal that are a little Messier and
like stuff like that um the demo file
like stuff like that um the demo file
uses clean puff RL by the way okay so
uses clean puff RL by the way okay so
that is there it's just it's a little
that is there it's just it's a little
harder than it should be it's getting
harder than it should be it's getting
easier every update uh yeah and it's the
easier every update uh yeah and it's the
the sad thing about this is when we do
the sad thing about this is when we do
the science side stuff we're actually
the science side stuff we're actually
not going to make any friends in RL
not going to make any friends in RL
whatsoever because I'm pretty confident
whatsoever because I'm pretty confident
that's what's going to happen is that
that's what's going to happen is that
it's just going to invalidate like the
it's just going to invalidate like the
majority of RL research from the last 10
majority of RL research from the last 10
years um it's just like I would love to
years um it's just like I would love to
see that though I think that's what it
see that though I think that's what it
needs to happen I mean there It
needs to happen I mean there It
ultimately this is the thing that I
ultimately this is the thing that I
really believe if it's fast enough it's
really believe if it's fast enough it's
like to me it's not about getting like
like to me it's not about getting like
billions of steps and getting an Al
billions of steps and getting an Al
algorithm to converge on an m with
algorithm to converge on an m with
billions of steps while that's
billions of steps while that's
interesting it's just that like if you
interesting it's just that like if you
can make the it in in iteration Loop of
can make the it in in iteration Loop of
science like [ __ ] five minutes where
science like [ __ ] five minutes where
like I I I come up the algorithm change
like I I I come up the algorithm change
I I can eval it across the standard eval
I I can eval it across the standard eval
set and I know for sure this is better
set and I know for sure this is better
or worse than Po in this way it's like
or worse than Po in this way it's like
that is gonna [ __ ] accelerate
that is gonna [ __ ] accelerate
everything and I'm waiting for that it's
everything and I'm waiting for that it's
actually it's way worse than that
actually it's way worse than that
because it's not just like running your
because it's not just like running your
code on all the M you have to do a full
code on all the M you have to do a full
hypers sweep sweet um and like none of
hypers sweep sweet um and like none of
the papers ever do that because of how
the papers ever do that because of how
expensive it's been and it literally
expensive it's been and it literally
makes like a 3X difference in perf that
makes like a 3X difference in perf that
we've seen even just on like atarian
we've seen even just on like atarian
with good hypers it's like they're
with good hypers it's like they're
actually magic
actually magic
so yeah it's I mean I've seen like
so yeah it's I mean I've seen like
really well reputed researchers
really well reputed researchers
publishing stuff that's it's just like
publishing stuff that's it's just like
that's not going to hold up it just
that's not going to hold up it just
isn't yeah I get po man let's let's
isn't yeah I get po man let's let's
let's make poo great
let's make poo great
again we
again we
will all right dude thank you sure see
will all right dude thank you sure see
you around next will see you bye
you around next will see you bye
bye that was fun I was playing toggle a
bye that was fun I was playing toggle a
bunch trying to not make the mic
bunch trying to not make the mic
Echo
um Xander is not around it seems unless
um Xander is not around it seems unless
I missed messages because I didn't have
I missed messages because I didn't have
the restream chat up during that let me
the restream chat up during that let me
go find
go find
that oh wait Xander is here does busy
that oh wait Xander is here does busy
waiting apply when using multiprocessing
waiting apply when using multiprocessing
as well yeah it's just when you're using
as well yeah it's just when you're using
multiprocessing you do this busy waiting
multiprocessing you do this busy waiting
thing it's good it's like busy waiting
thing it's good it's like busy waiting
is bad no in this case busy waiting is
is bad no in this case busy waiting is
good any tutorial and improv
good any tutorial and improv
documentation plan yep I'll show you
documentation plan yep I'll show you
what we have right here so this is the
what we have right here so this is the
these are the new docks that'll be for
these are the new docks that'll be for
the next update they're not fully
the next update they're not fully
completed yet I have to test all the
completed yet I have to test all the
code in here um but we have this nice
code in here um but we have this nice
single page doc site that gives you a
single page doc site that gives you a
clean tutorial on everything in poer lib
clean tutorial on everything in poer lib
in about 20 minutes so that is
in about 20 minutes so that is
included gives you all sorts of stuff
included gives you all sorts of stuff
about the trainer now it tells you all
about the trainer now it tells you all
about how to use
about how to use
vectorization it tells you it explains
vectorization it tells you it explains
the MU API it gives a little example on
the MU API it gives a little example on
some
some
policies uh it gives you examples on how
policies uh it gives you examples on how
to write custom ends and links all the
to write custom ends and links all the
third party
third party
ones all of that is
included technically live if you want to
included technically live if you want to
go check it out but uh it'll be you know
go check it out but uh it'll be you know
the official Doc for the next
the official Doc for the next
update hey Joseph had step away do you
update hey Joseph had step away do you
want me to run the breakout a little
want me to run the breakout a little
longer based on last run or mess with
longer based on last run or mess with
minval you can just run for breakout
minval you can just run for breakout
like for now let's just run it a little
like for now let's just run it a little
longer see if it solves it in like less
longer see if it solves it in like less
than 10 minutes fully solves it in less
than 10 minutes fully solves it in less
than 10 minutes um is and yeah like 600
than 10 minutes um is and yeah like 600
seconds I guess that is uh it's 600
seconds I guess that is uh it's 600
seconds and then there's like an extra
seconds and then there's like an extra
10% for eval so it's when it like the
10% for eval so it's when it like the
last point before the eval one
last point before the eval one
see if that
see if that
works um
works um
yeah that would be good and then just
yeah that would be good and then just
rerun the pong sweep on the new version
rerun the pong sweep on the new version
and then the other stuff we talked about
and then the other stuff we talked about
with like missing scores on uh the other
with like missing scores on uh the other
ends this is too good thank you it's a
ends this is too good thank you it's a
lot of work it's a lot of work to the
lot of work it's a lot of work to the
point that I've started trying to
point that I've started trying to
reinforcement learn myself so I can just
reinforcement learn myself so I can just
get better more consistent work hours in
get better more consistent work hours in
to get this stuff done because it's just
to get this stuff done because it's just
it's kind of getting to be a
it's kind of getting to be a
lot this is the uh concoction of
today yeah I we got some stuff done
today yeah I we got some stuff done
today but I had to set up this whole
today but I had to set up this whole
streams thing in the morning I had to
streams thing in the morning I had to
like unpack and set all these monitors
like unpack and set all these monitors
and this green screen and mic and
and this green screen and mic and
everything up uh and I also got like
everything up uh and I also got like
terrible sleep so probably tomorrow
terrible sleep so probably tomorrow
we're going to start getting like a good
we're going to start getting like a good
session in the morning in um
session in the morning in um
um and then in the evening as
um and then in the evening as
well yeah on win right yeah so yeah
well yeah on win right yeah so yeah
Spencer do that stuff just PR as you
Spencer do that stuff just PR as you
have it I'll just integrate all the new
have it I'll just integrate all the new
things and uh we should be able to go
things and uh we should be able to go
from
there
there
um should be good
I'm trying to think if I want to start
I'm trying to think if I want to start
on docks or what I want to do
on docks or what I want to do
here I kind of want to get new sweeps
going let me go double check one thing
going let me go double check one thing
for timing purposes
well I don't know I'm going to work on
well I don't know I'm going to work on
this for a little bit then until like
this for a little bit then until like
cold away
I think I'll run
I think I'll run
uh I'll just put the connect Force sweep
uh I'll just put the connect Force sweep
in real
quick what's this thing
quick what's this thing
oops
and
python sweep
carbs whichever my Microsoft Dev
carbs whichever my Microsoft Dev
invented this sound effect needs to be
shot okay so that
runs we've got that sweep
runs we've got that sweep
going uh and I think then since we have
going uh and I think then since we have
these in the background other than the
these in the background other than the
little bits of analysis I need to
do e
okay so here's Connect Four oh is this
okay so here's Connect Four oh is this
sweeping the wrong
sweeping the wrong
metric yeah this is totally sweeping the
metric yeah this is totally sweeping the
wrong
metric uh it should be score I
believe yeah
where's the objective
where's the objective
[Music]
peram here it is
score okay so now we should be directly
score okay so now we should be directly
optimizing score Spencer if you're here
optimizing score Spencer if you're here
you need to do that for anything that
you need to do that for anything that
has a win rate based thing you need to
has a win rate based thing you need to
optimize win rate
optimize win rate
directly so there that should that
directly so there that should that
should now
should now
work uh though mind
work uh though mind
you he terrible really right
okay
yeah total time
yeah total time
step is this a thing
oh I didn't get to change total time
steps wait how did this I just messed
steps wait how did this I just messed
with this right didn't I just put this
with this right didn't I just put this
metric in
put in the wrong
file okay so Min is going to
file okay so Min is going to
be 10
be 10
mil Max is going to be 100 Mil
there we
go let's have that warning before I
go let's have that warning before I
forget
oh this is actually fine
I forgot my chat is I got to fix the
chat hope you fully recovered from your
chat hope you fully recovered from your
injury not really to be
injury not really to be
honest
honest
um I mean I can very easily I can rep
um I mean I can very easily I can rep
315 a bunch but uh I'm a little cautious
315 a bunch but uh I'm a little cautious
going back to 400 because I definitely
going back to 400 because I definitely
feel it walking around still
feel it walking around still
unfortunately they'll be back though
tells me 32 which is wrong
there we go
whatever some
warning for
we
go so that'll fix that
and look at that this is already way
better you
see so we'll just run this for a short
see so we'll just run this for a short
sweep and this will just get us
sweep and this will just get us
something like decent
something like decent
enough here we can set this in into
enough here we can set this in into
created timestamp which is going just be
created timestamp which is going just be
time process
time process
time there we go so we'll try to see if
time there we go so we'll try to see if
we can get it like Connect Four policy
we can get it like Connect Four policy
in a
minute very
minute very
good wish you could mute conversations
good wish you could mute conversations
thing just spams
me okay so that should be good
anything on Discord I think I missed
anything on Discord I think I missed
Zander for
Zander for
today I'll get him
tomorrow yeah these are good
we'll see how consistent those end up
we'll see how consistent those end up
being no I'm here in YouTube
being no I'm here in YouTube
chat um I'm going to have dinner in like
chat um I'm going to have dinner in like
20 minutes I can start reviewing code if
20 minutes I can start reviewing code if
you'd
you'd
like would you like me to start going
like would you like me to start going
through
code I can just do stuff live
code I can just do stuff live
so I definitely want to get you
so I definitely want to get you
uh taken care of here we do very much
uh taken care of here we do very much
appreciate big contributions like
appreciate big contributions like
this sure all right we'll uh I'll just
this sure all right we'll uh I'll just
start going through this I'll give you
start going through this I'll give you
some live
some live
feedback uh because that'll be quickest
feedback uh because that'll be quickest
and we can go from
there so puffer V
uh I don't know why you didn't just use
uh I don't know why you didn't just use
the clean puff RL demo but
sure okay you added some you added docs
sure okay you added some you added docs
as well
as well
cool we need to add docs for our
cool we need to add docs for our
independent
independent
M's it's probably a nice thing to
M's it's probably a nice thing to
do it's
copied uh we're going to do the python
copied uh we're going to do the python
file first I think wherever that is
uh yeah you don't need to do you can
uh yeah you don't need to do you can
just add this you pretty much just need
just add this you pretty much just need
to add this line here to the setup. pi
to add this line here to the setup. pi
here let me show
here let me show
you so in order to add this m it's way
you so in order to add this m it's way
simpler than you've made
it so you just add your extension like
it so you just add your extension like
here you just add your extension file
here you just add your extension file
like here and then this will pick it up
like here and then this will pick it up
right and then for the C if you want to
right and then for the C if you want to
compile in just pure C
compile in just pure C
mode it'll get picked up automatically
mode it'll get picked up automatically
by this thing as long as you preserve
by this thing as long as you preserve
the same structure uh speaking of which
the same structure uh speaking of which
I need to delete this m uh so I need to
I need to delete this m uh so I need to
fix this script by deleting this m thing
fix this script by deleting this m thing
because poer Li has been moved into just
because poer Li has been moved into just
it's moved into ocean now but you get
it's moved into ocean now but you get
the idea so you you can save a little
the idea so you you can save a little
bit of annoy annoyance
there I want to get your Pi file first
there I want to get your Pi file first
so we do top to
so we do top to
bottom uh assets as well so assets go
bottom uh assets as well so assets go
into the assets folder at the top level
into the assets folder at the top level
you can probably reuse this puffer
you can probably reuse this puffer
because we actually we have like a
because we actually we have like a
standalone
puffer uh resources so here you see we
puffer uh resources so here you see we
have resources and there's like puffers
have resources and there's like puffers
128 so you can just use this
128 so you can just use this
puffer um and this just prevents us from
puffer um and this just prevents us from
bloating Assets in the
bloating Assets in the
repo um this we're we're not going to
repo um this we're we're not going to
commit gifts to the repo like this uh
commit gifts to the repo like this uh
you can but what we will do is we'll put
you can but what we will do is we'll put
the environment itself on the website so
the environment itself on the website so
you won't need a gift because the uh the
you won't need a gift because the uh the
environment will deploy to the website
environment will deploy to the website
so you'll just have this whole thing
so you'll just have this whole thing
online high environment
uh is
this oh is the renderer in Python is
this oh is the renderer in Python is
that what's going on
here hold
on pick
up um okay I see what you did
so yeah there's some things that you're
so yeah there's some things that you're
going to want to look at here because um
going to want to look at here because um
well hold on let me just make sure I'm
well hold on let me just make sure I'm
actually let me make sure I'm
actually let me make sure I'm
actually got Pi environment. Pi is this
actually got Pi environment. Pi is this
the full
the full
logic or is this import
logic or is this import
something did you prototype it in Python
yeah you did okay so this is fine I see
yeah you did okay so this is fine I see
you prototyped it in
you prototyped it in
Python
right yeah okay so this is fine this is
right yeah okay so this is fine this is
you prototyped it here and then if I go
you prototyped it here and then if I go
into syon
into syon
Ms S environment up high okay
cool yeah this is way more what we would
cool yeah this is way more what we would
expect good um except that you don't
expect good um except that you don't
want to subass parallel M you're going
want to subass parallel M you're going
to want to make this a native M
to want to make this a native M
so let me show you what to look at here
so let me show you what to look at here
so I can just show you the side by side
so I can just show you the side by side
you're still here right I have the
you're still here right I have the
YouTube chat open
H puffer the
otion okay so squared is like a really
otion okay so squared is like a really
simple demo typing in Discord my
simple demo typing in Discord my
bad render function tricky had to save T
bad render function tricky had to save T
pimp page and load back in try to make
pimp page and load back in try to make
scon yeah so I'll show you I'll show you
scon yeah so I'll show you I'll show you
how to do it so first of all parallel
how to do it so first of all parallel
end here if you just look at like our PI
end here if you just look at like our PI
this is like our sample you have class
this is like our sample you have class
puffer en you just Define these things
puffer en you just Define these things
uh you can map these pretty closely
uh you can map these pretty closely
right to what you're doing uh typically
right to what you're doing uh typically
we don't do dick space what we do is we
we don't do dick space what we do is we
just compactify everything for Native Ms
just compactify everything for Native Ms
because it's
because it's
faster um we just like yeah we
faster um we just like yeah we
compactify everything you can you can
compactify everything you can you can
make this like a wrapper if you want uh
make this like a wrapper if you want uh
petting do compatibility that we're
petting do compatibility that we're
probably going to end up doing that more
probably going to end up doing that more
generally anyways
uh reset yep that's fine and then yeah
uh reset yep that's fine and then yeah
this we don't use dict API right we have
this we don't use dict API right we have
uh self-observations actions rewards
uh self-observations actions rewards
these are pre-allocated buffers and they
these are pre-allocated buffers and they
just get set directly by the environment
just get set directly by the environment
so this is like a really simple pi and
so this is like a really simple pi and
basically all the M's are going to look
basically all the M's are going to look
like this because it's this it's this
like this because it's this it's this
simple and then if we go to your scyon
simple and then if we go to your scyon
binding
okay your syon binding looks reasonable
okay your syon binding looks reasonable
let me
see this is fine and
then so you did one environment here
then so you did one environment here
what we do is we vectorize internally so
what we do is we vectorize internally so
we have multiple environment
we have multiple environment
supported um inside of the scon file so
supported um inside of the scon file so
you can see here I have a loop over numb
you can see here I have a loop over numb
environments I make the environments
environments I make the environments
like this and then I get uh this pointer
like this and then I get uh this pointer
to ends as well as pointer to client and
to ends as well as pointer to client and
I can just pass in the observation
I can just pass in the observation
action rewards all these buffers that
action rewards all these buffers that
are allocated from python you pass them
are allocated from python you pass them
in here so if you have multi-agent you
in here so if you have multi-agent you
can look at my MOBA for example of how
can look at my MOBA for example of how
to do multi-agent it's almost the same
to do multi-agent it's almost the same
you just pass in the buffers that you
you just pass in the buffers that you
need and then this makes everything way
need and then this makes everything way
faster because you avoid a bunch of copy
faster because you avoid a bunch of copy
operations I'm happy to explain that in
operations I'm happy to explain that in
more detail I'm just doing a quick walkr
more detail I'm just doing a quick walkr
now so I got to get dinner in a moment
now so I got to get dinner in a moment
um just say I can give you some
um just say I can give you some
structural stuff to fix if you have time
structural stuff to fix if you have time
today before I I go through and review
today before I I go through and review
more properly because there's quite a
more properly because there's quite a
bit here so yeah these Malik you don't
bit here so yeah these Malik you don't
need to Malik these because they're
need to Malik these because they're
going to get passed in from python
going to get passed in from python
that's the key thing I think you're not
that's the key thing I think you're not
getting with this um same thing with all
getting with this um same thing with all
this like basically this whole thing
this like basically this whole thing
gets simpler because memory is pass
gets simpler because memory is pass
in uh same thing here get OBS if you
in uh same thing here get OBS if you
don't use dictionaries they just get
don't use dictionaries they just get
written to an array you don't have to do
written to an array you don't have to do
this this just happens inside of the C
this this just happens inside of the C
file you won't even need dialect like
file you won't even need dialect like
this either close you just have to free
this either close you just have to free
the environments and close the client
the environments and close the client
maybe so this is a very good template
maybe so this is a very good template
for you to look at for that and then
for you to look at for that and then
pick
pick
up uh I see what you did here this is
up uh I see what you did here this is
like yeah I see why you what you did um
like yeah I see why you what you did um
what we do in practice is we use we kind
what we do in practice is we use we kind
of implement stuff header only so we
of implement stuff header only so we
just put all the logic into the header
just put all the logic into the header
file
file
um I think you can probably import the C
um I think you can probably import the C
files as well if you want but this makes
files as well if you want but this makes
it easier because then you can have just
it easier because then you can have just
Import the. in order to run from Python
Import the. in order to run from Python
and then we make the C file the one that
and then we make the C file the one that
compiles for web
compiles for web
assembly that's been pretty clean for us
assembly that's been pretty clean for us
to do but I'll look at the C code in
to do but I'll look at the C code in
here
yeah so this is pretty standard except
yeah so this is pretty standard except
what I will tell you is you don't want
what I will tell you is you don't want
to use uh double pointers for 2D arrays
to use uh double pointers for 2D arrays
you're going to want to use um just
you're going to want to use um just
single
single
pointers me see if we have that
so single pointer let me see if we have
so single pointer let me see if we have
an
example yeah so right here observations
example yeah so right here observations
is a 2d array this is for just calling
is a 2d array this is for just calling
it from C because it gets passed in most
it from C because it gets passed in most
of the time you see we just CCT size
of the time you see we just CCT size
times size and then what you do is you
times size and then what you do is you
just do the math
like yeah here right m r * m size plus
like yeah here right m r * m size plus
MC just do the math and you can make a
MC just do the math and you can make a
little helper function to do this math I
little helper function to do this math I
make like a get address function very
make like a get address function very
often don't have to worry about that so
often don't have to worry about that so
this basically that cuts out this stuff
this basically that cuts out this stuff
like
like
this um you're going to want a separate
this um you're going to want a separate
init and allocate function like init is
init and allocate function like init is
for stuff that you need to in it is for
for stuff that you need to in it is for
stuff that that you always need
stuff that that you always need
allocated is for stuff that you only
allocated is for stuff that you only
need if you call from C cuz like OB
need if you call from C cuz like OB
actions rewards terminals get passed in
actions rewards terminals get passed in
from python so that'll simplify for you
stuff like this is fine this will be
stuff like this is fine this will be
faster if you do this as a m set
faster if you do this as a m set
otherwise this is fine same thing like
otherwise this is fine same thing like
this anytime you just start zeroing a
this anytime you just start zeroing a
bigger array mem set will be faster no
bigger array mem set will be faster no
big deal
big deal
though uh yes this like here this grid
though uh yes this like here this grid
of XY this is where you would do like
of XY this is where you would do like
get address XY or whatever because it'll
get address XY or whatever because it'll
be 1D
indexing otherwise it's some simple
indexing otherwise it's some simple
Logic Let me see what else I can get you
Logic Let me see what else I can get you
real quick
real quick
get
get
OBS yeah that's how you want to do that
good three that'll get simplified like
good three that'll get simplified like
this will go
away okay I'll go over logic in more
away okay I'll go over logic in more
detail once you fix uh the smaller stuff
detail once you fix uh the smaller stuff
and then where's the render stuff you
and then where's the render stuff you
tried to do the render and it was hard
tried to do the render and it was hard
you
said so the way to do render so it's
said so the way to do render so it's
easy right is you just use the
easy right is you just use the
Capi this is the render for squared this
Capi this is the render for squared this
is how easy it
is how easy it
is this is like very very simple
is this is like very very simple
rendering and if you want a more
rendering and if you want a more
extensive example I think probably a
extensive example I think probably a
good one to look at that would be like
good one to look at that would be like
rware
rware
maybe cuz it's very similar to your
maybe cuz it's very similar to your
environment and you'll see how easy
environment and you'll see how easy
their rendering
is
is
so this like 100ish lines of code is all
so this like 100ish lines of code is all
the rendering and this is like drawing
the rendering and this is like drawing
the puffer texture right
the puffer texture right
here this pile grid rware looks very
here this pile grid rware looks very
similar to your n right this is rware
similar to your n right this is rware
it's like 100 lines of code to do
it's like 100 lines of code to do
something like
this so major stuff for you to do
this so major stuff for you to do
initially is going to be to um use the
initially is going to be to um use the
native API and then like use the OBS
native API and then like use the OBS
data from python pass that to scyon and
data from python pass that to scyon and
then to see uh make sure you have the
then to see uh make sure you have the
loop over environments you have multiple
loop over environments you have multiple
environments in the cython layer uh
environments in the cython layer uh
that'll actually simplify a lot of your
that'll actually simplify a lot of your
code and make stuff way way
code and make stuff way way
faster uh add the renderer in C and the
faster uh add the renderer in C and the
way that I like to Dev so that it's like
way that I like to Dev so that it's like
really easy to test stff quickly because
really easy to test stff quickly because
it's annoying to compile scyon over and
it's annoying to compile scyon over and
over right um the way that I will
over right um the way that I will
typically
typically
Dev and I have to adjust this path I
Dev and I have to adjust this path I
just messed this up
get clang on this
machine okay
so build building pong for local testing
so build building pong for local testing
you see compilation is
you see compilation is
instant and then I can just run pong I
instant and then I can just run pong I
have it the window pulled up on my other
have it the window pulled up on my other
monitor right so you can see that I have
monitor right so you can see that I have
the ability to compile and test in pure
the ability to compile and test in pure
C without having to wait for all the
C without having to wait for all the
really obnoxious scon and python tool
really obnoxious scon and python tool
chain so this basically lets you build
chain so this basically lets you build
your entire end nicely and see this
your entire end nicely and see this
comes with like mem check sanitizing
comes with like mem check sanitizing
leak all this stuff to make it easier to
leak all this stuff to make it easier to
Dev it's a really fast and easy pure cev
Dev it's a really fast and easy pure cev
Loop
Loop
and then the uh you know you just have
and then the uh you know you just have
to understand how you put observations
to understand how you put observations
in from Python and cython in order to do
in from Python and cython in order to do
the binding and then you don't have to
the binding and then you don't have to
do as many like you don't have to SC
do as many like you don't have to SC
around with scon compiler fixing errors
around with scon compiler fixing errors
as much is this uh is this good
as much is this uh is this good
information Zander is there anything I
information Zander is there anything I
can answer just in the next couple
can answer just in the next couple
minutes before I got to go for dinner if
minutes before I got to go for dinner if
not I can do a longer session after
not I can do a longer session after
you've played with some stuff um like
you've played with some stuff um like
tomorrow or anytime this
tomorrow or anytime this
week for
good information let me start probably
good information let me start probably
ask for help yeah no worries and uh the
ask for help yeah no worries and uh the
after this stream ends this VOD will be
after this stream ends this VOD will be
on YouTube so if you just want to like
on YouTube so if you just want to like
play around with this tonight or
play around with this tonight or
whenever um you can just like scrub
whenever um you can just like scrub
through this like these last few minutes
through this like these last few minutes
and uh then you can ask more stuff from
and uh then you can ask more stuff from
there I think that if you start with
there I think that if you start with
this it's going to start to make a lot
this it's going to start to make a lot
of sense cuz like there are a lot of
of sense cuz like there are a lot of
things I can see that just didn't click
things I can see that just didn't click
that are going to be like it's easier
that are going to be like it's easier
than you're making it right like you're
than you're making it right like you're
making it harder on yourself than it
making it harder on yourself than it
needs to be uh puffer set up to make
needs to be uh puffer set up to make
things very very easy on you if you just
things very very easy on you if you just
like use the bindings the way that we've
like use the bindings the way that we've
done
it but that's going to be it for now
it but that's going to be it for now
folks
folks
um I'm going to go get food I might do a
um I'm going to go get food I might do a
couple other small things tonight but
couple other small things tonight but
other than than that we're going to let
other than than that we're going to let
the sweeps
run uh where is it I'm going to let
run uh where is it I'm going to let
these sweeps
run solve Connect 4 really
run solve Connect 4 really
quick it looks like it's already doing
quick it looks like it's already doing
that and uh we'll continue fixing
that and uh we'll continue fixing
environments and onboarding stuff over
environments and onboarding stuff over
the next few days hey French welcome
the next few days hey French welcome
sorry you caught just the very end of
sorry you caught just the very end of
the stream but I'll be on like pretty
the stream but I'll be on like pretty
much every weekday uh from here on out
much every weekday uh from here on out
so thanks folks uh if you want to
so thanks folks uh if you want to
support the project for free all the
support the project for free all the
code here is free and open source it's
code here is free and open source it's
all on right here start the project if
all on right here start the project if
you want to help us out and join
you want to help us out and join
discord.
discord.
GPU if you want to come chat and
GPU if you want to come chat and
contribute I review all contributions on
contribute I review all contributions on
stream it's a really great way to get
stream it's a really great way to get
into reinforcement learning in AI
into reinforcement learning in AI
General we have a lot of people around
General we have a lot of people around
here that came in with just like General
here that came in with just like General
programming experience but no RL or AI
programming experience but no RL or AI
experience um it is kind of funny how
experience um it is kind of funny how
puffer is Cutting Edge RL but it's
puffer is Cutting Edge RL but it's
actually very easy to contribute to M so
actually very easy to contribute to M so
we welcome that

Kind: captions
Language: en
live
here let me make sure YouTube actually
here let me make sure YouTube actually
sinks
sinks
up this cutting the top of my head off
up this cutting the top of my head off
no we're good okay so there's some stuff
no we're good okay so there's some stuff
to do
to do
today
today
um oops let's go grab Xander
vision is a little weird though I think
vision is a little weird though I think
I
I
like we're good though
um okay Xander's got an M for code
um okay Xander's got an M for code
review I think that's the only thing I
review I think that's the only thing I
have other than will might message me
have other than will might message me
for uh puffer onboarding as well
oh on the side monitor real quick I got
oh on the side monitor real quick I got
to check for one one quick email and
to check for one one quick email and
then we'll start on some
Dev no we're good nothing urgent
uh I don't know why this machine is
uh I don't know why this machine is
slower we'll figure that out over time
slower we'll figure that out over time
but it's going to be fast enough for
now I think now we get to just start
now I think now we get to just start
going
going
through all the
through all the
environments and checking the baselines
environments and checking the baselines
and updating those
right that's going to be a major
thing oh wait hold on there
was there's some naming stuff as
well let's actually just do like this
got to go grab one b key this is a new
machine also do I have my chat visible
here I think I have to until I fix chat
here I think I have to until I fix chat
I'm just going to grab a rest stream iio
window so I think I won't be able to see
window so I think I won't be able to see
anything that's been typed yet but from
anything that's been typed yet but from
now on I will be able to
now on I will be able to
see
see
chat
yes let's go get my WB key
and what we're going to do is we're just
and what we're going to do is we're just
going to go through all the different
going to go through all the different
baselines and uh we're going to start
baselines and uh we're going to start
trying to finalize some of these trained
models Toof that
can okay I'm going to grabb my
key
key
good so here is our pong
model did just drop a point for no
reason this doesn't look great
let's figure out what's going on with
this just going to go through all the
this just going to go through all the
M's one by one and figure out what is
M's one by one and figure out what is
wrong
okay so this is the
Run no this
Run no this
is this run
is this run
right okay this is a solid 21 score
right okay this is a solid 21 score
perfect for right
no frame
skip these prams aren't updated either I
assume
right I know these are
yeah so this looks all correct
then shouldn't be dropping points in
then shouldn't be dropping points in
that case right
unless this just means that it wins all
unless this just means that it wins all
the
time let's
time let's
see so we have scores 21
I see so this just means that you've won
I see so this just means that you've won
the game it doesn't mean that you drop
the game it doesn't mean that you drop
that you don't drop
points we should actually watch it to
points we should actually watch it to
see how good of a policy it is then
yeah it's still h
why is it missing stuff like
that is it trained for too
that is it trained for too
long I get to be unstable
doesn't look like the
doesn't look like the
horrible
Spike does it not get a negative reward
Spike does it not get a negative reward
for losing a
point it would seem it doesn't
but
it this is worse than the one that we
it this is worse than the one that we
have on the website I think
8 to 15
missed at the start like
missed at the start like
twice okay
so it's going to win like every game but
so it's going to win like every game but
the return is questionable
gets a reward of one for
hitting for winning the
point0 one for bouncing the ball
it's the original
Atari e
this is like
sketchy there's no way of
sketchy there's no way of
differentiating games that have
separate score right I actually I think
separate score right I actually I think
the original goes from - 20 to 20
the original goes from - 20 to 20
doesn't
it I think we're going to do this
that's got to be
that's got to be
it it's just sub optimal hypers um
it it's just sub optimal hypers um
because there's no way to break there's
because there's no way to break there's
no way to find out which model is better
no way to find out which model is better
between two models that both win
between two models that both win
regardless of how many points they drop
regardless of how many points they drop
because of the structure of the score
because of the structure of the score
I'm pretty sure that
I'm pretty sure that
uh I can just
find Benchmark
okay you see it starts
okay you see it starts
20 then it goes to 21 it seems
be
rer e
this needs to
be there's no negative reward
here we're going to have to try
something this is negative one
what happens if we train it like
this the heck
something screwed up
something must have set up differently
something must have set up differently
this
time e
this is
correct
correct
uh that's very odd
we'll look at this
after I want to do pong right now one at
after I want to do pong right now one at
a
time okay it's in snake as well well
time okay it's in snake as well well
this one I know definitely
compiles so something is scre
did cython break
something possible syon broke something
something possible syon broke something
in a new version and I don't have it
in a new version and I don't have it
pinned
okay so this just does not
editable installs was recently
introduced did setup tools just break
introduced did setup tools just break
some stuff
I hate I hate the python ecosystem
I hate I hate the python ecosystem
honestly it's like so stupid
okay so that's a legit thing that I just
okay so that's a legit thing that I just
forgot a
forgot a
semicolon but that can't be what was
semicolon but that can't be what was
causing
causing
uh everything
else e
okay so that looks like it built
this has to be puff
pong so same params as
pong so same params as
before different reward
before different reward
function we will probably have to rerun
function we will probably have to rerun
this
s what the heck this something's wrong
s what the heck this something's wrong
with this GPU it's
with this GPU it's
not I mean did I like forget to remove
I was literally looking to see if I
I was literally looking to see if I
forgot to remove
forgot to remove
um like packaging or something because I
um like packaging or something because I
don't know why the heck the he would be
don't know why the heck the he would be
that
I think that this is
I think that this is
[Music]
better let's
see yeah look at that
see yeah look at that
so you can see it starts at -20
this will actually be better though
this will actually be better though
because we will be able to now at least
because we will be able to now at least
see it shouldn't be dropping points
see it shouldn't be dropping points
now right because we changed the
now right because we changed the
score it should be dropping at most one
point
oops for
so here's poer
pal possibly worth running another Sweep
pal possibly worth running another Sweep
with
with
this to see if we can beat it faster
this is immediately
better I Spencer is not going to be
better I Spencer is not going to be
happy about
that
e it's almost like the Jitters are less
e it's almost like the Jitters are less
too inspire me to optimize a bit my
too inspire me to optimize a bit my
Asing P now only uses 15% SPS coming
Asing P now only uses 15% SPS coming
from plr computation rather than sils
from plr computation rather than sils
very good engineering
very good engineering
op engineering
op engineering
op uh for some reason this desktop that
op uh for some reason this desktop that
I've been got I've been given is like
I've been got I've been given is like
the 490 is running at like half speed
the 490 is running at like half speed
somehow and it doesn't seem like it's
somehow and it doesn't seem like it's
just because of
streaming look that perfect perfect
streaming look that perfect perfect
play cursed Hardware
play cursed Hardware
problems I don't know we'll ask I'll
problems I don't know we'll ask I'll
figure out with the main gear guys this
figure out with the main gear guys this
is a brand new desktop
noticed a lot of RL Bas
noticed a lot of RL Bas
lines compute actions and values
um we don't have separate networks
um we don't have separate networks
Ryan so value should just be like one
Ryan so value should just be like one
tiny linear
tiny linear
layer we don't have yeah it's a shared
layer we don't have yeah it's a shared
network
yeah no I'm saying that ours are by
yeah no I'm saying that ours are by
default we don't have separate Target
default we don't have separate Target
networks I don't see the point
really slow yeah there's a weird thing
really slow yeah there's a weird thing
that guy found something similar there
that guy found something similar there
as
as
well and I got to get myself a
token there's definitely some stuff to
token there's definitely some stuff to
optimize in our Baseline but this is the
optimize in our Baseline but this is the
same code this is just Hardware is being
same code this is just Hardware is being
weird today
oops where's my
oops where's my
chat here we go good luck going to get
chat here we go good luck going to get
lunch see you around may I suggest my,
lunch see you around may I suggest my,
calorie
mug
e
e
e e
hey Gamers did Discord invite only nope
hey Gamers did Discord invite only nope
everything that you see here everything
everything that you see here everything
is open source public um contributors
is open source public um contributors
welcome it's discord.gg puffer there are
welcome it's discord.gg puffer there are
like 7 800 people in
here yeah
here yeah
795 welcome number
796 e
okay break out
so here what's he
so here what's he
doing he have sweeps going
let me
let me
see let's see what Spencer is up to oh
see let's see what Spencer is up to oh
wow
uh that's encouraging
8:37 and 5
8:37 and 5
minutes what he
said yeah so he's very very close
thank you really enjoyed your thesis
thank you really enjoyed your thesis
defense no worries um if you haven't
defense no worries um if you haven't
seen my RL Iceberg video or like RL
seen my RL Iceberg video or like RL
quick start guide those are uh I'd
quick start guide those are uh I'd
recommend those as well there are a
recommend those as well there are a
couple pieces of content out now that I
couple pieces of content out now that I
put some effort into
there's some weird stuff going
on me see if he links me that run
update
epox that's a weird
epox that's a weird
one to be linked
I'm interested to see what this is
I'm interested to see what this is
though
h
Connect
Connect
Four we also want to look
Four we also want to look
at knew that in the meantime we we wait
at knew that in the meantime we we wait
for this
well that's not particularly helpful now
well that's not particularly helpful now
is
it where's his sweep e
where did you say that he got 830 some
where did you say that he got 830 some
odd in 300
odd in 300
seconds I
seconds I
see in 500
seconds like if I were going to grab
seconds like if I were going to grab
this point right
here like it's a weird
here like it's a weird
bump
entropy matches this no it
entropy matches this no it
doesn't okay so you can see here that
doesn't okay so you can see here that
this is not a stable param set it's like
this is not a stable param set it's like
slowly diverging
doesn't do a great job with the value
doesn't do a great job with the value
loss
loss
either it's pretty odd that this set
either it's pretty odd that this set
does this
well
score what is it chosen here that's like
score what is it chosen here that's like
so
ridiculous this is fine
value function
coefficient just going with a really low
coefficient just going with a really low
value function
coefficient we might just not want to
coefficient we might just not want to
let models play with
this it's very weird though that they
this it's very weird though that they
like doing that
like doing that
that the uh The Sweep will just set that
that the uh The Sweep will just set that
so
low let me
see yeah you see how all of these are
see yeah you see how all of these are
like down
here
e e
okay so he'll look at that
okay so that handles these
okay so that handles these
two Connect
4 let's go check our Connect 4 run
okay so this score is not
okay so this score is not
good it's needs to sweep or
something e
we good on the mobile
I don't have a baseline for it do I
lots of Ms needing work
mhm that's
fair I'm trying to think what else we
fair I'm trying to think what else we
should do right now with this
I think these just need to be swept
I think these just need to be swept
mostly I've already had the conversation
mostly I've already had the conversation
with Spencer with the minor tweaks
with Spencer with the minor tweaks
needed for
needed for
these MOA does have a good policy we
these MOA does have a good policy we
just need to fix some small things bull
just need to fix some small things bull
should be here as well 23
should be here as well 23
minutes okay
I the thing is the other box I have now
I the thing is the other box I have now
is occupied I mean I can let me see if I
is occupied I mean I can let me see if I
can in the mean time while I'm wait and
can in the mean time while I'm wait and
try to figure out why this box is so
try to figure out why this box is so
weirdly slow welcome YouTube folks as
weirdly slow welcome YouTube folks as
well
so it's using 40% GPU right now because
so it's using 40% GPU right now because
of stream let me
of stream let me
pause let me pause some of these
previews why do
I let me piix some stuff here so I can
I let me piix some stuff here so I can
actually pause previews
have they broke it
okay
I disable this
preview yeah the GPU goes down a bit
the darn re stream
chat there we go so this is at 11k for
chat there we go so this is at 11k for
some
some
reason 7K
53c so it's cooling is fine
the Ule is very
bad maybe I just set up maybe hold
on 16 * 3 is 48
on 16 * 3 is 48
right I
right I
stupid yeah hold on no I'm stupid
stupid yeah hold on no I'm stupid
right that's right
um okay so the optimal that I had before
um okay so the optimal that I had before
was with a
was with a
48 batch size 16
workers is this valid let's see
yeah so that is actually
valid
11.4k so we actually have good M time
11.4k so we actually have good M time
now we're stuck in forward for some
now we're stuck in forward for some
reason
oh when did that change
is there performance regression in
is there performance regression in
towards 2.4
need compile or
something e
I know that I had it at 20K the OA 4
do they switch the
GPU this is PN
y ny4
yeah this is what I have
h
holy how long does this take to
anybody know like a easy GPU Benchmark
anybody know like a easy GPU Benchmark
so I can see if this 490 is actually
so I can see if this 490 is actually
getting uh the perf it's supposed to be
getting I'm trying to think what other
getting I'm trying to think what other
things I could have been missing
that took forever to compile
that took forever to compile
three minute compile
time it's not even like noticeably
faster interestingly the workload is
faster interestingly the workload is
shifted completely
I think there is something actually
I think there is something actually
going wonky at the Cuda level
going wonky at the Cuda level
because the Ford pass was taking up a
because the Ford pass was taking up a
ton before and now it's all in
ton before and now it's all in
learning for and learn
really
odd it's only four gigs memory
okay frame skip four this is
fine yo did you like this other run
fine yo did you like this other run
better let me
better let me
see link
see link
it oh my bad now wait
where well that's good I didn't I didn't
where well that's good I didn't I didn't
see this in the sweep though like I
see this in the sweep though like I
didn't see this run in the the most
didn't see this run in the the most
recent sweep
okay this is at least like more stable
okay this is at least like more stable
it's still slowly diverging a little
it's still slowly diverging a little
bit something weird happen here as
well happened
well happened
here see any spikes
and see the parameters for
this
this
so this is
fine mhm
do you see what's happening
here so what's happening in your
sweep first of all this is crazy this
sweep first of all this is crazy this
mini batch to batch ratio is insane and
mini batch to batch ratio is insane and
then with four updates that's like
then with four updates that's like
crazy um but then it's the value
crazy um but then it's the value
function coefficient
and it's weird that it's selecting these
and it's weird that it's selecting these
because apparently they're working
because apparently they're working
better though it might be like some
better though it might be like some
weird local Optima I don't know
um you can see it right here I linked
um you can see it right here I linked
the image in the
the image in the
Discord like look all your
Discord like look all your
runs they're in like this band of like
runs they're in like this band of like
really low clip for some
really low clip for some
reason is are there no runs that are
reason is are there no runs that are
better
better
that's
that's
bizarre I mean this could be stuff with
bizarre I mean this could be stuff with
our J implementation to be
fair I mean to be fair this is probably
fair I mean to be fair this is probably
fine because
like I think this is this one is is
like I think this is this one is is
probably fine though like uh we have
probably fine though like uh we have
enough baselines to worry about that I'm
enough baselines to worry about that I'm
fine like taking this as our Baseline
fine like taking this as our Baseline
run for now
I mean we'll just run it a little longer
right crazy mies yeah let's just take
right crazy mies yeah let's just take
that foram run it a little longer see if
that foram run it a little longer see if
it beats the game and be done with that
it beats the game and be done with that
one then you can free up the sweep you
one then you can free up the sweep you
can run a quick pong sweep pong sweep
can run a quick pong sweep pong sweep
should be done by morning that's like a
should be done by morning that's like a
very quick little
very quick little
sweep just to see if it solves any
sweep just to see if it solves any
faster and then like we really want to
faster and then like we really want to
get want to get the Connect 4 Baseline I
get want to get the Connect 4 Baseline I
want to get the go Baseline I want to
want to get the go Baseline I want to
get the triple Triad Baseline I mean
get the triple Triad Baseline I mean
mostly these baselines are now the main
mostly these baselines are now the main
thing holding back the uh the release
thing holding back the uh the release
I'd say so sooner we get these done the
I'd say so sooner we get these done the
better and I have my own running as well
better and I have my own running as well
you know I thought that this machine was
you know I thought that this machine was
going to be
going to be
better I really don't know what's
better I really don't know what's
happened here it's very
happened here it's very
odd I'm still trying to figure out cuz
odd I'm still trying to figure out cuz
the core rate ratios are also
different but like
different but like
yeah this is very
yeah this is very
disappointing update epox
disappointing update epox
2 oh maybe was this a different set of
2 oh maybe was this a different set of
hypers or
hypers or
something I still think this is too
something I still think this is too
ridiculous I will look into this though
Connect 4 is also too low it's only
Connect 4 is also too low it's only
winning like 60% of the games here
we'll see I have Xander and will
we'll see I have Xander and will
potentially don't want to check in code
potentially don't want to check in code
or check on code did
or check on code did
I I figured out the pong thing real
quick and see which other of these we
quick and see which other of these we
can do anything
on mostly just about the experiment
experiments then B has uro to
submit to be fair there's a bunch of
submit to be fair there's a bunch of
other cleanup work I can probably
other cleanup work I can probably
do um this perf difference is bothering
do um this perf difference is bothering
me
though it definitely should not be this
slow let me go check
slow let me go check
my other sweep
h
my other sweep is still um
my other sweep is still um
progressing a little
bit to look at
bit to look at
that yeah another there's definitely
that yeah another there's definitely
okay I had to do that one off stream
though man I was expecting right now to
though man I was expecting right now to
be working on uh stuff
be working on uh stuff
with Xander or
well you may first come first serve
I mean there are a few other things we
I mean there are a few other things we
can potentially look at here it's just
can potentially look at here it's just
like okay so in my mind for the release
like okay so in my mind for the release
right the key difficult thing that I
right the key difficult thing that I
actually like want to prioritize because
actually like want to prioritize because
it's the only thing that I don't know
it's the only thing that I don't know
how long it's going to take is
how long it's going to take is
baselines and then they're docks docks
baselines and then they're docks docks
are mostly done I just have to make some
are mostly done I just have to make some
fixes smaller
fixes smaller
fixes um and then there
fixes um and then there
are any sort of like Library
are any sort of like Library
improvements Baseline like model tweaks
improvements Baseline like model tweaks
and things and that's like nice to have
and things and that's like nice to have
it's like on the nice to have
list oh I know what I can do real quick
we need one name
just be
Sandy
e e
okay so this is a very quick to train
okay so this is a very quick to train
thing just that these hypers don't seem
thing just that these hypers don't seem
to perform very well
um this is 32
back very high learning
rate very high learning rate
this one did way better as
well I'm not going to manually tune
these so Connect Four is inconsistent
these so Connect Four is inconsistent
but there are parameters to be found
but there are parameters to be found
it's just need be
adjusted it's actually does that have
adjusted it's actually does that have
RNN on it yes it does
do it make you go
500k it's better
I might have to go help will with this
thing all right so Will's coming
thing all right so Will's coming
by cool
interestingly this makes it totally
interestingly this makes it totally
fail these hypers are definitely
sensitive resource U
D do on Discord work cool
all right I totally missed a message
all right I totally missed a message
from Nathan
hey Will how's it
hey Will how's it
going I can check uh resource Ule and
stuff what are you currently training
stuff what are you currently training
link yeah go ahead I'll look Wan b or
link yeah go ahead I'll look Wan b or
whatever
o
[Music]
[Music]
go I just need experiments on all these
go I just need experiments on all these
mostly really like to know why
mostly really like to know why
this machine is nowhere near as fast as
this machine is nowhere near as fast as
it should be
all doing
all doing
this can I get desktop
this can I get desktop
audio
audio
probably we'll see if this
works
W conferencing will in on stream hello
W conferencing will in on stream hello
look look at
look look at
this I'm interrupting your live stream I
this I'm interrupting your live stream I
wonder if I can hear
wonder if I can hear
you oh I
you oh I
can yeah totally doesn't work [ __ ] I can
can yeah totally doesn't work [ __ ] I can
hear
hear
you it does
you it does
work you know wait I think that there
work you know wait I think that there
was a weird thing with this headset
was a weird thing with this headset
where it needs this extension
where it needs this extension
cable let me try the back audio port
we're on live stream
together that's
together that's
funny which one of these is
[Music]
[Music]
which
which
yes
yes
no all right I'm going to get a better
no all right I'm going to get a better
headset for now I'm move this on to the
headset for now I'm move this on to the
stupid just going to move this on to
stupid just going to move this on to
my how's this I can hear you no I can
my how's this I can hear you no I can
yes yes there we go f well I just didn't
yes yes there we go f well I just didn't
I didn't have audio out ah okay I see
I didn't have audio out ah okay I see
yeah I heard you the whole time oh [ __ ]
yeah I heard you the whole time oh [ __ ]
hopefully this doesn't Echo a
hopefully this doesn't Echo a
ton chat will yell at me promptly and if
ton chat will yell at me promptly and if
not I'll just end stream and we'll just
not I'll just end stream and we'll just
do this private but um yeah new setup
do this private but um yeah new setup
look I'm a I'm a puffer lib I'm a puffer
look I'm a I'm a puffer lib I'm a puffer
lib user now okay I'm I'm not your ideal
lib user now okay I'm I'm not your ideal
puffer lib user but I am puffer lip
puffer lib user but I am puffer lip
user yeah well let's take a look at uh
user yeah well let's take a look at uh
let's take a look at udle and see what's
let's take a look at udle and see what's
going on with you yeah so so let's see I
going on with you yeah so so let's see I
mean my entry point here is not using
mean my entry point here is not using
demo. py which probably is the big
demo. py which probably is the big
problem right um but let me show you so
problem right um but let me show you so
I've been bench Can you see my screen
I've been bench Can you see my screen
I'll Zoom it
I'll Zoom it
in Great okay so I'm benchmarking this
in Great okay so I'm benchmarking this
uh pqn algorithm where I was just
uh pqn algorithm where I was just
playing around with with some changes
playing around with with some changes
here that made it slightly better um and
here that made it slightly better um and
they this is the clean RL version of pqn
they this is the clean RL version of pqn
which is basically like you have a Q
which is basically like you have a Q
Network you do some layer Norm inside of
Network you do some layer Norm inside of
it and then the big upshot is you use Q
it and then the big upshot is you use Q
Lambda for return calculation and you
Lambda for return calculation and you
average across a bunch of environments
average across a bunch of environments
and it's stable is and you don't need a
and it's stable is and you don't need a
replay buffer which is like kind of nice
replay buffer which is like kind of nice
because the Q learning algorithms are
because the Q learning algorithms are
are interesting but that's not really
are interesting but that's not really
relevant the um the relevant piece is
relevant the um the relevant piece is
puffer Liv 1.0 right so um the way I'm
puffer Liv 1.0 right so um the way I'm
creating these M here is with this you
creating these M here is with this you
know puffer lib you know here's my make
know puffer lib you know here's my make
M function M Creator here from class
M function M Creator here from class
puffer li. environments classic control
puffer li. environments classic control
which I don't know if you've seen this
which I don't know if you've seen this
in a while but if I go to classic
in a while but if I go to classic
control uh here's here's this thing and
control uh here's here's this thing and
I have modified your classic control so
I have modified your classic control so
we can just let me just remove fast
we can just let me just remove fast
carpool and Fast Mountain car um but the
carpool and Fast Mountain car um but the
tldr here is that it's just this you
tldr here is that it's just this you
have you had some sort of if statement
have you had some sort of if statement
here about if the name was cpool and uh
here about if the name was cpool and uh
if it was then you used the gymnasium
if it was then you used the gymnasium
card Poole as your M class that was the
card Poole as your M class that was the
big statement there and then after that
big statement there and then after that
you wrapped it in this EP episode stats
you wrapped it in this EP episode stats
thing and uh gymnasium puffer M there
thing and uh gymnasium puffer M there
was some like minor thing here around I
was some like minor thing here around I
can make a PR for it but episode stats
can make a PR for it but episode stats
wasn't actually correctly calculating
wasn't actually correctly calculating
the return and length yeah and then but
the return and length yeah and then but
but no worries no worries about that
but no worries no worries about that
that's not the main thing the main thing
that's not the main thing the main thing
is first of all vector vector M speeds
is first of all vector vector M speeds
[ __ ] up by like orders of magnitude
[ __ ] up by like orders of magnitude
which is really exciting um but I am
which is really exciting um but I am
surprised so I have this fast card pole
surprised so I have this fast card pole
implementation here which is just the
implementation here which is just the
same thing except like a little bit more
same thing except like a little bit more
nump High okay so I have this Carle
nump High okay so I have this Carle
implementation here I am surprised to
implementation here I am surprised to
see and I did this with a G gymnasium
see and I did this with a G gymnasium
gymnasium I say gymnasium because it's
gymnasium I say gymnasium because it's
the German way of saying this is how you
the German way of saying this is how you
spell it but gymnasium yes gymnasium
spell it but gymnasium yes gymnasium
implementation is that um if you go
implementation is that um if you go
let's go to like pqn if I scale the
let's go to like pqn if I scale the
number of Ms here so I use Vector M here
number of Ms here so I use Vector M here
I'm making the M multip I have this make
I'm making the M multip I have this make
M function and the reason why I have
M function and the reason why I have
this make M function as such is that
this make M function as such is that
basically I have to pass in different
basically I have to pass in different
seats to these these Ms but as I scale
seats to these these Ms but as I scale
the number of NS M's here um I
the number of NS M's here um I
get this weird here I'll just show you
get this weird here I'll just show you
so like uh let's just do num M here I
so like uh let's just do num M here I
think that's let me just double check to
think that's let me just double check to
see if that's the
see if that's the
right yeah okay uh let's just try so and
right yeah okay uh let's just try so and
for the context the machine here is like
for the context the machine here is like
a I mean this is old but it's like it
a I mean this is old but it's like it
was the best AMD machine at the time uh
was the best AMD machine at the time uh
so7 2019 so just have an am I just got
so7 2019 so just have an am I just got
an AMD machine today and uh unless
an AMD machine today and uh unless
there's something wrong with the
there's something wrong with the
benchmarks because the GPU also seem
benchmarks because the GPU also seem
slower than it should be uh Intel still
slower than it should be uh Intel still
kicks amd's ass yeah so that's good to
kicks amd's ass yeah so that's good to
know but what's okay so here's I'm at
know but what's okay so here's I'm at
Ute I'm like at you know zero Ute this
Ute I'm like at you know zero Ute this
is like just the system right now
is like just the system right now
hanging out with some Docker container
hanging out with some Docker container
running or something like this right you
running or something like this right you
can see it's pretty low U so let's just
can see it's pretty low U so let's just
run with like 30 HS right and I'm not oh
run with like 30 HS right and I'm not oh
you want me to do 100 let's look at
you want me to do 100 let's look at
32 it will go to 100 right yeah but
32 it will go to 100 right yeah but
that's just that doesn't tell you [ __ ]
that's just that doesn't tell you [ __ ]
it's busy waiting dude okay I thought
it's busy waiting dude okay I thought
you would get a little red little red
you would get a little red little red
indicator so this is fine so basically
indicator so this is fine so basically
like if I were to like scale the number
like if I were to like scale the number
of like M's here to what what's the
of like M's here to what what's the
scale that you typically use just for
scale that you typically use just for
shits and giggles uh it's dependent on
shits and giggles uh it's dependent on
the forward pass batch size that you
the forward pass batch size that you
want so for really simple M you usually
want so for really simple M you usually
and really simple M and really small
and really simple M and really small
models usually you target 4096 for pass
models usually you target 4096 for pass
batch
batch
size all right so let's
size all right so let's
just let's just see here um if this
just let's just see here um if this
makes a meaningful difference I had no
makes a meaningful difference I had no
idea this is where I was I was thinking
idea this is where I was I was thinking
okay like this isn't working and I SC I
okay like this isn't working and I SC I
like plotted out the steps per second
like plotted out the steps per second
obviously there's like a little bit of a
obviously there's like a little bit of a
um you know I'm going back to GPU but I
um you know I'm going back to GPU but I
would have expected something little bit
would have expected something little bit
more substantial here so okay so yeah
more substantial here so okay so yeah
here we're back we've got a ton of you
here we're back we've got a ton of you
here of course it doesn't mean anything
here of course it doesn't mean anything
so that literally that utilization
so that literally that utilization
literally means nothing it will always
literally means nothing it will always
be 100% in puffer because we have busy
be 100% in puffer because we have busy
waiting I see and so is there okay this
waiting I see and so is there okay this
is great
is great
um the busy waiting is essential by the
um the busy waiting is essential by the
way it's like there's not a good way
way it's like there's not a good way
around it in Python I spent a lot of
around it in Python I spent a lot of
time on it uh it actually gives you perf
time on it uh it actually gives you perf
um but it will SP your course I see is
um but it will SP your course I see is
there some spin up time
there some spin up time
here uh I've not seen a single iteration
here uh I've not seen a single iteration
yet on all the course and it shouldn't
yet on all the course and it shouldn't
be like puffer shouldn't be adding
be like puffer shouldn't be adding
overhead there it's just however long it
overhead there it's just however long it
takes to make all these sub
takes to make all these sub
processes I see so so the main thing now
processes I see so so the main thing now
like if I'm let's just pretend like I
like if I'm let's just pretend like I
was being a dumbass which I was um the
was being a dumbass which I was um the
main thing I I need to think about as a
main thing I I need to think about as a
researcher is basically like the optim
researcher is basically like the optim
optim iation of the step right so like
optim iation of the step right so like
the roll out should be as fast as it
the roll out should be as fast as it
possibly can be yes look at my demo
possibly can be yes look at my demo
because there's an extended API you're
because there's an extended API you're
probably using Sync API there's an async
probably using Sync API there's an async
API that enables you to do nend pool
API that enables you to do nend pool
style stuff so you can do like I don't
style stuff so you can do like I don't
know 8192 or even like 10K it doesn't
know 8192 or even like 10K it doesn't
have to be an even multiple uh you can
have to be an even multiple uh you can
have like more M's and then you will
have like more M's and then you will
essentially you can get 0% M time we
essentially you can get 0% M time we
have this nice dashboard here let me
have this nice dashboard here let me
show you let me show you on stream real
show you let me show you on stream real
quick um I've been playing mute toggle
quick um I've been playing mute toggle
because I think my mic is garbage so
because I think my mic is garbage so
here if I do like puffer connect
for and this is just some random ass
for and this is just some random ass
right yeah random setting so here 0%
right yeah random setting so here 0%
time is spent waiting on the environment
time is spent waiting on the environment
and this is slow this will go up to a
and this is slow this will go up to a
million with a better uh
million with a better uh
machine um but this is literally the end
machine um but this is literally the end
is free because it's ASN
is free because it's ASN
so all of the time is being spent on
so all of the time is being spent on
forward path on training and like a
forward path on training and like a
little bit of like additional MK stuff
little bit of like additional MK stuff
for like Cuda transfer and stuff so this
for like Cuda transfer and stuff so this
this is what you want uh and the way
this is what you want uh and the way
that you get this is by having a fast M
that you get this is by having a fast M
and having an async buffer factor of
and having an async buffer factor of
usually around two or three depending
usually around two or three depending
how fast your EMP
how fast your EMP
is that's I see so so this I mean this
is that's I see so so this I mean this
async thing is actually kind of crucial
async thing is actually kind of crucial
here I think in some sense
here I think in some sense
okay yeah that okay so basically use
okay yeah that okay so basically use
demo. py it's the thing that's a little
demo. py it's the thing that's a little
tricky though it's like it's not trivial
tricky though it's like it's not trivial
because uh we do have we have an
because uh we do have we have an
experienced buffer for po that's not
experienced buffer for po that's not
like an off policy thing it's just that
like an off policy thing it's just that
when you're doing async you can get
when you're doing async you can get
samples in a random order so you have to
samples in a random order so you have to
be able to account for um you have to
be able to account for um you have to
basically be able to account for getting
basically be able to account for getting
different length trajectory segments
different length trajectory segments
randomly
randomly
and uh it turns out that that's also
and uh it turns out that that's also
really convenient for handling
really convenient for handling
multi-agent so we have that in place but
multi-agent so we have that in place but
like n logic or I mean RL logic itself
like n logic or I mean RL logic itself
you can just swap stuff around and it's
you can just swap stuff around and it's
clean RL and then you get that nice
clean RL and then you get that nice
little you get that nice little
little you get that nice little
dashboard you get hyper pram integration
dashboard you get hyper pram integration
hyper pram scoop with carbs you get all
hyper pram scoop with carbs you get all
of our stuff and it's only it's like a
of our stuff and it's only it's like a
thousand lines of code total maybe three
thousand lines of code total maybe three
400 lines for po total and then the rest
400 lines for po total and then the rest
just like logging Ule and stuff like
just like logging Ule and stuff like
that
that
yeah I I I genuinely think that you
yeah I I I genuinely think that you
should make uh demo. py like a
should make uh demo. py like a
framework like my my after like I I see
framework like my my after like I I see
the promise of puffer as I start going
the promise of puffer as I start going
through it but it's like almost like if
through it but it's like almost like if
there was just a even if it were in a
there was just a even if it were in a
framework but it were just like insert
framework but it were just like insert
your algorithm here which is probably
your algorithm here which is probably
demod pi and it's just like this is like
demod pi and it's just like this is like
the de facto thing you do the plot you
the de facto thing you do the plot you
put in your paper is like everybody uses
put in your paper is like everybody uses
that one plotting mechanism it's just
that one plotting mechanism it's just
like run your algorithm against demod py
like run your algorithm against demod py
and it generates like this is you know
and it generates like this is you know
the def facto standard comparison it
the def facto standard comparison it
does the carbs thing so you have like
does the carbs thing so you have like
carbs to carbs comparison on you know
carbs to carbs comparison on you know
the PO carbs on this standard set of
the PO carbs on this standard set of
benchmarks plus your algorithm carbs on
benchmarks plus your algorithm carbs on
standard set of benchmarks therefore the
standard set of benchmarks therefore the
comparison is Meaningful that is like if
comparison is Meaningful that is like if
you do that and which you probably have
you do that and which you probably have
if you but you know if that's if that's
if you but you know if that's if that's
the standard in deit up high then like
the standard in deit up high then like
this is very very very good yeah I mean
this is very very very good yeah I mean
it's the it's basically you can do that
it's the it's basically you can do that
now it's just instead of having to read
now it's just instead of having to read
my API on like how you add your code in
my API on like how you add your code in
and like maybe you want to modify
and like maybe you want to modify
something that I didn't think about it's
something that I didn't think about it's
clean RL style so like you just put your
clean RL style so like you just put your
logic where the PO logic is now and
logic where the PO logic is now and
anything else you need to screw with you
anything else you need to screw with you
screw with so I like the thing that I
screw with so I like the thing that I
think is going to likely be more useful
think is going to likely be more useful
is just as we play with stuff and figure
is just as we play with stuff and figure
out what's important first of all this
out what's important first of all this
PO implementation is going to get way
PO implementation is going to get way
better because the next phase of puffer
better because the next phase of puffer
is a bunch of science side stuff where
is a bunch of science side stuff where
we do a on what actually matters at
we do a on what actually matters at
massive scale so that's going to get
massive scale so that's going to get
better and then hopefully the file is
better and then hopefully the file is
going to slowly get shorter over time as
going to slowly get shorter over time as
well so you know maybe we get that down
well so you know maybe we get that down
to like 7 800 lines with all the logging
to like 7 800 lines with all the logging
and stuff and then you now have like a
and stuff and then you now have like a
very nice clean easy thing that you can
very nice clean easy thing that you can
swap your logic into uh very nicely yeah
swap your logic into uh very nicely yeah
and then the only way that P I mean
and then the only way that P I mean
perer is getting like 4X bigger in the
perer is getting like 4X bigger in the
next update but it's all just C
next update but it's all just C
environment code pretty much all the
environment code pretty much all the
course the same
course the same
yeah I mean the yeah the the the
yeah I mean the yeah the the the
environment stuff like from what I could
environment stuff like from what I could
tell it's like obviously 1.0 just you
tell it's like obviously 1.0 just you
had to support so many environments but
had to support so many environments but
be great to have like you know a lot
be great to have like you know a lot
faster M for like the classic control
faster M for like the classic control
stuff and oh we have here I'll show you
stuff and oh we have here I'll show you
so this is what we're going to do for
so this is what we're going to do for
next update um these are all like
next update um these are all like
million step per second per core
million step per second per core
environments I haven't fixed this
environments I haven't fixed this
website fully yet but this is multi
website fully yet but this is multi
agent snake running locally with
agent snake running locally with
policies we've got like
policies we've got like
pong know there's some Classics here but
pong know there's some Classics here but
they're way
they're way
faster uh there's like stuff like
faster uh there's like stuff like
Connect 4 and you can even do more fancy
Connect 4 and you can even do more fancy
stuff right like the Moa is obviously
stuff right like the Moa is obviously
way
way
fancier there's this tactics M that was
fancier there's this tactics M that was
contributed to us it's going to take
contributed to us it's going to take
some time to get policies for there's an
some time to get policies for there's an
implementation of go by Spencer it's
implementation of go by Spencer it's
pretty cool we can do this for whatever
pretty cool we can do this for whatever
board size uh and then this TCG project
board size uh and then this TCG project
need some love but this is like very
need some love but this is like very
very
very
basic Magic the Gathering s
basic Magic the Gathering s
style uh thing right so this needs work
style uh thing right so this needs work
but yeah we're growing out this
but yeah we're growing out this
collection the kind of the goal is we're
collection the kind of the goal is we're
just going to replace all the M's with
just going to replace all the M's with
stuff that runs a million stuff per a
stuff that runs a million stuff per a
second um because it's it's honestly
second um because it's it's honestly
pathetic like the problem wasn't that
pathetic like the problem wasn't that
people needed Jack the problem was
people needed Jack the problem was
people needed to stop writing God awful
people needed to stop writing God awful
python code that's literally it y i AB
python code that's literally it y i AB
absolutely agree with that I absolutely
absolutely agree with that I absolutely
agree with that okay well then we'll
agree with that okay well then we'll
just uh I'll see what I can do to move
just uh I'll see what I can do to move
over most of this pqn code to the sort
over most of this pqn code to the sort
of demo depy regime because it still
of demo depy regime because it still
seems like you know I mean like here's
seems like you know I mean like here's
like 300 M right my steps per seconds is
like 300 M right my steps per seconds is
like 17 1733 my steps per second peaked
like 17 1733 my steps per second peaked
on my system with this implementation I
on my system with this implementation I
sent you at I think uh 32 amps which is
sent you at I think uh 32 amps which is
the number of cores I had which was
the number of cores I had which was
really with
really with
vectorization with the dot Vector not
vectorization with the dot Vector not
serial um is that with wait with my
serial um is that with wait with my
vectorization it Peaks at 32 Ms yep so
vectorization it Peaks at 32 Ms yep so
like here here's here's what it is what
like here here's here's what it is what
is it 300 Ms and then just and maybe
is it 300 Ms and then just and maybe
this is you know let's go back to 32 how
this is you know let's go back to 32 how
did you set it did you just set M or did
did you set it did you just set M or did
you did you like screw with the work so
you did you like screw with the work so
this is it right here I do this make
this is it right here I do this make
thing and I have a different make
thing and I have a different make
function for each of the MS well I did
function for each of the MS well I did
before when I was doing CD
before when I was doing CD
um this puffer li. vector.
make and maybe that's the wrong way to
make and maybe that's the wrong way to
do
do
it that is a valid way to do it you can
it that is a valid way to do it you can
pass like that so I get like 8,000 steps
pass like that so I get like 8,000 steps
per second here right and um if I were
per second here right and um if I were
to sort of time I could do relative
to sort of time I could do relative
timings here so I could just add just
timings here so I could just add just
tell it to it puffer V should let you
tell it to it puffer V should let you
scale the more M's than gy M like gyve
scale the more M's than gy M like gyve
gyve just makes a process for every it's
gyve just makes a process for every it's
really dumb right right and I I I I
really dumb right right and I I I I
agree with that it's just interesting to
agree with that it's just interesting to
me that once I go above 32 my steps per
me that once I go above 32 my steps per
second is decreases and that's probably
second is decreases and that's probably
like something in this code that's async
like something in this code that's async
potentially it's not necessarily like it
potentially it's not necessarily like it
could just be
could just be
that I mean if the Nets are small enough
that I mean if the Nets are small enough
I mean they're super small right I mean
I mean they're super small right I mean
I I could even I could even do this all
I I could even I could even do this all
CPU if if we wanted to just see what
CPU if if we wanted to just see what
that looked like right um but even yeah
that looked like right um but even yeah
64m I start getting
64m I start getting
degradation which is just weird to me I
degradation which is just weird to me I
was like that's very coincidental like
was like that's very coincidental like
64m now my steps per second is down to
64m now my steps per second is down to
1,000 well there's an autotune tool you
1,000 well there's an autotune tool you
should try you should time separately
should try you should time separately
because we have there's an autotuner uh
because we have there's an autotuner uh
with Vector that you can use that will
with Vector that you can use that will
get you just the M time so what is the
get you just the M time so what is the
maximum M through put paralized on your
maximum M through put paralized on your
machine and it will sweep like it'll try
machine and it will sweep like it'll try
a whole bunch of common configs based on
a whole bunch of common configs based on
your 4 count and stuff um for like a
your 4 count and stuff um for like a
specific Target batch size so like let's
specific Target batch size so like let's
say that you want a batch size of 64 you
say that you want a batch size of 64 you
know that's what's good for your GPU
know that's what's good for your GPU
it'll try like tons of different ways to
it'll try like tons of different ways to
get you that and that's usually pretty
get you that and that's usually pretty
good okay great yeah I'll definitely
good okay great yeah I'll definitely
check that out you also like stuff like
check that out you also like stuff like
um the way that I don't know how this is
um the way that I don't know how this is
doing if it's doing like torch dot how's
doing if it's doing like torch dot how's
it putting those tensors in memory if
it putting those tensors in memory if
it's not from array it's probably going
it's not from array it's probably going
to drop a lot of time there's stuff like
to drop a lot of time there's stuff like
that you got to watch for that we've
that you got to watch for that we've
done in
done in
demo okay I see yeah I'll I'll look
demo okay I see yeah I'll I'll look
around to see what the actual bottleneck
around to see what the actual bottleneck
is here but just wanted to let you know
is here but just wanted to let you know
that there's like this interesting thing
that there's like this interesting thing
was going on and probably uh I think as
was going on and probably uh I think as
well I think where like puffer Li would
well I think where like puffer Li would
shine is if it indeed had this
shine is if it indeed had this
like it it was too like it was it was it
like it it was too like it was it was it
was there was like a framework on top of
was there was like a framework on top of
that was such that basically you could
that was such that basically you could
Implement these algorithms very simply
Implement these algorithms very simply
that where you would never run into like
that where you would never run into like
oh I need to do the specific thing to
oh I need to do the specific thing to
anticipate the performance gains on like
anticipate the performance gains on like
sort of M to algorithm interaction right
sort of M to algorithm interaction right
like from away like things like this
like from away like things like this
where just like right because it's like
where just like right because it's like
there's a lot there are a lot of
there's a lot there are a lot of
variables that can potentially interact
variables that can potentially interact
here yeah um so for instance like
here yeah um so for instance like
there's also just M speed is not also
there's also just M speed is not also
going to necessarily give you perf cuz
going to necessarily give you perf cuz
like let's say you go to 4096 batch we
like let's say you go to 4096 batch we
end up having to go to uh train batch
end up having to go to uh train batch
size of like Millions because you need
size of like Millions because you need
to have sufficient Horizon to compute J
to have sufficient Horizon to compute J
so yeah sometimes we get like really
so yeah sometimes we get like really
good SPS but then the sample efficiency
good SPS but then the sample efficiency
can suffer massively which we don't care
can suffer massively which we don't care
if our Nets are small but we do a our ns
if our Nets are small but we do a our ns
are large so there's like there are a
are large so there's like there are a
lot of balancing acts here that yeah we
lot of balancing acts here that yeah we
can eventually have an auto Auto thing
can eventually have an auto Auto thing
for that but that's going to require
for that but that's going to require
like heavy heavy research on scaling
like heavy heavy research on scaling
laws interactions correlations between
laws interactions correlations between
variables that's what we're doing after
variables that's what we're doing after
we ship all the new M's because
we ship all the new M's because
essentially these M are so fast that we
essentially these M are so fast that we
have eight or nine gpus but we may as
have eight or nine gpus but we may as
well have eight or ,000 because the
well have eight or ,000 because the
experiments Run a thousand times faster
experiments Run a thousand times faster
than anyone else's like they run a
than anyone else's like they run a
million steps a second on one GPU yeah y
million steps a second on one GPU yeah y
I see
I see
at at the moment and it's just I've been
at at the moment and it's just I've been
stuck finishing finishing all this a lot
stuck finishing finishing all this a lot
of yeah know and I think that's going to
of yeah know and I think that's going to
be huge like like even if if puffer lib
be huge like like even if if puffer lib
actually contained like just like a good
actually contained like just like a good
meaningful set of Ms too like just from
meaningful set of Ms too like just from
from a research perspective where I
from a research perspective where I
don't have to think about okay like now
don't have to think about okay like now
I have to mostly rewrite all of my
I have to mostly rewrite all of my
dependency management so that I can test
dependency management so that I can test
on Atari blah BL blah you know what I
on Atari blah BL blah you know what I
mean it's like contain like the de facto
mean it's like contain like the de facto
set of M's for for the RL literature
set of M's for for the RL literature
then everything you know yeah then it's
then everything you know yeah then it's
just like one Library one problem right
just like one Library one problem right
and like nobody else is ever going to do
and like nobody else is ever going to do
this because nobody's crazy enough to
this because nobody's crazy enough to
sit down and write 15,000 lines of sea
sit down and write 15,000 lines of sea
um so yeah I this was this was the
um so yeah I this was this was the
initial seat of this this is we're also
initial seat of this this is we're also
going to start doing some of the science
going to start doing some of the science
ourselves now but I figured that this is
ourselves now but I figured that this is
this is a good test set for research and
this is a good test set for research and
for industry frankly because industry
for industry frankly because industry
they sometimes they do wank uh they do
they sometimes they do wank uh they do
Jank stuff and it's like yeah it would
Jank stuff and it's like yeah it would
be really nice if you could test your
be really nice if you could test your
Jank thing that you're trying to do at a
Jank thing that you're trying to do at a
million steps per second instead of like
million steps per second instead of like
1500 yeah
1500 yeah
totally yeah we'll find out let me let
totally yeah we'll find out let me let
me just do one last thing before we jump
me just do one last thing before we jump
off I want to see if uh if I
off I want to see if uh if I
just do the the m i just Bo the M with
just do the the m i just Bo the M with
random actions how fast I get yeah so
random actions how fast I get yeah so
okay here's the maybe this is the
okay here's the maybe this is the
problem um if I just do random actions
problem um if I just do random actions
from this m created in this way no net
from this m created in this way no net
no torch
no torch
uh I get 1,00 steps per second on 64 HS
uh I get 1,00 steps per second on 64 HS
so really that's interesting right yeah
so really that's interesting right yeah
with your V so I think with yeah your
with your V so I think with yeah your
here you can see puffer li. vector. make
here you can see puffer li. vector. make
okay backend puffer puffer Li Vector
okay backend puffer puffer Li Vector
multiprocessing I don't know if that's
multiprocessing I don't know if that's
the right one but that's the one we did
the right one but that's the one we did
okay and this is all [ __ ] AR num m
okay and this is all [ __ ] AR num m
is it like actually doing stuff
is it like actually doing stuff
correctly um let's see you want me to go
correctly um let's see you want me to go
look at the function here go look at it
look at the function here go look at it
yeah yeah okay
yeah yeah okay
Vector sorry that's the wrong one not
Vector sorry that's the wrong one not
version Vector all right uh
version Vector all right uh
make yeah so num Ms coming in yep it's
make yeah so num Ms coming in yep it's
validated four I in Num
validated four I in Num
Ms okay M
Ms okay M
creators back in a Serial okay then it
creators back in a Serial okay then it
uses the back end with numm so like yeah
uses the back end with numm so like yeah
it's getting it's getting num Ms
it's getting it's getting num Ms
correctly I believe if I go to the
correctly I believe if I go to the
vector back or the
vector back or the
multiprocessing um
multiprocessing um
backend if I actually look here yeah it
backend if I actually look here yeah it
looks like these M creators are coming
looks like these M creators are coming
in correctly how many so num
in correctly how many so num
workers oh it does do num workers equals
workers oh it does do num workers equals
numm which is interesting if it's not
numm which is interesting if it's not
set oh [ __ ] yeah that fix that
set oh [ __ ] yeah that fix that
I just set it to 16 for shits and
I just set it to 16 for shits and
giggles let's see if that well you can
giggles let's see if that well you can
fix it in your code but sure yeah yeah I
fix it in your code but sure yeah yeah I
know well actually can I so if I yeah
know well actually can I so if I yeah
you just set num num it'll take numb
you just set num num it'll take numb
workers as a bark I see this make
workers as a bark I see this make
function is a little weird well it's
function is a little weird well it's
because they different back ends that
because they different back ends that
take different ARS I see okay I didn't
take different ARS I see okay I didn't
see I need to do better checking on
see I need to do better checking on
stuff like that yeah yeah yeah I think
stuff like that yeah yeah yeah I think
this this is probably maybe the one
this this is probably maybe the one
piece oh [ __ ] dude that was the bug dude
piece oh [ __ ] dude that was the bug dude
what do you get now oh it's so [ __ ]
what do you get now oh it's so [ __ ]
fast 50,000 dude oh yeah's really really
fast 50,000 dude oh yeah's really really
fast there are a couple places where
fast there are a couple places where
they're like well finally I get to see
they're like well finally I get to see
it dude I was like I was like oh you
it dude I was like I was like oh you
know I mean I'm sure 32 might even be F
know I mean I'm sure 32 might even be F
let's see it depend two physical cores
let's see it depend two physical cores
or not it yeah probably not let's see it
or not it yeah probably not let's see it
might actually be
might actually be
16 that's crazy yeah okay it's oh dude
16 that's crazy yeah okay it's oh dude
as soon as you go above your actual core
as soon as you go above your actual core
count it shits itself yeah you don't
count it shits itself yeah you don't
because of the busy waiting it's the
because of the busy waiting it's the
architecture of our multiprocessing it's
architecture of our multiprocessing it's
really not designed to go 35 why do I
really not designed to go 35 why do I
have 35 virtual cores that's not even
have 35 virtual cores that's not even
divisible by two oh I have 36 okay great
divisible by two oh I have 36 okay great
so now now crank up the number of
so now now crank up the number of
environments now that you have work set
environments now that you have work set
correctly uh let's try uh 6,000 or let
correctly uh let's try uh 6,000 or let
no let's just let's do 2,000 just for
no let's just let's do 2,000 just for
Giggles I don't know what that's going
Giggles I don't know what that's going
to got to be divisible or it'll complain
to got to be divisible or it'll complain
I see
I see
okay well 1024 oh Jesus Christ that is
okay well 1024 oh Jesus Christ that is
actually one of the places where we did
actually one of the places where we did
put errors so that you don't shoot
put errors so that you don't shoot
yourself in the foot
nice that's probably G to take a second
nice that's probably G to take a second
to spin all those
to spin all those
up eventually the stupid back is just
up eventually the stupid back is just
getting ported to see and we'll sand
getting ported to see and we'll sand
some rough edges off that way yeah yeah
some rough edges off that way yeah yeah
yeah ah okay oh num Ms needs to be
yeah ah okay oh num Ms needs to be
divisible all right I see what you're
divisible all right I see what you're
saying that makes
saying that makes
sense I have 18 physical cores
sense I have 18 physical cores
for whatever reason whatever you're
for whatever reason whatever you're
getting you basically at least double it
getting you basically at least double it
for
for
asyn dude you're going to watch me have
asyn dude you're going to watch me have
a real life reaction to the speed up
a real life reaction to the speed up
here this is
here this is
exciting I'll be I I actually think the
exciting I'll be I I actually think the
spin up time might be faster than
spin up time might be faster than
training this algorithm like carpo or
training this algorithm like carpo or
whatever
whatever
F Well the spin up time puffer doesn't
F Well the spin up time puffer doesn't
add spin up time it's just however long
add spin up time it's just however long
no it's yeah it's my M spinning up that
no it's yeah it's my M spinning up that
CU like we have we have M that you can
CU like we have we have M that you can
spin up like thousands of copies
spin up like thousands of copies
instantly so the V just starts up
instantly so the V just starts up
immediately it's like faster than
immediately it's like faster than
importing torch yeah yeah yeah I can't
importing torch yeah yeah yeah I can't
wait to do that so um what's your
wait to do that so um what's your
opinion on how qual
opinion on how qual
like how uh how meaningful are the ocean
like how uh how meaningful are the ocean
amps like maybe this is your chance to
amps like maybe this is your chance to
pitch that because I didn't really get
pitch that because I didn't really get
to hear that before like they VAR in
to hear that before like they VAR in
difficulty right you have stuff that is
difficulty right you have stuff that is
like um Atari M from State on the
like um Atari M from State on the
simpler side and then you have stuff
simpler side and then you have stuff
like the Moa and like this tactical end
like the Moa and like this tactical end
and like the secret one that are way
and like the secret one that are way
more complex and then there's like
more complex and then there's like
there's stuff like Connect 4 in there
there's stuff like Connect 4 in there
there's stuff like run and go on smaller
there's stuff like run and go on smaller
boards or medium boards so the goal is
boards or medium boards so the goal is
it's just a bunch of different types of
it's just a bunch of different types of
M's with a pretty decent range of
M's with a pretty decent range of
difficulties and like we're really not
difficulties and like we're really not
limited in any way in terms of what we
limited in any way in terms of what we
can put in Ocean cuz we're not writing
can put in Ocean cuz we're not writing
Jacks we're just writing arbitrary code
Jacks we're just writing arbitrary code
so literally the only limitation is
so literally the only limitation is
number of contributors willing to WR M's
number of contributors willing to WR M's
and uh if you open up any of this C code
and uh if you open up any of this C code
it's literally like a first year
it's literally like a first year
undergrad taking a systems course can
undergrad taking a systems course can
already start writing this like these
already start writing this like these
M's yeah um so it's really just that
M's yeah um so it's really just that
that bottom NE so at this point we have
that bottom NE so at this point we have
about 10 M's 10 or 12 M's I think in
about 10 M's 10 or 12 M's I think in
development it's around 15,000 lines of
development it's around 15,000 lines of
code about half of that is my code half
code about half of that is my code half
of it is uh contributor
of it is uh contributor
code very good yeah okay we we'll be
code very good yeah okay we we'll be
we'll be testing on that that's [ __ ]
we'll be testing on that that's [ __ ]
insane dude 100 th steps per second I
insane dude 100 th steps per second I
know that's not a lot relative to you
know that's not a lot relative to you
this is shitty py that's slow by our
this is shitty py that's slow by our
standards what m is this H this is just
standards what m is this H this is just
a uh carple right just shits and gigles
a uh carple right just shits and gigles
um we have cart pole running at millions
um we have cart pole running at millions
in our paper benchmarks that is actually
in our paper benchmarks that is actually
quite interesting then I wonder why that
quite interesting then I wonder why that
why that's the case so let me Che I'll
come you
know on
know on
2,000 I mean this is with 1,24 M I
2,000 I mean this is with 1,24 M I
probably could go higher right um if I
probably could go higher right um if I
were to let's see let me check this out
were to let's see let me check this out
let's see
let's see
um and this is just like the M itself
um and this is just like the M itself
which your paper isn't actually PO on
which your paper isn't actually PO on
this it's just the M running right so
this it's just the M running right so
yeah so M uh as of when this paper was
yeah so M uh as of when this paper was
published JY and sv3 will cap around
published JY and sv3 will cap around
100,000 steps per second if you get them
100,000 steps per second if you get them
correct um puffer lib just on its own
correct um puffer lib just on its own
will go to 460k on cartpole
will go to 460k on cartpole
um and it will go up to three million
um and it will go up to three million
with a nicely tuned async so so I have
with a nicely tuned async so so I have
more [ __ ] to do here to get this
more [ __ ] to do here to get this
[ __ ] well as magic like async is just
[ __ ] well as magic like async is just
kind of magic yeah especially for the
kind of magic yeah especially for the
fast Ms it's just like they're so fast
fast Ms it's just like they're so fast
there's just like a little bit of silly
there's just like a little bit of silly
overhead here and there and as soon as
overhead here and there and as soon as
you turn async on it's just like M are
you turn async on it's just like M are
ready immediately just drive time down
ready immediately just drive time down
to
to
zero yeah yeah I'll I'll play around
zero yeah yeah I'll I'll play around
with this a little bit more I'm sure
with this a little bit more I'm sure
there's like some other optimization I'm
there's like some other optimization I'm
missing here and it's actually kind of
missing here and it's actually kind of
funny that since this paper like we now
funny that since this paper like we now
have I mean the V now scales to tens of
have I mean the V now scales to tens of
millions of steps per second if you do
millions of steps per second if you do
it
it
right see this is this is what I want to
right see this is this is what I want to
be easy for your users like I really
be easy for your users like I really
think you would get every RL
think you would get every RL
researcher on board which you will if it
researcher on board which you will if it
were that easy if I just like the moment
were that easy if I just like the moment
I spin up without demo. like if I if I
I spin up without demo. like if I if I
read the docs and I'm just trying to
read the docs and I'm just trying to
implement it like use it on my own if
implement it like use it on my own if
we're that easy to uh to get up to these
we're that easy to uh to get up to these
numbers like there's so many little
numbers like there's so many little
things in implement the like people
things in implement the like people
working on llms they have like the giant
working on llms they have like the giant
code bases that they're used to and like
code bases that they're used to and like
also they don't have to worry about a
also they don't have to worry about a
ton of these different classes of
ton of these different classes of
optimizations like when you really want
optimizations like when you really want
to turn through a million OBS per second
to turn through a million OBS per second
there are a lot lot of things that you
there are a lot lot of things that you
have to care about um that if I just say
have to care about um that if I just say
yeah go write your own code like
yeah go write your own code like
researchers don't know how to engineer
researchers don't know how to engineer
anything they're going to drop 90% of
anything they're going to drop 90% of
the perf so like it's almost
the perf so like it's almost
fundamentally impossible to get people
fundamentally impossible to get people
to not drop your perf unless you just
to not drop your perf unless you just
give them St I mean we're going to get
give them St I mean we're going to get
closer to that for sure
closer to that for sure
um but yeah for now the for now the uh
um but yeah for now the for now the uh
the way we get around this right is I
the way we get around this right is I
just do really good support on Discord
just do really good support on Discord
or stream it's really easy to get help
or stream it's really easy to get help
help I do free support you're doing it
help I do free support you're doing it
on stream right now for me this is great
on stream right now for me this is great
yeah I do free support for academic Labs
yeah I do free support for academic Labs
as well and then uh companies can pay
as well and then uh companies can pay
for PRI support packages yeah well
for PRI support packages yeah well
that's a you know that's great but if
that's a you know that's great but if
you do like I I guarantee you if you
you do like I I guarantee you if you
make it like dead [ __ ] simple after
make it like dead [ __ ] simple after
you do all the science it's gonna it's
you do all the science it's gonna it's
gonna pay off because this is insane
gonna pay off because this is insane
science right is the hard we've seen
science right is the hard we've seen
like crazy cursed things in all the
like crazy cursed things in all the
experiments like basically at this point
experiments like basically at this point
it's nobody understands it's pretty
it's nobody understands it's pretty
clear nobody understands how the hell RL
clear nobody understands how the hell RL
Works um with like the the hypers that
Works um with like the the hypers that
end up doing well and such it's it's
end up doing well and such it's it's
really weird um yeah it's like it's like
really weird um yeah it's like it's like
if you had if you could pull out the the
if you had if you could pull out the the
Deep learning part because I think
Deep learning part because I think
that's where a lot of confounding is
that's where a lot of confounding is
happening where like the there's like a
happening where like the there's like a
set of skills you acquire like getting
set of skills you acquire like getting
really good at optimizing deep neural
really good at optimizing deep neural
networks which are like almost
networks which are like almost
independent of the algorithm
independent of the algorithm
considerations of of RL and I think if
considerations of of RL and I think if
we were like able to Benchmark these
we were like able to Benchmark these
algorithms like when you pull out the
algorithms like when you pull out the
Deep part in the Deep RL um I think we
Deep part in the Deep RL um I think we
might see a little bit more clarity as
might see a little bit more clarity as
to like what configurations actually
to like what configurations actually
work so that's like you know you have
work so that's like you know you have
meaningful enough features right from
meaningful enough features right from
the environment or something like this
the environment or something like this
fixed features where you're just not
fixed features where you're just not
optimizing over this this really really
optimizing over this this really really
hard parameter space still but the thing
hard parameter space still but the thing
is it's like it's still I mean we have
is it's like it's still I mean we have
stuff where like the the latest thing as
stuff where like the the latest thing as
of today is that uh hyper pram s loves
of today is that uh hyper pram s loves
setting the value function coefficient
setting the value function coefficient
to almost zero so it just likes not
to almost zero so it just likes not
training the value function at all and
training the value function at all and
that somehow makes it do better yeah
that somehow makes it do better yeah
shit's
shit's
weird
weird
yeah
yeah
yeah well hopefully figur it out this
yeah well hopefully figur it out this
exciting oh we will it just it takes
exciting oh we will it just it takes
some time so I mean this next update
some time so I mean this next update
we're going to release a ton of these M
we're going to release a ton of these M
you're going to have this nice test we
you're going to have this nice test we
uh you can do RL at a million steps per
uh you can do RL at a million steps per
second and then we're not just going to
second and then we're not just going to
wait for other people to do that right
wait for other people to do that right
we're immediately going to start doing
we're immediately going to start doing
that ourselves um yeah this is no longer
that ourselves um yeah this is no longer
just a library and toolkit anymore right
just a library and toolkit anymore right
this is like we are fixing RL like we're
this is like we are fixing RL like we're
providing our tools to other researchers
providing our tools to other researchers
to help fix RL as well
to help fix RL as well
but even if they don't we're going to do
but even if they don't we're going to do
it like we're fixing RL now that's the
it like we're fixing RL now that's the
deal
deal
MH it's
MH it's
exciting very exciting okay well I'll
exciting very exciting okay well I'll
I'll play around with uh this a little
I'll play around with uh this a little
bit more but that you know he already
bit more but that you know he already
got me up to some I mean I'm at a 100,00
got me up to some I mean I'm at a 100,00
if I can get to a million I'll be happy
if I can get to a million I'll be happy
boy all right I'll play around with it
boy all right I'll play around with it
more but a million um you can look at
more but a million um you can look at
some of the Nets I have in Dev like
some of the Nets I have in Dev like
they're very small they're like 150ish k
they're very small they're like 150ish k
I'm not even using dude I'm doing random
I'm not even using dude I'm doing random
actions so this is just you can
actions so this is just you can
definitely do it then um so like decent
definitely do it then um so like decent
little Nets that work I've gotten uh
little Nets that work I've gotten uh
this the thing that I've gotten to a
this the thing that I've gotten to a
million that's probably the most
million that's probably the most
complicated is like you can do con con I
complicated is like you can do con con I
think one fully connected and then like
think one fully connected and then like
an lstm like all 12 Hidden dim will get
an lstm like all 12 Hidden dim will get
a million um if you use sufficiently
a million um if you use sufficiently
large bat size we've gotten that with
large bat size we've gotten that with
snake and breakout and I think pong a
snake and breakout and I think pong a
few other things as well that's one
few other things as well that's one
update per sample uh as well since the
update per sample uh as well since the
data is free you may as well get fresh
data is free you may as well get fresh
data um yeah so you have to set some
data um yeah so you have to set some
things to get that for sure and by the
things to get that for sure and by the
way I think that we're only running at
way I think that we're only running at
like half of our theoretical capacity as
like half of our theoretical capacity as
well because there's just so much
well because there's just so much
overhead from Cuda launch and like torch
overhead from Cuda launch and like torch
compiles really obnoxious so we don't
compiles really obnoxious so we don't
use it most of the time um so it can
use it most of the time um so it can
probably be 2 million just straight up
probably be 2 million just straight up
yeah very cool I mean I'm surprised that
yeah very cool I mean I'm surprised that
I'm not getting a million right now but
I'm not getting a million right now but
I will I know
I will I know
it somehow um have you just written like
it somehow um have you just written like
a standalone timing Loop for cart pole
a standalone timing Loop for cart pole
yeah yeah I'll look uh I'll look into
yeah yeah I'll look uh I'll look into
this let me
this let me
see it gets to it got up to 460k is what
see it gets to it got up to 460k is what
we had on our like really good ships um
we had on our like really good ships um
with right yeah this might be one of
with right yeah this might be one of
those situations where this is like how
those situations where this is like how
old is this [ __ ] computer you know
old is this [ __ ] computer you know
yeah I wouldn't be surprised that
yeah I wouldn't be surprised that
there's like a 3X difference or whatever
there's like a 3X difference or whatever
so on my laptop uh my laptop got cart
so on my laptop uh my laptop got cart
pull up to 110k without async and then
pull up to 110k without async and then
200k with async okay that's [ __ ]
200k with async okay that's [ __ ]
that you saying my laptop is your
that you saying my laptop is your
laptop's as fast as this [ __ ]
laptop's as fast as this [ __ ]
computer I guess I guess
computer I guess I guess
laptop yeah I guess so but it's got 30
laptop yeah I guess so but it's got 30
[ __ ] it's got what 16 18 cores it's
[ __ ] it's got what 16 18 cores it's
got 18 cores is it a server is it like a
got 18 cores is it a server is it like a
Zeon is it like a server processor no no
Zeon is it like a server processor no no
it's one of those thread rippers I think
it's one of those thread rippers I think
back in the day that should be okay I
back in the day that should be okay I
don't know I'll send you this this small
don't know I'll send you this this small
Loop and you can you can see what I'm
Loop and you can you can see what I'm
doing wrong but this is more than enough
doing wrong but this is more than enough
for today now now that I know the secret
for today now now that I know the secret
of uh numb
of uh numb
workers yeah I really should check for
workers yeah I really should check for
that one or at least like set it to your
that one or at least like set it to your
core count or something I was trying to
core count or something I was trying to
figure out if I wanted to do that but
figure out if I wanted to do that but
it's kind of tricky cuz like you
it's kind of tricky cuz like you
actually have to sort of do some Auto
actually have to sort of do some Auto
math and it's really hard to always get
math and it's really hard to always get
it right um maybe I should just force
it right um maybe I should just force
you to set num workers manually if
you to set num workers manually if
you're going to use multiprocessing
you're going to use multiprocessing
maybe that would you absolutely should
maybe that would you absolutely should
and then you should give a warning if
and then you should give a warning if
it's more than the core count divided by
it's more than the core count divided by
two I probably will just do that that's
two I probably will just do that that's
that's because that would I mean I I'm
that's because that would I mean I I'm
sure now that this will train in like
sure now that this will train in like
one
one
second I'm sure now I you know carple
second I'm sure now I you know carple
could be trained very very [ __ ]
could be trained very very [ __ ]
quickly with this it's really fun to see
quickly with this it's really fun to see
um like three billion step per hour
um like three billion step per hour
training cuz that's a thing you can do
training cuz that's a thing you can do
yeah well cool dude this is exciting
yeah well cool dude this is exciting
thanks for taking the time to chat with
thanks for taking the time to chat with
me sure thing good to see you doing some
me sure thing good to see you doing some
again well you know I was getting a
again well you know I was getting a
little fed up seeing some of these
little fed up seeing some of these
papers so I'm it just like I get angry
papers so I'm it just like I get angry
and I'm like all right you want to know
and I'm like all right you want to know
the secret is I don't actually read any
the secret is I don't actually read any
RL papers anymore man I just assume
RL papers anymore man I just assume
[ __ ] I assume that they're all long
[ __ ] I assume that they're all long
until proven otherwise after and like
until proven otherwise after and like
yeah I just if you literally you need to
yeah I just if you literally you need to
do this like just make a [ __ ] make a
do this like just make a [ __ ] make a
script make and maybe it's dem5 but
script make and maybe it's dem5 but
literally just make a script and say
literally just make a script and say
like eval your algorithm in the script
like eval your algorithm in the script
and that's like the standard if you do
and that's like the standard if you do
that and just let other people copy
that and just let other people copy
paste it it might be demo I'm totally
paste it it might be demo I'm totally
cool if it is just tell me right now but
cool if it is just tell me right now but
if if that's the script and it has like
if if that's the script and it has like
five okay that that plus the the cleaner
five okay that that plus the the cleaner
all stuff and uh the of the set of like
all stuff and uh the of the set of like
five M you need to to demo on yeah no we
five M you need to to demo on yeah no we
have that as well like we have we have
have that as well like we have we have
run scripts for that stuff uh it needs
run scripts for that stuff uh it needs
to be a little simpler like it's
to be a little simpler like it's
annoying because we also have carbs
annoying because we also have carbs
integration and carbs is like a pain in
integration and carbs is like a pain in
the ass it's really good but it's a pain
the ass it's really good but it's a pain
in the ass so that'll get better that'll
in the ass so that'll get better that'll
be part of science side like it just it
be part of science side like it just it
takes some time man there's a lot a lot
takes some time man there's a lot a lot
of work behind this no but let me know
of work behind this no but let me know
when that happens because I think
when that happens because I think
there's like it's a I would love to just
there's like it's a I would love to just
like use that and then then finally
like use that and then then finally
iterate because like this is my problem
iterate because like this is my problem
like I don't want to do this stuff
like I don't want to do this stuff
because it's all it's not rigorous like
because it's all it's not rigorous like
literally all you do is you just if you
literally all you do is you just if you
want to do different algorithms you just
want to do different algorithms you just
clean puff RL is clean RL PP lstm plus
clean puff RL is clean RL PP lstm plus
our souped up stuff you just swap your
our souped up stuff you just swap your
algo logic in there man and that
algo logic in there man and that
includes a runner against all the
includes a runner against all the
environments with all the CLI args and
environments with all the CLI args and
like tons of config any files that's all
like tons of config any files that's all
in De is this on is this on oh it's on
in De is this on is this on oh it's on
dev okay it's clean paparo
dev okay it's clean paparo
it is in main it's just the configs are
it is in main it's just the configs are
in yamal that are a little Messier and
in yamal that are a little Messier and
like stuff like that um the demo file
like stuff like that um the demo file
uses clean puff RL by the way okay so
uses clean puff RL by the way okay so
that is there it's just it's a little
that is there it's just it's a little
harder than it should be it's getting
harder than it should be it's getting
easier every update uh yeah and it's the
easier every update uh yeah and it's the
the sad thing about this is when we do
the sad thing about this is when we do
the science side stuff we're actually
the science side stuff we're actually
not going to make any friends in RL
not going to make any friends in RL
whatsoever because I'm pretty confident
whatsoever because I'm pretty confident
that's what's going to happen is that
that's what's going to happen is that
it's just going to invalidate like the
it's just going to invalidate like the
majority of RL research from the last 10
majority of RL research from the last 10
years um it's just like I would love to
years um it's just like I would love to
see that though I think that's what it
see that though I think that's what it
needs to happen I mean there It
needs to happen I mean there It
ultimately this is the thing that I
ultimately this is the thing that I
really believe if it's fast enough it's
really believe if it's fast enough it's
like to me it's not about getting like
like to me it's not about getting like
billions of steps and getting an Al
billions of steps and getting an Al
algorithm to converge on an m with
algorithm to converge on an m with
billions of steps while that's
billions of steps while that's
interesting it's just that like if you
interesting it's just that like if you
can make the it in in iteration Loop of
can make the it in in iteration Loop of
science like [ __ ] five minutes where
science like [ __ ] five minutes where
like I I I come up the algorithm change
like I I I come up the algorithm change
I I can eval it across the standard eval
I I can eval it across the standard eval
set and I know for sure this is better
set and I know for sure this is better
or worse than Po in this way it's like
or worse than Po in this way it's like
that is gonna [ __ ] accelerate
that is gonna [ __ ] accelerate
everything and I'm waiting for that it's
everything and I'm waiting for that it's
actually it's way worse than that
actually it's way worse than that
because it's not just like running your
because it's not just like running your
code on all the M you have to do a full
code on all the M you have to do a full
hypers sweep sweet um and like none of
hypers sweep sweet um and like none of
the papers ever do that because of how
the papers ever do that because of how
expensive it's been and it literally
expensive it's been and it literally
makes like a 3X difference in perf that
makes like a 3X difference in perf that
we've seen even just on like atarian
we've seen even just on like atarian
with good hypers it's like they're
with good hypers it's like they're
actually magic
actually magic
so yeah it's I mean I've seen like
so yeah it's I mean I've seen like
really well reputed researchers
really well reputed researchers
publishing stuff that's it's just like
publishing stuff that's it's just like
that's not going to hold up it just
that's not going to hold up it just
isn't yeah I get po man let's let's
isn't yeah I get po man let's let's
let's make poo great
let's make poo great
again we
again we
will all right dude thank you sure see
will all right dude thank you sure see
you around next will see you bye
you around next will see you bye
bye that was fun I was playing toggle a
bye that was fun I was playing toggle a
bunch trying to not make the mic
bunch trying to not make the mic
Echo
um Xander is not around it seems unless
um Xander is not around it seems unless
I missed messages because I didn't have
I missed messages because I didn't have
the restream chat up during that let me
the restream chat up during that let me
go find
go find
that oh wait Xander is here does busy
that oh wait Xander is here does busy
waiting apply when using multiprocessing
waiting apply when using multiprocessing
as well yeah it's just when you're using
as well yeah it's just when you're using
multiprocessing you do this busy waiting
multiprocessing you do this busy waiting
thing it's good it's like busy waiting
thing it's good it's like busy waiting
is bad no in this case busy waiting is
is bad no in this case busy waiting is
good any tutorial and improv
good any tutorial and improv
documentation plan yep I'll show you
documentation plan yep I'll show you
what we have right here so this is the
what we have right here so this is the
these are the new docks that'll be for
these are the new docks that'll be for
the next update they're not fully
the next update they're not fully
completed yet I have to test all the
completed yet I have to test all the
code in here um but we have this nice
code in here um but we have this nice
single page doc site that gives you a
single page doc site that gives you a
clean tutorial on everything in poer lib
clean tutorial on everything in poer lib
in about 20 minutes so that is
in about 20 minutes so that is
included gives you all sorts of stuff
included gives you all sorts of stuff
about the trainer now it tells you all
about the trainer now it tells you all
about how to use
about how to use
vectorization it tells you it explains
vectorization it tells you it explains
the MU API it gives a little example on
the MU API it gives a little example on
some
some
policies uh it gives you examples on how
policies uh it gives you examples on how
to write custom ends and links all the
to write custom ends and links all the
third party
third party
ones all of that is
included technically live if you want to
included technically live if you want to
go check it out but uh it'll be you know
go check it out but uh it'll be you know
the official Doc for the next
the official Doc for the next
update hey Joseph had step away do you
update hey Joseph had step away do you
want me to run the breakout a little
want me to run the breakout a little
longer based on last run or mess with
longer based on last run or mess with
minval you can just run for breakout
minval you can just run for breakout
like for now let's just run it a little
like for now let's just run it a little
longer see if it solves it in like less
longer see if it solves it in like less
than 10 minutes fully solves it in less
than 10 minutes fully solves it in less
than 10 minutes um is and yeah like 600
than 10 minutes um is and yeah like 600
seconds I guess that is uh it's 600
seconds I guess that is uh it's 600
seconds and then there's like an extra
seconds and then there's like an extra
10% for eval so it's when it like the
10% for eval so it's when it like the
last point before the eval one
last point before the eval one
see if that
see if that
works um
works um
yeah that would be good and then just
yeah that would be good and then just
rerun the pong sweep on the new version
rerun the pong sweep on the new version
and then the other stuff we talked about
and then the other stuff we talked about
with like missing scores on uh the other
with like missing scores on uh the other
ends this is too good thank you it's a
ends this is too good thank you it's a
lot of work it's a lot of work to the
lot of work it's a lot of work to the
point that I've started trying to
point that I've started trying to
reinforcement learn myself so I can just
reinforcement learn myself so I can just
get better more consistent work hours in
get better more consistent work hours in
to get this stuff done because it's just
to get this stuff done because it's just
it's kind of getting to be a
it's kind of getting to be a
lot this is the uh concoction of
today yeah I we got some stuff done
today yeah I we got some stuff done
today but I had to set up this whole
today but I had to set up this whole
streams thing in the morning I had to
streams thing in the morning I had to
like unpack and set all these monitors
like unpack and set all these monitors
and this green screen and mic and
and this green screen and mic and
everything up uh and I also got like
everything up uh and I also got like
terrible sleep so probably tomorrow
terrible sleep so probably tomorrow
we're going to start getting like a good
we're going to start getting like a good
session in the morning in um
session in the morning in um
um and then in the evening as
um and then in the evening as
well yeah on win right yeah so yeah
well yeah on win right yeah so yeah
Spencer do that stuff just PR as you
Spencer do that stuff just PR as you
have it I'll just integrate all the new
have it I'll just integrate all the new
things and uh we should be able to go
things and uh we should be able to go
from
there
there
um should be good
I'm trying to think if I want to start
I'm trying to think if I want to start
on docks or what I want to do
on docks or what I want to do
here I kind of want to get new sweeps
going let me go double check one thing
going let me go double check one thing
for timing purposes
well I don't know I'm going to work on
well I don't know I'm going to work on
this for a little bit then until like
this for a little bit then until like
cold away
I think I'll run
I think I'll run
uh I'll just put the connect Force sweep
uh I'll just put the connect Force sweep
in real
quick what's this thing
quick what's this thing
oops
and
python sweep
carbs whichever my Microsoft Dev
carbs whichever my Microsoft Dev
invented this sound effect needs to be
shot okay so that
runs we've got that sweep
runs we've got that sweep
going uh and I think then since we have
going uh and I think then since we have
these in the background other than the
these in the background other than the
little bits of analysis I need to
do e
okay so here's Connect Four oh is this
okay so here's Connect Four oh is this
sweeping the wrong
sweeping the wrong
metric yeah this is totally sweeping the
metric yeah this is totally sweeping the
wrong
metric uh it should be score I
believe yeah
where's the objective
where's the objective
[Music]
peram here it is
score okay so now we should be directly
score okay so now we should be directly
optimizing score Spencer if you're here
optimizing score Spencer if you're here
you need to do that for anything that
you need to do that for anything that
has a win rate based thing you need to
has a win rate based thing you need to
optimize win rate
optimize win rate
directly so there that should that
directly so there that should that
should now
should now
work uh though mind
work uh though mind
you he terrible really right
okay
yeah total time
yeah total time
step is this a thing
oh I didn't get to change total time
steps wait how did this I just messed
steps wait how did this I just messed
with this right didn't I just put this
with this right didn't I just put this
metric in
put in the wrong
file okay so Min is going to
file okay so Min is going to
be 10
be 10
mil Max is going to be 100 Mil
there we
go let's have that warning before I
go let's have that warning before I
forget
oh this is actually fine
I forgot my chat is I got to fix the
chat hope you fully recovered from your
chat hope you fully recovered from your
injury not really to be
injury not really to be
honest
honest
um I mean I can very easily I can rep
um I mean I can very easily I can rep
315 a bunch but uh I'm a little cautious
315 a bunch but uh I'm a little cautious
going back to 400 because I definitely
going back to 400 because I definitely
feel it walking around still
feel it walking around still
unfortunately they'll be back though
tells me 32 which is wrong
there we go
whatever some
warning for
we
go so that'll fix that
and look at that this is already way
better you
see so we'll just run this for a short
see so we'll just run this for a short
sweep and this will just get us
sweep and this will just get us
something like decent
something like decent
enough here we can set this in into
enough here we can set this in into
created timestamp which is going just be
created timestamp which is going just be
time process
time process
time there we go so we'll try to see if
time there we go so we'll try to see if
we can get it like Connect Four policy
we can get it like Connect Four policy
in a
minute very
minute very
good wish you could mute conversations
good wish you could mute conversations
thing just spams
me okay so that should be good
anything on Discord I think I missed
anything on Discord I think I missed
Zander for
Zander for
today I'll get him
tomorrow yeah these are good
we'll see how consistent those end up
we'll see how consistent those end up
being no I'm here in YouTube
being no I'm here in YouTube
chat um I'm going to have dinner in like
chat um I'm going to have dinner in like
20 minutes I can start reviewing code if
20 minutes I can start reviewing code if
you'd
you'd
like would you like me to start going
like would you like me to start going
through
code I can just do stuff live
code I can just do stuff live
so I definitely want to get you
so I definitely want to get you
uh taken care of here we do very much
uh taken care of here we do very much
appreciate big contributions like
appreciate big contributions like
this sure all right we'll uh I'll just
this sure all right we'll uh I'll just
start going through this I'll give you
start going through this I'll give you
some live
some live
feedback uh because that'll be quickest
feedback uh because that'll be quickest
and we can go from
there so puffer V
uh I don't know why you didn't just use
uh I don't know why you didn't just use
the clean puff RL demo but
sure okay you added some you added docs
sure okay you added some you added docs
as well
as well
cool we need to add docs for our
cool we need to add docs for our
independent
independent
M's it's probably a nice thing to
M's it's probably a nice thing to
do it's
copied uh we're going to do the python
copied uh we're going to do the python
file first I think wherever that is
uh yeah you don't need to do you can
uh yeah you don't need to do you can
just add this you pretty much just need
just add this you pretty much just need
to add this line here to the setup. pi
to add this line here to the setup. pi
here let me show
here let me show
you so in order to add this m it's way
you so in order to add this m it's way
simpler than you've made
it so you just add your extension like
it so you just add your extension like
here you just add your extension file
here you just add your extension file
like here and then this will pick it up
like here and then this will pick it up
right and then for the C if you want to
right and then for the C if you want to
compile in just pure C
compile in just pure C
mode it'll get picked up automatically
mode it'll get picked up automatically
by this thing as long as you preserve
by this thing as long as you preserve
the same structure uh speaking of which
the same structure uh speaking of which
I need to delete this m uh so I need to
I need to delete this m uh so I need to
fix this script by deleting this m thing
fix this script by deleting this m thing
because poer Li has been moved into just
because poer Li has been moved into just
it's moved into ocean now but you get
it's moved into ocean now but you get
the idea so you you can save a little
the idea so you you can save a little
bit of annoy annoyance
there I want to get your Pi file first
there I want to get your Pi file first
so we do top to
so we do top to
bottom uh assets as well so assets go
bottom uh assets as well so assets go
into the assets folder at the top level
into the assets folder at the top level
you can probably reuse this puffer
you can probably reuse this puffer
because we actually we have like a
because we actually we have like a
standalone
puffer uh resources so here you see we
puffer uh resources so here you see we
have resources and there's like puffers
have resources and there's like puffers
128 so you can just use this
128 so you can just use this
puffer um and this just prevents us from
puffer um and this just prevents us from
bloating Assets in the
bloating Assets in the
repo um this we're we're not going to
repo um this we're we're not going to
commit gifts to the repo like this uh
commit gifts to the repo like this uh
you can but what we will do is we'll put
you can but what we will do is we'll put
the environment itself on the website so
the environment itself on the website so
you won't need a gift because the uh the
you won't need a gift because the uh the
environment will deploy to the website
environment will deploy to the website
so you'll just have this whole thing
so you'll just have this whole thing
online high environment
uh is
this oh is the renderer in Python is
this oh is the renderer in Python is
that what's going on
here hold
on pick
up um okay I see what you did
so yeah there's some things that you're
so yeah there's some things that you're
going to want to look at here because um
going to want to look at here because um
well hold on let me just make sure I'm
well hold on let me just make sure I'm
actually let me make sure I'm
actually let me make sure I'm
actually got Pi environment. Pi is this
actually got Pi environment. Pi is this
the full
the full
logic or is this import
logic or is this import
something did you prototype it in Python
yeah you did okay so this is fine I see
yeah you did okay so this is fine I see
you prototyped it in
you prototyped it in
Python
right yeah okay so this is fine this is
right yeah okay so this is fine this is
you prototyped it here and then if I go
you prototyped it here and then if I go
into syon
into syon
Ms S environment up high okay
cool yeah this is way more what we would
cool yeah this is way more what we would
expect good um except that you don't
expect good um except that you don't
want to subass parallel M you're going
want to subass parallel M you're going
to want to make this a native M
to want to make this a native M
so let me show you what to look at here
so let me show you what to look at here
so I can just show you the side by side
so I can just show you the side by side
you're still here right I have the
you're still here right I have the
YouTube chat open
H puffer the
otion okay so squared is like a really
otion okay so squared is like a really
simple demo typing in Discord my
simple demo typing in Discord my
bad render function tricky had to save T
bad render function tricky had to save T
pimp page and load back in try to make
pimp page and load back in try to make
scon yeah so I'll show you I'll show you
scon yeah so I'll show you I'll show you
how to do it so first of all parallel
how to do it so first of all parallel
end here if you just look at like our PI
end here if you just look at like our PI
this is like our sample you have class
this is like our sample you have class
puffer en you just Define these things
puffer en you just Define these things
uh you can map these pretty closely
uh you can map these pretty closely
right to what you're doing uh typically
right to what you're doing uh typically
we don't do dick space what we do is we
we don't do dick space what we do is we
just compactify everything for Native Ms
just compactify everything for Native Ms
because it's
because it's
faster um we just like yeah we
faster um we just like yeah we
compactify everything you can you can
compactify everything you can you can
make this like a wrapper if you want uh
make this like a wrapper if you want uh
petting do compatibility that we're
petting do compatibility that we're
probably going to end up doing that more
probably going to end up doing that more
generally anyways
uh reset yep that's fine and then yeah
uh reset yep that's fine and then yeah
this we don't use dict API right we have
this we don't use dict API right we have
uh self-observations actions rewards
uh self-observations actions rewards
these are pre-allocated buffers and they
these are pre-allocated buffers and they
just get set directly by the environment
just get set directly by the environment
so this is like a really simple pi and
so this is like a really simple pi and
basically all the M's are going to look
basically all the M's are going to look
like this because it's this it's this
like this because it's this it's this
simple and then if we go to your scyon
simple and then if we go to your scyon
binding
okay your syon binding looks reasonable
okay your syon binding looks reasonable
let me
see this is fine and
then so you did one environment here
then so you did one environment here
what we do is we vectorize internally so
what we do is we vectorize internally so
we have multiple environment
we have multiple environment
supported um inside of the scon file so
supported um inside of the scon file so
you can see here I have a loop over numb
you can see here I have a loop over numb
environments I make the environments
environments I make the environments
like this and then I get uh this pointer
like this and then I get uh this pointer
to ends as well as pointer to client and
to ends as well as pointer to client and
I can just pass in the observation
I can just pass in the observation
action rewards all these buffers that
action rewards all these buffers that
are allocated from python you pass them
are allocated from python you pass them
in here so if you have multi-agent you
in here so if you have multi-agent you
can look at my MOBA for example of how
can look at my MOBA for example of how
to do multi-agent it's almost the same
to do multi-agent it's almost the same
you just pass in the buffers that you
you just pass in the buffers that you
need and then this makes everything way
need and then this makes everything way
faster because you avoid a bunch of copy
faster because you avoid a bunch of copy
operations I'm happy to explain that in
operations I'm happy to explain that in
more detail I'm just doing a quick walkr
more detail I'm just doing a quick walkr
now so I got to get dinner in a moment
now so I got to get dinner in a moment
um just say I can give you some
um just say I can give you some
structural stuff to fix if you have time
structural stuff to fix if you have time
today before I I go through and review
today before I I go through and review
more properly because there's quite a
more properly because there's quite a
bit here so yeah these Malik you don't
bit here so yeah these Malik you don't
need to Malik these because they're
need to Malik these because they're
going to get passed in from python
going to get passed in from python
that's the key thing I think you're not
that's the key thing I think you're not
getting with this um same thing with all
getting with this um same thing with all
this like basically this whole thing
this like basically this whole thing
gets simpler because memory is pass
gets simpler because memory is pass
in uh same thing here get OBS if you
in uh same thing here get OBS if you
don't use dictionaries they just get
don't use dictionaries they just get
written to an array you don't have to do
written to an array you don't have to do
this this just happens inside of the C
this this just happens inside of the C
file you won't even need dialect like
file you won't even need dialect like
this either close you just have to free
this either close you just have to free
the environments and close the client
the environments and close the client
maybe so this is a very good template
maybe so this is a very good template
for you to look at for that and then
for you to look at for that and then
pick
pick
up uh I see what you did here this is
up uh I see what you did here this is
like yeah I see why you what you did um
like yeah I see why you what you did um
what we do in practice is we use we kind
what we do in practice is we use we kind
of implement stuff header only so we
of implement stuff header only so we
just put all the logic into the header
just put all the logic into the header
file
file
um I think you can probably import the C
um I think you can probably import the C
files as well if you want but this makes
files as well if you want but this makes
it easier because then you can have just
it easier because then you can have just
Import the. in order to run from Python
Import the. in order to run from Python
and then we make the C file the one that
and then we make the C file the one that
compiles for web
compiles for web
assembly that's been pretty clean for us
assembly that's been pretty clean for us
to do but I'll look at the C code in
to do but I'll look at the C code in
here
yeah so this is pretty standard except
yeah so this is pretty standard except
what I will tell you is you don't want
what I will tell you is you don't want
to use uh double pointers for 2D arrays
to use uh double pointers for 2D arrays
you're going to want to use um just
you're going to want to use um just
single
single
pointers me see if we have that
so single pointer let me see if we have
so single pointer let me see if we have
an
example yeah so right here observations
example yeah so right here observations
is a 2d array this is for just calling
is a 2d array this is for just calling
it from C because it gets passed in most
it from C because it gets passed in most
of the time you see we just CCT size
of the time you see we just CCT size
times size and then what you do is you
times size and then what you do is you
just do the math
like yeah here right m r * m size plus
like yeah here right m r * m size plus
MC just do the math and you can make a
MC just do the math and you can make a
little helper function to do this math I
little helper function to do this math I
make like a get address function very
make like a get address function very
often don't have to worry about that so
often don't have to worry about that so
this basically that cuts out this stuff
this basically that cuts out this stuff
like
like
this um you're going to want a separate
this um you're going to want a separate
init and allocate function like init is
init and allocate function like init is
for stuff that you need to in it is for
for stuff that you need to in it is for
stuff that that you always need
stuff that that you always need
allocated is for stuff that you only
allocated is for stuff that you only
need if you call from C cuz like OB
need if you call from C cuz like OB
actions rewards terminals get passed in
actions rewards terminals get passed in
from python so that'll simplify for you
stuff like this is fine this will be
stuff like this is fine this will be
faster if you do this as a m set
faster if you do this as a m set
otherwise this is fine same thing like
otherwise this is fine same thing like
this anytime you just start zeroing a
this anytime you just start zeroing a
bigger array mem set will be faster no
bigger array mem set will be faster no
big deal
big deal
though uh yes this like here this grid
though uh yes this like here this grid
of XY this is where you would do like
of XY this is where you would do like
get address XY or whatever because it'll
get address XY or whatever because it'll
be 1D
indexing otherwise it's some simple
indexing otherwise it's some simple
Logic Let me see what else I can get you
Logic Let me see what else I can get you
real quick
real quick
get
get
OBS yeah that's how you want to do that
good three that'll get simplified like
good three that'll get simplified like
this will go
away okay I'll go over logic in more
away okay I'll go over logic in more
detail once you fix uh the smaller stuff
detail once you fix uh the smaller stuff
and then where's the render stuff you
and then where's the render stuff you
tried to do the render and it was hard
tried to do the render and it was hard
you
said so the way to do render so it's
said so the way to do render so it's
easy right is you just use the
easy right is you just use the
Capi this is the render for squared this
Capi this is the render for squared this
is how easy it
is how easy it
is this is like very very simple
is this is like very very simple
rendering and if you want a more
rendering and if you want a more
extensive example I think probably a
extensive example I think probably a
good one to look at that would be like
good one to look at that would be like
rware
rware
maybe cuz it's very similar to your
maybe cuz it's very similar to your
environment and you'll see how easy
environment and you'll see how easy
their rendering
is
is
so this like 100ish lines of code is all
so this like 100ish lines of code is all
the rendering and this is like drawing
the rendering and this is like drawing
the puffer texture right
the puffer texture right
here this pile grid rware looks very
here this pile grid rware looks very
similar to your n right this is rware
similar to your n right this is rware
it's like 100 lines of code to do
it's like 100 lines of code to do
something like
this so major stuff for you to do
this so major stuff for you to do
initially is going to be to um use the
initially is going to be to um use the
native API and then like use the OBS
native API and then like use the OBS
data from python pass that to scyon and
data from python pass that to scyon and
then to see uh make sure you have the
then to see uh make sure you have the
loop over environments you have multiple
loop over environments you have multiple
environments in the cython layer uh
environments in the cython layer uh
that'll actually simplify a lot of your
that'll actually simplify a lot of your
code and make stuff way way
code and make stuff way way
faster uh add the renderer in C and the
faster uh add the renderer in C and the
way that I like to Dev so that it's like
way that I like to Dev so that it's like
really easy to test stff quickly because
really easy to test stff quickly because
it's annoying to compile scyon over and
it's annoying to compile scyon over and
over right um the way that I will
over right um the way that I will
typically
typically
Dev and I have to adjust this path I
Dev and I have to adjust this path I
just messed this up
get clang on this
machine okay
so build building pong for local testing
so build building pong for local testing
you see compilation is
you see compilation is
instant and then I can just run pong I
instant and then I can just run pong I
have it the window pulled up on my other
have it the window pulled up on my other
monitor right so you can see that I have
monitor right so you can see that I have
the ability to compile and test in pure
the ability to compile and test in pure
C without having to wait for all the
C without having to wait for all the
really obnoxious scon and python tool
really obnoxious scon and python tool
chain so this basically lets you build
chain so this basically lets you build
your entire end nicely and see this
your entire end nicely and see this
comes with like mem check sanitizing
comes with like mem check sanitizing
leak all this stuff to make it easier to
leak all this stuff to make it easier to
Dev it's a really fast and easy pure cev
Dev it's a really fast and easy pure cev
Loop
Loop
and then the uh you know you just have
and then the uh you know you just have
to understand how you put observations
to understand how you put observations
in from Python and cython in order to do
in from Python and cython in order to do
the binding and then you don't have to
the binding and then you don't have to
do as many like you don't have to SC
do as many like you don't have to SC
around with scon compiler fixing errors
around with scon compiler fixing errors
as much is this uh is this good
as much is this uh is this good
information Zander is there anything I
information Zander is there anything I
can answer just in the next couple
can answer just in the next couple
minutes before I got to go for dinner if
minutes before I got to go for dinner if
not I can do a longer session after
not I can do a longer session after
you've played with some stuff um like
you've played with some stuff um like
tomorrow or anytime this
tomorrow or anytime this
week for
good information let me start probably
good information let me start probably
ask for help yeah no worries and uh the
ask for help yeah no worries and uh the
after this stream ends this VOD will be
after this stream ends this VOD will be
on YouTube so if you just want to like
on YouTube so if you just want to like
play around with this tonight or
play around with this tonight or
whenever um you can just like scrub
whenever um you can just like scrub
through this like these last few minutes
through this like these last few minutes
and uh then you can ask more stuff from
and uh then you can ask more stuff from
there I think that if you start with
there I think that if you start with
this it's going to start to make a lot
this it's going to start to make a lot
of sense cuz like there are a lot of
of sense cuz like there are a lot of
things I can see that just didn't click
things I can see that just didn't click
that are going to be like it's easier
that are going to be like it's easier
than you're making it right like you're
than you're making it right like you're
making it harder on yourself than it
making it harder on yourself than it
needs to be uh puffer set up to make
needs to be uh puffer set up to make
things very very easy on you if you just
things very very easy on you if you just
like use the bindings the way that we've
like use the bindings the way that we've
done
it but that's going to be it for now
it but that's going to be it for now
folks
folks
um I'm going to go get food I might do a
um I'm going to go get food I might do a
couple other small things tonight but
couple other small things tonight but
other than than that we're going to let
other than than that we're going to let
the sweeps
run uh where is it I'm going to let
run uh where is it I'm going to let
these sweeps
run solve Connect 4 really
run solve Connect 4 really
quick it looks like it's already doing
quick it looks like it's already doing
that and uh we'll continue fixing
that and uh we'll continue fixing
environments and onboarding stuff over
environments and onboarding stuff over
the next few days hey French welcome
the next few days hey French welcome
sorry you caught just the very end of
sorry you caught just the very end of
the stream but I'll be on like pretty
the stream but I'll be on like pretty
much every weekday uh from here on out
much every weekday uh from here on out
so thanks folks uh if you want to
so thanks folks uh if you want to
support the project for free all the
support the project for free all the
code here is free and open source it's
code here is free and open source it's
all on right here start the project if
all on right here start the project if
you want to help us out and join
you want to help us out and join
discord.
discord.
GPU if you want to come chat and
GPU if you want to come chat and
contribute I review all contributions on
contribute I review all contributions on
stream it's a really great way to get
stream it's a really great way to get
into reinforcement learning in AI
into reinforcement learning in AI
General we have a lot of people around
General we have a lot of people around
here that came in with just like General
here that came in with just like General
programming experience but no RL or AI
programming experience but no RL or AI
experience um it is kind of funny how
experience um it is kind of funny how
puffer is Cutting Edge RL but it's
puffer is Cutting Edge RL but it's
actually very easy to contribute to M so
actually very easy to contribute to M so
we welcome that
