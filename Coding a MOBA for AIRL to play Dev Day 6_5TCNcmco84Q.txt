Kind: captions
Language: en
uhoh I forgot to update the stream title
uhoh I forgot to update the stream title
didn't
I let's try
I let's try
that update the stream title
I think we're
live
oops all
oops all
right
welcome I did a little bit of work on
welcome I did a little bit of work on
this over the weekend just a
this over the weekend just a
little nothing too fancy
let me tweet this out and
let me tweet this out and
um give will a little bit of [ __ ] one
um give will a little bit of [ __ ] one
second
[Laughter]
hold
hold
[Laughter]
[Laughter]
on let's see if he
on let's see if he
[Music]
oh I forgot this here we go
[Music]
oh this is so
oh this is so
funny okay let's get started on the MOBA
Dev let's get started on the MOBA
Dev let's get started on the MOBA
Dev I gotta have a little bit of fun
Dev I gotta have a little bit of fun
right okay um so let me talk about what
right okay um so let me talk about what
I did over the the weekend here with
this uh stash get pull origin any
config there have been uh a few
config there have been uh a few
changes you could say but most of them
changes you could say but most of them
not to the Moa I did like a lot of
not to the Moa I did like a lot of
changes to everything else a lot of
changes to everything else a lot of
refactors and stuff okay
refactors and stuff okay
um the main thing with the Moa is I
um the main thing with the Moa is I
figured out a new way of doing uh
figured out a new way of doing uh
targeting where is it
uh right puffer
uh right puffer
lib
oan H it's still so funny I got will
oan H it's still so funny I got will
foring streaming every day
foring streaming every day
now Will's cool will does uh he's done a
now Will's cool will does uh he's done a
lot of work oh there you are there you
lot of work oh there you are there you
are you came back you came over to get
are you came back you came over to get
back back at
back back at
me this is no cursor man this is this is
me this is no cursor man this is this is
like two plugins Neo them one of them is
like two plugins Neo them one of them is
super Maven but it's for completing one
super Maven but it's for completing one
line at a time because python doesn't
line at a time because python doesn't
have good LSPs that's
it so I figured out uh I figured out
it so I figured out uh I figured out
over the weekend a way better way of
over the weekend a way better way of
doing targeting I was trying to figure
doing targeting I was trying to figure
out how to implement a linked list in
out how to implement a linked list in
scon without Malik which was God awful
scon without Malik which was God awful
uh and then I just figured out a better
uh and then I just figured out a better
way of doing it so uh
scan where is it scan AOE okay
scan where is it scan AOE okay
so this thing returns a beant which is
so this thing returns a beant which is
whether it's scanned anything or not and
whether it's scanned anything or not and
this does a loop over the nearby area
this does a loop over the nearby area
and it has a whole bunch of flags for
and it has a whole bunch of flags for
how you want to filter the data okay so
how you want to filter the data okay so
you have this singular scan function and
you have this singular scan function and
then when you want to actually do
then when you want to actually do
something over the scanned uh the scan
something over the scanned uh the scan
things it is way way way way easier
things it is way way way way easier
because you can do like AOE scanned for
because you can do like AOE scanned for
instance and you can just go over 200 is
instance and you can just go over 200 is
hardcoded for now it's just the max
hardcoded for now it's just the max
number of scan things and it'll just go
number of scan things and it'll just go
over targets until it finds a null
over targets until it finds a null
Terminator and it will grab the scan
Terminator and it will grab the scan
Target decide whether to hit it and move
Target decide whether to hit it and move
on so you get rid of this nested Loop
on so you get rid of this nested Loop
over nearby area being repeated all over
over nearby area being repeated all over
the code base now it's just scan based
the code base now it's just scan based
so this is very nice um we're going to
so this is very nice um we're going to
do something really cool today which I
do something really cool today which I
think will work at least I haven't come
think will work at least I haven't come
up with a reason that it shouldn't work
up with a reason that it shouldn't work
and what that is is we are going to
and what that is is we are going to
we're going to implement a star
we're going to implement a star
pathing but we're going to cash it for
pathing but we're going to cash it for
everything
everything
so what we're going to do the map is
so what we're going to do the map is
128 by
128 by
128 so that squared is like I don't know
128 so that squared is like I don't know
150 was it no
150 was it no
15,000 yeah which is not that big so
15,000 yeah which is not that big so
essentially you're going to end up with
essentially you're going to end up with
a 128
a 128
by no a what is it is it 10,000 by 10
by no a what is it is it 10,000 by 10
hold on I might be wrong here let me let
hold on I might be wrong here let me let
me figure this out so
it's 128 time
it's 128 time
128 oh yeah yeah times 128 time
128 okay this is somewhat bigger than I
expected I don't think that's too bad
expected I don't think that's too bad
though is
though is
it 268
MB we could M map it as well
so let me think let me say what I was
so let me think let me say what I was
going to do here
going to do here
um I want to precompute the pathing from
um I want to precompute the pathing from
every single tile to every single other
tile so you pick you know where you are
tile so you pick you know where you are
currently you pick where you want to go
currently you pick where you want to go
hey JBL uh I this is actually I think
hey JBL uh I this is actually I think
the thing that you
the thing that you
recommended right is to pre-compute the
recommended right is to pre-compute the
AAR pathing so
AAR pathing so
so the good news is that we can do it uh
so the good news is that we can do it uh
we can do it but I think it's 268
we can do it but I think it's 268
megabytes of
megabytes of
data which maybe is not that
bad I don't know if we can get that into
bad I don't know if we can get that into
scon easily we'll see
scon easily we'll see
but
but
so if we precompute from every single
so if we precompute from every single
position in the map to every single
position in the map to every single
other position in the map right that
other position in the map right that
is I mean it's 128x 128 by 128 by 128
is I mean it's 128x 128 by 128 by 128
right it's like your
XY by their XY like the target
XY and technically we can prune some
XY and technically we can prune some
stuff out but I think it would make the
stuff out but I think it would make the
uh the data format worse
so h i mean this shouldn't be that bad
so h i mean this shouldn't be that bad
though right because wait if we want to
though right because wait if we want to
do all paths right if we want to do all
do all paths right if we want to do all
paths so from any part of the map to any
paths so from any part of the map to any
other part of the map then we don't need
other part of the map then we don't need
AAR right we just need breath for
search is there anything anything else
search is there anything anything else
clever that we can do
clever that we can do
here is there any other clever way that
here is there any other clever way that
we can save on
this cuz
this cuz
like
H so naively right what I can do is I
H so naively right what I can do is I
can run breath ver search uh 128 time
can run breath ver search uh 128 time
128 so I can run breath first search
128 so I can run breath first search
16,000 times on this map uh as long as I
16,000 times on this map uh as long as I
implement this in SC it will be
implement this in SC it will be
relatively
relatively
fast and then I can save that data to a
fast and then I can save that data to a
file and then I will have pre-computed
file and then I will have pre-computed
optimal pathing for the whole
optimal pathing for the whole
map it will be 268 megabytes assuming I
map it will be 268 megabytes assuming I
use one byte uh to represent like the
use one byte uh to represent like the
the path direction that you're going to
the path direction that you're going to
take in any one
take in any one
location technically I could cut this
location technically I could cut this
down by a factor of
down by a factor of
four because I only need two bits per uh
four because I only need two bits per uh
I only need two bits per Direction so
I only need two bits per Direction so
technically if I want to be really
technically if I want to be really
sweaty with this
sweaty with this
right I can do this in 67 MB because I
right I can do this in 67 MB because I
can have each bite could contain uh you
can have each bite could contain uh you
only need 0 1 two three to tell you like
only need 0 1 two three to tell you like
up down left right which is two
bits but before we consider that level
bits but before we consider that level
of optimization cuz that's kind of
of optimization cuz that's kind of
obnoxious we got to do bit reads
obnoxious we got to do bit reads
um there might be a better way of doing
um there might be a better way of doing
this I'm just trying to think is there
this I'm just trying to think is there
like if I go from point A to point B
like if I go from point A to point B
right
right
and I go to like some point in the
and I go to like some point in the
middle along the way then I already know
middle along the way then I already know
the optimal point from that one to the
the optimal point from that one to the
end right
is there some algorithm I don't know
is there some algorithm I don't know
about I'm going to chat GPT this just to
about I'm going to chat GPT this just to
see if I'm being
see if I'm being
stupid
um this is really nice just I only ever
um this is really nice just I only ever
use this for like I'm not going to
use this for like I'm not going to
expect this to solve the problem for me
expect this to solve the problem for me
cuz it's not it's just if there is an
cuz it's not it's just if there is an
existing algorithm that I don't know
existing algorithm that I don't know
about that will do this so
about that will do this so
I need to compute uh optimal pathing on
I need to compute uh optimal pathing on
a uh a 2d grid with
a uh a 2d grid with
obstacles from every point to every
obstacles from every point to every
other
other
point is
point is
there uh I can run
there uh I can run
BFS from every
BFS from every
start and get this but that is o n 4 for
start and get this but that is o n 4 for
memory for the
memory for the
result
result
there a better
algorithm Floyd
algorithm Floyd
Marshall
ooh AAR doesn't help AAR is a faster
ooh AAR doesn't help AAR is a faster
algorithm for getting from one point to
algorithm for getting from one point to
another point we need all points so this
another point we need all points so this
is exactly the type of thing I was
is exactly the type of thing I was
looking for from chat
looking for from chat
jity
jity
um they say that they have o of n cubed
um they say that they have o of n cubed
time and O of N squared
time and O of N squared
memory where n is the number
of oh I think that they're stupid they
of oh I think that they're stupid they
redefined n hold on I think that this is
stupid well wait if this is chat GPT
stupid well wait if this is chat GPT
being wrong though then this is exactly
being wrong though then this is exactly
the type of thing I'm talking about um
the type of thing I'm talking about um
hold on let me just let me confirm that
hold on let me just let me confirm that
I'm right here distance
I'm right here distance
Matrix i
Matrix i
j
j
[Music]
[Music]
distances okay dynamic programming thing
so this is literally worse isn't
so this is literally worse isn't
it wait what the hell this is worse
it wait what the hell this is worse
right
yeah hot CH GPT is very highly
regarded it works both
regarded it works both
ways in this context would
indeed hold on let me see if this
indeed hold on let me see if this
algorithm looks like it's good though
algorithm looks like it's good though
distance IJ is min of
distance i j Plus
wait
what I think this is the same as breath
what I think this is the same as breath
for
for
search wait I J no no no ik
search wait I J no no no ik
how is this n cubed
time I oh shoot that's a
lot how the hell is this ever better
lot how the hell is this ever better
than breath for search wait Floyd
warshall this is freaking chat GPT
warshall this is freaking chat GPT
wasting my time as every time freaking
wasting my time as every time freaking
everyone on the internet saying it's
everyone on the internet saying it's
going to solve everything but it can't
going to solve everything but it can't
solve
solve
anything all pair shortest path problem
anything all pair shortest path problem
for weighted
for weighted
graphs well this is the actual thing oh
graphs well this is the actual thing oh
perfect this is what I wanted
here all equals pair yeah that's what I
here all equals pair yeah that's what I
need I need all pairs I have the all
need I need all pairs I have the all
pair shortest path problem
exactly unweighted graphs undirected
exactly unweighted graphs undirected
graphs
they don't have memory
complexity does anybody smart here know
complexity does anybody smart here know
if there's
if there's
actually anything that's
actually anything that's
um better for this problem so look this
um better for this problem so look this
is the problem that I have let me
is the problem that I have let me
explain to you
I'll explain the problem
I'll explain the problem
so does this let me
so does this let me
draw where is
it where's the just the draw tool on
it where's the just the draw tool on
this stupid
this stupid
thing oh my gosh why I can never
thing oh my gosh why I can never
freaking
freaking
find draw tool canvas draw
find draw tool canvas draw
online D all these things are so bad why
online D all these things are so bad why
why is there literally just nothing but
why is there literally just nothing but
it's oh my God all these apps are so
bad okay this is what I
bad okay this is what I
wanted
so you have your grid
right like
right like
this
this
so from any point to any other point
so from any point to any other point
let's say that there's an obstacle like
let's say that there's an obstacle like
in the way let's say that there's like
in the way let's say that there's like
obstacles here right then the optimal
obstacles here right then the optimal
path
path
is it it's can ties can be broken
is it it's can ties can be broken
arbitrarily so this is an optimal path
arbitrarily so this is an optimal path
right but I need all pairs all points
right but I need all pairs all points
from any start to any destination on
from any start to any destination on
this map
this map
so uh and I need the the direction so
so uh and I need the the direction so
basically the output of this thing I
basically the output of this thing I
want is I want to have something that
want is I want to have something that
tells me from any starting point which
tells me from any starting point which
direction I need to move
direction I need to move
in uh to have the optimal path towards
in uh to have the optimal path towards
the end
the end
goal which should exactly be all PA of
goal which should exactly be all PA of
shortest paths
shortest paths
um does anything have less than n squ
um does anything have less than n squ
memory no get out of the
memory no get out of the
windows does anything have less
windows does anything have less
than wait every pair of vertices V
am I wrong or is running breath for
am I wrong or is running breath for
search not just
faster
faster
wait pair of
vertices am I dumb or is breath for
vertices am I dumb or is breath for
search just faster
let me
see Johnson's
see Johnson's
algorithm on Spar it's not
sparse large grids Dy that's not
weighted all pairs would be doing a lot
weighted all pairs would be doing a lot
of repe that's what I would think
of repe that's what I would think
right um but
right um but
is I would think that it's redoing a lot
is I would think that it's redoing a lot
of work but apparently there this is not
of work but apparently there this is not
a thing like I don't know if there's an
a thing like I don't know if there's an
algorithm for this
what's uh breath for search is O of
it should just be event word per call
last this is the last search I'm going
last this is the last search I'm going
to do otherwise it's just wasting my
to do otherwise it's just wasting my
time
could you not use the Waypoint to your
could you not use the Waypoint to your
advantage
advantage
here only really need the optimal path
here only really need the optimal path
from a point in a particular region to
from a point in a particular region to
the nearest weight so that's true for
the nearest weight so that's true for
the creeps um but the advantage here is
the creeps um but the advantage here is
that like I'm going to be able to if I
that like I'm going to be able to if I
have this if I make this nav grid thing
have this if I make this nav grid thing
this is going to be so much better
this is going to be so much better
because here like I can make you as a
because here like I can make you as a
player you can click a point and then
player you can click a point and then
it'll there for you like I can do stuff
it'll there for you like I can do stuff
like that I can make scripted agents so
like that I can make scripted agents so
much more easily if I have this because
much more easily if I have this because
pathing is just
solved and to give you a to be clear
solved and to give you a to be clear
here pathing is incredibly incredibly
here pathing is incredibly incredibly
solved if I do it this way because like
solved if I do it this way because like
it's literally a lookup like you like
it's literally a lookup like you like
say okay I'm at this cell I want to go
say okay I'm at this cell I want to go
to this target I look up in a table I
to this target I look up in a table I
look up the direction I go I go there
look up the direction I go I go there
it's 0 of one so pathing becomes o of
one okay chat GPT produced
one okay chat GPT produced
garbage it cannot solve anything it
garbage it cannot solve anything it
cannot recognize when it has nothing to
cannot recognize when it has nothing to
add chat GPT is garbage thank you for
add chat GPT is garbage thank you for
wasting my
wasting my
time as always
absolute
garbage every
garbage every
time let's make uh this C test thing
in that case maybe you could compute
in that case maybe you could compute
that giant MAV that giant nav mesh wants
that giant MAV that giant nav mesh wants
but dynamically load relevant chunks
but dynamically load relevant chunks
into memory based on spatial well I was
into memory based on spatial well I was
just going to mmap the
just going to mmap the
file
file
um I was just going to mmap the file
though frankly like I could just load it
though frankly like I could just load it
into memory
into memory
well yeah I can totally just load it
well yeah I can totally just load it
into memory
right yeah
right yeah
so the the one trick I'm going to have
so the the one trick I'm going to have
to do is like you're going to want to
to do is like you're going to want to
simulate a whole bunch of instances of
simulate a whole bunch of instances of
this game in parallel right so like here
this game in parallel right so like here
a very common workflow that I'll have uh
a very common workflow that I'll have uh
is that I'll try to get a batch of 4096
is that I'll try to get a batch of 4096
agents so 10 agents per map I need to
agents so 10 agents per map I need to
run 400 games of uh 400 mug instances at
run 400 games of uh 400 mug instances at
the same time and then usually I do that
the same time and then usually I do that
on a couple different cores so let's say
on a couple different cores so let's say
I have 800 MOBA
I have 800 MOBA
instances
instances
um I don't want to have 250 megabytes
um I don't want to have 250 megabytes
per instance right I want to share it
per instance right I want to share it
across them so that'll be like mildly
across them so that'll be like mildly
annoying to figure out but not that not
annoying to figure out but not that not
that bad
let's stop yapping and start coding
let's stop yapping and start coding
we're going to start with this in uh
we're going to start with this in uh
we're going to start with this in Python
we're going to start with this in Python
and then we're going to Port it to we're
and then we're going to Port it to we're
going to Port it to C after that uh it's
going to Port it to C after that uh it's
not going to be that hard to Port so
not going to be that hard to Port so
what we're going to do is we're going to
what we're going to do is we're going to
start with data
start with data
equal let's do uh what is
equal let's do uh what is
it Def
it Def
precompute
precompute
pathing and we'll do a
grid and that's it
grid and that's it
right
so.
so.
shape
zero uh it's going to be square so we
zero uh it's going to be square so we
don't really care about other stuff
and we can prune a little bit by the way
and we can prune a little bit by the way
we'll be able to prune just a little bit
we'll be able to prune just a little bit
based on obstacles so it'll be a little
based on obstacles so it'll be a little
faster to
faster to
compute maybe 50%
compute maybe 50%
faster uh so we start with the grid
faster uh so we start with the grid
shape
and
and
storage was it was it
storage was it was it
optimal what is it
optimal what is it
optimal paths
optimal paths
equal
equal
Zer n *
Zer n *
n nodes nodes
n nodes nodes
u8 we'll do it this way for now we might
u8 we'll do it this way for now we might
do bit packing later we'll
see and uh what we do
is I don't like doing nodes like this
is I don't like doing nodes like this
actually I think think it should be nnn
actually I think think it should be nnn
and N
and N
right that's
right that's
easier yeah nnn and N so it's going to
easier yeah nnn and N so it's going to
be
be
like you know X1 y1 or like y1 X1 Y2 X2
like you know X1 y1 or like y1 X1 Y2 X2
something like
that
that
for what did we do X and
for what did we do X and
Y we'll do R in range of n or C in range
Y we'll do R in range of n or C in range
of n and we'll do uh path we'll do uh
of n and we'll do uh path we'll do uh
breath for search grid Paths
of row and
call and then a row comma
call and then a row comma
call that's
call that's
good Cent
good Cent
paths breath first
paths breath first
search oh is this just going to do it
search oh is this just going to do it
for me
I don't like that this is recursive
I don't like that this is recursive
that's
that's
stupid actually I think that's not just
stupid actually I think that's not just
stupid I think that's wrong breath first
stupid I think that's wrong breath first
search should not be a recursive
algorithm
algorithm
right can breath first no breath first
right can breath first no breath first
search shouldn't even be able to be
search shouldn't even be able to be
recursive
recursive
right did it just Implement depth first
right did it just Implement depth first
search and call it breath first search
it totally did
right I'm not dumb here right this
is I just saw a tweet today by the way
is I just saw a tweet today by the way
that's like hey next year the math
that's like hey next year the math
Olympiad winner is going to be a
Olympiad winner is going to be a
language
model maybe we should start by teaching
model maybe we should start by teaching
it a first year computer
it a first year computer
science that might be better thing to
science that might be better thing to
do okay so if the grid is zero then we
do okay so if the grid is zero then we
return no wait zero
one one is obstacle right
okay and then what we do
is hold
is hold
on I'm getting confused by how I I want
on I'm getting confused by how I I want
to implement this now
[Music]
the nice thing with breath first search
the nice thing with breath first search
is it's always
is it's always
efficient so the frontier is always the
efficient so the frontier is always the
shortest
path
path
H we're exposing today how truly bad I
H we're exposing today how truly bad I
am at algorithms problems in elak code
am at algorithms problems in elak code
style
crap so this is going to take me an
crap so this is going to take me an
embarrassing L long time but uh I think
embarrassing L long time but uh I think
the final result will be nice
so there is a lot of redone U of work
so there is a lot of redone U of work
being recomputed
here but essentially what I want to pass
here but essentially what I want to pass
is I want breath for search to pass
is I want breath for search to pass
the first action that you took so the
the first action that you took so the
first direction that you went
in so that whenever you get to a new
in so that whenever you get to a new
node you fill in you fill in the table
node you fill in you fill in the table
with the the direction that you took
with the the direction that you took
initially from the first step to get to
initially from the first step to get to
that node does that make sense so
that node does that make sense so
like when you pathfind from a specific
like when you pathfind from a specific
starting point
starting point
the only thing that we care about is the
the only thing that we care about is the
first action that you
first action that you
took
took
yeah that makes sense
so
God for
I think that you have to
I think that you have to
enq the first four
enq the first four
moves right you have to enue the first
moves right you have to enue the first
four
four
moves
so it's going to be like move up
so it's going to be like move up
equals
equals
zero uh and then Dr is1
zero uh and then Dr is1
column is zero move down is going to
column is zero move down is going to
be index is
one left is going to
one left is going to
be
be
[Music]
[Music]
01 then move right so this is going to
01 then move right so this is going to
be these are your first
be these are your first
actions I was actually excited to do
actions I was actually excited to do
this today I have no idea why it was
this today I have no idea why it was
because I'm terrible at these types of
because I'm terrible at these types of
problems um but it's going to be real
problems um but it's going to be real
cool and it works this is going to be
cool and it works this is going to be
like ludicrously fast
pathing
so you have to enq all of these I
believe and
believe and
also we're not going to be able to use
also we're not going to be able to use
this data structure
this data structure
right we're not going to be able to use
right we're not going to be able to use
this data
structure we'll do it this way for now
structure we'll do it this way for now
though just to test it we're going to
though just to test it we're going to
have to replace this with like numpy Ray
so while
Q move is going to be q.
pop the new position that you're going
pop the new position that you're going
to go to is the
to go to is the
original
original
plus like
plus like
this and
this and
uh does this give you a stack or a q
uh does this give you a stack or a q
wait I think it's a stack by default
wait I think it's a stack by default
right
yeah that's not a that's a
yeah that's not a that's a
stack by
stack by
default so we're going to have to do
default so we're going to have to do
something because this will be depth for
something because this will be depth for
search but we can we can shift it around
search but we can we can shift it around
a little
a little
bit
um we'll just have to prepend okay
um we'll just have to prepend okay
that's fine
does python actually treat them
does python actually treat them
differently treat what differently stack
differently treat what differently stack
and
Q uh we're using a list and lists work
Q uh we're using a list and lists work
as
as
Stacks right if you
append obviously stacks and q's have
append obviously stacks and q's have
different methods well this is neither
different methods well this is neither
this is just a list you can use a list
this is just a list you can use a list
in python as a stack just by default
in python as a stack just by default
because it has fast depends and fast
because it has fast depends and fast
pops well fast for python right but you
pops well fast for python right but you
can do like a. append or and then a. pop
can do like a. append or and then a. pop
and a stack order right but then if you
and a stack order right but then if you
want to do it as a lit like it's not
want to do it as a lit like it's not
fast if you want to use it as a q
fast if you want to use it as a q
doesn't matter it's all slow because
doesn't matter it's all slow because
it's python right but you have to do a
it's python right but you have to do a
equals
equals
like you know four plus a
like you know four plus a
right and now this is a
q okay
interesting so it makes inferences about
interesting so it makes inferences about
what no it doesn't make any inferences
what no it doesn't make any inferences
whatsoever we're
whatsoever we're
just it it's just the fact that lists
just it it's just the fact that lists
have like this is not a stack or a que
have like this is not a stack or a que
it's a list right and the way that the
it's a list right and the way that the
list structure is implemented relatively
list structure is implemented relatively
for python it has o of one I believe o
for python it has o of one I believe o
of one appens and O of one pop from the
of one appens and O of one pop from the
end of the list so that's what you need
end of the list so that's what you need
for a stack right is that you append and
for a stack right is that you append and
then you pop you get that same element
then you pop you get that same element
it's fifo uh if you want to do a q you
it's fifo uh if you want to do a q you
have to when you add elements you have
have to when you add elements you have
to add them to the start and that is a
to add them to the start and that is a
slow operation python does have cues and
slow operation python does have cues and
stuff built in that we could use that
stuff built in that we could use that
would just give this us this anyways but
would just give this us this anyways but
in reality we're going to end up using a
in reality we're going to end up using a
numpy array anyways for all of this
numpy array anyways for all of this
because these oper are not scon and we
because these oper are not scon and we
have to process uh 200 some odd million
have to process uh 200 some odd million
elements so I don't want to wait for
elements so I don't want to wait for
python to do that and syon is
fun okay so if the grid is
fun okay so if the grid is
blocked then we continue
otherwise yeah I'm following now I
otherwise yeah I'm following now I
thought pop was
thought pop was
taking out
taking out
elements from the other end and then
elements from the other end and then
when you appended it swapped to the oh
when you appended it swapped to the oh
no no no yeah no it's not that
smart so
I think this is it right R2 C2
yeah technically the way we're doing
yeah technically the way we're doing
this now if you click on an obstacle
this now if you click on an obstacle
it's not going to
work but don't click on obstacles
work but don't click on obstacles
right
right
well maybe we could fix that doesn't
well maybe we could fix that doesn't
scon work with
scon work with
deck if it does that's news to me I
deck if it does that's news to me I
don't think so
don't think so
I'm pretty sure that list and decks and
I'm pretty sure that list and decks and
all the python data types will not be
all the python data types will not be
accelerated we're going to end up having
accelerated we're going to end up having
to what we're going to end up doing is
to what we're going to end up doing is
I'm going to just allocate a big numpy
I'm going to just allocate a big numpy
array and we're just going to
array and we're just going to
like we're going to add stuff into it
like we're going to add stuff into it
and then read stuff from the other
side I breath for search I think is is
side I breath for search I think is is
pretty easy to
pretty easy to
implement that way you just pre-allocate
implement that way you just pre-allocate
a big buffer of uh however many elements
a big buffer of uh however many elements
that you need right and you keep a
that you need right and you keep a
pointer to where you've written them and
pointer to where you've written them and
you just keep writing down into the
you just keep writing down into the
array it it's pretty easy to implement
array it it's pretty easy to implement
your own uh your own Q structure so
your own uh your own Q structure so
that's probably what we're going to
that's probably what we're going to
do okay so we set the grid to be the
do okay so we set the grid to be the
action so what we're saying is that if
action so what we're saying is that if
you're starting in at RNC and you want
you're starting in at RNC and you want
to get to this new position then the
to get to this new position then the
first move that you take is action right
EC
EC
down
down
[Music]
[Music]
uhhuh and then we
uhhuh and then we
append move up does this do
it we're obviously we're going to have
it we're obviously we're going to have
to like draw this on a grid or something
to like draw this on a grid or something
to see if it
works this is actually so critical to
works this is actually so critical to
the code that I don't and this is kind
the code that I don't and this is kind
of a fun project so I don't mind
of a fun project so I don't mind
spending a little bit of time on this
spending a little bit of time on this
today so we might we might even make
today so we might we might even make
like a cool little demo with
that actually I wrote a renderer over
that actually I wrote a renderer over
the weekend that'll be perfect for this
the weekend that'll be perfect for this
so This actually shouldn't even be hard
so This actually shouldn't even be hard
to make a cool demo
and I think this is literally
it so
um RC
let's start
with let's start with from Z 0
right so that we just run this
right so that we just run this
once and
um how are we going to do this then
so let's say
that I think we can do this even more
that I think we can do this even more
cleanly let's just write a little test
cleanly let's just write a little test
function so we'll do
function so we'll do
test BFS
test BFS
right and this will just take
right and this will just take
grid and then this will take R1 C1
grid and then this will take R1 C1
R2
R2
C2 then we'll do
C2 then we'll do
N grid.
N grid.
Shape uh and then we'll
Shape uh and then we'll
do paths equal not this we only need
do paths equal not this we only need
this one we only need a 2d one
and then we do breath birst
and then we do breath birst
search from
search from
there and then what we do
is now we have to draw it right
so we'll just
do while the points are not the
do while the points are not the
same loved your thesis defense used as
same loved your thesis defense used as
an
an
inspiration for
inspiration for
my Viva
my Viva
not sure what that is but thank you
not sure what that is but thank you
appreciate the
appreciate the
support um we're doing some cool high
support um we're doing some cool high
performance well not yet at the moment
performance well not yet at the moment
very low performance but in a few hours
very low performance but in a few hours
very very high performance pathfinding
very very high performance pathfinding
for this new Mobis Sim I'm working on
for this new Mobis Sim I'm working on
for
RL it's like what if we had DOTA but it
RL it's like what if we had DOTA but it
ran at a million steps per second
okay
okay
so while the destination is not the
so while the destination is not the
start then what we do
start then what we do
is undergraduate the assist fense okay
is undergraduate the assist fense okay
cool yeah
cool yeah
um it's going to get a lot easier to
um it's going to get a lot easier to
work in this space soon as well
work in this space soon as well
like it's going to get a lot easier to
like it's going to get a lot easier to
do work in this space because we're
do work in this space because we're
going to have a lot of these simulations
going to have a lot of these simulations
I'm working on building them they're
I'm working on building them they're
going to be way way way faster than ever
going to be way way way faster than ever
before and they're going to be way way
before and they're going to be way way
way simpler than ever before it's just
way simpler than ever before it's just
going to be all good things all
around so what would we do we do bre for
around so what would we do we do bre for
search right
yeah so we do action equals grid of
R
um is it possible to make a model that
um is it possible to make a model that
can be able to scrap through out the
can be able to scrap through out the
scrape the internet to get information
scrape the internet to get information
about any person
about any person
just by showing his
just by showing his
image is it possible yes am I going to
image is it possible yes am I going to
help you make a doxing tool no
I think I did this kind of weird didn't
I think I did this kind of weird didn't
I
I
[Music]
well yeah cuz I can't actually get the
well yeah cuz I can't actually get the
optimal path from
this yeah right because it's it's from
this yeah right because it's it's from
the starting point so you can't get the
the starting point so you can't get the
optimal path uh from just one call to
optimal path uh from just one call to
breath ver search the way I've
breath ver search the way I've
implemented it but you can get the
implemented it but you can get the
vector field so let's just get the
vector field so let's just get the
vector field instead
is it ethical to
do I mean it's just like that's clearly
do I mean it's just like that's clearly
a thing that would be very very heavily
a thing that would be very very heavily
abused right yeah you can think of a
abused right yeah you can think of a
bajillion instances for like a thing to
bajillion instances for like a thing to
use that like would be fine for that but
use that like would be fine for that but
that's just
like I mean that leads more heavily
like I mean that leads more heavily
towards missiles than you know rocket
towards missiles than you know rocket
ships to the Moon right
and mind you I'm not usually somebody
and mind you I'm not usually somebody
who cares a ton about dual use
who cares a ton about dual use
either like generally if I see an
either like generally if I see an
application that has a ton of potential
application that has a ton of potential
for misuse but can also do a bunch of
for misuse but can also do a bunch of
good stuff I'll be very much in the camp
good stuff I'll be very much in the camp
of building it that one seems like very
of building it that one seems like very
obviously like like I can't even think
obviously like like I can't even think
of that many good things that you would
of that many good things that you would
want to do with that
okay so we can't build this this way we
okay so we can't build this this way we
need to
need to
do we need to draw a vector field
right ah let's just like draw Vector
right ah let's just like draw Vector
field right
so obnoxious how this thing
so obnoxious how this thing
is we have to write a little rib render
is we have to write a little rib render
now don't
we yeah we totally have to write a ray
we yeah we totally have to write a ray
vectorfield renderer
vectorfield renderer
right that's
obnoxious well it doesn't have to be
obnoxious well it doesn't have to be
fast so that's not that bad
right e
yeah Vector field is in every grid on
yeah Vector field is in every grid on
the map shows an arrow towards the
the map shows an arrow towards the
destiny yeah like something like that
destiny yeah like something like that
this is just a very like this is just
this is just a very like this is just
one of those cases where like I could
one of those cases where like I could
YOLO it and just try to like run this
YOLO it and just try to like run this
but it's very likely that I'll have
but it's very likely that I'll have
messed this up and it's going to take me
messed this up and it's going to take me
a while
right so let's just do give it the
grid oh
grid oh
16 pathf finding from every node
16 pathf finding from every node
possible yeah exactly
that this would not be considered very
that this would not be considered very
smart this would be considered me taking
smart this would be considered me taking
10 times longer than is needed on entry
10 times longer than is needed on entry
level Elite code
level Elite code
[ __ ]
[ __ ]
um unfortunately I know how to I know
um unfortunately I know how to I know
how to build lots of cool things I do
how to build lots of cool things I do
not know how to solve tricky problems
not know how to solve tricky problems
quickly that is not something I am good
at so
I mean the strategy to test an isolation
I mean the strategy to test an isolation
instead of integr yeah
instead of integr yeah
yeah and I don't usually write tests I
yeah and I don't usually write tests I
don't usually write like the isolated
don't usually write like the isolated
test this is one of the things where
test this is one of the things where
like you have to you got to test it and
like you have to you got to test it and
you not only have to test it you have to
you not only have to test it you have to
visualize it
I get to show this off now because we're
I get to show this off now because we're
going to use some of this code I wrote
going to use some of this code I wrote
this over the weekend it's really
this over the weekend it's really
cool so I wrote this puffer lib Ray
cool so I wrote this puffer lib Ray
renderer
Advent of code every year and
Advent of code every year and
pathfinding always screws me
pathfinding always screws me
over I mean basically
over I mean basically
anything any tricky algorithms problem
anything any tricky algorithms problem
that's unintuitive and that is only done
that's unintuitive and that is only done
quickly by people grinding leite code
quickly by people grinding leite code
will screw me over because I don't grind
will screw me over because I don't grind
elak
elak
code never
have like you can't you cannot say that
have like you can't you cannot say that
these things are intuitive they simply
these things are intuitive they simply
are not
so let's see if this works I'll get just
so let's see if this works I'll get just
show off the render that I made this
weekend okay
weekend okay
so this thing right looks very similar
so this thing right looks very similar
to the one from before doesn't it boom
to the one from before doesn't it boom
we've got Zoom we've got fast Zoom we've
we've got Zoom we've got fast Zoom we've
got
got
pan we've got a little help menu if I
pan we've got a little help menu if I
hit tab that shows FPS and
stuff excuse me are you suggesting that
stuff excuse me are you suggesting that
there are more valuable uses of your
there are more valuable uses of your
time
absolutely like making ridiculous mobas
absolutely like making ridiculous mobas
and renderers for them so this is a nice
and renderers for them so this is a nice
little thing right little smooth pan and
little thing right little smooth pan and
zoom thing quits on Escape here's the
zoom thing quits on Escape here's the
source here's the source code right
source here's the source code right
here that's it just this one little
here that's it just this one little
block
block
here it's pretty
nice pause and then over a node to see
nice pause and then over a node to see
the
the
stats that would be cool that would be
stats that would be cool that would be
substantially more work
I think we can just use this thing and
I think we can just use this thing and
add some code
right so
well this is wrong it should just be
well this is wrong it should just be
grid. shape it's completely wrong
grid. shape it's completely wrong
actually do shape one grid. shape zero
actually do shape one grid. shape zero
and then tile size here with equal grid.
shape oh my gosh this is so bad the way
shape oh my gosh this is so bad the way
that this is width
that this is width
height tile size
Times Really wonky
suggestions okay there we go that's the
suggestions okay there we go that's the
client
client render self. grid
right
right
okay let's start with
this and then what we're going to do is
this and then what we're going to do is
we're just going to add the vector field
we're just going to add the vector field
underneath it
what happened down
what happened down
there
there
oops oh yeah this is garbage we don't
oops oh yeah this is garbage we don't
need this
obviously we need to do
obviously we need to do
uh we need to put some data in here
uh we need to put some data in here
don't
we why don't
we why don't
we let's load up like a crop of the the
we let's load up like a crop of the the
DOTA map
let's load up a crop of the DOTA
let's load up a crop of the DOTA
map that'll be
fun so here's your DOTA map right
here game map path is just going to
here game map path is just going to
be uh
be uh
open go to map don't need this
open go to map don't need this
and then this is going to be
of I don't like how this
looks
say uh was it
32 yeah yeah yeah
16 BFS takes
well this is called stuck in a while
well this is called stuck in a while
loop I guarantee
you yep that's stuck in a while loop so
you yep that's stuck in a while loop so
that's infinitely looping code which is
wonderful ah right so this
wonderful ah right so this
um this array that we make this needs
um this array that we make this needs
Sentinels so we're going to put this as
Sentinels so we're going to put this as
NE uh Zer minus one and then we're going
NE uh Zer minus one and then we're going
to
to
say uh if
say uh if
grid is not is uh equal
grid is not is uh equal
to1 then you
to1 then you
continue and this is why we test what is
continue and this is why we test what is
the current state of the project the
the current state of the project the
current state of the project object
is pretty
good oops I forgot I have keyboard not
good oops I forgot I have keyboard not
Mouse control so you've got your creep
Mouse control so you've got your creep
waves fighting they fight each other
waves fighting they fight each other
reasonably they attack Towers you got
reasonably they attack Towers you got
your three lanes you've got Heroes the
your three lanes you've got Heroes the
heroes aren't doing much they're kind of
heroes aren't doing much they're kind of
chilling at spawn I wrote this little
chilling at spawn I wrote this little
renderer over the weekend it is playable
renderer over the weekend it is playable
as well though I think I might have
as well though I think I might have
broken a few things we'll
see oh it looks
see oh it looks
good some improvements to be made here
good some improvements to be made here
but this is the current state of the
but this is the current state of the
project I will save you puffers
here and now we attack we take the T
and I
and I
die not bad for one week of work
right I'm very happy with the
progress a
apparently ah this is not supposed to be
apparently ah this is not supposed to be
R is this supposed to be
R is this supposed to be
R2
R2
wait
grid yes this is supposed to be
this is supposed to be
this is supposed to be
paths equal to this and then this is
paths equal to this and then this is
also suppos path is equal to
this this thing is evidently still
this this thing is evidently still
looping
140,000 yeah that's too big
140,000 yeah that's too big
so what do RNC
so what do RNC
represent this is the uh the starting
represent this is the uh the starting
position you breath for search from a
position you breath for search from a
starting
starting
position so
let me see how this works so you
add action is move of
zero you add these
in you pop from the
in you pop from the
Q well first of all this Q append is
Q well first of all this Q append is
wrong remember remember I said this had
wrong remember remember I said this had
to be breath first search so this should
to be breath first search so this should
actually
be this should be plus
be this should be plus
Q do you need to be tracking visited
Q do you need to be tracking visited
nodes right
here oh wait if it's equal to negative 1
here oh wait if it's equal to negative 1
this should be not equal to Nega 1
okay that actually breath bir
okay that actually breath bir
searched that breath first searched
searched that breath first searched
correctly now but it did it uh quit very
correctly now but it did it uh quit very
soon unexpected keyword tile
size tile
size unexpected
keyword Rd renderer does not take a tile
keyword Rd renderer does not take a tile
size at
size at
all uh I don't know how this happened
all uh I don't know how this happened
actually didn't I do the signature
actually didn't I do the signature
correctly
before should be like
this
boom index
boom index
255 is out of bounds with for a is
255 is out of bounds with for a is
zero super Maven got you and you were
zero super Maven got you and you were
talking so you didn't notice
talking so you didn't notice
yep am I on the Pro Plan here by the
yep am I on the Pro Plan here by the
way
uh what is it
plug plug was it
upgrade I don't know what's the
upgrade I don't know what's the
versioning thing
plug
update super Maven got
updated okay maybe it's better now I
updated okay maybe it's better now I
don't
know we'll see super May Pro is
running self.
running self.
colors of
colors of
grid what do I have on the grid though
grid what do I have on the grid though
hold on maybe I I just have something
hold on maybe I I just have something
dumb
here
here
0255 let's see so game map
there
there
boom
aha so this is
inverted yeah
inverted yeah
yeah hell yeah look at
yeah hell yeah look at
this we've got our little
render and now we can uh we can do some
render and now we can uh we can do some
breath bir search let's do zero
breath bir search let's do zero
zero and uh 31 31 that's pretty good
zero and uh 31 31 that's pretty good
right or no it's 60 we did 60 so it
right or no it's 60 we did 60 so it
should be 63 63 Maybe
oh uh wait no you're still dumb aren't
oh uh wait no you're still dumb aren't
you
because oh R2 and C2 don't get used
because oh R2 and C2 don't get used
obviously um so this doesn't even
obviously um so this doesn't even
matter but how
matter but how
uh feeling very very
quickly so if the paths is not equal to1
quickly so if the paths is not equal to1
and
continue okay
continue okay
so we get
so we get
R2 1
0 paths is equal to 2
0 paths is equal to 2
55 ah we made it a u
55 ah we made it a u
8 a u 8 is not
good so paths will have to
good so paths will have to
be plus 255 will have to be our
sentinel oh
sentinel oh
that looks
nice look at that we got all sorts of
nice look at that we got all sorts of
stuff very
nice though it doesn't seem to be
nice though it doesn't seem to be
correct but at least we have some
values so now we got to draw some arrows
so we do r
equal uh grid. shape of zero C is equal
equal uh grid. shape of zero C is equal
to this I don't know what it just even
to this I don't know what it just even
tried to fill in here this is
tried to fill in here this is
garbage um we need self. to
garbage um we need self. to
size TI size
right and we do uh self du
paths okay and we need to do a draw
paths okay and we need to do a draw
Arrow rayb draw
Arrow rayb draw
Arrow do we have
shapes we can do triangles right
mildly obnoxious that we have to do it
mildly obnoxious that we have to do it
this way but
this way but
um this is correct
right
oops okay
so mildly difficult
there's no draw Arrow function I guess
there's no draw Arrow function I guess
there wouldn't be
right so this is going to
right so this is going to
be so it's going to
be so it's going to
be X+
damn it this is actually hard isn't
it
TS okay so the positions
TS okay so the positions
we need to
do so X Plus Ts over
do so X Plus Ts over
two and then Y is going to be the same I
two and then Y is going to be the same I
think
think
right and then it's going to
be x
be x
+
+
three y+ tile size oh yeah this is a
three y+ tile size oh yeah this is a
triangle right x +
triangle right x +
2/3
yeah
pause one now this position has to be uh
pause one now this position has to be uh
down so it's going to
be does this actually have it
right do I trust super
right do I trust super
Maven no idea if I trust super Maven
Maven no idea if I trust super Maven
but
uh let's
do does it have a built-in rotate
do does it have a built-in rotate
function it does but it has it for
function it does but it has it for
textures I believe
so we're going to do r. draw
so we're going to do r. draw
triangle and we're not going to do
triangle and we're not going to do
colors. Violet we're going to give it
colors. Violet we're going to give it
like a reasonable color which why don't
like a reasonable color which why don't
we use the
we use the
uh oh it's I think 178 is puffer color
uh oh it's I think 178 is puffer color
so R
so R
178 178 255 I think this is our
178 178 255 I think this is our
color puffer
color and of course we also have to do a
color and of course we also have to do a
r begin
r begin
draw begin
draw begin
drawing clear
drawing clear
background no we don't clear the
background no we don't clear the
background we have to leave the
background we have to leave the
background let's see if this does
background let's see if this does
anything
well this is not quite what we
well this is not quite what we
intended it's very
flickery I would love to know why it's
flickery I would love to know why it's
very
flickery it's kind of
cool can I begin drawing twice what if I
cool can I begin drawing twice what if I
do it here
nope still
flickers no it has a frame rate but it
flickers no it has a frame rate but it
should batch
should batch
everything at least I would think it
everything at least I would think it
should batch everything we can give it a
should batch everything we can give it a
different frame rate
well now it does
this oh I guess it's
this oh I guess it's
um that's weird
well I know why I know why it's
well I know why I know why it's
happening it's because it's the draw
happening it's because it's the draw
calls there's an end drawing call in the
calls there's an end drawing call in the
renderer before
this so apparently it flushes after end
drawing right
the
annoying I mean for now I can just patch
annoying I mean for now I can just patch
this
this
right I can just
do we can just do like
this that's
right and now it doesn't flicker
anymore which is
anymore which is
cool and uh we can also we can just not
cool and uh we can also we can just not
have the FPS be
have the FPS be
garbage which will be nice for being
garbage which will be nice for being
able to play with
this but unfortunately I didn't remember
this but unfortunately I didn't remember
to scale this
so was it scaled right at the start
though yeah it should be scaled
though yeah it should be scaled
correctly at the start
right yeah
more or
more or
less let's figure out why the pathf
less let's figure out why the pathf
finding is
wonk so though
if
grid if the grid is zero then what we do
grid if the grid is zero then what we do
is you set the paths
is you set the paths
to
to
five set it to
five set it to
five you
five you
continue do
anything cannot access local variable
anything cannot access local variable
pause
continue now it doesn't draw anything
again other way around
again other way around
maybe oh there we
maybe oh there we
go it looks like I'm offset a little bit
go it looks like I'm offset a little bit
but uh this is what we want right very
but uh this is what we want right very
close do
close do
it why are we offset one tile
again I think why we're offset a
again I think why we're offset a
tile so this is if it's
up X Plus tile size
Y X Plus TI size over
Y X Plus TI size over
three plus tile
size what are the RB
cords I don't know why it's offset like
cords I don't know why it's offset like
this it's
weird well figure that out in a
weird well figure that out in a
moment can we figure out why um it's all
moment can we figure out why um it's all
facing
up so we have this Q right H pop
zero oh wait we can totally yeah if we
zero oh wait we can totally yeah if we
do pop zero like this we can totally use
do pop zero like this we can totally use
this as a q so we can do Q
this as a q so we can do Q
dot append move up move down move left
dot append move up move down move left
and move right like
this still doesn't give us any unique
this still doesn't give us any unique
actions so very
weird definitely should
hold
on yeah
so let's see it's going to give us
so action is
one why is action
one that's kind of weird already isn't
it one one and Z what happened to move
it one one and Z what happened to move
up
oh well you can't move up
oh well you can't move up
obviously because you're in the
obviously because you're in the
corner so that's actually
correct so we're left
with move down and then move to the
with move down and then move to the
right yeah that's
right yeah that's
correct so what
happens okay the path is equal to action
happens okay the path is equal to action
right
move up down left
move up down left
right get
appended and now you have move left
wait you have move
left that doesn't sound
right q.
right q.
POP Hold
on so here's your Q
on so here's your Q
right move
so the move
so the move
is
is
one one and
zero and then it's going to go through
zero and then it's going to go through
move left and we should end up at move
right we do end up at move right three Z
right we do end up at move right three Z
and one
okay the path ends up being
action so that actually looked good to
action so that actually looked good to
me let's see how the path looks after we
me let's see how the path looks after we
have computed the path
here we can actually just do that right
here we can actually just do that right
uh right here so let's see what our path
uh right here so let's see what our path
looks like
ah we do actually have various symbols
ah we do actually have various symbols
here I see a couple threes at the
here I see a couple threes at the
top okay and three should be moved to
top okay and three should be moved to
the right so if action is equal to three
the right so if action is equal to three
maybe our draw function is wrong let me
maybe our draw function is wrong let me
see so the draw function for a move to
see so the draw function for a move to
the right yeah this is totally wrong
the right yeah this is totally wrong
right this should
right this should
be X
and then this should
and then this should
be still
be still
x y + tile
x y + tile
size 3 so 2 * tile size over
size 3 so 2 * tile size over
three right and then we should have uh
three right and then we should have uh
the last corner of the triangle should
the last corner of the triangle should
be X Plus tile
be X Plus tile
size and then y plus pile size over two
size and then y plus pile size over two
so this should be your correct
triangle Ah that's better so it's not
triangle Ah that's better so it's not
perfect yet but
perfect yet but
look we see we have some triangle going
look we see we have some triangle going
on here something is is reasonable over
on here something is is reasonable over
here uh
here uh
so let's maybe fix the
so let's maybe fix the
remainder of these
triangles so zero should be pointed down
triangles so zero should be pointed down
right so for a down
right so for a down
triangle X Plus TI
triangle X Plus TI
size well this is these are
size well this is these are
flipped let's see if this
better okay so this is now in the
better okay so this is now in the
correct position but it's still flipped
correct position but it's still flipped
let's see what's wrong with our uh our
let's see what's wrong with our uh our
zero
triangle uh it's that super M completely
triangle uh it's that super M completely
got it wrong
got it wrong
okay
okay
so X Plus to size over
two
two
why
why
wait yeah this is just completely bogus
wait yeah this is just completely bogus
right yeah so this is X Plus to size
right yeah so this is X Plus to size
over three
over three
Y X plus two times T it's not that hard
Y X plus two times T it's not that hard
really and then y
really and then y
then X
then X
Plus TI size over
Plus TI size over
two and then
two and then
y plus to
size do I still have this stupid thing
size do I still have this stupid thing
upside
upside
down I still have it upside down don't
down I still have it upside down don't
I um
am I crazy or should this be a down a
am I crazy or should this be a down a
downfacing
arrow unless the coordinate system is
arrow unless the coordinate system is
backwards which doesn't appear to
be this is where we're drawing isn't
be this is where we're drawing isn't
it oh apparently not thought that this
it oh apparently not thought that this
was what the uh the action
were the heck are the
actions oh one is
down maybe
now what
now what
happened what happened
happen X Plus tile size over 3 Y X + 2 *
happen X Plus tile size over 3 Y X + 2 *
TI size over
TI size over
Y what the heck happened here
five so wait this is XY so it's 5
five so wait this is XY so it's 5
10 and then 8 and six this looks like a
10 and then 8 and six this looks like a
valid triangle to
me uh Why is drawing shapes this hard
me uh Why is drawing shapes this hard
is
is
ridiculous should not be this
hard is it somehow the rounding
no you don't it's not closed this should
no you don't it's not closed this should
be
fine how' I do it for this
fine how' I do it for this
one is there like a rule of like the
one is there like a rule of like the
order you have to draw them in or
order you have to draw them in or
something like that like maybe you have
something like that like maybe you have
to draw them around like the the right
way I I bet you have to like draw them
way I I bet you have to like draw them
around the right
around the right
way vertex in clock in
way vertex in clock in
counterclockwise yeah that it was it's
counterclockwise yeah that it was it's
literally this so it's counterclockwise
literally this so it's counterclockwise
order so you have to go around the other
order so you have to go around the other
way so it's got to
way so it's got to
be uh 2 * tile size over
be uh 2 * tile size over
three TI size over
three well if you think of about it it's
three well if you think of about it it's
got to know how to
got to know how to
shade I mean I was it's I was correct
shade I mean I was it's I was correct
look it's literally the thing I just
look it's literally the thing I just
said right
so the obnoxious thing is I can't even
so the obnoxious thing is I can't even
tell you if this is wrong or
tell you if this is wrong or
not
right because remember this is drawing
right because remember this is drawing
the
the
um the first move
okay yeah this is probably actually
okay yeah this is probably actually
correct because the thing is this is the
correct because the thing is this is the
first move what it's drawing is that is
first move what it's drawing is that is
for every position on the map it's
for every position on the map it's
drawing the first move that you would
drawing the first move that you would
take from the origin to get there
right so yeah all of the other positions
right so yeah all of the other positions
except the ones at the top you can see
except the ones at the top you can see
that you have to go directly right if if
that you have to go directly right if if
you want to go directly right but the
you want to go directly right but the
other ones are all
other ones are all
like
yeah uh I could give it a better
yeah uh I could give it a better
starting position
maybe where would like a cool place to
maybe where would like a cool place to
start this
be I don't know I'll start in the middle
be I don't know I'll start in the middle
and see what it does
Okay cool so if you start it in the
Okay cool so if you start it in the
middle uh which is like right here is I
middle uh which is like right here is I
think a couple of these being empty is
think a couple of these being empty is
weird
but you start it in the
middle I don't know exactly where you
middle I don't know exactly where you
start
start
it let's actually let's uh let's draw a
it let's actually let's uh let's draw a
red square on that
and let's just
do yeah red rectangle to
start okay
so little awkward that
it's I don't know what's happening on
it's I don't know what's happening on
the left
the left
here oh probably just our left facing
here oh probably just our left facing
triangle is drawn wrong
triangle is drawn wrong
right yeah probably our left facing
right yeah probably our left facing
triangle is uh is just drawn wrong
which is which one
two so our left facing triangle
two so our left facing triangle
is you start
is you start
counterclockwise so let's do
counterclockwise so let's do
x y + tile size over 3
x y + tile size over 3
yeah we just have to flip
these
Graphics
yeah
yeah
awesome almost
there uh I would like to
there uh I would like to
change i' would like the initial
change i' would like the initial
position to be
position to be
empty so let's do that let's do
and this should be we'll set this equal
and this should be we'll set this equal
to
to
five uh which is our
KN and then let's
KN and then let's
see okay perfect so
yeah this is correct Now isn't
it this looks like a valid breath for a
it this looks like a valid breath for a
search so you have to remember this is
search so you have to remember this is
not the vector field pointing towards
not the vector field pointing towards
the Target right this is uh for every
the Target right this is uh for every
Target position on the map this is if I
Target position on the map this is if I
start at the center what is the first
start at the center what is the first
move I should make to get to that Target
and I think that this works so okay what
and I think that this works so okay what
we're going to do next is we're going
we're going to do next is we're going
to optimize this in Python first such
to optimize this in Python first such
that it will be easy toonize then we're
that it will be easy toonize then we're
going toonize it then we're going to get
going toonize it then we're going to get
the actual maps that we care
the actual maps that we care
about let's do
that and we'll also rethink a couple
that and we'll also rethink a couple
little data structures uh along the way
little data structures uh along the way
but I think that I have it correct at
but I think that I have it correct at
the moment even though it makes it more
the moment even though it makes it more
Awkward to draw I think it's going to be
Awkward to draw I think it's going to be
easier to use I'll be back in a minute
easier to use I'll be back in a minute
and then we'll set we'll work on
this
e e
okay
so it's occurring to me that we might be
so it's occurring to me that we might be
able to index a little
able to index a little
differently so right now I have it start
differently so right now I have it start
position it's start row start call end
position it's start row start call end
end row end
end row end
call what would happen if I tried to
call what would happen if I tried to
compute this
compute this
as end row end call comma start row
as end row end call comma start row
start call what happens then
I have to slightly rewrite this then cuz
I have to slightly rewrite this then cuz
the breath for search has to start from
the breath for search has to start from
the
the
destination and it has to go to the the
destination and it has to go to the the
starting
position that means though that a single
position that means though that a single
breath for search call gets me the uh
breath for search call gets me the uh
the optimal path to a Target which is
the optimal path to a Target which is
more reasonable and it should be better
more reasonable and it should be better
for cash coherency as well because
for cash coherency as well because
otherwise you're um you always want to
otherwise you're um you always want to
keep the first you know indices or
keep the first you know indices or
whatever the same if you can and you
whatever the same if you can and you
want the last index to be the variable
want the last index to be the variable
one
so if I do it this way then the desk row
so if I do it this way then the desk row
desk call always stay the same so I
desk call always stay the same so I
think it's better for cash coherency and
think it's better for cash coherency and
it's better for
visualization because it makes a lot
visualization because it makes a lot
more sense
more sense
right if you think about it as you have
right if you think about it as you have
a map that tells you how to get to every
a map that tells you how to get to every
position rather than you have a map that
position rather than you have a map that
tells you the move that you make at any
tells you the move that you make at any
given position
given position
to get you to the next position that's
to get you to the next position that's
closest yeah that's way better so let's
closest yeah that's way better so let's
refactor it like that then do the then
refactor it like that then do the then
we'll get a good Vector map that'll be
we'll get a good Vector map that'll be
cool to look at I can post that
cool to look at I can post that
online
um
yeah
e for
this is gross
code this should be start
code this should be start
R start C so we do backwards breath
R start C so we do backwards breath
resarch let's actually break it out as
well because you can't do multiple lines
well because you can't do multiple lines
you can't multiple line it like this in
syon okay and now we do
if
continue start R if it's not
continue start R if it's not
empty start
empty start
R start R is
R start R is
five Paths of start r it's going to be
action and
um now we have to flip these values
um now we have to flip these values
don't
we I think this is going to be backwards
we I think this is going to be backwards
we're going to see
yep so these are now backwards it looks
like worse than
backwards so let's first of all we'll
backwards so let's first of all we'll
flip
these now it should Point towards the
these now it should Point towards the
target so this is how you get to the the
target so this is how you get to the the
Target
Target
right uh and now instead of making it
right uh and now instead of making it
the first
the first
move we're going to put
action say
action say
zero 1
zero 1
three you know I don't know why we uh we
three you know I don't know why we uh we
worry so much about this this is really
worry so much about this this is really
just
easy I don't know why we worry about
easy I don't know why we worry about
pathf finding it's uh it's easy
right now
right now
um there's one minor little issue with
um there's one minor little issue with
this right
this right
which is that
which is that
technically well first of all these it
technically well first of all these it
gives you this really wonky pathing like
gives you this really wonky pathing like
this because it doesn't do
this because it doesn't do
diagonals and uh second of all like
diagonals and uh second of all like
these agents can technically move on a
these agents can technically move on a
continuous
grid yeah they can technically move on a
grid yeah they can technically move on a
continuous grid but we can do discreet
continuous grid but we can do discreet
pathf finding right for the creeps let's
pathf finding right for the creeps let's
just um
let's like add diagonals
let's like add diagonals
in
right yeah let's just add in
right yeah let's just add in
diagonals and that should be pretty much
diagonals and that should be pretty much
close enough
close enough
right because if they can just do
right because if they can just do
diagonals then like they should be able
diagonals then like they should be able
to learn do the diagonal and then do the
to learn do the diagonal and then do the
shortest like straight line or something
shortest like straight line or something
they're not going to be able to pathfind
they're not going to be able to pathfind
you know
you know
perfectly not going to be able to
perfectly not going to be able to
pathfind perfectly but it'll look pretty
pathfind perfectly but it'll look pretty
reasonable I would
reasonable I would
say it'll be really
close is that going to look weird
close is that going to look weird
you're going to look weird if they uh
you're going to look weird if they uh
they only move eight
directional I don't think it'll look
directional I don't think it'll look
that
weird a pretty minor limitation
weird a pretty minor limitation
honestly and this is just for scripted
honestly and this is just for scripted
agents as well and creeps that's not a
agents as well and creeps that's not a
problem it's fine this'll look way
problem it's fine this'll look way
cooler let's fix it so
we actually get to make this way simpler
we actually get to make this way simpler
now
now
um because all we have to do
is path is not equal to 255
continue equal to action hold
continue equal to action hold
on I'm trying to figure out a way to not
on I'm trying to figure out a way to not
have to do this logic twice
this is always the obnoxious thing with
this is always the obnoxious thing with
algorithms like this is figuring out how
algorithms like this is figuring out how
to roll the initial condition into the
to roll the initial condition into the
main Loop so you don't have to write it
main Loop so you don't have to write it
twice and have it be
twice and have it be
gross
gross
um let's see so
we can just okay I know how to do it so
we can just okay I know how to do it so
we're going to get rid of this I'd
we're going to get rid of this I'd
say uh we're going to just have the Q be
say uh we're going to just have the Q be
equal to uh
equal to uh
zero z
zero z
z which is the initial position
z which is the initial position
right and then what we're going to do is
right and then what we're going to do is
we're going to set this
we're going to set this
Paths of d r d c at the very end to be
Paths of d r d c at the very end to be
five so we just null that last action
five so we just null that last action
and then what we do is we just uh we pop
and then what we do is we just uh we pop
from the Q we get the action and the
from the Q we get the action and the
Delta start R start
C it's an obstacle set it to five that's
C it's an obstacle set it to five that's
good you set it to be the
action yeah which is fine it doesn't
action yeah which is fine it doesn't
matter and now what we just do is we
matter and now what we just do is we
just append uh lots of things so q.
append so we're going to do action index
append so we're going to do action index
is going to be
is going to be
zero uh this is going to be Dr
zero uh this is going to be Dr
minus one
minus one
DC
Dr uh + one
DC Dr minus one Dr +
DC Dr minus one Dr +
one so this is up down left right but we
one so this is up down left right but we
really want to do
I like this up down left right being
I like this up down left right being
like
[Music]
this I'm trying to think if there's a
this I'm trying to think if there's a
clever way I can Index
clever way I can Index
this it's eight
actions not really
actions not really
huh well that's
huh well that's
okay we'll just do it this way
so we'll do up down left
so we'll do up down left
right and then we'll do q.
right and then we'll do q.
append or and then this will be
Dr um minus one DC +
one row +
one all + one
then like this something like this
right now the only thing we have to
right now the only thing we have to
figure out is now how to draw these
figure out is now how to draw these
freaking
freaking
triangles
um be really nice if I could find
um be really nice if I could find
a decent way of doing this let me think
there really isn't a good way of doing
there really isn't a good way of doing
this is there I think I just have to
this is there I think I just have to
write out all the bloody triangle
definitions
definitions
yeah
yeah
well that
sucks
sucks
yeah so these ones were correct I
think what if I just like let super
think what if I just like let super
Maven do it and then I try to fix
them it's probably going to be slop
right yep
right yep
[Music]
[Music]
slop love my slop yep
slop love my slop yep
good
job was there a function that I can use
job was there a function that I can use
that will be just like better than
that will be just like better than
this I don't think so right draw a ring
this I don't think so right draw a ring
draw ring Lines line strip
bezier
bezier
uh no I think
not think not
cool to see they have Collision
cool to see they have Collision
functions in there I didn't know
functions in there I didn't know
that
so is this
so is this
um let's see if these ones are still
um let's see if these ones are still
correct
first
oops else okay we got to take this out
oops else okay we got to take this out
hold
on okay so these ones are correct these
on okay so these ones are correct these
are just the uh the straight the
are just the uh the straight the
straightaway actions
right kind of weird but I think they're
right kind of weird but I think they're
valid
and then we'll do if action is equal to
and then we'll do if action is equal to
four remember I have to go in the
four remember I have to go in the
opposite direction of these which is
opposite direction of these which is
very confusing to think
about so
about so
Dr minus
one so it's pointing that way so I have
one so it's pointing that way so I have
to point the other way
so God that's so hard to think about
so God that's so hard to think about
*
TS
TS
y
um
x y +
x y +
TS and
TS and
then HTS my
head
head
plus three
plus three
and this is supposed to be a
and this is supposed to be a
three
okay
okay
and five is Dr + 1 DC + one so it points
and five is Dr + 1 DC + one so it points
this way so I got to go that
way so what
way so what
that's the the first point is easy it's
that's the the first point is easy it's
just
just
XY then we've got to go around counter
XY then we've got to go around counter
counterclockwise
counterclockwise
which is going to
which is going to
be x + 2 * tile size over
be x + 2 * tile size over
3 y + tile
3 y + tile
size and
size and
then X Plus tile size y
then X Plus tile size y
+ 2 * T size over
+ 2 * T size over
three okay and then six is Dr + 1 DC so
three okay and then six is Dr + 1 DC so
it goes that way so we got to go that
it goes that way so we got to go that
way
way
um counterclockwise so it's X Plus TI
um counterclockwise so it's X Plus TI
size what this one yeah six X Plus TI
size what this one yeah six X Plus TI
size y That's the top right corner then
size y That's the top right corner then
we got to do X Plus TI
size no it's just
size no it's just
x y + 2 * to size over
x y + 2 * to size over
three and then it's going to be X+
three and then it's going to be X+
T size over three
T size over three
y all right one more so Dr minus one
y all right one more so Dr minus one
goes that way it's the bottom right
goes that way it's the bottom right
corner facing one we flip
corner facing one we flip
it bottom right corner facing one is
it bottom right corner facing one is
going to be X Plus T size over
going to be X Plus T size over
three
three
y
y
x TI size over
x TI size over
three and X Plus tile size
three and X Plus tile size
y plus to
size
yeah well that's almost it that's
yeah well that's almost it that's
actually pretty darn good for a first
actually pretty darn good for a first
try uh I don't know why some of these
try uh I don't know why some of these
are
are
blue assumedly I did something
backwards but these ones look good so
backwards but these ones look good so
the one that's facing to the top right
the one that's facing to the top right
is not good getting
is not good getting
rendered top right should be they're
rendered top right should be they're
flipped so
it's it's the one that faces this way
it's it's the one that faces this way
which is minus which is one and minus
which is minus which is one and minus
one I
one I
think so which one is this
think so which one is this
one which one's one minus
one which one's one minus
one six did I do six
wrong so six is supposed to face up
right so I put it top right
right so I put it top right
corner and then I did
corner and then I did
X Y is down
here then
here then
X Plus tile
size much better
and
and
uh yeah only problem is that it we're
uh yeah only problem is that it we're
covering obstacles as well for some
covering obstacles as well for some
reason so maybe let's not freaking do
reason so maybe let's not freaking do
that
um if
um if
the grid
oh we can't give it five because five is
oh we can't give it five because five is
an action value now so we have to give
an action value now so we have to give
this eight so we'll do our heldout value
this eight so we'll do our heldout value
will be eight
right okay this is way better
so is this perfect or not
it does allow you to go through a corner
it does allow you to go through a corner
size gaps and
walls which I thought I think is kind of
walls which I thought I think is kind of
funny honestly that it allows you to do
funny honestly that it allows you to do
that I don't really care about that do
that I don't really care about that do
I if a wall is one thick like
I if a wall is one thick like
that I can just touch up the map to have
that I can just touch up the map to have
two thick walls
did my bit rate just drop a
did my bit rate just drop a
bunch looks like it
bunch looks like it
did hopefully we should be good
did hopefully we should be good
now
now
um
okay
okay
so something weird just happened to some
so something weird just happened to some
of my arrows
of my arrows
though no I think they're
though no I think they're
good some just not you know they're not
good some just not you know they're not
all the same sizes it's no big
deal nice Vector
Fields maybe you can pad all
Fields maybe you can pad all
obstacles so in real time the agents
obstacles so in real time the agents
don't pat long wall yeah that's what I
don't pat long wall yeah that's what I
was going to
was going to
do
do
um I that's
um I that's
easy I can just feather the walls if I
easy I can just feather the walls if I
just feather all the walls one pixel
just feather all the walls one pixel
that will fix it so I might just touch
that will fix it so I might just touch
up the map essentially that's no big
up the map essentially that's no big
deal literally you feather the walls one
deal literally you feather the walls one
pixel it's
pixel it's
fixed but this is nice a good
result uh now do I dare try to run this
result uh now do I dare try to run this
on the full size map I think I do right
on the full size map I think I do right
let me let me just see if I can do so I
let me let me just see if I can do so I
set a big tile size for this didn't I
set a big tile size for this didn't I
not really this is
eight let's do
eight can we see what's going on
eight can we see what's going on
here kind
here kind
of what if I now do the full sizee map
kind of hard to see what's going
kind of hard to see what's going
on can I do like 12
on can I do like 12
maybe to size
maybe to size
12 maybe that looks
better yeah it looks better righto
and I should do like the enemy base
and I should do like the enemy base
right this would be a cool position to
right this would be a cool position to
do which is like 16 hold
on8 minus
16 uh Wrong Way Around 128 - 16 this is
16 uh Wrong Way Around 128 - 16 this is
y right so I flipped Y and X this is 16
y right so I flipped Y and X this is 16
128 minus
16 and we'll do a little bit further in
16 and we'll do a little bit further in
it looks like so this is like
yeah how to get to the enemy
yeah how to get to the enemy
base in your base killing your
base in your base killing your
dudes you just follow the vector field
dudes you just follow the vector field
from anywhere right so like this way
from anywhere right so like this way
this way this way
this way this way
y this way this
y this way this
way this way this way and we're in your
way this way this way and we're in your
base killing your
dudes cool let's do
let's do
let's do
uh render do
render uh we'll
render uh we'll
do turn I need to import the other thing
do turn I need to import the other thing
from render
right what is it
right what is it
uh hold
uh hold
on going to have a cool thing for
on going to have a cool thing for
Twitter renderer do Ren
C data to
C data to
numai C data to
nump data to
nump data to
numpy like
numpy like
so and then we will
so and then we will
do image or this is a
frame right and then we'll do
[Music]
[Music]
we have to import pill here
we have to import pill here
right import
pill save pathing PNG exit
I actually think is it going to
be well the pathing is not going to
change let's see if this works first but
change let's see if this works first but
I think that we're going to do something
I think that we're going to do something
cooler before we tweet it
do we get
do we get
pathing yeah
pathing yeah
so Okay so we've got that
so Okay so we've got that
PNG
um well we can tweet this
um well we can tweet this
first that'll be nice you got to tweet
first that'll be nice you got to tweet
more stuff so that you people see
more stuff so that you people see
it puffer
it puffer
marketing got to do your open source
marketing got to do your open source
marketing after all
okay so we get our pathing
PNG let's see how this
PNG let's see how this
looks very
nice for
okay
cool
frame good time to remind folks to Star
frame good time to remind folks to Star
Puffer lib if they enjoy this stuff
Puffer lib if they enjoy this stuff
helps me out a whole bunch
we've got will who is going to
we've got will who is going to
absolutely refuse to end the stream
absolutely refuse to end the stream
before I do meaning that we're both
before I do meaning that we're both
going to be here
forever okay so this is actually pretty
forever okay so this is actually pretty
solid
solid
um we now need to make this
fast yeah cuz this needs to run like
fast yeah cuz this needs to run like
10,000 times and I don't feel like this
10,000 times and I don't feel like this
taking forever to
pre-compute question is how fast do I
pre-compute question is how fast do I
need this
so literally all I have to do is uh use
so literally all I have to do is uh use
a numpy array
a numpy array
right isn't it that
easy because it's a q right
easy because it's a q right
yeah stack would be a stack would be
yeah stack would be a stack would be
substantially more
substantially more
obnoxious but because it's a q it's
obnoxious but because it's a q it's
actually pretty
easy so we're going to give this um grid
easy so we're going to give this um grid
paths uh this is going to get a
paths uh this is going to get a
buffer and let's take this
buffer so this is going to be kind of
buffer so this is going to be kind of
cool and instructive this is how you
cool and instructive this is how you
make
make
stuff super
stuff super
fast like 100x
fast like 100x
faster okay so
faster okay so
buffer
buffer
zeros the buffer needs to be able to
zeros the buffer needs to be able to
accommodate n * n is the number of uh
accommodate n * n is the number of uh
tiles and then three which is the action
tiles and then three which is the action
row call whatever uh and it can't be a
row call whatever uh and it can't be a
uent
8 and actually I think I'm just going to
8 and actually I think I'm just going to
make it a number pi. uint
make it a number pi. uint
32 would be fast
32 would be fast
right we're just an n32 I think that'll
right we're just an n32 I think that'll
be
optimal could make it a 16 I think it's
optimal could make it a 16 I think it's
usually faster to use um four byte types
usually faster to use um four byte types
I could be wrong on
I could be wrong on
that so now we give it buffer
that so now we give it buffer
right and uh now that it takes buffer
so what we're going to do is we just
so what we're going to do is we just
make a pointer which is just an index so
make a pointer which is just an index so
pointer equal to zero because that's
pointer equal to zero because that's
where we're at right
where we're at right
now uh and we do
now uh and we do
buffer
pointer equals zero so we've zeroed out
pointer equals zero so we've zeroed out
our initial
our initial
right and then what we do
is we're just going to do while
is we're just going to do while
true let's actually make this buffer be
true let's actually make this buffer be
a negative
a negative
one make the buffer be negative
one make the buffer be negative
1es we can do that
right I don't know if we'll need to or
right I don't know if we'll need to or
not but we'll do it
so while
so while
true we're going to
do uh action
do uh action
equals
buffer
buffer
buffer pointer
buffer pointer
zero and then what we do is we have
zero and then what we do is we have
action
action
drdc don't need to increment the pointer
drdc don't need to increment the pointer
just
just
yet okay now we can get our start R our
yet okay now we can get our start R our
start C these are these are good
start C these are these are good
operations these are good
operations these are good
operations this is a good
operations this is a good
operation the only operations that we
operation the only operations that we
have that are bad here are this q.
have that are bad here are this q.
append okay so all we have to do is we
append okay so all we have to do is we
now do buffer of pointer
plus one
be slightly more efficient to do pointer
be slightly more efficient to do pointer
plus equals 1 then buffer of pointer Z
plus equals 1 then buffer of pointer Z
is going to be equal to
is going to be equal to
zero one two is going to be Dr
zero one two is going to be Dr
action uh I don't know where it got this
action uh I don't know where it got this
three from this is completely wrong but
three from this is completely wrong but
this is the first update
this is the first update
here like
here like
this and uh this is Dr minus one of
this and uh this is Dr minus one of
course we mirror this one then we do
course we mirror this one then we do
pointer plus equals
pointer plus equals
1 could technically write Loops over
1 could technically write Loops over
this and it'll be fast
well we might write Loops later I don't
well we might write Loops later I don't
want to have to redo the visualization
want to have to redo the visualization
stuff by reordering things um so we're
stuff by reordering things um so we're
going to do it the stupid way for now
this is
this is
Dr +
Dr +
one
one
pointer let's see so the third one it
pointer let's see so the third one it
gave us was Dr C minus one C + one then
gave us was Dr C minus one C + one then
we got
we got
Dr see this thing consistently gets [ __ ]
Dr see this thing consistently gets [ __ ]
wrong so this is minus one + one for
four minus one + one
four minus one + one
and then it is + one + one
right and then it's + one minus
right and then it's + one minus
one minus
one I don't even know what it thinks
one I don't even know what it thinks
it's doing at this point but it's minus
it's doing at this point but it's minus
one minus
one minus
one 1 2 3 4 five six 7 eight Okay so
we will test this to see if this is the
we will test this to see if this is the
same as
before we
before we
also did we increment the pointer
also did we increment the pointer
enough ah wait wait wait wait we screwed
enough ah wait wait wait wait we screwed
something up here we can't quite do it
something up here we can't quite do it
this way this is pointer +
this way this is pointer +
one like this we can't increment the
one like this we can't increment the
pointer like this cuz we need the
pointer like this cuz we need the
pointer to stay where it
is
is
okay this is+ three + three +
okay this is+ three + three +
three bear with
three bear with
me this is going to be really cool when
me this is going to be really cool when
it runs like a 100 times faster
okay and then I don't know why I just
okay and then I don't know why I just
did that my brain just decided to stop
working and then finally pointer Plus 8
working and then finally pointer Plus 8
+ 8 plus
8 boom boom boom and then at the bottom
8 boom boom boom and then at the bottom
we increment pointer by one for the next
we increment pointer by one for the next
Loop
boom
apparently this was not happy with
that got to break out of
it so
this is a reasonable way to break out of
this is a reasonable way to break out of
the
loop I would hope
loop I would hope
right guess
not would really think it would be
I should get uh print
poter so it gets five
the pointer needs to
advance the pointer always needs to
advance the pointer always needs to
advance by
advance by
one so this pointer
one so this pointer
increment actually should be up
increment actually should be up
here and then I need to edit all of
here and then I need to edit all of
these things
unfortunately
unfortunately
right
right
y one one one two two two of course it's
y one one one two two two of course it's
way easier to edit them than it is to
way easier to edit them than it is to
add
them okay so that that actually did
them okay so that that actually did
run um but I think it did something
run um but I think it did something
weird let's do like
this so it did something
this so it did something
weird
weird
uh let's see what it would have done
weird -1 + 1
+ one wait- one + one right - one + one
+ one wait- one + one right - one + one
plus one +
plus one +
one so these all are
fine pointer gets incremented
fine pointer gets incremented
here oh you need two pointers I'm
dumb yep you need two pointers you need
dumb yep you need two pointers you need
start and end
start and end
okay so you need let me explain
okay so you need let me explain
this you need to have a start pointer
this you need to have a start pointer
that tells you where you're consuming
that tells you where you're consuming
the queue from and an end pointer that
the queue from and an end pointer that
tells you where the Q is done and that's
tells you where the Q is done and that's
also going to tell you you're not going
also going to tell you you're not going
to have to zero the Q out every time so
to have to zero the Q out every time so
this is going to be even faster than I
this is going to be even faster than I
originally intended by quite a bit um
originally intended by quite a bit um
but it does get you do have to keep two
but it does get you do have to keep two
pointers
around so you have start and by pointer
around so you have start and by pointer
I mean index it's the same thing right
mhm
so you do while essentially while
so you do while essentially while
there's still data to consume and then
there's still data to consume and then
this is going to get rid of this ugly
this is going to get rid of this ugly
break condition
here now this is
here now this is
End plus equal to 1
and and
and I don't know why it like keeps
and I don't know why it like keeps
giving me these garbage suggestions
okay
okay go work do your thing
okay go work do your thing
damn
it this shouldn't be possible
right yeah this shouldn't be possible
right yeah this shouldn't be possible
because I allocated enough space essenti
because I allocated enough space essenti
I allocated enough space for every
I allocated enough space for every
single to to go into the
buffer so if this is not working it's
buffer so if this is not working it's
because
why plus equal to one
[Music]
[Music]
uh I don't know
actually that looks good to
me buer start is zero end is
me buer start is zero end is
zero you add one to the
start you don't add anything to the end
start you don't add anything to the end
here
this should be
this should be
action wait should this be action or did
action wait should this be action or did
I totally screw this thing
I totally screw this thing
up wait
up wait
what this isn't action at all I this
what this isn't action at all I this
thing gives me garbage suggestion
thing gives me garbage suggestion
sometimes and it screws me up like I'm
sometimes and it screws me up like I'm
not going to uninstall it because it's
not going to uninstall it because it's
really really nice for the code complete
really really nice for the code complete
but the models actually have to get a
but the models actually have to get a
little bit better
I wouldn't think this will make a
I wouldn't think this will make a
difference in terms of it not running
difference in terms of it not running
though
right yeah it's still going to screww up
right yeah it's still going to screww up
if it's going to screw up um
I don't know print start comma end
I don't know print start comma end
something that tell me anything remotely
useful tells me the start is keeping up
useful tells me the start is keeping up
pretty well with the the start's keeping
pretty well with the the start's keeping
up pretty well with this
thing this should not be possible
here cuz I give it grid shape
here cuz I give it grid shape
right and the buffer is n *
N I don't need to subtract one anymore
N I don't need to subtract one anymore
I'm not using that as a
check uh
oh and you should also return
oh and you should also return
um you should return end as
well wait End plus hold on does this
well wait End plus hold on does this
make sense or am I overwriting
I
I
think I think it makes more sense to
think I think it makes more sense to
start this
start this
at
at
one I do while
one I do while
start is less than end and then I put
start is less than end and then I put
these as postfix Ops
right yeah that'll that'll be nice
right yeah that'll that'll be nice
because I'm going to want to return the
because I'm going to want to return the
end that I know how many elements I have
so we'll do return
so we'll do return
and
and
this that's still not going to fix it
though yeah so
why let me see so you get the
why let me see so you get the
action from start right
action from start right
you get Dr and DC from
start
start
okay you go start R
okay you go start R
here you bounce check
it you
I also don't know why I'm doing it this
I also don't know why I'm doing it this
way
way
right
right
like this Dr and DC doesn't need to be
like this Dr and DC doesn't need to be
this
this
way I can just do this can just be start
way I can just do this can just be start
R so this should just be like buffer
equal
equal
Z I
guess and then we
guess and then we
do buffer start one equals d
do buffer start one equals d
r and then d
c and this is just start R right here
c and this is just start R right here
right this is start C so this
right this is start C so this
simplifies because we don't need this
simplifies because we don't need this
garbage
garbage
anymore yeah because then you just
anymore yeah because then you just
directly do this is just start
directly do this is just start
R start r-
one start
one start
C + one start
C + one start
C start R start C C
-1 start R start C +
-1 start R start C +
one start see almost just did it right
one start see almost just did it right
there start our start C+
there start our start C+
one
one
plus
plus
plus plus
minus minus
minus minus
one's okay still not going to fix it
one's okay still not going to fix it
makes it cleaner
though now aside from us being able to
though now aside from us being able to
roll this into a loop if we um reindex
roll this into a loop if we um reindex
our actions or reindex the triangles for
our actions or reindex the triangles for
drawing so this will be one little Loop
drawing so this will be one little Loop
like over
like over
RNC uh maybe we could also just leave it
RNC uh maybe we could also just leave it
unrolled like
unrolled like
this
this
um but aside from that we're pretty much
um but aside from that we're pretty much
optimal
oh and the issue is just that the buffer
oh and the issue is just that the buffer
isn't big enough
isn't big enough
right um because you can add the same
right um because you can add the same
tile in multiple times uh you just
tile in multiple times uh you just
can't yeah you can add the same tile in
can't yeah you can add the same tile in
multiple times you just can't actually
multiple times you just can't actually
pick the tile multiple times and I think
pick the tile multiple times and I think
that the most number of times you can
that the most number of times you can
add a tile in
is hold on it's eight
is hold on it's eight
right so I think it's the buffer
right so I think it's the buffer
actually got to be pretty freaking big I
actually got to be pretty freaking big I
think it's 8 time n * n which is you
think it's 8 time n * n which is you
know a little bit obnoxious
admittedly boom we
win okay
win okay
so you might be wondering why the heck
so you might be wondering why the heck
did I just do all of that
did I just do all of that
right I just spent a bunch of time to
right I just spent a bunch of time to
make the program I'm going to tell you
make the program I'm going to tell you
right now not even any
right now not even any
faster um to refactor it in that exact
faster um to refactor it in that exact
weird
weird
manner so the reason that I did
that was that now it's going to be
that was that now it's going to be
trivial to scyon
trivial to scyon
eyes and the way I can tell you that is
eyes and the way I can tell you that is
I just wrote this thing in a way where
I just wrote this thing in a way where
every single operation is going to
every single operation is going to
effortlessly translate into uh into
effortlessly translate into uh into
purec with no Reliance on python
purec with no Reliance on python
whatsoever the prerequisites for that
whatsoever the prerequisites for that
are mainly that you're not using lists
are mainly that you're not using lists
or decks or anything like that or tuples
or decks or anything like that or tuples
any python data structures and that all
any python data structures and that all
of your operations can be expressed as
of your operations can be expressed as
Loops over numpy
arrays and if you do that you're
arrays and if you do that you're
good
good
so let's do
so let's do
um let's have a little fun with this I
um let's have a little fun with this I
think we've earned it
right you want answers I think I'm
right you want answers I think I'm
entitled
all right so we don't need all this
all right so we don't need all this
garbage this is
garbage this is
gorbage get rid of the
gorbage all right and now this is
gorbage all right and now this is
CNP ND
CNP ND
array
array
grid can we type
grid can we type
these I think we can I don't know if we
these I think we can I don't know if we
can type
can type
these I don't know if we can type
these I don't know if we can type
these we should be able to
these we should be able to
right he let's try
right he let's try
it grid CNP ND array paths
it grid CNP ND array paths
CNP Ray buff and we got
CNP Ray buff and we got
int
int
int
yeah this is an INT returns an
yeah this is an INT returns an
INT uh we C def int
INT uh we C def int
n and
n and
start kaboom
start now we also have to do of course
start now we also have to do of course
these start R start
C
C
and uh what I like to do is just to
and uh what I like to do is just to
avoid bad variable names is I just like
avoid bad variable names is I just like
prefix I postfix these n p n p like this
prefix I postfix these n p n p like this
right
and then what I do is first of all I
and then what I do is first of all I
don't know why I did this this should
don't know why I did this this should
just be a block like this uh so we got
just be a block like this uh so we got
cdef
cdef
int cdef int and and int like
int cdef int and and int like
this and
this and
then we can see
then we can see
ah this
ah this
is we have to go get the types of these
is we have to go get the types of these
I think it's
un it's Char for grid
un it's Char for grid
Char grid is grid
Char grid is grid
NP I think paths is also a
NP I think paths is also a
Char and then we used an INT for buffer
Char and then we used an INT for buffer
like
like
this
okay
okay
so let's check this
so let's check this
and now what we get to do is we get this
and now what we get to do is we get this
pix import
pix import
right and then we do oops
right and then we do oops
from C precompute import BF as
from C precompute import BF as
cbfs
uhhuh and now what we do is we get to
uhhuh and now what we do is we get to
just do
cbfs let's see why why scy why no scyon
cbfs let's see why why scy why no scyon
I
expected did you use cdef syntax and use
expected did you use cdef syntax and use
decorators and python type annotations
decorators and python type annotations
instead okay so that's slightly awkward
instead okay so that's slightly awkward
um one of the limitations I think what
um one of the limitations I think what
if I CP def it does this
work okay return
one give this an OP
code okay so we have
scon it is
scon it is
aized now we'll have to figure out why
aized now we'll have to figure out why
it doesn't
work figure that out pretty quick
buffer
buffer
zeros buffer
zeros buffer
has only one portion of data in
it and after that is
it and after that is
empty so let's see uh let's see why that
empty so let's see uh let's see why that
is the case did I get the data types
is the case did I get the data types
wrong
wrong
we've got paths is a numpy uh
we've got paths is a numpy uh
ent8 what did I have Game maps
ent8 what did I have Game maps
says game map's the wrong type that
says game map's the wrong type that
could
be D type you and8 okay so this is
fine just have to figure this
out we'll do print
out we'll do print
start or was
start or was
it start
end
end
okay one
okay one
one well that's not good
paths if grid of start
paths if grid of start
R start C is equal to
R start C is equal to
one this is the exact same code as
one this is the exact same code as
before is it
not we manag to make the uh this version
not we manag to make the uh this version
work and the other version not work
work and the other version not work
let's say
yeah so right now the scyon version does
yeah so right now the scyon version does
not
not
match uh the python
version
version
somewhere it does appear that it is
somewhere it does appear that it is
getting
getting
overwritten it's getting overwritten
overwritten it's getting overwritten
somewhere action is equal to
print start R start C
print start R start C
print Paths of start r c print grid
print Paths of start r c print grid
these are the three possible options
these are the three possible options
right I don't know where else it would
right I don't know where else it would
be breaking
negative
negative
one uh that's very
one uh that's very
odd what did we give
paths
paths
Char o that's disgusting is it an
Char o that's disgusting is it an
unsigned I think it's an unsigned Char
unsigned I think it's an unsigned Char
which we shouldn't have to sign it but
okay Char should already be unsigned
okay Char should already be unsigned
there you
there you
go okay gross type bug unsign Char you
go okay gross type bug unsign Char you
got to be
careful so let's uh let's recompile this
and now let's check the uh do we have an
and now let's check the uh do we have an
HTML file in
HTML file in
here we do not have an HTML file so what
here we do not have an HTML file so what
we're going to do is we are going to
we're going to do is we are going to
um we're going to recompile this such
um we're going to recompile this such
that we get HTML out of
it and then we're going to enable all of
it and then we're going to enable all of
these optimizations
oops so we're going to go up here and
oops so we're going to go up here and
now we're going to tell uh we're going
now we're going to tell uh we're going
to instruct cython to compile this with
to instruct cython to compile this with
absolutely no safety features it's not
absolutely no safety features it's not
going to check values for none we're not
going to check values for none we're not
doing any division but if we
were actually since we're not doing any
were actually since we're not doing any
division we can get rid of this one and
division we can get rid of this one and
we can uh
we can uh
yeah we can leave these like this
yeah we can leave these like this
so this is now doing absolutely no
so this is now doing absolutely no
safety checks
whatsoever we're going to add this to
whatsoever we're going to add this to
the setup file here and we're going to
the setup file here and we're going to
turn on this annotation
option and hopefully this should output
option and hopefully this should output
us a uh a very
nice
nice
file that will include for us uh a
file that will include for us uh a
detailed profile of this code and
detailed profile of this code and
anywhere that I've screwed up and is
anywhere that I've screwed up and is
have made it slow by mistake
of course since I just pulled in all the
of course since I just pulled in all the
changes from this weekend it's
changes from this weekend it's
recompiling everything but you know you
recompiling everything but you know you
win some you lose
win some you lose
some okay so perfect we see we have this
some okay so perfect we see we have this
HTML file here recompute pathing
HTML file here recompute pathing
HTML so I have to just because I'm on
HTML so I have to just because I'm on
WSL I have to move this into
Docker where I can get access to it
and then if we look at C precompute
and then if we look at C precompute
pathing
pathing
HTML so we can see that this uh function
HTML so we can see that this uh function
signature because it's cpde it'll call
signature because it's cpde it'll call
back to python no big surprise uh the
back to python no big surprise uh the
initial memory view will call back to
initial memory view will call back to
python as well but we are going to have
python as well but we are going to have
a way around this when we call this in a
a way around this when we call this in a
loop so no big deal and then beautiful I
loop so no big deal and then beautiful I
did it perfect on first try uh the fact
did it perfect on first try uh the fact
that this this is all white and has no
that this this is all white and has no
annotations means that this entire
annotations means that this entire
code this is a pure C
code this is a pure C
call it's a p c call and this is we can
call it's a p c call and this is we can
see right here this is just array
see right here this is just array
indexing so it's just straight up doing
indexing so it's just straight up doing
you know array indexing
you know array indexing
math which is very very
math which is very very
nice um yeah that's that's
perfect so Let's
perfect so Let's
uh how fast do you think that these are
uh how fast do you think that these are
versus one another
versus one another
right what do we
think I have profiling off on this I
think I have profiling off on this I
believe which is what we
want let's do a perf test
okay so we're going to take this code
okay so we're going to take this code
right
right
here
here
and this will
and this will
[Music]
be
be
grid
grid
R2 you don't need uh you don't need R
R2 you don't need uh you don't need R
you just need c right
you just need c right
one okay
so whoops import time start is time.
so whoops import time start is time.
time while time. time is less than start
time while time. time is less than start
can do
can do
BFS uh it equals z it plus equal
1 see it
1 see it
zero start time.
zero start time.
time wow
cbfs see it there's plus equals
perfect and now what we can do test
performance and hopefully runs for us
performance and hopefully runs for us
and we will see how much
and we will see how much
faster this code
is should take 20
is should take 20
seconds if it takes longer than that
seconds if it takes longer than that
then I will be confused nope there we go
then I will be confused nope there we go
okay perfect so
it divided by
it divided by
timeout hold on
iters grid paths
buffer uh I'm not believing
that so it says the C1 is 10 times
that so it says the C1 is 10 times
faster which is about right but um I
faster which is about right but um I
don't believe that the other one is so
don't believe that the other one is so
fast I'm worried that it is just doing
fast I'm worried that it is just doing
the uh the
first right you have to null the grid
first right you have to null the grid
every
every
time yeah you have to know the grid
time yeah you have to know the grid
every time I think or is it the paths or
every time I think or is it the paths or
the grid that you have to know you have
the grid that you have to know you have
to know the paths every time
to know the paths every time
paths
255 and the buffer you shouldn't have to
255 and the buffer you shouldn't have to
know let's try this again this because
know let's try this again this because
the thing is I wouldn't have bothered
the thing is I wouldn't have bothered
automating it if it were running 145,000
automating it if it were running 145,000
steps per second I wouldn't have
steps per second I wouldn't have
bothered sioning
bothered sioning
it that's fast enough that'll like do
it that's fast enough that'll like do
the whole thing in a
the whole thing in a
second but I think you're going to see
second but I think you're going to see
that there's going to be a significant
difference yeah that's more like
difference yeah that's more like
it so
um yeah that's what we'd
um yeah that's what we'd
expect is that c number right that seems
expect is that c number right that seems
really fast
could very well
be yeah cuz this is not just C versus
be yeah cuz this is not just C versus
python this is like oh no wait this is
python this is like oh no wait this is
straight up C versus python thousand
straight up C versus python thousand
times faster that's pushing it isn't
times faster that's pushing it isn't
it isn't that pushing
it 1.6 steps per
second same exact code so it shouldn't
be well I don't want to post this yet
be well I don't want to post this yet
until I'm
until I'm
positive because whenever you post
positive because whenever you post
something oh it's like 3,000 times
something oh it's like 3,000 times
faster or
faster or
whatever and then you're wrong you look
whatever and then you're wrong you look
really stupid so we're going to let this
really stupid so we're going to let this
uh we're going to work on this for a bit
uh we're going to work on this for a bit
and if it looks like it is actually that
and if it looks like it is actually that
fast then we're going to go from there
fast then we're going to go from there
um okay though
um okay though
so perf test is
set if that is actually the performance
set if that is actually the performance
difference though and people are still
difference though and people are still
writing this type of stuff in Python
writing this type of stuff in Python
like get
out prototyping it in Python is fine
hey
hey
Roman
Roman
welcome we just made breath first search
welcome we just made breath first search
really really really
really really really
fast here's your breath first search
fast here's your breath first search
it's a really
fast is that like ballpark reasonable
fast is that like ballpark reasonable
though because let me think this is
though because let me think this is
order of like 10,000 tiles
order of like 10,000 tiles
10,000 time
4,000 oh yeah that's totally reasonable
4,000 oh yeah that's totally reasonable
right it's like tens of millions of St
right it's like tens of millions of St
yeah that's totally reasonable that's
yeah that's totally reasonable that's
actually very reasonable to expect out
actually very reasonable to expect out
of
of
C uh the python one being this slow
is also kind of reasonable to be honest
is also kind of reasonable to be honest
p like Loops end up whenever you're
p like Loops end up whenever you're
doing anything with like any logic plus
doing anything with like any logic plus
Loops it goes from tens of millions to
Loops it goes from tens of millions to
like thous tens of thousands at most
like thous tens of thousands at most
steps per
second so you do lose a
lot slow
lot slow
language slow language is
language slow language is
slow uh the nice thing about this is we
slow uh the nice thing about this is we
should be able to precompute this entire
should be able to precompute this entire
thing now like Stupid Fast right
yeah we should be able to pre-compute
yeah we should be able to pre-compute
this whole thing really really stupidly
this whole thing really really stupidly
fast and I haven't even I'm not even
fast and I haven't even I'm not even
sioning the uh the outer loop
sioning the uh the outer loop
yet so we'll
yet so we'll
do this is going to be
cbfs grid paths
cbfs grid paths
RC starting point return paths and we're
RC starting point return paths and we're
going to do uh
going to do uh
paths M Pi
paths M Pi
[Music]
[Music]
Zer isn't it n
n how much faster it goes when it's
recomputed what do you mean how much
recomputed what do you mean how much
faster oh precompute
faster oh precompute
well I'll tell you how much faster it
well I'll tell you how much faster it
goes when it's precomputed it's the
goes when it's precomputed it's the
difference between being able to do this
difference between being able to do this
and having it be o of one or having to
and having it be o of one or having to
do this and having it be like completely
do this and having it be like completely
unusable this alone I can tell you this
unusable this alone I can tell you this
operation alone if we tried to add this
operation alone if we tried to add this
into our code even if we sconed it it
into our code even if we sconed it it
would limit uh it would limit us to
would limit uh it would limit us to
like well you have it right here
like well you have it right here
technically let's say we can get this
technically let's say we can get this
down a fair bit with uh with
down a fair bit with uh with
AAR this is only 4,000 Maps computed per
AAR this is only 4,000 Maps computed per
second right so if we're going to say
second right so if we're going to say
AAR versus full breath for search is
AAR versus full breath for search is
much more efficient let's say that we
much more efficient let's say that we
get this down by a factor of 10 so
get this down by a factor of 10 so
40,000 steps per second that's still
40,000 steps per second that's still
we're only able to do 40,000 pathfind
we're only able to do 40,000 pathfind
searches right per second times like a
searches right per second times like a
couple hundred Minions we're now down to
couple hundred Minions we're now down to
hundreds of steps per second on our
hundreds of steps per second on our
entire
entire
simulator and I mean maybe you can cach
simulator and I mean maybe you can cach
it and only pre C every so often but
it and only pre C every so often but
still like we're going to be down to
still like we're going to be down to
like maybe thousands of steps per second
like maybe thousands of steps per second
on our whole MOA just because of this
on our whole MOA just because of this
one operation compared to what we're
one operation compared to what we're
doing right now this is O of one this is
doing right now this is O of one this is
like this is nothing this is
like this is nothing this is
instantaneous so we've basically taken
instantaneous so we've basically taken
our path finding from being a bottleneck
our path finding from being a bottleneck
that's going to make this entire Sim C
that's going to make this entire Sim C
to thousands of steps per second to free
to thousands of steps per second to free
that's what this has
done I don't optimize stuff just for the
done I don't optimize stuff just for the
sake of op optimizing it most of the
sake of op optimizing it most of the
time I optimize stuff when it's going to
time I optimize stuff when it's going to
make a massive
difference okay so we do pre-compute
difference okay so we do pre-compute
path
path
thing and then
thing and then
we paths equals this
right yeah
is very
big absolutely
massive okay so we got our pre-compute
massive okay so we got our pre-compute
pathing here is a very nice little
pathing here is a very nice little
function and what are we going to do
function and what are we going to do
with it we're going to call this
with it we're going to call this
function
function
here and uh I did not mean to do it here
here and uh I did not mean to do it here
this should have been up here right
so these can go back where they
so these can go back where they
are we can
are we can
pathing uh let's
do no doesn't need this R1 and R2
anymore so we'll do like this
right and it's grid. shape
right and it's grid. shape
don't need any of this we just
don't need any of this we just
pre-computed all the
paths so now what we get to do is uh
paths so now what we get to do is uh
render do render we can do pass of R1
render do render we can do pass of R1
and C1 let's see if this
works oh
works oh
boy that's not what we wanted
well this is all zeros is what just
well this is all zeros is what just
happened here
happened here
right so it's possible that this was
right so it's possible that this was
uh was this a bad
uh was this a bad
tile hold
on nope that should be
fine we compute
pathing paths row
call a it just mirrors that really
weird do we need to clear buffer as
well do we need to clear
well do we need to clear
buffer I don't think so I think I
buffer I don't think so I think I
intentionally designed this we don't
intentionally designed this we don't
need to clear buffer right
need to clear buffer right
yeah there's zero checks on
yeah there's zero checks on
Buffer zero checks whatsoever on
Buffer though technically there will be
Buffer though technically there will be
garbage in at the end of it if we don't
garbage in at the end of it if we don't
uh well there may there could be garbage
uh well there may there could be garbage
at the end but we actually don't care if
at the end but we actually don't care if
there's garbage at the end the way that
there's garbage at the end the way that
I implemented it so yes this is actually
I implemented it so yes this is actually
a very smart
a very smart
implementation uh the way that this is
implementation uh the way that this is
done so while why then is this
done so while why then is this
not
working it runs real
fast that takes a long time time to run
fast that takes a long time time to run
numai unique on this
data well I don't think we're getting
data well I don't think we're getting
our 4,000 because it's not actually
our 4,000 because it's not actually
running appropriately on
it let me see oh we forgot to
it let me see oh we forgot to
do I think we forgot to add to our paths
do I think we forgot to add to our paths
right plus 255 oh no we're still fine
right plus 255 oh no we're still fine
yeah yeah we're still fine we just
yeah yeah we're still fine we just
forgot to add it here we're good
very
very
nice
so this is not an amazing use of time
so this is not an amazing use of time
but I kind of want to do something
but I kind of want to do something
fun so we're going to do something fun I
fun so we're going to do something fun I
don't think it'll take me very long uh I
don't think it'll take me very long uh I
want to make this
reactive so where's our right code
reactive so where's our right code
here render do
render start R start
render start R start
C no no no no no we don't do start R
C no no no no no we don't do start R
start
C we make it dependent on
C we make it dependent on
the the
the the
mouse uh X
mouse uh X
Y hold on for
takes one positional argument but three
takes one positional argument but three
were given
this follows me around but the map
this follows me around but the map
doesn't change which I do not
like so let's figure out
why self.
paths this is end
paths this is end
R end C right right the way we did it so
R end C right right the way we did it so
end
end
C and
C and
R and then this is and
R and then this is and
R and
R and
C wait
C wait
action
no this is Paths of RC and then what we
no this is Paths of RC and then what we
do is paths equal self. paths okay there
do is paths equal self. paths okay there
boom
work invalid index to scalar
work invalid index to scalar
variable I do not like invalid index to
variable I do not like invalid index to
scalar
variable Raab Vector field where is this
variable Raab Vector field where is this
stupid thing pre-compute pathing paths
stupid thing pre-compute pathing paths
ah right here this is you need all the
ah right here this is you need all the
paths boom
okay tell me this isn't freaking
amazing tell me this isn't freaking
awesome if you go over an obstacle it
awesome if you go over an obstacle it
just immediately you can't path
there tell me that that isn't like the
there tell me that that isn't like the
easiest ever to make a UI to do like
easiest ever to make a UI to do like
ridiculous real time this is technically
ridiculous real time this is technically
realtime pathing by the way this is like
realtime pathing by the way this is like
this is how fast it would be to like
this is how fast it would be to like
literally the map is to look up because
literally the map is to look up because
it's all
pre-computed look at
that write of Passage to make your own
that write of Passage to make your own
realtime pathing demo
realtime pathing demo
it's so cool how it changes as well like
it's so cool how it changes as well like
you can see like diagonals and stuff
you can see like diagonals and stuff
will change a little bit as you path
will change a little bit as you path
around yeah there's a lot of redundant
around yeah there's a lot of redundant
information here but who cares it
information here but who cares it
computes like freaking
instantly I wonder if this computes fast
instantly I wonder if this computes fast
enough for me to
um oh I have an idea we're going to get
um oh I have an idea we're going to get
this so fast that I don't even have to
this so fast that I don't even have to
ship the file we're going to get this to
ship the file we're going to get this to
be so fast that it's just going to we're
be so fast that it's just going to we're
going to make this map on Startup and
going to make this map on Startup and
it's going to be like .1 seconds or
it's going to be like .1 seconds or
something to precompute all of these and
something to precompute all of these and
you're not going to
you're not going to
notice and that's just how we're going
notice and that's just how we're going
to demonstrate software
superiority damn this is awesome
can it be fast enough that you can make
can it be fast enough that you can make
them make them
what path around other creeps and
what path around other creeps and
players
players
nope not even
nope not even
close so I think I can see why you would
close so I think I can see why you would
think that because you say oh look it's
think that because you say oh look it's
really fast like if you can make all
really fast like if you can make all
these maps in less than a second that
these maps in less than a second that
surely that's really fast right but like
surely that's really fast right but like
do you understand how fast the game is
do you understand how fast the game is
going to be running okay let's say that
going to be running okay let's say that
I'm going to I'm going to say I'm going
I'm going to I'm going to say I'm going
to get a mil a minimum of a million
to get a mil a minimum of a million
agent steps per second okay so that is
100,000 uh game steps per second because
100,000 uh game steps per second because
they're 10 player so I said 1 million
they're 10 player so I said 1 million
steps per agent steps per second is
steps per agent steps per second is
100,000 steps per second that I
100,000 steps per second that I
currently have the frame rate set to
currently have the frame rate set to
five I believe it's like five steps per
five I believe it's like five steps per
second so we're going to do over five
second so we're going to do over five
that's the number of uh SEC this is the
that's the number of uh SEC this is the
number of seconds worth of gaml that
number of seconds worth of gaml that
we're simulating every second on one CPU
we're simulating every second on one CPU
core divide by
core divide by
3600 means that we are simulating 5 and
3600 means that we are simulating 5 and
a half hours of DOTA per second on one
a half hours of DOTA per second on one
CPU Cor that is how fast this thing is
CPU Cor that is how fast this thing is
going to have to
run I like to do that once in a while
run I like to do that once in a while
because you know when the performance
because you know when the performance
numbers get to be ridiculous you can
numbers get to be ridiculous you can
just keep saying bigger and bigger
just keep saying bigger and bigger
numbers and everybody will just say oh
numbers and everybody will just say oh
yeah well that's pretty fast but then
yeah well that's pretty fast but then
when you say no no no no I'm simulating
when you say no no no no I'm simulating
five and a half hours of DOTA per second
five and a half hours of DOTA per second
on one CPU core then you get it right
it pretty cool it's pretty
cool what did I want to do with this
cool what did I want to do with this
there was something else I want to do
there was something else I want to do
right I wanted to save a gift of this
oh no no no I know what I wanted to do
so when I put it that way it makes it
so when I put it that way it makes it
makes sense right like the thing I'm
makes sense right like the thing I'm
building it it's way way cooler when you
building it it's way way cooler when you
understand that is the level of
understand that is the level of
performance that I'm going for right
performance that I'm going for right
like games are not made to be this fast
like games are not made to be this fast
like games are made to run real time or
like games are made to run real time or
maybe 10 times real time so that it runs
maybe 10 times real time so that it runs
on like low-end Hardware
on like low-end Hardware
right this
right this
is here where is
is here where is
it actually we know right here just by
it actually we know right here just by
this division by five this is made to
this division by five this is made to
run
run
20,000 times real
20,000 times real
time that's what we
want it's going to take some performance
want it's going to take some performance
engineering to get there but that's what
engineering to get there but that's what
we're going for here 20,000 times real
time I like performance
time I like performance
engineering it's very performant
want to see something
cool we can put the loop in
cool we can put the loop in
scon this is going to be a this is going
scon this is going to be a this is going
to be a CP no this is going to be a defa
to be a CP no this is going to be a defa
that takes a grid this is going to be a
that takes a grid this is going to be a
CDE meaning it runs
CDE meaning it runs
100% in
100% in
scon this is going to be
scon this is going to be
I think we do want to
I think we do want to
um I think this will be a CP def so that
um I think this will be a CP def so that
we can type it like this CNP NP
we can type it like this CNP NP
grid because we're going to do c
grid because we're going to do c
death like
this okay and then we have passed
this okay and then we have passed
in these memory
in these memory
views which are now going to
views which are now going to
be grid
NP I think we can just do like this
NP I think we can just do like this
unsigned
unsigned
Char and then we can do unsign
Char and then we can do unsign
Char they totally screwed up my
Char they totally screwed up my
indexing so I'll type it manually
indexing so I'll type it manually
paths
paths
okay and uh
buffer looks
good grid paths buffer o
good grid paths buffer o
call and uh
call and uh
RNC oh in RNC
RNC oh in RNC
we get rid of all of this
gorbage
gorbage
dep like so
dep like so
right and uh you know now we get
right and uh you know now we get
um Rec compute pathing
here
here
so we can do import we can't import this
so we can do import we can't import this
anymore we can do pre-compute pathing
anymore we can do pre-compute pathing
as C import as C precompute
as C import as C precompute
pathing and now this is just breath for
pathing and now this is just breath for
search
right and this will be even better for
right and this will be even better for
timing though I don't even know if this
timing though I don't even know if this
is going to be reasonable to time
is going to be reasonable to time
because I think that the python version
because I think that the python version
will be too slow to
will be too slow to
run isn't that
funny but yeah so we're going to
funny but yeah so we're going to
do c precompute pathing
we'll have to fix some minor bugs I'm
sure compute
pathing right we uh get rid of these
pathing right we uh get rid of these
numpy variables these are now typed
numpy variables these are now typed
correctly
correctly
as
as
unsigned
unsigned
Char View
grid uh this is unsigned Char
grid uh this is unsigned Char
paths in
paths in
buffer
see grid is declared after it is
used CU we need the this one to be
NP
NP
and this one says cbfs where it should
and this one says cbfs where it should
just be BFS because we are in
just be BFS because we are in
C and what else
C and what else
paths cannot convert unsigned Char to
paths cannot convert unsigned Char to
memory view
memory view
slice well that's because this is just
slice well that's because this is just
stupid and we have to Index this way
cannot impute precompute
pathing pre-compute pathing from C
pathing pre-compute pathing from C
precompute
precompute
pathing this has to be a CP dep
look at that so we have our same code
look at that so we have our same code
working as before let us time the
working as before let us time the
function how fast is this is this fast
function how fast is this is this fast
enough for us to do stuff
enough for us to do stuff
with we
with we
compute or do we have to cach it we
compute or do we have to cach it we
might still have to cach it
let's
see it's a lot of
data 3 seconds so we're going to want to
data 3 seconds so we're going to want to
cach
cach
it but 3 seconds
it's pretty
it's pretty
good 3 seconds is pretty
good 3 seconds is pretty
good uh let us let's make a gift out of
good uh let us let's make a gift out of
this for the
this for the
Twitter this is some performance
engineering so actually based on that
engineering so actually based on that
we'll be able to tell if uh this was
we'll be able to tell if uh this was
correct because this is what did we say
correct because this is what did we say
python 128 *
python 128 *
128 no wait yeah this is the number of
128 no wait yeah this is the number of
maps uh divide by three oh it's even
maps uh divide by three oh it's even
faster now it's 5400 steps per
faster now it's 5400 steps per
second because I automated the outer
second because I automated the outer
loop right so we're no longer remaking
loop right so we're no longer remaking
the data
the data
constantly that's pretty darn good
so like
so like
3,000 like 3,000 times faster than
python what about this paths colon
python what about this paths colon
equals oh yeah yeah we don't need that
equals oh yeah yeah we don't need that
in the main test we're good we are
good and how much data did we say this
good and how much data did we say this
was cuz I saved it as a Char
was cuz I saved it as a Char
right so it's it's a 128 * 128 * 128 *
MB 268
MB 268
megabytes that's ridiculous
uh 268 megabytes of pathing data
uh 268 megabytes of pathing data
calculated and generated in 3
seconds I'm liking this performance
seconds I'm liking this performance
engineering thing I'm liking it
how do we do this it's this thing
here so
let's do like
this let's set the fps to 30
this let's set the fps to 30
maybe now that's still going to be way
maybe now that's still going to be way
too much data at this
too much data at this
resolution uh we'll set the fps to
resolution uh we'll set the fps to
[Music]
15 where's FPS on this thing rayb in
it okay we'll set the fps to 15 on
it okay we'll set the fps to 15 on
this and we'll do
this and we'll do
frames frames equals like
frames frames equals like
this before I in range
6 seconds of data is
6 seconds of data is
90 90
90 90
frames
frames
frame frames.
frame frames.
append and then we'll
do
uh
uh
recompute or let's just do pathing dog
recompute or let's just do pathing dog
so I don't overwrite anything by mistake
Loop equals
zero cool
we'll see how that gift
looks and lots of cool stuff
looks and lots of cool stuff
here lots of cool
here lots of cool
stuff oh yeah that's a great gift six 6
stuff oh yeah that's a great gift six 6
MB
MB
perfect we'll do
uh one more try I want get something
uh one more try I want get something
real cool looking
nope screwed it
up try not to hit the
up try not to hit the
edges got to not hit the
edges got to not hit the
edges right
here that's pretty good
I thought I just fixed
I thought I just fixed
it is this not the right
one yeah there we go
there let's put this up
100 lines of scon
let's commit this and
uh can I like make this
can I just make the terminal font
smaller I think I can just make the font
smaller I think I can just make the font
smaller right so I can put it in a
screenshot not
quite almost
it's not going to be readable in a
it's not going to be readable in a
screenshot if I do this will
it we'll do it
it we'll do it
anyways Miss as
anyways Miss as
well
oops let's
oops let's
do star p ER
we go
h
there we go I'm happy with
that seems will has gotten bored and has
that seems will has gotten bored and has
stopped streaming meaning that I win for
stopped streaming meaning that I win for
the
[Music]
[Music]
day okay well this is
day okay well this is
awesome um I'm very happy with this
awesome um I'm very happy with this
result this didn't even take that long
result this didn't even take that long
right this took what four hours four
right this took what four hours four
hours of streaming is that how long
hours of streaming is that how long
we've been
we've been
live from
scratch so we're going to get to
scratch so we're going to get to
integrate this now with the mooba
integrate this now with the mooba
obviously
obviously
um I'm going to take a couple minutes
um I'm going to take a couple minutes
going to go use the restro real quick
going to go use the restro real quick
going
going
to uh make a shake and then we're going
to uh make a shake and then we're going
to integrate this with the MOBA
to integrate this with the MOBA
and we're basically just going to have
and we're basically just going to have
massively overpowered pathing and uh we
massively overpowered pathing and uh we
can actually have highle commands now
can actually have highle commands now
like we can write a function that's just
like we can write a function that's just
like you know path to or like you know
like you know path to or like you know
move towards and it can be anywhere on
move towards and it can be anywhere on
the map and that function is now o of
the map and that function is now o of
one and we don't even need to like save
one and we don't even need to like save
like you know destinations along the way
like you know destinations along the way
or anything for it it's just it'll just
or anything for it it's just it'll just
do it now so that's real cool
do it now so that's real cool
anyways I'll be right back
anyways I'll be right back
and uh I don't know go like this if you
and uh I don't know go like this if you
want to help with the promo and Star
want to help with the promo and Star
Puffer if you haven't helps me out a ton
Puffer if you haven't helps me out a ton
be right
be right
back anybody ask where I am tell them
back anybody ask where I am tell them
I'll be back in a
moment
e
e
e
e
e
e
e
e
e
e
[Music]
for e
hey Will
I don't know if you're still there if so
I don't know if you're still there if so
how do you like
this oh of one pathing for the entire
this oh of one pathing for the entire
game
this is what it's going to take to fix
this is what it's going to take to fix
reinforcement learning we need
reinforcement learning we need
simulators that care this much about
perf if we don't have
perf if we don't have
simulators that care this much about
simulators that care this much about
perk
perk
RL is just going to be
RL is just going to be
slow and you're going to have to be
slow and you're going to have to be
Google in order to do
Google in order to do
it if we have
it if we have
simulators that can be as complex as
simulators that can be as complex as
like you know I don't know strip down
like you know I don't know strip down
DOTA this is the goal here that actually
DOTA this is the goal here that actually
really care about
really care about
performance and you can never be
performance and you can never be
bottlenecked by
bottlenecked by
them then we're looking pretty good then
them then we're looking pretty good then
we're looking really really
we're looking really really
good so
good so
we're going to integrate
we're going to integrate
this now we're going to integrate
this we might even make some scripted AI
this we might even make some scripted AI
because why not right we can basically
because why not right we can basically
now reuse the creep AI for the heroes
now reuse the creep AI for the heroes
and we can have them just run at each
and we can have them just run at each
other
other
um and then we'll see from there I'm
um and then we'll see from there I'm
probably to spend three-ish hours on
probably to spend three-ish hours on
this right
this right
now so let's get the pathing integrated
now so let's get the pathing integrated
first uh so that we actually get this in
first uh so that we actually get this in
the main
game I think we are going to cash it as
game I think we are going to cash it as
well but we're not going to we're not
well but we're not going to we're not
going to distribute a 200 megabyte file
going to distribute a 200 megabyte file
what we're going to do is we're just
what we're going to do is we're just
going to cash it on start up right we're
going to cash it on start up right we're
just going to cash it on
just going to cash it on
Startup okay let's fix the these uh what
Startup okay let's fix the these uh what
is this this tiny font I think it was
16 oh jeez this now needs to be the
16 oh jeez this now needs to be the
correct size
correct size
boom okay
good let's commit all this code as
well so you guys can actually have this
well so you guys can actually have this
if you want it
oh
what the
what the
heck oh the follow buttons are leaking
heck oh the follow buttons are leaking
from over here that's fine just
from over here that's fine just
wondering the stream looked
weird Ultra fast
let's do what is it
from
from
H see
three pathing import
and then this just takes a grid
right this game map is a little
wonky Rec compute pathing I think we had
wonky Rec compute pathing I think we had
to modify it
right yeah right
here what the heck where's the call oh
here what the heck where's the call oh
right there um game
map pathing map equals we'll just we'll
map pathing map equals we'll just we'll
do it this way for now game map. copy
do it this way for now game map. copy
pathing
pathing
map0 is equal to one and pathing map
map0 is equal to one and pathing map
equal to 255 is equal to
equal to 255 is equal to
Z we'll leave it like that for
now and now we do pre-compute
now and now we do pre-compute
pathing and this is going to return pre
pathing and this is going to return pre
compute returns paths
compute returns paths
so
paths
equals AI paths is going to be
this self. AIP
this self. AIP
paths and actually what we're going to
paths and actually what we're going to
do is we're going to do
do is we're going to do
um
AI cache path
pathing
pathing
cash
cash
numpy
okay
okay
try
try
accept
boom that looks good right
and then what we do
is
man the sea environment right
here
here
a self. AIP paths right
AI
paths your paths is like
this I don't know why these don't
have you know these things on them as
have you know these things on them as
well this should be
well this should be
CNP should all be
CNP should all be
typed it's just like asking for bugs in
typed it's just like asking for bugs in
scon not to type
them scon doesn't always interpret stuff
them scon doesn't always interpret stuff
right if you don't explicitly type it
right if you don't explicitly type it
and unlike you know most compiled
and unlike you know most compiled
languages uh it will actually not typing
languages uh it will actually not typing
it will cause runtime
errors
errors
so now we do self. AIP paths and where
so now we do self. AIP paths and where
did we do this completely got it wrong
did we do this completely got it wrong
it's 4D like
this and then what do we have move to
interesting
interesting
engage
AOE man
so we need to just make a method path
so we need to just make a method path
towards
towards
right is how it's going to
go move modifier agent speed
WS okay so it's going to be
WS okay so it's going to be
entity destination and we need a float
entity destination and we need a float
speed
right
right
yeah this is
yeah this is
good and do we want to give it the
good and do we want to give it the
integer here
integer here
I think we want to give it int dest y
I think we want to give it int dest y
int d x because if you already have it
int d x because if you already have it
computed you don't want to redo the
cast
cast
so shouldn't be that
hard int
hard int
um
um
entity YX
so then we do speed
equals what's this
clip
oh clip to Nega one and
oh clip to Nega one and
one it's kind of
weird move
modifier okay and now what we do
is interaction
self. AIP
self. AIP
pass that's exactly what we
pass that's exactly what we
want
want
okay DX
Dy and now we have to do this uh
Dy and now we have to do this uh
obnoxious thing so if action equals z
obnoxious thing so if action equals z
and we will
and we will
um we have to flip all of these which is
um we have to flip all of these which is
the obnoxious
the obnoxious
portion because this is this is how you
portion because this is this is how you
go away from the destination so we have
go away from the destination so we have
to flip
them so if action is equal to
them so if action is equal to
zero then we
zero then we
do
do
d y =
d y =
1 if action is
1 if action is
one then we do Dy is
one then we do Dy is
1 then DX is 1 DX is 1 and let's
1 then DX is 1 DX is 1 and let's
see so this
see so this
is was it it's goes minus and then plus
is was it it's goes minus and then plus
so we have to do plus and then
so we have to do plus and then
minus and then it goes plus and then
minus and then it goes plus and then
plus so we have to do minus and then
plus so we have to do minus and then
minus
minus
right and then we do for
right and then we do for
seven uh we missed one of these
seven uh we missed one of these
somewhere so that's not good let me see
somewhere so that's not good let me see
three so four is uh we missed one with
three so four is uh we missed one with
four so this
four so this
is
is
plus and then minus right and then this
plus and then minus right and then this
is plus and
is plus and
plus and this is
plus and this is
minus
minus
and
and
plus minus and
plus minus and
plus and
plus and
then plus and plus and we did something
then plus and plus and we did something
backwards
backwards
because I see five here that I have plus
because I see five here that I have plus
and plus this one's supposed to be minus
and plus this one's supposed to be minus
and minus let me double check these
and minus let me double check these
because it's very important that I have
because it's very important that I have
these
these
correct they should be all flipped from
correct they should be all flipped from
The
Originals so this plus and plus goes
Originals so this plus and plus goes
minus and minus this minus and plus goes
minus and minus this minus and plus goes
plus and then
plus and then
minus this one is minus c plus c
minus this one is minus c plus c
yeah so I have all these
yeah so I have all these
correct okay so now what we do
correct okay so now what we do
is entity dox entity
is entity dox entity
doy um actually we need this move two
doy um actually we need this move two
right so we
right so we
do float
do float
dust y float dust
x uh do this do this
dust
dust
y d
x and then we
x and then we
do move two I
think how do you deal with eye fatigue
think how do you deal with eye fatigue
from looking at this monitor for long
from looking at this monitor for long
periods of
periods of
time oh jeez um
time oh jeez um
I've been doing this for so long that I
I've been doing this for so long that I
no longer get eye fatigue from uh
no longer get eye fatigue from uh
looking at a screen I get eye fatigue
looking at a screen I get eye fatigue
from going
from going
outside so basically even if it's
outside so basically even if it's
partially cloudy if I'm outside I'm
partially cloudy if I'm outside I'm
wearing sunglasses
that is the reality of
things does this thing take into account
things does this thing take into account
move
modifier no it doesn't
I think this is good though
I think this is good though
right and then we
right and then we
do we can make this a beant as well
do we can make this a beant as well
right and we can
right and we can
return move
return move
to that's really
to that's really
nice so now with this creep path thing
nice so now with this creep path thing
right we can replace this whole thing
right we can replace this whole thing
with uh
if grid
if grid
dis is not
empty wait
and I think this is fine so what we do
and I think this is fine so what we do
is we do move
creep y +
Dy wait creep
Dy wait creep
path can we just replace this whole
function I think we can replace this
function I think we can replace this
whole
whole
function I think I can just go like this
right and then I can just
right and then I can just
do
do
um yeah literally this right but I do
um yeah literally this right but I do
need this
need this
Clause This is the End way point right
okay invalid index type float
invalid type
float
towards uh I specified this
as what the
[ __ ] AI
[ __ ] AI
paths death why these are both in buddy
paths death why these are both in buddy
what's wrong with
what's wrong with
you invalid in index Type
you invalid in index Type
looat move
looat move
towards am I
dumb int d y int d
x that looks totally fine to
me hold on is it
me hold on is it
maybe no this is self agent speed right
maybe no this is self agent speed right
you call it with creep agent speed into
you call it with creep agent speed into
of dust Y into dust X did I redefine the
of dust Y into dust X did I redefine the
variable somehow
variable somehow
no uh that's freaking weird is there
no uh that's freaking weird is there
another bug up here oh yeah there bugs
another bug up here oh yeah there bugs
up here that's
up here that's
why uh clear nope not that one
why uh clear nope not that one
clear and
build and we still have the bugs up here
build and we still have the bugs up here
float dust y yep
float dust y yep
redeclared as
redeclared as
expected that breaks
expected that breaks
[ __ ] um d y is going to
[ __ ] um d y is going to
be entity doy wait entity
y Dy times speed this is totally
y Dy times speed this is totally
good it's totally
good what other bugs we
good what other bugs we
got cannot assign type float to
got cannot assign type float to
int uh yeah so we're going to just on
int uh yeah so we're going to just on
line This Then entity
doy
doy
y plus Dy *
y plus Dy *
speed okay we're going to just like
speed okay we're going to just like
this that's
nice obviously we got to delete these
nice obviously we got to delete these
guys
builds builds
we dropping frames what's going
on no we're
on no we're
good free invalid neck
size boarded
really do I have to
really do I have to
do I have all the checks
do I have all the checks
on
right do we have anything in here that
right do we have anything in here that
tells us
anything invalid next
anything invalid next
size normal
these things have type checks on them
these things have type checks on them
don't they these memory views
I would have thought that these would
I would have thought that these would
have d
have d
y we're going to do this and we're going
y we're going to do this and we're going
to see if we get any values that are
to see if we get any values that are
like wonk
we didn't get any of these did
we
so I mean if we're not getting any of
so I mean if we're not getting any of
these is this thing aboring even if I
these is this thing aboring even if I
just do it like this like what what's
just do it like this like what what's
going on here right
okay so it's AB boarding this even
okay so it's AB boarding this even
though um we haven't changed the
though um we haven't changed the
freaking code so let's go figure
out I'm sure that there's some weird
out I'm sure that there's some weird
Jank thing in here
Jank thing in here
right compute
right compute
path it's possible this is looping or
path it's possible this is looping or
some dumb [ __ ] is
some dumb [ __ ] is
happening let's see
no file po Li environments ocean M
no file po Li environments ocean M
pathing okay that's fine
pathing okay that's fine
right
right
accept gam map. copy set
set do we get AI paths no we
don't okay let's see what the hell
don't okay let's see what the hell
happened um apparently our our
happened um apparently our our
pre-computation code was working fine
pre-computation code was working fine
before but it was not working
here game map.
here game map.
shape the 128
shape the 128
oops it is a 128 by 128 game
oops it is a 128 by 128 game
MTH game map I should say
128 by
128 by
unate ah well that would be that well
unate ah well that would be that well
there's your problem
there's your problem
pathing
map so we this is the original
code expected
numpy
ND got memory view
slice interesting
um well that's not bad
right try this
okay there we
okay there we
go here's our game we can play it yada
go here's our game we can play it yada
yada
right
GP now what we're going to do is we're
GP now what we're going to do is we're
going to try to change some
[ __ ]
[ __ ]
boards all right and now move towards is
boards all right and now move towards is
going to be like this this
going to be like this this
this nope stop freaking giving me bad
this nope stop freaking giving me bad
suggestions
autocomplete and
autocomplete and
layer build
this build this in place
well P's a bit wonk isn't
it why is this pathing to
here very weird that this paths to there
here very weird that this paths to there
like this
like this
that the neutrals are also pathing
weird is it possible that the pathing
weird is it possible that the pathing
directions are
wrong and never see them turning which
wrong and never see them turning which
is
weird this one right here you'd expect
weird this one right here you'd expect
to turn
so as for the towers right
like no this they should path around
this let me
this let me
see why is this one going this way
see why is this one going this way
it's possible I just have the actions
it's possible I just have the actions
all flipped
right will these two
right will these two
go totally wrong direction
H
okay where do we update the waypoints
okay where do we update the waypoints
here if found Target
else creep
else creep
path L2
Waypoint
Waypoint
move creep agent speed so we have
move creep agent speed so we have
move
towards wrong
towards wrong
order dest y dest x X andd Y ntid
order dest y dest x X andd Y ntid
X there we
go so now let's see decent chance we get
go so now let's see decent chance we get
something more
reasonable ever heard of probabilistic
reasonable ever heard of probabilistic
programming it refers to the probability
programming it refers to the probability
that your program works the way you
that your program works the way you
intend it to
okay oh look at
okay oh look at
that look at this snake action
here look at that that's sweet so
here look at that that's sweet so
they're getting stuck on Towers because
they're getting stuck on Towers because
um towers are not included on the base
map but look at this like that's some
map but look at this like that's some
really freaking cool movement
really freaking cool movement
right Hy they and then like
right Hy they and then like
perfectly it's a little funny that they
perfectly it's a little funny that they
perfectly jump bump into each other so
perfectly jump bump into each other so
we're going to probably want to Jitter
we're going to probably want to Jitter
it a little
bit but that's so cool look at
that okay
that okay
um
um
Towers Tower positions
let's add some Jitter and then we'll do
let's add some Jitter and then we'll do
Tower
positions it's alive yes it is
alive do I not have a Jitter in
alive do I not have a Jitter in
here this thing here
let's do Jitter X
maybe
maybe
float
float
X Lo Jitter
X Lo Jitter
y times
y times
speed do you do two times speed
speed do you do two times speed
I don't think you need these spaces here
either no you like these spaces these
either no you like these spaces these
are good perceptually grouped so agent
are good perceptually grouped so agent
speed oh no but the it should be the the
speed oh no but the it should be the the
two should be grouped here right because
two should be grouped here right because
it's two times thing
it's two times thing
minus5 yeah so this is the perceptual
minus5 yeah so this is the perceptual
this is how it should be grouped and
this is how it should be grouped and
then what we do is we
then what we do is we
do Jitter at y
X I don't know we do we do it this way I
guess let's see what that Jitter does
guess let's see what that Jitter does
agent speed what
agent speed what
the I love it when it makes up variables
the I love it when it makes up variables
that are just not in my freaking code my
that are just not in my freaking code my
favorite thing man
and I think I wanted to do this first
and I think I wanted to do this first
right we can do
right we can do
this let's do it that way that way we
this let's do it that way that way we
have a modified by speed because
have a modified by speed because
otherwise it's going to be
weird Okay
boom we had a little to the movement
boom we had a little to the movement
which to be fair I'd prefer not to have
which to be fair I'd prefer not to have
to
do oh yeah that's way
do oh yeah that's way
better look at that they go right around
better look at that they go right around
the
towers it's a little too jittery isn't
it uh the neutral creeps are behaving a
it uh the neutral creeps are behaving a
little weird there's too much Jitter
little weird there's too much Jitter
right
it's still really
cool I like look at the snaking Mo
cool I like look at the snaking Mo
motion like it when it rounds this
motion like it when it rounds this
corner is pretty
corner is pretty
cool these neutrals are yeah this is too
cool these neutrals are yeah this is too
much so this is too much
Jitter let's
Jitter let's
do we'll cut it in half
I'm incredibly happy with
I'm incredibly happy with
that so like the thing
that so like the thing
is yes they could do that before
is yes they could do that before
technically but before they were using a
technically but before they were using a
series of uh way points and they were
series of uh way points and they were
just going straight line path from one
just going straight line path from one
Waypoint to the
Waypoint to the
next whereas
next whereas
now we have arbitrary path finding that
now we have arbitrary path finding that
can go around
obstacles what are they getting stuck on
obstacles what are they getting stuck on
here what the heck are these guys oh
here what the heck are these guys oh
they're stuck on the
tower this guy shouldn't be stuck though
tower this guy shouldn't be stuck though
what like what is this guy stuck on here
what like what is this guy stuck on here
I think he's stuck on being
stupid maybe the Jitter what
stupid maybe the Jitter what
couldn't be
stuck well maybe we will uh we'll add
stuck well maybe we will uh we'll add
the towers
in do we add the towers uh into the map
where's the tower
where's the tower
positions oh yeah here this
thing so let's just take
this and we we open a file don't
this and we we open a file don't
we yaml
we yaml
here yeah there's yaml
let's open this
yaml and then we'll just
do uh Tower positions equals
what's the
uh it prefix tier
uh it prefix tier
suffix entity data Tower name y
up
then we'll do
this do we set this to one or
this do we set this to one or
zero we'll just try
zero we'll just try
both and
uh get rid of the cach file
only really what's wrong with this
[ __ ] that's mildly obnoxious
okay so now we're just going to put the
okay so now we're just going to put the
Tower data into the the
Tower data into the the
map yeah so now I can't tell for sure if
map yeah so now I can't tell for sure if
they get stuck or not this guy looks
they get stuck or not this guy looks
like yeah they look like they're still
like yeah they look like they're still
getting stuck let's remove the Jitter
getting stuck let's remove the Jitter
just so we can tell for
just so we can tell for
sure Jitter
0 time
Z we'll rebuild
this now let's
this now let's
see I think it's possible that I just
see I think it's possible that I just
have the sign
flipped does it work
flipped does it work
nope so we can see here clearly that
nope so we can see here clearly that
they get stuck on the
they get stuck on the
towers kind of weird that they stop this
towers kind of weird that they stop this
far away as
far away as
well let's just do
well let's just do
um this pathing map is going to be zero
now pathing cash
now pathing cash
numpy okay so now it'll have to
numpy okay so now it'll have to
precompute
again
really no that should definitely solve
it they should not be able to get stuck
it they should not be able to get stuck
on their own Towers
on their own Towers
anymore which is clearly what's
happening right
happening right
here they can't be stuck on each other
here they can't be stuck on each other
right no they can't that's not how the
right no they can't that's not how the
game engine
works this looks this portion here looks
works this looks this portion here looks
good but something's stuck
so we do this way like
this let's see what is in the m in the
this let's see what is in the m in the
map currently I want to just make sure
map currently I want to just make sure
we're correctly we're flipping this on
so it's zero so we were correct the
so it's zero so we were correct the
first time it should be one which is
first time it should be one which is
what I
expected hold on
so
wait is it possible
is it possible that the way that I'm
is it possible that the way that I'm
Computing pathing things can still get
Computing pathing things can still get
stuck if they don't move fast
enough if groups of Agents don't move
enough if groups of Agents don't move
for some seconds
for some seconds
penalize that will not happen with more
penalize that will not happen with more
training there's no mode so this is not
training there's no mode so this is not
a training thing this
a training thing this
is I think what is happening is that
is I think what is happening is that
when I compute the path Maps right I'm
when I compute the path Maps right I'm
Computing the path uh the optimal
Computing the path uh the optimal
pathing
pathing
assuming that agents
assuming that agents
move uh one unit per
move uh one unit per
second but the thing is if they move
second but the thing is if they move
less than one unit per
less than one unit per
second then
second then
like they could still get stuck on stuff
like they could still get stuck on stuff
right so let's say that the optimal path
right so let's say that the optimal path
is like you come up to a corner and you
is like you come up to a corner and you
want to move diagonally around the
want to move diagonally around the
corner right if you don't move fast
corner right if you don't move fast
enough you're going to get stuck on the
enough you're going to get stuck on the
corner that's a thing that can happen
all
right yeah so let me let me explain this
right yeah so let me let me explain this
for the chat
here is this the bad one yeah this is
here is this the bad one yeah this is
the garbage one I don't know why this
the garbage one I don't know why this
freaking app exists this one's so dog
freaking app exists this one's so dog
[ __ ] um is this
[ __ ] um is this
good yeah this one's
good yeah this one's
fine so
you have a tile here like
you have a tile here like
this
this
right and let's say that I'm starting
right and let's say that I'm starting
here this is your
here this is your
obstacle and your destination tile is
obstacle and your destination tile is
here okay so the way that the pathf
here okay so the way that the pathf
finding gets
finding gets
computed it gets computed using uh L1
computed it gets computed using uh L1
distance no l Infinity distance y
distance no l Infinity distance y
Infinity so the way the pathing works is
Infinity so the way the pathing works is
it looks here it looks you know over
it looks here it looks you know over
here it looks here and it looks for you
here it looks here and it looks for you
know a way around this obstacle so let's
know a way around this obstacle so let's
say it finds this one it says look if I
say it finds this one it says look if I
just take one step to the diagonal then
just take one step to the diagonal then
I get to this
I get to this
tile but what happens if your agent
tile but what happens if your agent
isn't that fast right
your agent let's say that they move
your agent let's say that they move
half um or let's say that they get like
half um or let's say that they get like
partially into a tile right so it could
partially into a tile right so it could
happen that your agent gets to like
happen that your agent gets to like
right here and then it does the check
right here and then it does the check
and then it tries to move this way but
and then it tries to move this way but
it actually can only move this far so it
it actually can only move this far so it
gets stuck into this
tile because it can't clip across the
tile because it can't clip across the
corner
so this is not a major
problem this Tower patch is going to be
problem this Tower patch is going to be
better than
nothing we're going to regenerate the uh
nothing we're going to regenerate the uh
the map pathing data one more
time and then uh we're going to we're
time and then uh we're going to we're
going to add just a little bit of
Jitter say this much
Jitter and we're going to hope this is
Jitter and we're going to hope this is
good we got to tune the Jitter amount
good we got to tune the Jitter amount
just a little bit because I don't want
just a little bit because I don't want
it to be too
it to be too
much I think that there should only be a
much I think that there should only be a
little bit of Jitter just enough to
little bit of Jitter just enough to
break up the symmetries and
stuff we also might want to pre-compute
stuff we also might want to pre-compute
the Jitter which would be
funny I'm literally like looking at that
funny I'm literally like looking at that
Rand function as oh the Rand function
Rand function as oh the Rand function
could be too
slow okay well this is
slow okay well this is
weird now this I don't know what they're
weird now this I don't know what they're
getting stuck
on I think we should load this up in
on I think we should load this up in
human
human
mode and go watch
mode and go watch
them oops let's get this out of the way
them oops let's get this out of the way
so it's not obscuring
so it's not obscuring
chat uh pathing map is not associated
chat uh pathing map is not associated
with
with
a
variable
really should
be
whoops no wait it's right there yep
whoops no wait it's right there yep
right there
okay render mode goes to
human huh oh this is just the mouse
human huh oh this is just the mouse
cursor bug that's fine hold
cursor bug that's fine hold
on okay so we have some
puers they're stuck right here
they're stuck on the
tile so these guys should not be stuck
tile so these guys should not be stuck
here
here
right I think they're stuck on each
right I think they're stuck on each
other
maybe did I like lose the check to make
maybe did I like lose the check to make
sure that they don't get stuck on each
sure that they don't get stuck on each
other
this path finding here is pretty
this path finding here is pretty
good
boom no leave me
boom no leave me
[Music]
[Music]
alone we will go in for a
alone we will go in for a
kill
kill
yeah heroically
so they're stuck on something let's see
so they're stuck on something let's see
uh I might have messed up some
logic so what did I do with this creep
logic so what did I do with this creep
pathing logic
right ah it's this thing right here I
right ah it's this thing right here I
believe
this
logic move
to
to
if but this looks good right here
if but this looks good right here
because I have this logic wait
if hold on
if oh this is the Jitter function
right yeah this is the Jitter function
interesting
so let's see this
one so float Jitter
one so float Jitter
X and Float Jitter y this can go in here
X and Float Jitter y this can go in here
right if grid
dis
Y into d
y looat move
y looat move
to
to
Y
Y
in let's just let's make it work and
in let's just let's make it work and
then we'll make it nice
so move to
so move to
Y and get rid of
Jitter
Jitter
okay and then what we're going to going
okay and then what we're going to going
to
do is we're going to
do is we're going to
return move
to Jitter X Jitter
to Jitter X Jitter
y two
times speed
times speed
two *
speed times this
quantity and then what we're going to do
is move
is move
to hold
to hold
on
on
entity
entity
entity um
entity. y plus what the [ __ ] are these
entity. y plus what the [ __ ] are these
suggestions
man MTD X Jitter
X okay so we return move two
X okay so we return move two
otherwise return plus speed no Jitter
otherwise return plus speed no Jitter
maybe maybe no Jitter maybe we determin
maybe maybe no Jitter maybe we determin
ASE for now
pathing is not easy good pathing good
pathing is not easy good pathing good
like creep
like creep
AI not
AI not
easy possible inconsistent
indentation canot assign type bloat to
int okay
I yeah let's just go go like
I yeah let's just go go like
this let's
this let's
go how my
go how my
puffers where my puffers
puffers where my puffers
at well they're not
at well they're not
stuck they pass through this way more
stuck they pass through this way more
cleanly now
right render mode is going to
right render mode is going to
be rib
what do we think about
this looks way better
this looks way better
right a
pathing I'd say that's
pathing I'd say that's
clean occasionally one of them can
clean occasionally one of them can
glitch we're going to increase the
glitch we're going to increase the
Jitter we can actually this is the nice
Jitter we can actually this is the nice
thing is
um I think we just
um I think we just
do we don't do two times speed we just
do we don't do two times speed we just
we just straight up Jitter them one tile
we just straight up Jitter them one tile
this is a one tile
this is a one tile
Jitter that is a lot more aggressive but
Jitter that is a lot more aggressive but
the thing is we only do it when they're
the thing is we only do it when they're
stuck so if we only Jitter them when
stuck so if we only Jitter them when
they're
stuck that'll be better
stuck that'll be better
it might be a bit much we'll see I got
it might be a bit much we'll see I got
to check what the default move speeds
to check what the default move speeds
are I think it's like 0.
five I mean
five I mean
that's that's like perfect
that's that's like perfect
though
though
right and like look at the fight like
right and like look at the fight like
the Frontiers on the fights I just want
the Frontiers on the fights I just want
to point this out like look how clean
to point this out like look how clean
these Frontiers are like you get like
these Frontiers are like you get like
these act like organic looking battles
these act like organic looking battles
cuz they like or they just like Jitter
cuz they like or they just like Jitter
until they find a spot that they can
until they find a spot that they can
fight like the nearest
one and like you get this like snake
one and like you get this like snake
like pathing around all the way
like pathing around all the way
points these are the actual DOTA way
points these are the actual DOTA way
points as
well that's freaking
solid now now the neutral
solid now now the neutral
creeps we're probably going to let them
creeps we're probably going to let them
just chill out
just chill out
because they're like spazzing they
because they're like spazzing they
should kind of just be chilling in place
should kind of just be chilling in place
for the most
part I'm very happy with
that why is this gray one spazzing out
oh they're allowed to spaz out randomly
oh they're allowed to spaz out randomly
it's just gotten lucky that's
it's just gotten lucky that's
fine yeah these ones like they are way
fine yeah these ones like they are way
less locked in oh my gosh do you see
less locked in oh my gosh do you see
this Tower this red one is pulling this
this Tower this red one is pulling this
Tower around do you see
Tower around do you see
this this red one just pulled the tower
this this red one just pulled the tower
all the way they freaking pulled the
all the way they freaking pulled the
tower they pulled the tower through the
tower they pulled the tower through the
wall as well they deleted the wall with
wall as well they deleted the wall with
the tower
okay guys I told you I would leave this
okay guys I told you I would leave this
in as an Easter egg but like are we
sure that's freaking
crazy that they're just like this is
crazy that they're just like this is
them acting randomly imagine that they
them acting randomly imagine that they
actually play this and they just learn
actually play this and they just learn
to pull all of their towers to right
to pull all of their towers to right
around the Nexus and just sit there
around the Nexus and just sit there
like what what are you going to do
like what what are you going to do
you're getting hit by freaking nine
you're getting hit by freaking nine
[Laughter]
[Laughter]
[Music]
Towers just becomes a game about pulling
Towers just becomes a game about pulling
the enemy's
the enemy's
Towers okay we got to kill this before
Towers okay we got to kill this before
it kills us with the
memory oh that's so funny
how's the Twitter have we have we gotten
how's the Twitter have we have we gotten
a million a million billion
likes oh he's still
likes oh he's still
alive had to take a break I
alive had to take a break I
say that's no
goodwi not bad
happy to say we uh we broke 4k on the
happy to say we uh we broke 4k on the
account so the growth has just been
account so the growth has just been
awesome and if I recall puffer lib is um
awesome and if I recall puffer lib is um
oh shoot we got
661 this is
661 this is
awesome right here this is just
awesome right here this is just
great I really hope we can keep this up
this pace of growth is just great for
this pace of growth is just great for
the
project yeah I hope
project yeah I hope
so like the the uh I think that the one
so like the the uh I think that the one
that will potentially do very well is
that will potentially do very well is
the the one that I already posted you're
the the one that I already posted you're
not going to be able to tell the pathing
not going to be able to tell the pathing
difference just looking at the Moa
difference just looking at the Moa
without looking very closely
without looking very closely
it's the key thing is the new pathing is
it's the key thing is the new pathing is
just going to make everything less
just going to make everything less
glitchy and bad so before
glitchy and bad so before
let's say that you lur a
let's say that you lur a
creep if you lur a creep somewhere
creep if you lur a creep somewhere
random it basically would just be stuck
random it basically would just be stuck
now it will actually correctly path back
now it will actually correctly path back
to Lane like in the real
to Lane like in the real
game because it has perfect pathing from
game because it has perfect pathing from
anywhere on the map with the one
anywhere on the map with the one
exception being that if it gets uh there
exception being that if it gets uh there
like there's weird discretization stuff
like there's weird discretization stuff
where it can get stuck on an obstacle
where it can get stuck on an obstacle
but then it'll Jitter out and it'll
but then it'll Jitter out and it'll
continue its path so it's pretty
continue its path so it's pretty
efficient
I really like this
demo wasn't that hard
either
either
funny
okay let's
okay let's
try let's try some stuff out
try let's try some stuff out
so we should be able to simplify and
so we should be able to simplify and
clean up a lot of the uh the NPC logic
clean up a lot of the uh the NPC logic
with this and possibly even add like
with this and possibly even add like
some basic scripted player control to
some basic scripted player control to
this and definitely we should be able to
this and definitely we should be able to
improve the human player control uh with
improve the human player control uh with
this as
this as
well
well
so it's 5:00
so it's 5:00
p.m. I think we can be a little more
p.m. I think we can be a little more
ambitious than just that right
let's start with
let's start with
this so first of all this creep path
thing no longer needs to be a
function because if we go to
here Waypoint is creep.
Waypoint e
okay what we do move
okay what we do move
towards is what we
did okay move
did okay move
towards and do we have float dest y we
towards and do we have float dest y we
do
uh agent
uh agent
speed be
fine and then this is
fine and then this is
also move
also move
towards
towards
this so let's try this to start
right uh we also we forgot that we need
right uh we also we forgot that we need
this in the neutral NPCs as well move
this in the neutral NPCs as well move
fors
so right
so right
here if found
Target move
towards L if
L2 so we're basically always going to do
L2 so we're basically always going to do
a distance calc right so we can just
a distance calc right so we can just
float
dist no we can't because it's a
dist no we can't because it's a
different
L2
L2
L2 does less than
L2 does less than
two then you path towards your spawn if
two then you path towards your spawn if
you're like not close enough to it it
right and then we delete creep path
right and then we delete creep path
which is a nice big block of code to be
which is a nice big block of code to be
able to delete I'm happy with
able to delete I'm happy with
that which puts us now at 11:47
lines let's
lines let's
see I think we just confused some
see I think we just confused some
variables it's that time of day
again very happy with the progress I've
again very happy with the progress I've
been putting and I'm not actually all
been putting and I'm not actually all
that happy with my hours though I would
that happy with my hours though I would
like to be putting in more hours I know
like to be putting in more hours I know
I've been getting tired
fast uh what the heck this shouldn't be
fast uh what the heck this shouldn't be
creep path this should be move
creep path this should be move
towards right agent
towards right agent
speed yeah this should be
this into d
this into d
y move
y move
towards this says Target
doy nice
perfect these creeps are stationary they
perfect these creeps are stationary they
should be
should be
stationary now the question is if we do
stationary now the question is if we do
render mode human and we screw with a
render mode human and we screw with a
couple of them if they're still
couple of them if they're still
stationary here we go here's our MOA
stationary here we go here's our MOA
going to boost on
going to boost on
over and we're going to say hi to the
over and we're going to say hi to the
neutral
neutral
creeps the neutral creeps are kind of
creeps the neutral creeps are kind of
hidden in this terrain we can fix
hidden in this terrain we can fix
that ah no they're
that ah no they're
attacking and if they stop attacking do
attacking and if they stop attacking do
they path back to their
they path back to their
target okay so they get stuck let me
target okay so they get stuck let me
just double check that they don't have
just double check that they don't have
two
okay they get stuck at the moment let's
okay they get stuck at the moment let's
figure out why that
figure out why that
is scan
is scan
AOE exclude
friendly exclude
hostile do you intend to let neutral
hostile do you intend to let neutral
creeps be pulled into Lane creeps oh
creeps be pulled into Lane creeps oh
[ __ ] I forgot is that a thing in Dota
[ __ ] I forgot is that a thing in Dota
did the lane creeps fight the neutrals
did the lane creeps fight the neutrals
in DotA
pulling yeah yeah it's been so long
pulling yeah yeah it's been so long
since I've played man I haven't played
since I've played man I haven't played
since like open AI 5 days done on
since like open AI 5 days done on
radiant bottomer yeah okay I used to
radiant bottomer yeah okay I used to
play
play
um P4 Lena which tells you that I have
um P4 Lena which tells you that I have
no idea what the hell I'm
no idea what the hell I'm
doing
um let me
um let me
think yeah I remember you would pull the
think yeah I remember you would pull the
camps you could stack the camps there's
camps you could stack the camps there's
a lot of [ __ ] you could do right
it's interesting I'd be open to
it's interesting I'd be open to
it not the first thing I'm going to
it not the first thing I'm going to
implement
but neutrals near Mid look very close to
but neutrals near Mid look very close to
the Lane could work out on all Lanes
the Lane could work out on all Lanes
they shouldn't be any closer than they
they shouldn't be any closer than they
would be
normally I guess the map is slightly
normally I guess the map is slightly
downscaled so the character model should
downscaled so the character model should
maybe be
maybe be
smaller um but this is the exact DOTA
smaller um but this is the exact DOTA
map
like so here's the DOTA map right this
like so here's the DOTA map right this
is exactly where all the obstacles are
is exactly where all the obstacles are
on the real DOTA map just
downscaled everything should be one to
downscaled everything should be one to
one the same with
that let me figure out what the heck is
that let me figure out what the heck is
happening here first because this is
happening here first because this is
higher priority uh I think what I was
higher priority uh I think what I was
going to do is I was kind of just G to
going to do is I was kind of just G to
code you know a whatever the heck I can
code you know a whatever the heck I can
do with the MOBA to make it interesting
do with the MOBA to make it interesting
and then get some kind of cool RL models
and then get some kind of cool RL models
on it that was going to be the highest
on it that was going to be the highest
priority thing and then if people like
priority thing and then if people like
this project if this project gets enough
this project if this project gets enough
attention then what I will do is I'll
attention then what I will do is I'll
open it up to some DOTA players and say
open it up to some DOTA players and say
like hey you know what are some of like
like hey you know what are some of like
the most important things about DOTA
the most important things about DOTA
that I'm missing here that you know
that I'm missing here that you know
maybe I could easily add a few modif
maybe I could easily add a few modif
ifications right
awesome project by the way I was
awesome project by the way I was
watching videos on YouTube first time
watching videos on YouTube first time
ACR the stream what map version of are
ACR the stream what map version of are
you're using I think it's really old I
you're using I think it's really old I
think it's like 7.3 or something I can
think it's like 7.3 or something I can
update it very easily as the thing I
update it very easily as the thing I
just need the data files in like a
just need the data files in like a
reasonable format so I found some repo
reasonable format so I found some repo
online that had already like scraped all
online that had already like scraped all
the tower positions and scraped the
the tower positions and scraped the
neutral positions and like the map data
neutral positions and like the map data
and stuff so I'm using that I only found
and stuff so I'm using that I only found
one from like 7.3 or something like that
one from like 7.3 or something like that
um I have no idea how much it's changed
um I have no idea how much it's changed
over the years no
idea like I'm sure it's changed in ways
idea like I'm sure it's changed in ways
that DOTA players find like yeah they
that DOTA players find like yeah they
make huge differences on the game playay
make huge differences on the game playay
but like visually if you were to look at
but like visually if you were to look at
the map then and look at the map now are
the map then and look at the map now are
you immediately going to go oh that's
you immediately going to go oh that's
totally different or is it like at a
totally different or is it like at a
high level the same
thing like I know League redid the like
thing like I know League redid the like
they redid the way that the jungle
they redid the way that the jungle
worked I don't know last year and it was
worked I don't know last year and it was
like a huge thing for the way that the
like a huge thing for the way that the
game plays but for anybody who doesn't
game plays but for anybody who doesn't
play league like you look at the map
play league like you look at the map
before you look at the map after and
before you look at the map after and
it's like the same
map found
Target found Target equal scan AOE if
Target found Target equal scan AOE if
found
found
Target nearest scanned but basic
Target nearest scanned but basic
otherwise move
otherwise move
towards L
towards L
if spawn y spawn X less than two move
if spawn y spawn X less than two move
towards neutral spawn y neutral spawn
towards neutral spawn y neutral spawn
X why is this not
[Music]
[Music]
valid do they spawn inside of uh
valid do they spawn inside of uh
uh do they like spawn inside of um
uh do they like spawn inside of um
terrain or something hold on maybe this
terrain or something hold on maybe this
is just like a bad spawn I don't
is just like a bad spawn I don't
know and not really live Human
mode but yeah the goal is not to spend
mode but yeah the goal is not to spend
forever on this project right like I
forever on this project right like I
want to do a whole bunch of cool stuff
want to do a whole bunch of cool stuff
on stream I don't want to get stuck on
on stream I don't want to get stuck on
this forever come on
this forever come on
puffer yeah yeah you know you want to
puffer yeah yeah you know you want to
follow me ha what are you going to do
follow me ha what are you going to do
you're going to stay there and be
you're going to stay there and be
stuck get blink stried on I don't know
stuck get blink stried on I don't know
why this blink strike drains my Mana
why this blink strike drains my Mana
like that without teleporting me uh we
like that without teleporting me uh we
got stuff to fix but so it just doesn't
got stuff to fix but so it just doesn't
freaking follow
me L2 distance of neutral. Y neutral
me L2 distance of neutral. Y neutral
dox if found
Target if the L2
distance you're going to basic attack
distance you're going to basic attack
otherwise you're going to move towards
otherwise you're going to move towards
me L
me L
if what the
if what the
hell why is this
hell why is this
not why does this not do
not why does this not do
it neutral that spawn one
it neutral that spawn one
y neutral. spawn
X move
towards
uh moving towards
I don't know if you've seen them as well
I don't know if you've seen them as well
uh I guess I really need to upload the
uh I guess I really need to upload the
uh the snake Dev streams to X cuz that
uh the snake Dev streams to X cuz that
was the first week I built like this
was the first week I built like this
4096 player snake game in a week that
4096 player snake game in a week that
runs at 14 million steps per second
runs at 14 million steps per second
single
single
core that was like an easier to follow
core that was like an easier to follow
stream as
well cuz that environment is like way
well cuz that environment is like way
simpler than
simpler than
this way
this way
simpler okay puffers pull the puffers
simpler okay puffers pull the puffers
come on
come on
puffer you know you want to follow
puffer you know you want to follow
me okay so now he just moving towards a
me okay so now he just moving towards a
whole bunch
right and now he's no longer moving
right and now he's no longer moving
towards oh no he is still moving towards
towards oh no he is still moving towards
what the heck
do you have a g good resource to learn
do you have a g good resource to learn
ml wanted to make a game similar to
ml wanted to make a game similar to
Total
Total
War and make an AI for
War and make an AI for
that you're jumping in at the deep end
that you're jumping in at the deep end
so I've worked in natural language
so I've worked in natural language
processing vision and reinforcement
processing vision and reinforcement
learning uh reinforcement learning is by
learning uh reinforcement learning is by
by far the hardest because in addition
by far the hardest because in addition
to the things that you need to learn
to the things that you need to learn
with ML you need a substantial bit of
with ML you need a substantial bit of
engineering to deal with the simulation
engineering to deal with the simulation
stack right not to mention we have a
stack right not to mention we have a
bunch of very cursed things as well
bunch of very cursed things as well
though I'm working on that um ml in
though I'm working on that um ml in
general cs231n lectures online either
general cs231n lectures online either
Andre or
Andre or
Justin's probably the best place to
Justin's probably the best place to
start reinforcement learning from there
start reinforcement learning from there
the fundamentals aren't all that
the fundamentals aren't all that
complicated if you get ml little bit of
complicated if you get ml little bit of
math not too much the main thing is just
math not too much the main thing is just
ridiculous quantities of engineering
ridiculous quantities of engineering
you know I spent four hours today
you know I spent four hours today
pre-computing pathing I don't know if
pre-computing pathing I don't know if
you were here for this um I spent four
you were here for this um I spent four
hours today pre-computing
hours today pre-computing
pathing uh this is 268 megabytes of
pathing uh this is 268 megabytes of
pathing data and as a result the
pathing data and as a result the
simulator can now do pathing while
simulator can now do pathing while
running like a thousand times faster
running like a thousand times faster
than it would otherwise um like this is
than it would otherwise um like this is
the level of stuff that it takes to get
the level of stuff that it takes to get
really high performance Sims that are
really high performance Sims that are
going to be usable with reinforcement
going to be usable with reinforcement
learning um I mean that said it is just
learning um I mean that said it is just
getting easier and easier and the
getting easier and easier and the
approach that I've been taking with uh
approach that I've been taking with uh
snake and with this project and with all
snake and with this project and with all
the other Sims I've been developing is
the other Sims I've been developing is
one that I would say is fairly
one that I would say is fairly
accessible um it's it's something that
accessible um it's it's something that
you can pick up for sure uh it will take
you can pick up for sure uh it will take
some work it will definitely take some
some work it will definitely take some
work fundamentals though start with 231n
work fundamentals though start with 231n
go from there
RL there's I forgot that uh it's kind of
RL there's I forgot that uh it's kind of
dated but for RL there's open AI
dated but for RL there's open AI
spinning up
spinning up
documents it's way more math than you
documents it's way more math than you
need and the code isn't great still
need and the code isn't great still
probably one of the better
probably one of the better
resources you can also just read through
resources you can also just read through
clean RL clean RL is awesome
found
Target move towards
right does this say moving towards still
I think I might just not have been
I think I might just not have been
paying
attention no it say moving towards
attention no it say moving towards
[Music]
[Music]
already right
because oh
because oh
stupid stupid
stupid stupid
stupid there we go
man I got to not be recking messing up
man I got to not be recking messing up
my code bases towards the end of the day
my code bases towards the end of the day
because I just like Miss stuff like
that all right puffers what do you got
that all right puffers what do you got
you got
you got
game H you got nothing that's right you
game H you got nothing that's right you
go back to the hole here we're going to
go back to the hole here we're going to
lure a puffer hey puffer what are you
lure a puffer hey puffer what are you
doing what are you doing you're doing
doing what are you doing you're doing
nothing go
back get AO
Eed
Eed
cool isn't
nice very nice
why did the puffers go underneath the
map it'd be better if they went on top
map it'd be better if they went on top
of the map if they were going to clip
of the map if they were going to clip
like this
right PR computed pathing is very cool
right PR computed pathing is very cool
does it rule out any Dynamic Mac changes
does it rule out any Dynamic Mac changes
Co though like collision with other nope
Co though like collision with other nope
you can still collide with other
you can still collide with other
entities you just can't account for them
entities you just can't account for them
in pathf finding um which you wouldn't
in pathf finding um which you wouldn't
be doing anyways
be doing anyways
pdubs the difference
pdubs the difference
in the difference in computational
in the difference in computational
efficiency though with doing it this way
efficiency though with doing it this way
versus like trying to do AAR in in the
versus like trying to do AAR in in the
loop it's like a difference of like
loop it's like a difference of like
Factor 10,000 or something
Factor 10,000 or something
so yeah it's
so yeah it's
massive stuff like this is what's going
massive stuff like this is what's going
to let this run a million steps per
to let this run a million steps per
second
pdubs is the original author of the uh
pdubs is the original author of the uh
the viral Pokemon Red reinforcement
the viral Pokemon Red reinforcement
learning
learning
project been helping out with that with
project been helping out with that with
puffer mostly just sponsoring compute
puffer mostly just sponsoring compute
these days but uh awesome awesome
these days but uh awesome awesome
project go check it out if you haven't
already Okay so this now works
already Okay so this now works
um what was wrong with my renderer again
oh right I forgot I still was using the
oh right I forgot I still was using the
old renderer for the
old renderer for the
grid that's obnoxious
um we're probably going to swap this out
um we're probably going to swap this out
anyways
right let's hit
this will do it right this fixes
this will do it right this fixes
it
whoops hey
whoops hey
bebs
welcome uh tile is zero or two
welcome uh tile is zero or two
continue and then I forgot to just
continue and then I forgot to just
Define this here
Define this here
right and we're just going to hack this
right and we're just going to hack this
because I'm going to replace this client
because I'm going to replace this client
any I wrote a better client
any I wrote a better client
this will just make it cleaner for the
this will just make it cleaner for the
time being cuz now when you do when you
time being cuz now when you do when you
do weird stuff um yeah you'll go on top
do weird stuff um yeah you'll go on top
or you'll you'll go through the map when
or you'll you'll go through the map when
you
you
do so like if I boost towards this you
do so like if I boost towards this you
can boost through it just depends on
can boost through it just depends on
your
speed and then you can actually see the
speed and then you can actually see the
targets oh
targets oh
no what's the data format for
no what's the data format for
pre-computed path how are they looked up
pre-computed path how are they looked up
it is a 268 megabyte 4D table you index
it is a 268 megabyte 4D table you index
it with um destination y comma
it with um destination y comma
destination X because
destination X because
assumedly that's the thing that's
assumedly that's the thing that's
changing the least often so for cache
changing the least often so for cache
coherency those go first and then um
coherency those go first and then um
your current y your current X so simple
your current y your current X so simple
4 DET table lookup
takes 3 seconds to pre-compute those um
takes 3 seconds to pre-compute those um
268 megabytes of data by the way the
268 megabytes of data by the way the
scon implementation for pre-computation
scon implementation for pre-computation
is 3 seconds uh that's about 3,000 times
is 3 seconds uh that's about 3,000 times
slower than the python Implement 3,000
slower than the python Implement 3,000
times faster than the python
times faster than the python
implementation so the python
implementation so the python
implementation would literally take
implementation would literally take
hours to run
so ionized it both because it would be
so ionized it both because it would be
cool it would you know save me time
cool it would you know save me time
ultimately not having to wait for the
ultimately not having to wait for the
thing and also I don't have to
thing and also I don't have to
distribute a 260 whatever megabyte
distribute a 260 whatever megabyte
file right I just cach it the first time
file right I just cach it the first time
you make the environment so you only get
you make the environment so you only get
3 second startup once and after that you
3 second startup once and after that you
have much faster
startup okay so this is good now we made
startup okay so this is good now we made
the render a little
the render a little
prettier um technically we could get a
prettier um technically we could get a
nice background for
nice background for
this if we wanted to we could paint like
this if we wanted to we could paint like
a cool background for
a cool background for
this I don't want to use the DOTA map I
this I don't want to use the DOTA map I
think that
think that
that like using DOTA data for a science
that like using DOTA data for a science
project that's one thing using their
project that's one thing using their
artwork that's kind of sketch so we're
artwork that's kind of sketch so we're
not going to do that
not going to do that
unless they tell me I
can 5:30 wasn't that bad let me think
can 5:30 wasn't that bad let me think
what else we can do for tonight let me
what else we can do for tonight let me
think of something
think of something
cool how many paths is that in total
cool how many paths is that in total
well it's from every tile on a 128 by
well it's from every tile on a 128 by
128 map to every other
128 map to every other
path right on the
path right on the
map so
behind each index is a full path no it's
behind each index is a full path no it's
no behind each index is the movement
no behind each index is the movement
that you should take right so if you're
that you should take right so if you're
if you want to get to d y comma d x and
if you want to get to d y comma d x and
you're currently at start y comma start
you're currently at start y comma start
X what move do you take and then you do
X what move do you take and then you do
the next lookup with your new start
the next lookup with your new start
position and you get your next move so
position and you get your next move so
that's 200 128 to the 4th IS 268
that's 200 128 to the 4th IS 268
million we're storing it each uh each
million we're storing it each uh each
action is one bite so that gives you 268
action is one bite so that gives you 268
MB also had you seen pre-computed path
MB also had you seen pre-computed path
used in other projects or is this just
used in other projects or is this just
what made sense to you this is just what
what made sense to you this is just what
made sense to me I haven't seen people
made sense to me I haven't seen people
do
this I mean maybe there probably some
this I mean maybe there probably some
projects that do it but I'd assume it's
projects that do it but I'd assume it's
pretty
pretty
rare I mean like
rare I mean like
If This Were when you implement this
If This Were when you implement this
efficiently like you could do this
efficiently like you could do this
probably 10,000 plus times per second if
probably 10,000 plus times per second if
you wanted to and you don't ever have to
you wanted to and you don't ever have to
like update the paths that often so you
like update the paths that often so you
could have a game with a thousand
could have a game with a thousand
players doing this in a real time
players doing this in a real time
without pre-computation no problem but
without pre-computation no problem but
the thing is that
the thing is that
um this game is going to run at 20,000
um this game is going to run at 20,000
times real time per core 128 squared um
times real time per core 128 squared um
um no not really it it depends what you
um no not really it it depends what you
mean by how many paths are there
mean by how many paths are there
like the number of paths is technically
like the number of paths is technically
from any node to any other node on the
from any node to any other node on the
graph right so the number of nodes is
graph right so the number of nodes is
equal to 128 squared and then the number
equal to 128 squared and then the number
of paths is 128 squar squared so they're
of paths is 128 squar squared so they're
128 to the 4th different possible
128 to the 4th different possible
paths and they're stored in 128 to 4
paths and they're stored in 128 to 4
bites because um the paths all overlap
bites because um the paths all overlap
so you can you know you don't have to
so you can you know you don't have to
store the individual path that way
store the individual path that way
otherwise it would be ridiculous you
otherwise it would be ridiculous you
wouldn't be able to store it if you
wouldn't be able to store it if you
stored the individual paths like that
stored the individual paths like that
without overlap and it wouldn't even be
without overlap and it wouldn't even be
any
faster I think the chat is pretty
faster I think the chat is pretty
delayed uh let me see edit
delayed uh let me see edit
settings we have stream settings for
YouTube is there like a stream hold on
YouTube is there like a stream hold on
let me do this off
let me do this off
screen uh
screen uh
[Music]
[Music]
settings
settings playback and
settings playback and
performance is there streaming are there
performance is there streaming are there
like streaming like laty things on
like streaming like laty things on
YouTube I seem to remember there
YouTube I seem to remember there
being streaming latency
settings I'll mess with this later
settings I'll mess with this later
because I don't think I can do it while
because I don't think I can do it while
keeping the stream
up I think it's like 10 or 15 seconds I
up I think it's like 10 or 15 seconds I
didn't notice the last one for a bit
didn't notice the last one for a bit
um but yeah when you see my when you see
um but yeah when you see my when you see
your message pop up on my screen that's
your message pop up on my screen that's
when I can see it it shouldn't be 40
when I can see it it shouldn't be 40
seconds that's
seconds that's
ridiculous if it is that's YouTube being
ridiculous if it is that's YouTube being
Jank but basically as soon as you see
Jank but basically as soon as you see
your message pop up on the actual stream
your message pop up on the actual stream
um message there I can see it if I were
um message there I can see it if I were
to open the YouTube chat window I'd be
to open the YouTube chat window I'd be
able to see him
instantly I don't have that open though
instantly I don't have that open though
I just have the uh the plugin it's only
I just have the uh the plugin it's only
delayed about 5 Seconds okay okay yeah I
delayed about 5 Seconds okay okay yeah I
don't know
then okay next stuff with the Moa um
then okay next stuff with the Moa um
there was so much stuff I wanted to do
there was so much stuff I wanted to do
with this project but I want to figure
with this project but I want to figure
out like what are the key key things we
out like what are the key key things we
need because I'd like to have models
need because I'd like to have models
training on this relatively
training on this relatively
soon message is taking like a minute to
soon message is taking like a minute to
show up in the Stream after that's weird
show up in the Stream after that's weird
then I don't know uh it can be endpoint
then I don't know uh it can be endpoint
specific I don't know if you're on
specific I don't know if you're on
mobile or
whatever it's
weird I haven't changed anything in my
weird I haven't changed anything in my
settings as far as I'm
aware oh it's my fault I was watching
aware oh it's my fault I was watching
the video a minute
the video a minute
behind
behind
LOL that's
funny okay
um stuff to do on this project
um stuff to do on this project
now there's some game balance stuff that
now there's some game balance stuff that
we have to
we have to
do there is a little bit of debugging
do there is a little bit of debugging
stuff that we have to do with specific
stuff that we have to do with specific
skills uh it would be cool to get like
skills uh it would be cool to get like
some sort of Baseline type
some sort of Baseline type
thing like can we just have the what if
thing like can we just have the what if
we just like make the agents run at each
we just like make the agents run at each
other down mid or like run at each other
other down mid or like run at each other
down a specific
down a specific
aisle so are there multiple heroes yes
aisle so are there multiple heroes yes
we have five different
Heroes we don't have like 20 Heroes but
Heroes we don't have like 20 Heroes but
we have
we have
five I'll show you
five I'll show you
them we've got uh we've got a support
them we've got uh we've got a support
character that has a hook a hook pull an
character that has a hook a hook pull an
AOE heal and a uh single Target stun I
AOE heal and a uh single Target stun I
believe we've got an assassin character
believe we've got an assassin character
that's the one that I've been playing
that's the one that I've been playing
that has uh an AOE that can only target
that has uh an AOE that can only target
creeps they have a blink strike so they
creeps they have a blink strike so they
can teleport and hit and then they have
can teleport and hit and then they have
a channeled movement buff tox move speed
a channeled movement buff tox move speed
there is the mid character that's
there is the mid character that's
supposed to be bursty so they've got a
supposed to be bursty so they've got a
single Target nuke they've got uh a
single Target nuke they've got uh a
pretty strong AOE and they also have an
pretty strong AOE and they also have an
AOE
AOE
stun basically modeled this off of
stun basically modeled this off of
Lena and then we've got uh there's a
Lena and then we've got uh there's a
tank that has an AOE damage over time a
tank that has an AOE damage over time a
strong self heal as well as an engage
strong self heal as well as an engage
AOE and then there is a uh a
AOE and then there is a uh a
carry the carry or the bottom whatever
carry the carry or the bottom whatever
has a a retreat slow a spell that they
has a a retreat slow a spell that they
can use on an enemy to push themselves
can use on an enemy to push themselves
back and slow that enemy down uh this
back and slow that enemy down uh this
was modeled off of like Caitlyn's net if
was modeled off of like Caitlyn's net if
you know that there is a a slowing
you know that there is a a slowing
damage so you can use it to poke Dam
damage so you can use it to poke Dam
poke and also slow the target you can
poke and also slow the target you can
use it to like cut them off from
use it to like cut them off from
retreating lots of things and then they
retreating lots of things and then they
also have an AOE to help them uh farming
also have an AOE to help them uh farming
minions can other Heroes see what heroes
minions can other Heroes see what heroes
are with the purpose to know their
are with the purpose to know their
strength or weakness that will be
strength or weakness that will be
implemented I haven't implemented it yet
implemented I haven't implemented it yet
I just need to have different Graphics
I just need to have different Graphics
basically uh I need to like make
basically uh I need to like make
different character Graphics or
something I don't know maybe I should
something I don't know maybe I should
just like export a 2d of the puffer
just like export a 2d of the puffer
swimming or something that'd be a fun
swimming or something that'd be a fun
that'd be fun for movement
I think what we're going to do for today
I think what we're going to do for today
because it would be
because it would be
fun um let's try to just
fun um let's try to just
like hack the creep AI to make it work
like hack the creep AI to make it work
with the
with the
heroes right so we can have the heroes
heroes right so we can have the heroes
run at each other down you know three
run at each other down you know three
different Lanes or whatever
different Lanes or whatever
and uh then we can run the game really
and uh then we can run the game really
really fast and we can see if like
really fast and we can see if like
anybody actually takes all the towers
anybody actually takes all the towers
right and we can get some like some cool
right and we can get some like some cool
graphs or some cool stats on like levels
graphs or some cool stats on like levels
and stuff like that I think that would
and stuff like that I think that would
be a cool thing to
do yeah because then the thing is once
do yeah because then the thing is once
we know that then we can like start
we know that then we can like start
tuning stuff around that and uh then we
tuning stuff around that and uh then we
can start doing like a little bit of RS
can start doing like a little bit of RS
stuff around this cuz I definitely I
stuff around this cuz I definitely I
don't I want to have uh I want to start
don't I want to have uh I want to start
working on the neuronet side of this no
working on the neuronet side of this no
later than Wednesday so we can start
later than Wednesday so we can start
getting experiments
running because it's going to take a
running because it's going to take a
little bit of
little bit of
work how did you learn coding I'm in uni
work how did you learn coding I'm in uni
first year and it's so hard to code any
first year and it's so hard to code any
advice takes a long time to get
advice takes a long time to get
good um I started programming
good um I started programming
I guess we'll say seriously at like age
I guess we'll say seriously at like age
16 or 15 but really more like
16 or 15 but really more like
so 13 14 years by
so 13 14 years by
now
now
um I've been doing research for most of
um I've been doing research for most of
that amount of
that amount of
time I've been doing like software heavy
time I've been doing like software heavy
side stuff in research for most of that
side stuff in research for most of that
time I've always had like tons of side
time I've always had like tons of side
projects and other things that I've been
projects and other things that I've been
working
working
on and it really really pisses me off
on and it really really pisses me off
when I write bad code which is the ma
when I write bad code which is the ma
the biggest
thing I make a few exceptions for this
thing I make a few exceptions for this
stream so I can get stuff done fast but
stream so I can get stuff done fast but
then I always go back and refactor
stuff these skills aren't
stuff these skills aren't
bad just create a class be able to add
bad just create a class be able to add
edit remove a class
yeah little games are
yeah little games are
fun you can try to implement like a
fun you can try to implement like a
basic snake game or
basic snake game or
whatever that's like a you can do that
whatever that's like a you can do that
in 200 lines of code
let me think what we're going to do
let me think what we're going to do
here so I want to hack
here so I want to hack
this creep
AI what happens if I just call creep
AI what happens if I just call creep
AI on the heroes can I just do that
AI on the heroes can I just do that
that I think I can
that I think I can
right just call creep AI on the
right just call creep AI on the
heroes and have them not use their
heroes and have them not use their
skills
skills
yet I think I literally can do that hold
yet I think I literally can do that hold
on let me
on let me
um let me apply the lanes and stuff to
um let me apply the lanes and stuff to
things
uh I have to go copy I don't I just need
uh I have to go copy I don't I just need
to see this for a moment
to see this for a moment
okay
so all I have to do
so all I have to do
is
is
uh self. get
uh self. get
entity player uh
entity player uh
of
of
player
zero yeah
zero yeah
dot
dot
Lane this is lane two I
think creep. Lane where do we set the
think creep. Lane where do we set the
lanes
here yeah that's where so lane two is
here yeah that's where so lane two is
the bottom Lane so we're going to set
the bottom Lane so we're going to set
support and
both supports go to the bottom
both supports go to the bottom
Lane oh no wait that's that's
Lane oh no wait that's that's
wrong this is
five get entity one lane
five get entity one lane
is the Assassin
is the Assassin
is oh yeah this is supposed to be a
is oh yeah this is supposed to be a
roaming
character I actually don't know where to
character I actually don't know where to
send this Ro roing character so I'm just
send this Ro roing character so I'm just
going to send it to the Top Lane for now
going to send it to the Top Lane for now
cuz I didn't account for that like it's
cuz I didn't account for that like it's
going to have to learn how to do other
going to have to learn how to do other
stuff get entity two this is the mid
stuff get entity two this is the mid
character this is going to go
mid three is going to go
top and then four is going to be bottom
which is
which is
two
two
okay so and then we're going to do self
okay so and then we're going to do self
get
get
entity
entity
five it's going to be sent to Lane the
five it's going to be sent to Lane the
bottom Lane which is uh
bottom Lane which is uh
five get ntity six is going to be sent
five get ntity six is going to be sent
to the Top Lane which is
to the Top Lane which is
three and D7 is going to be sent to the
three and D7 is going to be sent to the
uh mid lane which is
uh mid lane which is
four get entity
four get entity
8 is going to be sent to
8 is going to be sent to
the uh bottom Lane as well which is
the uh bottom Lane as well which is
five get entity 9 is going to be sent to
five get entity 9 is going to be sent to
the a Top Lane which is three and self.
the a Top Lane which is three and self.
get entity 10 is going to be sent to
get entity 10 is going to be sent to
the bottom Lane which is five
the bottom Lane which is five
okay remove all this I was just using it
okay remove all this I was just using it
as a
reference we need to move this down
reference we need to move this down
one like
this hard code lanes for
now and then what we're going to
do is we're going to do the creep AI on
do is we're going to do the creep AI on
the
players so player logic right
players so player logic right
here is going to
be okay so they they have this for their
be okay so they they have this for their
skills I
skills I
guess um let's just let's just comment
guess um let's just let's just comment
these three
these three
lines
creep creep
creep creep
yeah I wonder what this does I wonder if
yeah I wonder what this does I wonder if
this
works render
works render
mode Li
Oho well would you look at
that why is this one
stuck okay very weird that this one is
stuck okay very weird that this one is
stuck but
stuck but
overall look at
that
boom why is this one stuck here this is
boom why is this one stuck here this is
so weird
I don't
know nobody's taken a tower
know nobody's taken a tower
yet I would also like to know the levels
yet I would also like to know the levels
of these various things
did they take a tower in mid I didn't
see I'm do this so that it doesn't clog
see I'm do this so that it doesn't clog
memory yeah they took a tower
memory yeah they took a tower
okay on a
start let's do a little logging Maybe
it
entities is dot we got to put this here
entities is dot we got to put this here
so we
can we're going to get the levels I want
can we're going to get the levels I want
to see them level
up e
okay
okay mpai float 6 4
okay mpai float 6 4
object is not
callable garbage suggestions I
guess we'll just do the
means I can't see this because it's
means I can't see this because it's
going too
going too
fast so
what are we going to
do what if we just do percent
32 will this do it
how is this so fast
oh okay let's try
this is that fast enough
they're
leveling level
16 and then we get to the really rare
16 and then we get to the really rare
bug that I have to
bug that I have to
fix cool though
right I don't think that we've actually
right I don't think that we've actually
given them stats yet so maybe that's
given them stats yet so maybe that's
what we'll do maybe we'll do uh stat
what we'll do maybe we'll do uh stat
scaling for a bit
scaling for a bit
because what I would like to have happen
because what I would like to have happen
is I'd like to at least have the the
is I'd like to at least have the the
ability for like I'd like to be able to
ability for like I'd like to be able to
run this game super fast like that and
run this game super fast like that and
see that um you know eventually the
see that um you know eventually the
players just start murking the creep
players just start murking the creep
waves or
waves or
whatever though the creep waves scale
whatever though the creep waves scale
pretty hard in Dota too don't they the
pretty hard in Dota too don't they the
creeps get
stronger but still by the end you're
stronger but still by the end you're
like one-shotting the creep waves
like one-shotting the creep waves
right
right
yeah okay I will be right back I'm going
yeah okay I will be right back I'm going
to use a rest room then we're going to
to use a rest room then we're going to
do another hour on this and we are going
do another hour on this and we are going
to um we're going to get something that
to um we're going to get something that
actually looks like a winnable game of
actually looks like a winnable game of
DOTA and I think we'll probably add in
DOTA and I think we'll probably add in
the
the
um the Nexus objectives or whatever they
um the Nexus objectives or whatever they
are Fountain no not Fountain
are Fountain no not Fountain
Nexus uh and then we'll like we'll set
Nexus uh and then we'll like we'll set
the wi con of the game that'll be cool
the wi con of the game that'll be cool
be right
back
e
e e
okay
Let's uh let's make this thing freaking
awesome what is the issue right
awesome what is the issue right
here oh there's no issue this is
here oh there's no issue this is
literally just the gift
saving oh did we actually go through all
saving oh did we actually go through all
these
frames we simulated 10,000 frames that's
frames we simulated 10,000 frames that's
funny so there's no bug we just
funny so there's no bug we just
simulated 10,000
simulated 10,000
frames faster than I thought we could
do we have any form of scaling in right
do we have any form of scaling in right
now
doesn't look like we have any form of
doesn't look like we have any form of
scaling
in what do we have their damage set
too Health
Mana we have their basic attack damage
Mana we have their basic attack damage
set too basic
attack
attack
basic oh wait I saw player dot here it
basic oh wait I saw player dot here it
is reset player.
is reset player.
damage you have it set to
25 which is very low isn't it I think I
25 which is very low isn't it I think I
use Lena as the model for this it's
use Lena as the model for this it's
probably way too low give me another
probably way too low give me another
hero um it's like a reasonable thing
hero um it's like a reasonable thing
to herob base damage what's like a
to herob base damage what's like a
middle
middle
tier damage
base attack
damage oh it's actually not that far
damage oh it's actually not that far
off the really high ones are like
off the really high ones are like
30s agility
30s agility
[Music]
[Music]
Heroes okay so like some of them are
Heroes okay so like some of them are
really slow really
really slow really
low okay I think 30 is a good one to
low okay I think 30 is a good one to
start off
start off
with and what's the scaling
with and what's the scaling
what's like good scaling or like random
what's like good scaling or like random
scaling
scaling
um attack damage scaling Dota
2 main damage
sources selected
attribute does anybody just want to tell
attribute does anybody just want to tell
me how
me how
much how much scaling you get
much how much scaling you get
roughly bonus attack
roughly bonus attack
no what is
no what is
this
strength is it main attack damage per
strength is it main attack damage per
point you get one damage per
point you get one damage per
point
point
right detailed
right detailed
table main attack damage at level
table main attack damage at level
one which what base attack damage and
one which what base attack damage and
Main attack damage oh because it's with
Main attack damage oh because it's with
the scaling right okay so I was
the scaling right okay so I was
underestimating drastically drastically
underestimating drastically drastically
underestimating it should be more like
underestimating it should be more like
50 5050 base attack damage which is
50 5050 base attack damage which is
about what a creep does
about what a creep does
right is that what a creep hits maybe a
right is that what a creep hits maybe a
little
more yeah so you do about that amount of
more yeah so you do about that amount of
damage so let's up this to
damage so let's up this to
50 because we don't have strength
50 because we don't have strength
scaling or
anything and then we can do
how much do they get so we can
how much do they get so we can
actually Max main attack
actually Max main attack
damage we can get it right here right
damage we can get it right here right
that the average is
that the average is
like well depends on which how much they
like well depends on which how much they
scale uh 150 I'm seeing a lot of 150s
scale uh 150 I'm seeing a lot of 150s
140s 160s
120s 140s 120s
let's say 100
and what the heck some of these are like
and what the heck some of these are like
crazy okay let's say 150
crazy okay let's say 150
damage so it's 100 divided
30 so let's say three it's
30 so let's say three it's
90 is damage a float or an
90 is damage a float or an
INT it's a float so we'll do
3.3 self. Lev player.
3.3 self. Lev player.
xp. damage equals 50+ 3 3 times player
xp. damage equals 50+ 3 3 times player
dot
level simplest scaling we can do
and then the max Health as well goes up
and then the max Health as well goes up
right and Max
Mana we're going to have to organize all
Mana we're going to have to organize all
this data I just want to get something
this data I just want to get something
to start
with layer. Max
with layer. Max
Health 500 and 100
okay
okay
plus and now we need to
plus and now we need to
have player Health
have player Health
right and no Health
scaling where's the freaking
scaling Talent grants them a flat Health
scaling Talent grants them a flat Health
bonus
what is
what is
the health
scaling base
Health 20
Health 20
hp 22 times base
strength plus level minus one time oh 22
strength plus level minus one time oh 22
* strength
so 22 times base
so 22 times base
strength
strength
so I don't know what the hell that's
so I don't know what the hell that's
going to equate to there's not a table
going to equate to there's not a table
of level 30 health
strength agil oh here it
strength agil oh here it
is damage damage
is damage damage
Max
vsd what is
this do we have health on here
this do we have health on here
anywhere
anywhere
RG int T MS
T30 move
T30 move
speed what the hell where's the where's
speed what the hell where's the where's
health is Health not in
here attack
here attack
speed well at least we see the HP and MP
speed well at least we see the HP and MP
per
second which is
okay that's nice to
know I'm just going to guess because I
know I'm just going to guess because I
don't know
they don't have 3,000 health I'm going
they don't have 3,000 health I'm going
to say it's 50 Health a level so 2,000
to say it's 50 Health a level so 2,000
at 30 I don't
at 30 I don't
know player.
level and then we're going to
do uh 100
plus well I'm going to actually leave
plus well I'm going to actually leave
the Mana as is right now because I have
the Mana as is right now because I have
it I don't have that scaling set
it I don't have that scaling set
up but I am going to actually make I'm
up but I am going to actually make I'm
going to add a a very slow
going to add a a very slow
heal I'm going to add
a player
a player
dot if
player okay
player okay
so now if I rebuild
so now if I rebuild
[Music]
[Music]
this I think we should see him murking
this I think we should see him murking
some
enemies with some basic scaling
level
level
[Music]
four one tower has been
taken invalid
XP level
XP level
17 invalid XP
I guess somebody broke level 30
rebuild definitely the heroes are
rebuild definitely the heroes are
they're still getting stuck in stuff at
they're still getting stuck in stuff at
places so we're going to have some
places so we're going to have some
glitches to
fix but let's see if we can get these
fix but let's see if we can get these
things taking some towers and if this
things taking some towers and if this
doesn't work I'll make it
doesn't work I'll make it
asymmetric because DOTA has like the
asymmetric because DOTA has like the
hard Lane and the safe Lane
thing okay so they both took each
thing okay so they both took each
other's mid
other's mid
Towers uh one top T1 is Fallen
I think that they're uh the they're just
I think that they're uh the they're just
spamming their
spamming their
skills and they're not actually hitting
skills and they're not actually hitting
with
with
them there nothing is happening because
them there nothing is happening because
they're already at level
they're already at level
26 so let's see about
26 so let's see about
that if you use Q
yeah these need to all be be to tell you
yeah these need to all be be to tell you
if they've used
them we're going to replace this with
them we're going to replace this with
basic attack for
now and the reason is just so that we
now and the reason is just so that we
can tell uh I think that they spamming
can tell uh I think that they spamming
skills without knowing what they're
skills without knowing what they're
doing using them for and as a result um
doing using them for and as a result um
they're not like just using their basic
they're not like just using their basic
attack to kill NPCs which should be
attack to kill NPCs which should be
incredibly effective once they're level
incredibly effective once they're level
something let's just rebuild this and
something let's just rebuild this and
try this
again oh it's Monday I actually I can
again oh it's Monday I actually I can
stream a little later today then
maybe at least while I'm getting stuff
maybe at least while I'm getting stuff
done
here okay
so okay there's a Tower
falling top T1 is
fallen so ders lost two tier ones mid
fallen so ders lost two tier ones mid
and top
I could probably make a jungle AI
I could probably make a jungle AI
without too much difficulty
without too much difficulty
right
right
maybe is that yeah mid just lost tier
maybe is that yeah mid just lost tier
two
we're at
we're at
level radiant is at level 30 dire is
level radiant is at level 30 dire is
only at level 19 which is
only at level 19 which is
odd but then if radiant is at level 30
odd but then if radiant is at level 30
they should be sweeping though I guess
they should be sweeping though I guess
they're not using abilities and there's
they're not using abilities and there's
no scaling for item builds built
in they are pushed back very very far
in they are pushed back very very far
though um but they are
though um but they are
holding I think it's because a couple
holding I think it's because a couple
players keep getting
players keep getting
stuck or maybe just the the tier threes
stuck or maybe just the the tier threes
are very very
strong the minions don't even have
strong the minions don't even have
scaling on them at the
scaling on them at the
moment so they should just be getting
moment so they should just be getting
wrecked though I guess again they're not
wrecked though I guess again they're not
using spells and there's no they're no
using spells and there's no they're no
items
items
on okay so the thing that we know will
on okay so the thing that we know will
definitely cause this it's a mirror
definitely cause this it's a mirror
match so it's hard to say how long it
match so it's hard to say how long it
should take for somebody to like win
should take for somebody to like win
we're going to make this more DOTA style
we're going to make this more DOTA style
um this
um this
like one one2 jungle is a it's a league
like one one2 jungle is a it's a league
thing let's make this more DOTA with the
thing let's make this more DOTA with the
lane
lane
assignments this should
assignments this should
help we're going to
do okay we're going to
do okay we're going to
do the entity assignments again
so it's uh what is
so it's uh what is
it
it
support
support
06 and we actually need to swap
06 and we actually need to swap
these
these
one
one
so 0 one
so 0 one
six
six
two is I these suggestions are so stupid
two is I these suggestions are so stupid
this is burst not
this is burst not
tank then this one is tank this one is
carry okay
so we're going to
so we're going to
assign uh
support screw it support assassin and
support screw it support assassin and
carrye are all just going to go to the
carrye are all just going to go to the
safe Lane
so zero this is going to be lane
so zero this is going to be lane
two one lane is also going to be
two one lane is also going to be
two and then uh what is
two and then uh what is
it entity four is going to be lane two
it entity four is going to be lane two
as well so this is the safe Lane then we
as well so this is the safe Lane then we
do self. get
do self. get
entity uh the mid is going to go to one
entity uh the mid is going to go to one
and then get entity this will go to zero
and then get entity this will go to zero
okay so this is three one and one get
okay so this is three one and one get
entity five is going to
entity five is going to
be uh
be uh
Lane this is their support so their
Lane this is their support so their
support goes to their safe Lane which is
support goes to their safe Lane which is
three so 5
three so 5
six and then what is it their their uh
six and then what is it their their uh
carry also goes there so
nine nine goes to three
nine nine goes to three
and
and
then their uh burst goes to Lane
then their uh burst goes to Lane
four and then their eight which is their
four and then their eight which is their
tank goes to the the off Lane so this
tank goes to the the off Lane so this
should be more the DOTA meta which is
should be more the DOTA meta which is
actually way better for this the lane
actually way better for this the lane
assignments because uh it makes it
assignments because uh it makes it
asymmetric so it makes it easier to see
asymmetric so it makes it easier to see
a
result cuz the expectation there is that
result cuz the expectation there is that
they should both push into the to the
they should both push into the to the
end of the game right because 3v
one okay let's see how fast this
one okay let's see how fast this
happens
so not particularly fast no there's a
so not particularly fast no there's a
tower that's been
tower that's been
taken it's the wrong side though that's
taken it's the wrong side though that's
supposed to be the
uh are the lane assignments
uh are the lane assignments
right I want to run this
slower I want to run this way
slower now we're going to run this where
slower now we're going to run this where
we can actually see what's going on okay
we can actually see what's going on okay
so they have three three assigned here
so they have three three assigned here
then one in
then one in
one yeah okay so this is
good this is good
right
and maybe they don't have the attack AI
and maybe they don't have the attack AI
on I think they don't have the attack AI
on I think they don't have the attack AI
on that's got to be it
reap
AI move towards basic attack so they
AI move towards basic attack so they
don't actually need any of this [ __ ] at
don't actually need any of this [ __ ] at
all
right yeah cuz that's going to set the
right yeah cuz that's going to set the
cool down to be
cool down to be
Jank so we just are going to comment all
Jank so we just are going to comment all
this skill
this skill
stuff and uh they're going to just use
stuff and uh they're going to just use
the creep AI in their assigned lane and
the creep AI in their assigned lane and
then we're going to see what that does
then we're going to see what that does
for
us should be the same thing right it's
us should be the same thing right it's
just that these guys scale so three of
just that these guys scale so three of
these pushing down one lane should equal
these pushing down one lane should equal
win you win the game we're gonna run it
win you win the game we're gonna run it
slow so I can catch bugs
slow so I can catch bugs
maybe hold
on okay so here it
is okay so they did get a wave
is okay so they did get a wave
Advantage yeah so actually on the first
Advantage yeah so actually on the first
push they got all the way to the
push they got all the way to the
tower uh and then they all went down
mid Okay so the lane assignments that
mid Okay so the lane assignments that
appear to be breaking
right yeah the lane assignments are 100%
right yeah the lane assignments are 100%
breaking
breaking
so respawn
Player move
to uh where is this breaking
to uh where is this breaking
that the lane the lane assignments get
that the lane the lane assignments get
broken move
to reap AI
oh I have to reset the way points
oh I have to reset the way points
right when you spawn the
right when you spawn the
creep you reset their Waypoint to
creep you reset their Waypoint to
zero
right we
do let's see if that fixes it because if
do let's see if that fixes it because if
they were all going down mid then it's
they were all going down mid then it's
not going to
work
work
okay so here we go here's our F first
okay so here we go here's our F first
push they get pretty far right they get
push they get pretty far right they get
all the way to the the tower and here
all the way to the the tower and here
they come
back uh but wait is this
working yes it is I should probably swap
working yes it is I should probably swap
the colors with the
the colors with the
creeps um because the gray ones
creeps um because the gray ones
are are the heroes in this case so
are are the heroes in this case so
they've pushed to the
tower the thing is they are
trickling they're only level four as
trickling they're only level four as
well which I base the scaling off of
well which I base the scaling off of
DOTA so this would be very early to take
DOTA so this would be very early to take
a tower
anyways uh radiant is now level 3.4 dire
anyways uh radiant is now level 3.4 dire
is level 5.4 on
is level 5.4 on
average I don't know why there's such a
average I don't know why there's such a
big difference but hey who knows maybe
big difference but hey who knows maybe
there's some weird as
symetry okay they're pushing to the
symetry okay they're pushing to the
tower they're having a hard time it
tower they're having a hard time it
looks like getting past the
looks like getting past the
tower which is reasonable because towers
tower which is reasonable because towers
are strong they do a lot of damage
they are pushing all the way to the
they are pushing all the way to the
towers
towers
though and then mid
though and then mid
is H not
much they pulled a neutral creep and it
much they pulled a neutral creep and it
was just hitting them that was funny
so this is crashing for some reason hold
on hopefully the computer doesn't go
on hopefully the computer doesn't go
down this is ridiculous
literally not letting me kill
it uh they should not be oing though
it uh they should not be oing though
that's
that's
weird I don't think I was appending the
weird I don't think I was appending the
frames to
frames to
this yeah this is locked
this yeah this is locked
up there we go this is
where's the stupid python kill
script I don't know why that's
script I don't know why that's
happening I should not be um saving the
happening I should not be um saving the
frames
there you go it's the only one that
there you go it's the only one that
works I don't know
why
why
um that's a little bit of a bummer
um that's a little bit of a bummer
what's
happening yeah I'm not a I'm not saving
happening yeah I'm not a I'm not saving
the
the
frames right
that should not be ramping memory usage
that should not be ramping memory usage
something's wrong can't be any leaks we
something's wrong can't be any leaks we
don't allocate any memory dynamically so
don't allocate any memory dynamically so
something's just being cashed
something's just being cashed
[Music]
weird let's watch what happens
weird let's watch what happens
here so we're not going to play it we're
here so we're not going to play it we're
just going to watch what happens when
just going to watch what happens when
they play it for
they play it for
us so here we have our bottom safe
Lane we
fight right I'm not allowed to have the
fight right I'm not allowed to have the
mouse outside of the
mouse outside of the
screen I haven't fixed that bug yet
screen I haven't fixed that bug yet
that's just a render bug
okay so we should see them attacking
right yep lots of
right yep lots of
damage I saw him getting
chunked I don't know what killed us at
chunked I don't know what killed us at
the end there that was a lot of burst
the end there that was a lot of burst
damage to be
taking looks like they get stuck on the
taking looks like they get stuck on the
tower way point for just a
moment and
moment and
then we are level two now so we have 600
then we are level two now so we have 600
Health do a little bit more
damage okay we died at a relatively
damage okay we died at a relatively
reasonable rate inside of a full pack of
reasonable rate inside of a full pack of
minions
right not getting that much xp but then
right not getting that much xp but then
again I have it set right now so you
again I have it set right now so you
only get XP on last
hits okay
hits okay
I saw it did a lot of damage and tanked
I saw it did a lot of damage and tanked
a bunch of
stuff I'm not seeing anything
stuff I'm not seeing anything
immediately wrong um it looks like I'm
immediately wrong um it looks like I'm
going to have to fix that leak but um in
going to have to fix that leak but um in
the meantime I'm guessing it's based on
the meantime I'm guessing it's based on
frames and not simulation steps so I'm
frames and not simulation steps so I'm
just going to run it super fast and I'm
just going to run it super fast and I'm
going to run it in the uh Raab mode
okay so here we
okay so here we
go we should be able to watch Towers
go we should be able to watch Towers
being taken
it does look like occasionally the AI
it does look like occasionally the AI
gets bugged because I can see on the
gets bugged because I can see on the
left there's a player that's just
Frozen radiant now has level 24 players
Frozen radiant now has level 24 players
they should absolutely be taking this
they should absolutely be taking this
bottom
Tower dire's caught
up let me get HTP just to make sure
up let me get HTP just to make sure
we're
we're
not killing our memory no we're fine
not killing our memory no we're fine
whatever it was that caused that before
whatever it was that caused that before
doesn't look like it was just uh we are
doesn't look like it was just uh we are
actually leaking memory very slowly
actually leaking memory very slowly
though
we'll kill it way before then no
worries what the heck is going on why
worries what the heck is going on why
aren't they taking
Towers oh there we
Towers oh there we
go radiant just took the uh their first
go radiant just took the uh their first
Tower in safe
Lane about time
oh and dire's taken one as well I just
oh and dire's taken one as well I just
didn't notice
it so yeah this is exactly how it's
it so yeah this is exactly how it's
supposed to work it's just being
supposed to work it's just being
slow uh I would expect this to have
slow uh I would expect this to have
happened by now so I guess the scaling
happened by now so I guess the scaling
is just off

Kind: captions
Language: en
uhoh I forgot to update the stream title
uhoh I forgot to update the stream title
didn't
I let's try
I let's try
that update the stream title
I think we're
live
oops all
oops all
right
welcome I did a little bit of work on
welcome I did a little bit of work on
this over the weekend just a
this over the weekend just a
little nothing too fancy
let me tweet this out and
let me tweet this out and
um give will a little bit of [ __ ] one
um give will a little bit of [ __ ] one
second
[Laughter]
hold
hold
[Laughter]
[Laughter]
on let's see if he
on let's see if he
[Music]
oh I forgot this here we go
[Music]
oh this is so
oh this is so
funny okay let's get started on the MOBA
Dev let's get started on the MOBA
Dev let's get started on the MOBA
Dev I gotta have a little bit of fun
Dev I gotta have a little bit of fun
right okay um so let me talk about what
right okay um so let me talk about what
I did over the the weekend here with
this uh stash get pull origin any
config there have been uh a few
config there have been uh a few
changes you could say but most of them
changes you could say but most of them
not to the Moa I did like a lot of
not to the Moa I did like a lot of
changes to everything else a lot of
changes to everything else a lot of
refactors and stuff okay
refactors and stuff okay
um the main thing with the Moa is I
um the main thing with the Moa is I
figured out a new way of doing uh
figured out a new way of doing uh
targeting where is it
uh right puffer
uh right puffer
lib
oan H it's still so funny I got will
oan H it's still so funny I got will
foring streaming every day
foring streaming every day
now Will's cool will does uh he's done a
now Will's cool will does uh he's done a
lot of work oh there you are there you
lot of work oh there you are there you
are you came back you came over to get
are you came back you came over to get
back back at
back back at
me this is no cursor man this is this is
me this is no cursor man this is this is
like two plugins Neo them one of them is
like two plugins Neo them one of them is
super Maven but it's for completing one
super Maven but it's for completing one
line at a time because python doesn't
line at a time because python doesn't
have good LSPs that's
it so I figured out uh I figured out
it so I figured out uh I figured out
over the weekend a way better way of
over the weekend a way better way of
doing targeting I was trying to figure
doing targeting I was trying to figure
out how to implement a linked list in
out how to implement a linked list in
scon without Malik which was God awful
scon without Malik which was God awful
uh and then I just figured out a better
uh and then I just figured out a better
way of doing it so uh
scan where is it scan AOE okay
scan where is it scan AOE okay
so this thing returns a beant which is
so this thing returns a beant which is
whether it's scanned anything or not and
whether it's scanned anything or not and
this does a loop over the nearby area
this does a loop over the nearby area
and it has a whole bunch of flags for
and it has a whole bunch of flags for
how you want to filter the data okay so
how you want to filter the data okay so
you have this singular scan function and
you have this singular scan function and
then when you want to actually do
then when you want to actually do
something over the scanned uh the scan
something over the scanned uh the scan
things it is way way way way easier
things it is way way way way easier
because you can do like AOE scanned for
because you can do like AOE scanned for
instance and you can just go over 200 is
instance and you can just go over 200 is
hardcoded for now it's just the max
hardcoded for now it's just the max
number of scan things and it'll just go
number of scan things and it'll just go
over targets until it finds a null
over targets until it finds a null
Terminator and it will grab the scan
Terminator and it will grab the scan
Target decide whether to hit it and move
Target decide whether to hit it and move
on so you get rid of this nested Loop
on so you get rid of this nested Loop
over nearby area being repeated all over
over nearby area being repeated all over
the code base now it's just scan based
the code base now it's just scan based
so this is very nice um we're going to
so this is very nice um we're going to
do something really cool today which I
do something really cool today which I
think will work at least I haven't come
think will work at least I haven't come
up with a reason that it shouldn't work
up with a reason that it shouldn't work
and what that is is we are going to
and what that is is we are going to
we're going to implement a star
we're going to implement a star
pathing but we're going to cash it for
pathing but we're going to cash it for
everything
everything
so what we're going to do the map is
so what we're going to do the map is
128 by
128 by
128 so that squared is like I don't know
128 so that squared is like I don't know
150 was it no
150 was it no
15,000 yeah which is not that big so
15,000 yeah which is not that big so
essentially you're going to end up with
essentially you're going to end up with
a 128
a 128
by no a what is it is it 10,000 by 10
by no a what is it is it 10,000 by 10
hold on I might be wrong here let me let
hold on I might be wrong here let me let
me figure this out so
it's 128 time
it's 128 time
128 oh yeah yeah times 128 time
128 okay this is somewhat bigger than I
expected I don't think that's too bad
expected I don't think that's too bad
though is
though is
it 268
MB we could M map it as well
so let me think let me say what I was
so let me think let me say what I was
going to do here
going to do here
um I want to precompute the pathing from
um I want to precompute the pathing from
every single tile to every single other
tile so you pick you know where you are
tile so you pick you know where you are
currently you pick where you want to go
currently you pick where you want to go
hey JBL uh I this is actually I think
hey JBL uh I this is actually I think
the thing that you
the thing that you
recommended right is to pre-compute the
recommended right is to pre-compute the
AAR pathing so
AAR pathing so
so the good news is that we can do it uh
so the good news is that we can do it uh
we can do it but I think it's 268
we can do it but I think it's 268
megabytes of
megabytes of
data which maybe is not that
bad I don't know if we can get that into
bad I don't know if we can get that into
scon easily we'll see
scon easily we'll see
but
but
so if we precompute from every single
so if we precompute from every single
position in the map to every single
position in the map to every single
other position in the map right that
other position in the map right that
is I mean it's 128x 128 by 128 by 128
is I mean it's 128x 128 by 128 by 128
right it's like your
XY by their XY like the target
XY and technically we can prune some
XY and technically we can prune some
stuff out but I think it would make the
stuff out but I think it would make the
uh the data format worse
so h i mean this shouldn't be that bad
so h i mean this shouldn't be that bad
though right because wait if we want to
though right because wait if we want to
do all paths right if we want to do all
do all paths right if we want to do all
paths so from any part of the map to any
paths so from any part of the map to any
other part of the map then we don't need
other part of the map then we don't need
AAR right we just need breath for
search is there anything anything else
search is there anything anything else
clever that we can do
clever that we can do
here is there any other clever way that
here is there any other clever way that
we can save on
this cuz
this cuz
like
H so naively right what I can do is I
H so naively right what I can do is I
can run breath ver search uh 128 time
can run breath ver search uh 128 time
128 so I can run breath first search
128 so I can run breath first search
16,000 times on this map uh as long as I
16,000 times on this map uh as long as I
implement this in SC it will be
implement this in SC it will be
relatively
relatively
fast and then I can save that data to a
fast and then I can save that data to a
file and then I will have pre-computed
file and then I will have pre-computed
optimal pathing for the whole
optimal pathing for the whole
map it will be 268 megabytes assuming I
map it will be 268 megabytes assuming I
use one byte uh to represent like the
use one byte uh to represent like the
the path direction that you're going to
the path direction that you're going to
take in any one
take in any one
location technically I could cut this
location technically I could cut this
down by a factor of
down by a factor of
four because I only need two bits per uh
four because I only need two bits per uh
I only need two bits per Direction so
I only need two bits per Direction so
technically if I want to be really
technically if I want to be really
sweaty with this
sweaty with this
right I can do this in 67 MB because I
right I can do this in 67 MB because I
can have each bite could contain uh you
can have each bite could contain uh you
only need 0 1 two three to tell you like
only need 0 1 two three to tell you like
up down left right which is two
bits but before we consider that level
bits but before we consider that level
of optimization cuz that's kind of
of optimization cuz that's kind of
obnoxious we got to do bit reads
obnoxious we got to do bit reads
um there might be a better way of doing
um there might be a better way of doing
this I'm just trying to think is there
this I'm just trying to think is there
like if I go from point A to point B
like if I go from point A to point B
right
right
and I go to like some point in the
and I go to like some point in the
middle along the way then I already know
middle along the way then I already know
the optimal point from that one to the
the optimal point from that one to the
end right
is there some algorithm I don't know
is there some algorithm I don't know
about I'm going to chat GPT this just to
about I'm going to chat GPT this just to
see if I'm being
see if I'm being
stupid
um this is really nice just I only ever
um this is really nice just I only ever
use this for like I'm not going to
use this for like I'm not going to
expect this to solve the problem for me
expect this to solve the problem for me
cuz it's not it's just if there is an
cuz it's not it's just if there is an
existing algorithm that I don't know
existing algorithm that I don't know
about that will do this so
about that will do this so
I need to compute uh optimal pathing on
I need to compute uh optimal pathing on
a uh a 2d grid with
a uh a 2d grid with
obstacles from every point to every
obstacles from every point to every
other
other
point is
point is
there uh I can run
there uh I can run
BFS from every
BFS from every
start and get this but that is o n 4 for
start and get this but that is o n 4 for
memory for the
memory for the
result
result
there a better
algorithm Floyd
algorithm Floyd
Marshall
ooh AAR doesn't help AAR is a faster
ooh AAR doesn't help AAR is a faster
algorithm for getting from one point to
algorithm for getting from one point to
another point we need all points so this
another point we need all points so this
is exactly the type of thing I was
is exactly the type of thing I was
looking for from chat
looking for from chat
jity
jity
um they say that they have o of n cubed
um they say that they have o of n cubed
time and O of N squared
time and O of N squared
memory where n is the number
of oh I think that they're stupid they
of oh I think that they're stupid they
redefined n hold on I think that this is
stupid well wait if this is chat GPT
stupid well wait if this is chat GPT
being wrong though then this is exactly
being wrong though then this is exactly
the type of thing I'm talking about um
the type of thing I'm talking about um
hold on let me just let me confirm that
hold on let me just let me confirm that
I'm right here distance
I'm right here distance
Matrix i
Matrix i
j
j
[Music]
[Music]
distances okay dynamic programming thing
so this is literally worse isn't
so this is literally worse isn't
it wait what the hell this is worse
it wait what the hell this is worse
right
yeah hot CH GPT is very highly
regarded it works both
regarded it works both
ways in this context would
indeed hold on let me see if this
indeed hold on let me see if this
algorithm looks like it's good though
algorithm looks like it's good though
distance IJ is min of
distance i j Plus
wait
what I think this is the same as breath
what I think this is the same as breath
for
for
search wait I J no no no ik
search wait I J no no no ik
how is this n cubed
time I oh shoot that's a
lot how the hell is this ever better
lot how the hell is this ever better
than breath for search wait Floyd
warshall this is freaking chat GPT
warshall this is freaking chat GPT
wasting my time as every time freaking
wasting my time as every time freaking
everyone on the internet saying it's
everyone on the internet saying it's
going to solve everything but it can't
going to solve everything but it can't
solve
solve
anything all pair shortest path problem
anything all pair shortest path problem
for weighted
for weighted
graphs well this is the actual thing oh
graphs well this is the actual thing oh
perfect this is what I wanted
here all equals pair yeah that's what I
here all equals pair yeah that's what I
need I need all pairs I have the all
need I need all pairs I have the all
pair shortest path problem
exactly unweighted graphs undirected
exactly unweighted graphs undirected
graphs
they don't have memory
complexity does anybody smart here know
complexity does anybody smart here know
if there's
if there's
actually anything that's
actually anything that's
um better for this problem so look this
um better for this problem so look this
is the problem that I have let me
is the problem that I have let me
explain to you
I'll explain the problem
I'll explain the problem
so does this let me
so does this let me
draw where is
it where's the just the draw tool on
it where's the just the draw tool on
this stupid
this stupid
thing oh my gosh why I can never
thing oh my gosh why I can never
freaking
freaking
find draw tool canvas draw
find draw tool canvas draw
online D all these things are so bad why
online D all these things are so bad why
why is there literally just nothing but
why is there literally just nothing but
it's oh my God all these apps are so
bad okay this is what I
bad okay this is what I
wanted
so you have your grid
right like
right like
this
this
so from any point to any other point
so from any point to any other point
let's say that there's an obstacle like
let's say that there's an obstacle like
in the way let's say that there's like
in the way let's say that there's like
obstacles here right then the optimal
obstacles here right then the optimal
path
path
is it it's can ties can be broken
is it it's can ties can be broken
arbitrarily so this is an optimal path
arbitrarily so this is an optimal path
right but I need all pairs all points
right but I need all pairs all points
from any start to any destination on
from any start to any destination on
this map
this map
so uh and I need the the direction so
so uh and I need the the direction so
basically the output of this thing I
basically the output of this thing I
want is I want to have something that
want is I want to have something that
tells me from any starting point which
tells me from any starting point which
direction I need to move
direction I need to move
in uh to have the optimal path towards
in uh to have the optimal path towards
the end
the end
goal which should exactly be all PA of
goal which should exactly be all PA of
shortest paths
shortest paths
um does anything have less than n squ
um does anything have less than n squ
memory no get out of the
memory no get out of the
windows does anything have less
windows does anything have less
than wait every pair of vertices V
am I wrong or is running breath for
am I wrong or is running breath for
search not just
faster
faster
wait pair of
vertices am I dumb or is breath for
vertices am I dumb or is breath for
search just faster
let me
see Johnson's
see Johnson's
algorithm on Spar it's not
sparse large grids Dy that's not
weighted all pairs would be doing a lot
weighted all pairs would be doing a lot
of repe that's what I would think
of repe that's what I would think
right um but
right um but
is I would think that it's redoing a lot
is I would think that it's redoing a lot
of work but apparently there this is not
of work but apparently there this is not
a thing like I don't know if there's an
a thing like I don't know if there's an
algorithm for this
what's uh breath for search is O of
it should just be event word per call
last this is the last search I'm going
last this is the last search I'm going
to do otherwise it's just wasting my
to do otherwise it's just wasting my
time
could you not use the Waypoint to your
could you not use the Waypoint to your
advantage
advantage
here only really need the optimal path
here only really need the optimal path
from a point in a particular region to
from a point in a particular region to
the nearest weight so that's true for
the nearest weight so that's true for
the creeps um but the advantage here is
the creeps um but the advantage here is
that like I'm going to be able to if I
that like I'm going to be able to if I
have this if I make this nav grid thing
have this if I make this nav grid thing
this is going to be so much better
this is going to be so much better
because here like I can make you as a
because here like I can make you as a
player you can click a point and then
player you can click a point and then
it'll there for you like I can do stuff
it'll there for you like I can do stuff
like that I can make scripted agents so
like that I can make scripted agents so
much more easily if I have this because
much more easily if I have this because
pathing is just
solved and to give you a to be clear
solved and to give you a to be clear
here pathing is incredibly incredibly
here pathing is incredibly incredibly
solved if I do it this way because like
solved if I do it this way because like
it's literally a lookup like you like
it's literally a lookup like you like
say okay I'm at this cell I want to go
say okay I'm at this cell I want to go
to this target I look up in a table I
to this target I look up in a table I
look up the direction I go I go there
look up the direction I go I go there
it's 0 of one so pathing becomes o of
one okay chat GPT produced
one okay chat GPT produced
garbage it cannot solve anything it
garbage it cannot solve anything it
cannot recognize when it has nothing to
cannot recognize when it has nothing to
add chat GPT is garbage thank you for
add chat GPT is garbage thank you for
wasting my
wasting my
time as always
absolute
garbage every
garbage every
time let's make uh this C test thing
in that case maybe you could compute
in that case maybe you could compute
that giant MAV that giant nav mesh wants
that giant MAV that giant nav mesh wants
but dynamically load relevant chunks
but dynamically load relevant chunks
into memory based on spatial well I was
into memory based on spatial well I was
just going to mmap the
just going to mmap the
file
file
um I was just going to mmap the file
though frankly like I could just load it
though frankly like I could just load it
into memory
into memory
well yeah I can totally just load it
well yeah I can totally just load it
into memory
right yeah
right yeah
so the the one trick I'm going to have
so the the one trick I'm going to have
to do is like you're going to want to
to do is like you're going to want to
simulate a whole bunch of instances of
simulate a whole bunch of instances of
this game in parallel right so like here
this game in parallel right so like here
a very common workflow that I'll have uh
a very common workflow that I'll have uh
is that I'll try to get a batch of 4096
is that I'll try to get a batch of 4096
agents so 10 agents per map I need to
agents so 10 agents per map I need to
run 400 games of uh 400 mug instances at
run 400 games of uh 400 mug instances at
the same time and then usually I do that
the same time and then usually I do that
on a couple different cores so let's say
on a couple different cores so let's say
I have 800 MOBA
I have 800 MOBA
instances
instances
um I don't want to have 250 megabytes
um I don't want to have 250 megabytes
per instance right I want to share it
per instance right I want to share it
across them so that'll be like mildly
across them so that'll be like mildly
annoying to figure out but not that not
annoying to figure out but not that not
that bad
let's stop yapping and start coding
let's stop yapping and start coding
we're going to start with this in uh
we're going to start with this in uh
we're going to start with this in Python
we're going to start with this in Python
and then we're going to Port it to we're
and then we're going to Port it to we're
going to Port it to C after that uh it's
going to Port it to C after that uh it's
not going to be that hard to Port so
not going to be that hard to Port so
what we're going to do is we're going to
what we're going to do is we're going to
start with data
start with data
equal let's do uh what is
equal let's do uh what is
it Def
it Def
precompute
precompute
pathing and we'll do a
grid and that's it
grid and that's it
right
so.
so.
shape
zero uh it's going to be square so we
zero uh it's going to be square so we
don't really care about other stuff
and we can prune a little bit by the way
and we can prune a little bit by the way
we'll be able to prune just a little bit
we'll be able to prune just a little bit
based on obstacles so it'll be a little
based on obstacles so it'll be a little
faster to
faster to
compute maybe 50%
compute maybe 50%
faster uh so we start with the grid
faster uh so we start with the grid
shape
and
and
storage was it was it
storage was it was it
optimal what is it
optimal what is it
optimal paths
optimal paths
equal
equal
Zer n *
Zer n *
n nodes nodes
n nodes nodes
u8 we'll do it this way for now we might
u8 we'll do it this way for now we might
do bit packing later we'll
see and uh what we do
is I don't like doing nodes like this
is I don't like doing nodes like this
actually I think think it should be nnn
actually I think think it should be nnn
and N
and N
right that's
right that's
easier yeah nnn and N so it's going to
easier yeah nnn and N so it's going to
be
be
like you know X1 y1 or like y1 X1 Y2 X2
like you know X1 y1 or like y1 X1 Y2 X2
something like
that
that
for what did we do X and
for what did we do X and
Y we'll do R in range of n or C in range
Y we'll do R in range of n or C in range
of n and we'll do uh path we'll do uh
of n and we'll do uh path we'll do uh
breath for search grid Paths
of row and
call and then a row comma
call and then a row comma
call that's
call that's
good Cent
good Cent
paths breath first
paths breath first
search oh is this just going to do it
search oh is this just going to do it
for me
I don't like that this is recursive
I don't like that this is recursive
that's
that's
stupid actually I think that's not just
stupid actually I think that's not just
stupid I think that's wrong breath first
stupid I think that's wrong breath first
search should not be a recursive
algorithm
algorithm
right can breath first no breath first
right can breath first no breath first
search shouldn't even be able to be
search shouldn't even be able to be
recursive
recursive
right did it just Implement depth first
right did it just Implement depth first
search and call it breath first search
it totally did
right I'm not dumb here right this
is I just saw a tweet today by the way
is I just saw a tweet today by the way
that's like hey next year the math
that's like hey next year the math
Olympiad winner is going to be a
Olympiad winner is going to be a
language
model maybe we should start by teaching
model maybe we should start by teaching
it a first year computer
it a first year computer
science that might be better thing to
science that might be better thing to
do okay so if the grid is zero then we
do okay so if the grid is zero then we
return no wait zero
one one is obstacle right
okay and then what we do
is hold
is hold
on I'm getting confused by how I I want
on I'm getting confused by how I I want
to implement this now
[Music]
the nice thing with breath first search
the nice thing with breath first search
is it's always
is it's always
efficient so the frontier is always the
efficient so the frontier is always the
shortest
path
path
H we're exposing today how truly bad I
H we're exposing today how truly bad I
am at algorithms problems in elak code
am at algorithms problems in elak code
style
crap so this is going to take me an
crap so this is going to take me an
embarrassing L long time but uh I think
embarrassing L long time but uh I think
the final result will be nice
so there is a lot of redone U of work
so there is a lot of redone U of work
being recomputed
here but essentially what I want to pass
here but essentially what I want to pass
is I want breath for search to pass
is I want breath for search to pass
the first action that you took so the
the first action that you took so the
first direction that you went
in so that whenever you get to a new
in so that whenever you get to a new
node you fill in you fill in the table
node you fill in you fill in the table
with the the direction that you took
with the the direction that you took
initially from the first step to get to
initially from the first step to get to
that node does that make sense so
that node does that make sense so
like when you pathfind from a specific
like when you pathfind from a specific
starting point
starting point
the only thing that we care about is the
the only thing that we care about is the
first action that you
first action that you
took
took
yeah that makes sense
so
God for
I think that you have to
I think that you have to
enq the first four
enq the first four
moves right you have to enue the first
moves right you have to enue the first
four
four
moves
so it's going to be like move up
so it's going to be like move up
equals
equals
zero uh and then Dr is1
zero uh and then Dr is1
column is zero move down is going to
column is zero move down is going to
be index is
one left is going to
one left is going to
be
be
[Music]
[Music]
01 then move right so this is going to
01 then move right so this is going to
be these are your first
be these are your first
actions I was actually excited to do
actions I was actually excited to do
this today I have no idea why it was
this today I have no idea why it was
because I'm terrible at these types of
because I'm terrible at these types of
problems um but it's going to be real
problems um but it's going to be real
cool and it works this is going to be
cool and it works this is going to be
like ludicrously fast
pathing
so you have to enq all of these I
believe and
believe and
also we're not going to be able to use
also we're not going to be able to use
this data structure
this data structure
right we're not going to be able to use
right we're not going to be able to use
this data
structure we'll do it this way for now
structure we'll do it this way for now
though just to test it we're going to
though just to test it we're going to
have to replace this with like numpy Ray
so while
Q move is going to be q.
pop the new position that you're going
pop the new position that you're going
to go to is the
to go to is the
original
original
plus like
plus like
this and
this and
uh does this give you a stack or a q
uh does this give you a stack or a q
wait I think it's a stack by default
wait I think it's a stack by default
right
yeah that's not a that's a
yeah that's not a that's a
stack by
stack by
default so we're going to have to do
default so we're going to have to do
something because this will be depth for
something because this will be depth for
search but we can we can shift it around
search but we can we can shift it around
a little
a little
bit
um we'll just have to prepend okay
um we'll just have to prepend okay
that's fine
does python actually treat them
does python actually treat them
differently treat what differently stack
differently treat what differently stack
and
Q uh we're using a list and lists work
Q uh we're using a list and lists work
as
as
Stacks right if you
append obviously stacks and q's have
append obviously stacks and q's have
different methods well this is neither
different methods well this is neither
this is just a list you can use a list
this is just a list you can use a list
in python as a stack just by default
in python as a stack just by default
because it has fast depends and fast
because it has fast depends and fast
pops well fast for python right but you
pops well fast for python right but you
can do like a. append or and then a. pop
can do like a. append or and then a. pop
and a stack order right but then if you
and a stack order right but then if you
want to do it as a lit like it's not
want to do it as a lit like it's not
fast if you want to use it as a q
fast if you want to use it as a q
doesn't matter it's all slow because
doesn't matter it's all slow because
it's python right but you have to do a
it's python right but you have to do a
equals
equals
like you know four plus a
like you know four plus a
right and now this is a
q okay
interesting so it makes inferences about
interesting so it makes inferences about
what no it doesn't make any inferences
what no it doesn't make any inferences
whatsoever we're
whatsoever we're
just it it's just the fact that lists
just it it's just the fact that lists
have like this is not a stack or a que
have like this is not a stack or a que
it's a list right and the way that the
it's a list right and the way that the
list structure is implemented relatively
list structure is implemented relatively
for python it has o of one I believe o
for python it has o of one I believe o
of one appens and O of one pop from the
of one appens and O of one pop from the
end of the list so that's what you need
end of the list so that's what you need
for a stack right is that you append and
for a stack right is that you append and
then you pop you get that same element
then you pop you get that same element
it's fifo uh if you want to do a q you
it's fifo uh if you want to do a q you
have to when you add elements you have
have to when you add elements you have
to add them to the start and that is a
to add them to the start and that is a
slow operation python does have cues and
slow operation python does have cues and
stuff built in that we could use that
stuff built in that we could use that
would just give this us this anyways but
would just give this us this anyways but
in reality we're going to end up using a
in reality we're going to end up using a
numpy array anyways for all of this
numpy array anyways for all of this
because these oper are not scon and we
because these oper are not scon and we
have to process uh 200 some odd million
have to process uh 200 some odd million
elements so I don't want to wait for
elements so I don't want to wait for
python to do that and syon is
fun okay so if the grid is
fun okay so if the grid is
blocked then we continue
otherwise yeah I'm following now I
otherwise yeah I'm following now I
thought pop was
thought pop was
taking out
taking out
elements from the other end and then
elements from the other end and then
when you appended it swapped to the oh
when you appended it swapped to the oh
no no no yeah no it's not that
smart so
I think this is it right R2 C2
yeah technically the way we're doing
yeah technically the way we're doing
this now if you click on an obstacle
this now if you click on an obstacle
it's not going to
work but don't click on obstacles
work but don't click on obstacles
right
right
well maybe we could fix that doesn't
well maybe we could fix that doesn't
scon work with
scon work with
deck if it does that's news to me I
deck if it does that's news to me I
don't think so
don't think so
I'm pretty sure that list and decks and
I'm pretty sure that list and decks and
all the python data types will not be
all the python data types will not be
accelerated we're going to end up having
accelerated we're going to end up having
to what we're going to end up doing is
to what we're going to end up doing is
I'm going to just allocate a big numpy
I'm going to just allocate a big numpy
array and we're just going to
array and we're just going to
like we're going to add stuff into it
like we're going to add stuff into it
and then read stuff from the other
side I breath for search I think is is
side I breath for search I think is is
pretty easy to
pretty easy to
implement that way you just pre-allocate
implement that way you just pre-allocate
a big buffer of uh however many elements
a big buffer of uh however many elements
that you need right and you keep a
that you need right and you keep a
pointer to where you've written them and
pointer to where you've written them and
you just keep writing down into the
you just keep writing down into the
array it it's pretty easy to implement
array it it's pretty easy to implement
your own uh your own Q structure so
your own uh your own Q structure so
that's probably what we're going to
that's probably what we're going to
do okay so we set the grid to be the
do okay so we set the grid to be the
action so what we're saying is that if
action so what we're saying is that if
you're starting in at RNC and you want
you're starting in at RNC and you want
to get to this new position then the
to get to this new position then the
first move that you take is action right
EC
EC
down
down
[Music]
[Music]
uhhuh and then we
uhhuh and then we
append move up does this do
it we're obviously we're going to have
it we're obviously we're going to have
to like draw this on a grid or something
to like draw this on a grid or something
to see if it
works this is actually so critical to
works this is actually so critical to
the code that I don't and this is kind
the code that I don't and this is kind
of a fun project so I don't mind
of a fun project so I don't mind
spending a little bit of time on this
spending a little bit of time on this
today so we might we might even make
today so we might we might even make
like a cool little demo with
that actually I wrote a renderer over
that actually I wrote a renderer over
the weekend that'll be perfect for this
the weekend that'll be perfect for this
so This actually shouldn't even be hard
so This actually shouldn't even be hard
to make a cool demo
and I think this is literally
it so
um RC
let's start
with let's start with from Z 0
right so that we just run this
right so that we just run this
once and
um how are we going to do this then
so let's say
that I think we can do this even more
that I think we can do this even more
cleanly let's just write a little test
cleanly let's just write a little test
function so we'll do
function so we'll do
test BFS
test BFS
right and this will just take
right and this will just take
grid and then this will take R1 C1
grid and then this will take R1 C1
R2
R2
C2 then we'll do
C2 then we'll do
N grid.
N grid.
Shape uh and then we'll
Shape uh and then we'll
do paths equal not this we only need
do paths equal not this we only need
this one we only need a 2d one
and then we do breath birst
and then we do breath birst
search from
search from
there and then what we do
is now we have to draw it right
so we'll just
do while the points are not the
do while the points are not the
same loved your thesis defense used as
same loved your thesis defense used as
an
an
inspiration for
inspiration for
my Viva
my Viva
not sure what that is but thank you
not sure what that is but thank you
appreciate the
appreciate the
support um we're doing some cool high
support um we're doing some cool high
performance well not yet at the moment
performance well not yet at the moment
very low performance but in a few hours
very low performance but in a few hours
very very high performance pathfinding
very very high performance pathfinding
for this new Mobis Sim I'm working on
for this new Mobis Sim I'm working on
for
RL it's like what if we had DOTA but it
RL it's like what if we had DOTA but it
ran at a million steps per second
okay
okay
so while the destination is not the
so while the destination is not the
start then what we do
start then what we do
is undergraduate the assist fense okay
is undergraduate the assist fense okay
cool yeah
cool yeah
um it's going to get a lot easier to
um it's going to get a lot easier to
work in this space soon as well
work in this space soon as well
like it's going to get a lot easier to
like it's going to get a lot easier to
do work in this space because we're
do work in this space because we're
going to have a lot of these simulations
going to have a lot of these simulations
I'm working on building them they're
I'm working on building them they're
going to be way way way faster than ever
going to be way way way faster than ever
before and they're going to be way way
before and they're going to be way way
way simpler than ever before it's just
way simpler than ever before it's just
going to be all good things all
around so what would we do we do bre for
around so what would we do we do bre for
search right
yeah so we do action equals grid of
R
um is it possible to make a model that
um is it possible to make a model that
can be able to scrap through out the
can be able to scrap through out the
scrape the internet to get information
scrape the internet to get information
about any person
about any person
just by showing his
just by showing his
image is it possible yes am I going to
image is it possible yes am I going to
help you make a doxing tool no
I think I did this kind of weird didn't
I think I did this kind of weird didn't
I
I
[Music]
well yeah cuz I can't actually get the
well yeah cuz I can't actually get the
optimal path from
this yeah right because it's it's from
this yeah right because it's it's from
the starting point so you can't get the
the starting point so you can't get the
optimal path uh from just one call to
optimal path uh from just one call to
breath ver search the way I've
breath ver search the way I've
implemented it but you can get the
implemented it but you can get the
vector field so let's just get the
vector field so let's just get the
vector field instead
is it ethical to
do I mean it's just like that's clearly
do I mean it's just like that's clearly
a thing that would be very very heavily
a thing that would be very very heavily
abused right yeah you can think of a
abused right yeah you can think of a
bajillion instances for like a thing to
bajillion instances for like a thing to
use that like would be fine for that but
use that like would be fine for that but
that's just
like I mean that leads more heavily
like I mean that leads more heavily
towards missiles than you know rocket
towards missiles than you know rocket
ships to the Moon right
and mind you I'm not usually somebody
and mind you I'm not usually somebody
who cares a ton about dual use
who cares a ton about dual use
either like generally if I see an
either like generally if I see an
application that has a ton of potential
application that has a ton of potential
for misuse but can also do a bunch of
for misuse but can also do a bunch of
good stuff I'll be very much in the camp
good stuff I'll be very much in the camp
of building it that one seems like very
of building it that one seems like very
obviously like like I can't even think
obviously like like I can't even think
of that many good things that you would
of that many good things that you would
want to do with that
okay so we can't build this this way we
okay so we can't build this this way we
need to
need to
do we need to draw a vector field
right ah let's just like draw Vector
right ah let's just like draw Vector
field right
so obnoxious how this thing
so obnoxious how this thing
is we have to write a little rib render
is we have to write a little rib render
now don't
we yeah we totally have to write a ray
we yeah we totally have to write a ray
vectorfield renderer
vectorfield renderer
right that's
obnoxious well it doesn't have to be
obnoxious well it doesn't have to be
fast so that's not that bad
right e
yeah Vector field is in every grid on
yeah Vector field is in every grid on
the map shows an arrow towards the
the map shows an arrow towards the
destiny yeah like something like that
destiny yeah like something like that
this is just a very like this is just
this is just a very like this is just
one of those cases where like I could
one of those cases where like I could
YOLO it and just try to like run this
YOLO it and just try to like run this
but it's very likely that I'll have
but it's very likely that I'll have
messed this up and it's going to take me
messed this up and it's going to take me
a while
right so let's just do give it the
grid oh
grid oh
16 pathf finding from every node
16 pathf finding from every node
possible yeah exactly
that this would not be considered very
that this would not be considered very
smart this would be considered me taking
smart this would be considered me taking
10 times longer than is needed on entry
10 times longer than is needed on entry
level Elite code
level Elite code
[ __ ]
[ __ ]
um unfortunately I know how to I know
um unfortunately I know how to I know
how to build lots of cool things I do
how to build lots of cool things I do
not know how to solve tricky problems
not know how to solve tricky problems
quickly that is not something I am good
at so
I mean the strategy to test an isolation
I mean the strategy to test an isolation
instead of integr yeah
instead of integr yeah
yeah and I don't usually write tests I
yeah and I don't usually write tests I
don't usually write like the isolated
don't usually write like the isolated
test this is one of the things where
test this is one of the things where
like you have to you got to test it and
like you have to you got to test it and
you not only have to test it you have to
you not only have to test it you have to
visualize it
I get to show this off now because we're
I get to show this off now because we're
going to use some of this code I wrote
going to use some of this code I wrote
this over the weekend it's really
this over the weekend it's really
cool so I wrote this puffer lib Ray
cool so I wrote this puffer lib Ray
renderer
Advent of code every year and
Advent of code every year and
pathfinding always screws me
pathfinding always screws me
over I mean basically
over I mean basically
anything any tricky algorithms problem
anything any tricky algorithms problem
that's unintuitive and that is only done
that's unintuitive and that is only done
quickly by people grinding leite code
quickly by people grinding leite code
will screw me over because I don't grind
will screw me over because I don't grind
elak
elak
code never
have like you can't you cannot say that
have like you can't you cannot say that
these things are intuitive they simply
these things are intuitive they simply
are not
so let's see if this works I'll get just
so let's see if this works I'll get just
show off the render that I made this
weekend okay
weekend okay
so this thing right looks very similar
so this thing right looks very similar
to the one from before doesn't it boom
to the one from before doesn't it boom
we've got Zoom we've got fast Zoom we've
we've got Zoom we've got fast Zoom we've
got
got
pan we've got a little help menu if I
pan we've got a little help menu if I
hit tab that shows FPS and
stuff excuse me are you suggesting that
stuff excuse me are you suggesting that
there are more valuable uses of your
there are more valuable uses of your
time
absolutely like making ridiculous mobas
absolutely like making ridiculous mobas
and renderers for them so this is a nice
and renderers for them so this is a nice
little thing right little smooth pan and
little thing right little smooth pan and
zoom thing quits on Escape here's the
zoom thing quits on Escape here's the
source here's the source code right
source here's the source code right
here that's it just this one little
here that's it just this one little
block
block
here it's pretty
nice pause and then over a node to see
nice pause and then over a node to see
the
the
stats that would be cool that would be
stats that would be cool that would be
substantially more work
I think we can just use this thing and
I think we can just use this thing and
add some code
right so
well this is wrong it should just be
well this is wrong it should just be
grid. shape it's completely wrong
grid. shape it's completely wrong
actually do shape one grid. shape zero
actually do shape one grid. shape zero
and then tile size here with equal grid.
shape oh my gosh this is so bad the way
shape oh my gosh this is so bad the way
that this is width
that this is width
height tile size
Times Really wonky
suggestions okay there we go that's the
suggestions okay there we go that's the
client
client render self. grid
right
right
okay let's start with
this and then what we're going to do is
this and then what we're going to do is
we're just going to add the vector field
we're just going to add the vector field
underneath it
what happened down
what happened down
there
there
oops oh yeah this is garbage we don't
oops oh yeah this is garbage we don't
need this
obviously we need to do
obviously we need to do
uh we need to put some data in here
uh we need to put some data in here
don't
we why don't
we why don't
we let's load up like a crop of the the
we let's load up like a crop of the the
DOTA map
let's load up a crop of the DOTA
let's load up a crop of the DOTA
map that'll be
fun so here's your DOTA map right
here game map path is just going to
here game map path is just going to
be uh
be uh
open go to map don't need this
open go to map don't need this
and then this is going to be
of I don't like how this
looks
say uh was it
32 yeah yeah yeah
16 BFS takes
well this is called stuck in a while
well this is called stuck in a while
loop I guarantee
you yep that's stuck in a while loop so
you yep that's stuck in a while loop so
that's infinitely looping code which is
wonderful ah right so this
wonderful ah right so this
um this array that we make this needs
um this array that we make this needs
Sentinels so we're going to put this as
Sentinels so we're going to put this as
NE uh Zer minus one and then we're going
NE uh Zer minus one and then we're going
to
to
say uh if
say uh if
grid is not is uh equal
grid is not is uh equal
to1 then you
to1 then you
continue and this is why we test what is
continue and this is why we test what is
the current state of the project the
the current state of the project the
current state of the project object
is pretty
good oops I forgot I have keyboard not
good oops I forgot I have keyboard not
Mouse control so you've got your creep
Mouse control so you've got your creep
waves fighting they fight each other
waves fighting they fight each other
reasonably they attack Towers you got
reasonably they attack Towers you got
your three lanes you've got Heroes the
your three lanes you've got Heroes the
heroes aren't doing much they're kind of
heroes aren't doing much they're kind of
chilling at spawn I wrote this little
chilling at spawn I wrote this little
renderer over the weekend it is playable
renderer over the weekend it is playable
as well though I think I might have
as well though I think I might have
broken a few things we'll
see oh it looks
see oh it looks
good some improvements to be made here
good some improvements to be made here
but this is the current state of the
but this is the current state of the
project I will save you puffers
here and now we attack we take the T
and I
and I
die not bad for one week of work
right I'm very happy with the
progress a
apparently ah this is not supposed to be
apparently ah this is not supposed to be
R is this supposed to be
R is this supposed to be
R2
R2
wait
grid yes this is supposed to be
this is supposed to be
this is supposed to be
paths equal to this and then this is
paths equal to this and then this is
also suppos path is equal to
this this thing is evidently still
this this thing is evidently still
looping
140,000 yeah that's too big
140,000 yeah that's too big
so what do RNC
so what do RNC
represent this is the uh the starting
represent this is the uh the starting
position you breath for search from a
position you breath for search from a
starting
starting
position so
let me see how this works so you
add action is move of
zero you add these
in you pop from the
in you pop from the
Q well first of all this Q append is
Q well first of all this Q append is
wrong remember remember I said this had
wrong remember remember I said this had
to be breath first search so this should
to be breath first search so this should
actually
be this should be plus
be this should be plus
Q do you need to be tracking visited
Q do you need to be tracking visited
nodes right
here oh wait if it's equal to negative 1
here oh wait if it's equal to negative 1
this should be not equal to Nega 1
okay that actually breath bir
okay that actually breath bir
searched that breath first searched
searched that breath first searched
correctly now but it did it uh quit very
correctly now but it did it uh quit very
soon unexpected keyword tile
size tile
size unexpected
keyword Rd renderer does not take a tile
keyword Rd renderer does not take a tile
size at
size at
all uh I don't know how this happened
all uh I don't know how this happened
actually didn't I do the signature
actually didn't I do the signature
correctly
before should be like
this
boom index
boom index
255 is out of bounds with for a is
255 is out of bounds with for a is
zero super Maven got you and you were
zero super Maven got you and you were
talking so you didn't notice
talking so you didn't notice
yep am I on the Pro Plan here by the
yep am I on the Pro Plan here by the
way
uh what is it
plug plug was it
upgrade I don't know what's the
upgrade I don't know what's the
versioning thing
plug
update super Maven got
updated okay maybe it's better now I
updated okay maybe it's better now I
don't
know we'll see super May Pro is
running self.
running self.
colors of
colors of
grid what do I have on the grid though
grid what do I have on the grid though
hold on maybe I I just have something
hold on maybe I I just have something
dumb
here
here
0255 let's see so game map
there
there
boom
aha so this is
inverted yeah
inverted yeah
yeah hell yeah look at
yeah hell yeah look at
this we've got our little
render and now we can uh we can do some
render and now we can uh we can do some
breath bir search let's do zero
breath bir search let's do zero
zero and uh 31 31 that's pretty good
zero and uh 31 31 that's pretty good
right or no it's 60 we did 60 so it
right or no it's 60 we did 60 so it
should be 63 63 Maybe
oh uh wait no you're still dumb aren't
oh uh wait no you're still dumb aren't
you
because oh R2 and C2 don't get used
because oh R2 and C2 don't get used
obviously um so this doesn't even
obviously um so this doesn't even
matter but how
matter but how
uh feeling very very
quickly so if the paths is not equal to1
quickly so if the paths is not equal to1
and
continue okay
continue okay
so we get
so we get
R2 1
0 paths is equal to 2
0 paths is equal to 2
55 ah we made it a u
55 ah we made it a u
8 a u 8 is not
good so paths will have to
good so paths will have to
be plus 255 will have to be our
sentinel oh
sentinel oh
that looks
nice look at that we got all sorts of
nice look at that we got all sorts of
stuff very
nice though it doesn't seem to be
nice though it doesn't seem to be
correct but at least we have some
values so now we got to draw some arrows
so we do r
equal uh grid. shape of zero C is equal
equal uh grid. shape of zero C is equal
to this I don't know what it just even
to this I don't know what it just even
tried to fill in here this is
tried to fill in here this is
garbage um we need self. to
garbage um we need self. to
size TI size
right and we do uh self du
paths okay and we need to do a draw
paths okay and we need to do a draw
Arrow rayb draw
Arrow rayb draw
Arrow do we have
shapes we can do triangles right
mildly obnoxious that we have to do it
mildly obnoxious that we have to do it
this way but
this way but
um this is correct
right
oops okay
so mildly difficult
there's no draw Arrow function I guess
there's no draw Arrow function I guess
there wouldn't be
right so this is going to
right so this is going to
be so it's going to
be so it's going to
be X+
damn it this is actually hard isn't
it
TS okay so the positions
TS okay so the positions
we need to
do so X Plus Ts over
do so X Plus Ts over
two and then Y is going to be the same I
two and then Y is going to be the same I
think
think
right and then it's going to
be x
be x
+
+
three y+ tile size oh yeah this is a
three y+ tile size oh yeah this is a
triangle right x +
triangle right x +
2/3
yeah
pause one now this position has to be uh
pause one now this position has to be uh
down so it's going to
be does this actually have it
right do I trust super
right do I trust super
Maven no idea if I trust super Maven
Maven no idea if I trust super Maven
but
uh let's
do does it have a built-in rotate
do does it have a built-in rotate
function it does but it has it for
function it does but it has it for
textures I believe
so we're going to do r. draw
so we're going to do r. draw
triangle and we're not going to do
triangle and we're not going to do
colors. Violet we're going to give it
colors. Violet we're going to give it
like a reasonable color which why don't
like a reasonable color which why don't
we use the
we use the
uh oh it's I think 178 is puffer color
uh oh it's I think 178 is puffer color
so R
so R
178 178 255 I think this is our
178 178 255 I think this is our
color puffer
color and of course we also have to do a
color and of course we also have to do a
r begin
r begin
draw begin
draw begin
drawing clear
drawing clear
background no we don't clear the
background no we don't clear the
background we have to leave the
background we have to leave the
background let's see if this does
background let's see if this does
anything
well this is not quite what we
well this is not quite what we
intended it's very
flickery I would love to know why it's
flickery I would love to know why it's
very
flickery it's kind of
cool can I begin drawing twice what if I
cool can I begin drawing twice what if I
do it here
nope still
flickers no it has a frame rate but it
flickers no it has a frame rate but it
should batch
should batch
everything at least I would think it
everything at least I would think it
should batch everything we can give it a
should batch everything we can give it a
different frame rate
well now it does
this oh I guess it's
this oh I guess it's
um that's weird
well I know why I know why it's
well I know why I know why it's
happening it's because it's the draw
happening it's because it's the draw
calls there's an end drawing call in the
calls there's an end drawing call in the
renderer before
this so apparently it flushes after end
drawing right
the
annoying I mean for now I can just patch
annoying I mean for now I can just patch
this
this
right I can just
do we can just do like
this that's
right and now it doesn't flicker
anymore which is
anymore which is
cool and uh we can also we can just not
cool and uh we can also we can just not
have the FPS be
have the FPS be
garbage which will be nice for being
garbage which will be nice for being
able to play with
this but unfortunately I didn't remember
this but unfortunately I didn't remember
to scale this
so was it scaled right at the start
though yeah it should be scaled
though yeah it should be scaled
correctly at the start
right yeah
more or
more or
less let's figure out why the pathf
less let's figure out why the pathf
finding is
wonk so though
if
grid if the grid is zero then what we do
grid if the grid is zero then what we do
is you set the paths
is you set the paths
to
to
five set it to
five set it to
five you
five you
continue do
anything cannot access local variable
anything cannot access local variable
pause
continue now it doesn't draw anything
again other way around
again other way around
maybe oh there we
maybe oh there we
go it looks like I'm offset a little bit
go it looks like I'm offset a little bit
but uh this is what we want right very
but uh this is what we want right very
close do
close do
it why are we offset one tile
again I think why we're offset a
again I think why we're offset a
tile so this is if it's
up X Plus tile size
Y X Plus TI size over
Y X Plus TI size over
three plus tile
size what are the RB
cords I don't know why it's offset like
cords I don't know why it's offset like
this it's
weird well figure that out in a
weird well figure that out in a
moment can we figure out why um it's all
moment can we figure out why um it's all
facing
up so we have this Q right H pop
zero oh wait we can totally yeah if we
zero oh wait we can totally yeah if we
do pop zero like this we can totally use
do pop zero like this we can totally use
this as a q so we can do Q
this as a q so we can do Q
dot append move up move down move left
dot append move up move down move left
and move right like
this still doesn't give us any unique
this still doesn't give us any unique
actions so very
weird definitely should
hold
on yeah
so let's see it's going to give us
so action is
one why is action
one that's kind of weird already isn't
it one one and Z what happened to move
it one one and Z what happened to move
up
oh well you can't move up
oh well you can't move up
obviously because you're in the
obviously because you're in the
corner so that's actually
correct so we're left
with move down and then move to the
with move down and then move to the
right yeah that's
right yeah that's
correct so what
happens okay the path is equal to action
happens okay the path is equal to action
right
move up down left
move up down left
right get
appended and now you have move left
wait you have move
left that doesn't sound
right q.
right q.
POP Hold
on so here's your Q
on so here's your Q
right move
so the move
so the move
is
is
one one and
zero and then it's going to go through
zero and then it's going to go through
move left and we should end up at move
right we do end up at move right three Z
right we do end up at move right three Z
and one
okay the path ends up being
action so that actually looked good to
action so that actually looked good to
me let's see how the path looks after we
me let's see how the path looks after we
have computed the path
here we can actually just do that right
here we can actually just do that right
uh right here so let's see what our path
uh right here so let's see what our path
looks like
ah we do actually have various symbols
ah we do actually have various symbols
here I see a couple threes at the
here I see a couple threes at the
top okay and three should be moved to
top okay and three should be moved to
the right so if action is equal to three
the right so if action is equal to three
maybe our draw function is wrong let me
maybe our draw function is wrong let me
see so the draw function for a move to
see so the draw function for a move to
the right yeah this is totally wrong
the right yeah this is totally wrong
right this should
right this should
be X
and then this should
and then this should
be still
be still
x y + tile
x y + tile
size 3 so 2 * tile size over
size 3 so 2 * tile size over
three right and then we should have uh
three right and then we should have uh
the last corner of the triangle should
the last corner of the triangle should
be X Plus tile
be X Plus tile
size and then y plus pile size over two
size and then y plus pile size over two
so this should be your correct
triangle Ah that's better so it's not
triangle Ah that's better so it's not
perfect yet but
perfect yet but
look we see we have some triangle going
look we see we have some triangle going
on here something is is reasonable over
on here something is is reasonable over
here uh
here uh
so let's maybe fix the
so let's maybe fix the
remainder of these
triangles so zero should be pointed down
triangles so zero should be pointed down
right so for a down
right so for a down
triangle X Plus TI
triangle X Plus TI
size well this is these are
size well this is these are
flipped let's see if this
better okay so this is now in the
better okay so this is now in the
correct position but it's still flipped
correct position but it's still flipped
let's see what's wrong with our uh our
let's see what's wrong with our uh our
zero
triangle uh it's that super M completely
triangle uh it's that super M completely
got it wrong
got it wrong
okay
okay
so X Plus to size over
two
two
why
why
wait yeah this is just completely bogus
wait yeah this is just completely bogus
right yeah so this is X Plus to size
right yeah so this is X Plus to size
over three
over three
Y X plus two times T it's not that hard
Y X plus two times T it's not that hard
really and then y
really and then y
then X
then X
Plus TI size over
Plus TI size over
two and then
two and then
y plus to
size do I still have this stupid thing
size do I still have this stupid thing
upside
upside
down I still have it upside down don't
down I still have it upside down don't
I um
am I crazy or should this be a down a
am I crazy or should this be a down a
downfacing
arrow unless the coordinate system is
arrow unless the coordinate system is
backwards which doesn't appear to
be this is where we're drawing isn't
be this is where we're drawing isn't
it oh apparently not thought that this
it oh apparently not thought that this
was what the uh the action
were the heck are the
actions oh one is
down maybe
now what
now what
happened what happened
happen X Plus tile size over 3 Y X + 2 *
happen X Plus tile size over 3 Y X + 2 *
TI size over
TI size over
Y what the heck happened here
five so wait this is XY so it's 5
five so wait this is XY so it's 5
10 and then 8 and six this looks like a
10 and then 8 and six this looks like a
valid triangle to
me uh Why is drawing shapes this hard
me uh Why is drawing shapes this hard
is
is
ridiculous should not be this
hard is it somehow the rounding
no you don't it's not closed this should
no you don't it's not closed this should
be
fine how' I do it for this
fine how' I do it for this
one is there like a rule of like the
one is there like a rule of like the
order you have to draw them in or
order you have to draw them in or
something like that like maybe you have
something like that like maybe you have
to draw them around like the the right
way I I bet you have to like draw them
way I I bet you have to like draw them
around the right
around the right
way vertex in clock in
way vertex in clock in
counterclockwise yeah that it was it's
counterclockwise yeah that it was it's
literally this so it's counterclockwise
literally this so it's counterclockwise
order so you have to go around the other
order so you have to go around the other
way so it's got to
way so it's got to
be uh 2 * tile size over
be uh 2 * tile size over
three TI size over
three well if you think of about it it's
three well if you think of about it it's
got to know how to
got to know how to
shade I mean I was it's I was correct
shade I mean I was it's I was correct
look it's literally the thing I just
look it's literally the thing I just
said right
so the obnoxious thing is I can't even
so the obnoxious thing is I can't even
tell you if this is wrong or
tell you if this is wrong or
not
right because remember this is drawing
right because remember this is drawing
the
the
um the first move
okay yeah this is probably actually
okay yeah this is probably actually
correct because the thing is this is the
correct because the thing is this is the
first move what it's drawing is that is
first move what it's drawing is that is
for every position on the map it's
for every position on the map it's
drawing the first move that you would
drawing the first move that you would
take from the origin to get there
right so yeah all of the other positions
right so yeah all of the other positions
except the ones at the top you can see
except the ones at the top you can see
that you have to go directly right if if
that you have to go directly right if if
you want to go directly right but the
you want to go directly right but the
other ones are all
other ones are all
like
yeah uh I could give it a better
yeah uh I could give it a better
starting position
maybe where would like a cool place to
maybe where would like a cool place to
start this
be I don't know I'll start in the middle
be I don't know I'll start in the middle
and see what it does
Okay cool so if you start it in the
Okay cool so if you start it in the
middle uh which is like right here is I
middle uh which is like right here is I
think a couple of these being empty is
think a couple of these being empty is
weird
but you start it in the
middle I don't know exactly where you
middle I don't know exactly where you
start
start
it let's actually let's uh let's draw a
it let's actually let's uh let's draw a
red square on that
and let's just
do yeah red rectangle to
start okay
so little awkward that
it's I don't know what's happening on
it's I don't know what's happening on
the left
the left
here oh probably just our left facing
here oh probably just our left facing
triangle is drawn wrong
triangle is drawn wrong
right yeah probably our left facing
right yeah probably our left facing
triangle is uh is just drawn wrong
which is which one
two so our left facing triangle
two so our left facing triangle
is you start
is you start
counterclockwise so let's do
counterclockwise so let's do
x y + tile size over 3
x y + tile size over 3
yeah we just have to flip
these
Graphics
yeah
yeah
awesome almost
there uh I would like to
there uh I would like to
change i' would like the initial
change i' would like the initial
position to be
position to be
empty so let's do that let's do
and this should be we'll set this equal
and this should be we'll set this equal
to
to
five uh which is our
KN and then let's
KN and then let's
see okay perfect so
yeah this is correct Now isn't
it this looks like a valid breath for a
it this looks like a valid breath for a
search so you have to remember this is
search so you have to remember this is
not the vector field pointing towards
not the vector field pointing towards
the Target right this is uh for every
the Target right this is uh for every
Target position on the map this is if I
Target position on the map this is if I
start at the center what is the first
start at the center what is the first
move I should make to get to that Target
and I think that this works so okay what
and I think that this works so okay what
we're going to do next is we're going
we're going to do next is we're going
to optimize this in Python first such
to optimize this in Python first such
that it will be easy toonize then we're
that it will be easy toonize then we're
going toonize it then we're going to get
going toonize it then we're going to get
the actual maps that we care
the actual maps that we care
about let's do
that and we'll also rethink a couple
that and we'll also rethink a couple
little data structures uh along the way
little data structures uh along the way
but I think that I have it correct at
but I think that I have it correct at
the moment even though it makes it more
the moment even though it makes it more
Awkward to draw I think it's going to be
Awkward to draw I think it's going to be
easier to use I'll be back in a minute
easier to use I'll be back in a minute
and then we'll set we'll work on
this
e e
okay
so it's occurring to me that we might be
so it's occurring to me that we might be
able to index a little
able to index a little
differently so right now I have it start
differently so right now I have it start
position it's start row start call end
position it's start row start call end
end row end
end row end
call what would happen if I tried to
call what would happen if I tried to
compute this
compute this
as end row end call comma start row
as end row end call comma start row
start call what happens then
I have to slightly rewrite this then cuz
I have to slightly rewrite this then cuz
the breath for search has to start from
the breath for search has to start from
the
the
destination and it has to go to the the
destination and it has to go to the the
starting
position that means though that a single
position that means though that a single
breath for search call gets me the uh
breath for search call gets me the uh
the optimal path to a Target which is
the optimal path to a Target which is
more reasonable and it should be better
more reasonable and it should be better
for cash coherency as well because
for cash coherency as well because
otherwise you're um you always want to
otherwise you're um you always want to
keep the first you know indices or
keep the first you know indices or
whatever the same if you can and you
whatever the same if you can and you
want the last index to be the variable
want the last index to be the variable
one
so if I do it this way then the desk row
so if I do it this way then the desk row
desk call always stay the same so I
desk call always stay the same so I
think it's better for cash coherency and
think it's better for cash coherency and
it's better for
visualization because it makes a lot
visualization because it makes a lot
more sense
more sense
right if you think about it as you have
right if you think about it as you have
a map that tells you how to get to every
a map that tells you how to get to every
position rather than you have a map that
position rather than you have a map that
tells you the move that you make at any
tells you the move that you make at any
given position
given position
to get you to the next position that's
to get you to the next position that's
closest yeah that's way better so let's
closest yeah that's way better so let's
refactor it like that then do the then
refactor it like that then do the then
we'll get a good Vector map that'll be
we'll get a good Vector map that'll be
cool to look at I can post that
cool to look at I can post that
online
um
yeah
e for
this is gross
code this should be start
code this should be start
R start C so we do backwards breath
R start C so we do backwards breath
resarch let's actually break it out as
well because you can't do multiple lines
well because you can't do multiple lines
you can't multiple line it like this in
syon okay and now we do
if
continue start R if it's not
continue start R if it's not
empty start
empty start
R start R is
R start R is
five Paths of start r it's going to be
action and
um now we have to flip these values
um now we have to flip these values
don't
we I think this is going to be backwards
we I think this is going to be backwards
we're going to see
yep so these are now backwards it looks
like worse than
backwards so let's first of all we'll
backwards so let's first of all we'll
flip
these now it should Point towards the
these now it should Point towards the
target so this is how you get to the the
target so this is how you get to the the
Target
Target
right uh and now instead of making it
right uh and now instead of making it
the first
the first
move we're going to put
action say
action say
zero 1
zero 1
three you know I don't know why we uh we
three you know I don't know why we uh we
worry so much about this this is really
worry so much about this this is really
just
easy I don't know why we worry about
easy I don't know why we worry about
pathf finding it's uh it's easy
right now
right now
um there's one minor little issue with
um there's one minor little issue with
this right
this right
which is that
which is that
technically well first of all these it
technically well first of all these it
gives you this really wonky pathing like
gives you this really wonky pathing like
this because it doesn't do
this because it doesn't do
diagonals and uh second of all like
diagonals and uh second of all like
these agents can technically move on a
these agents can technically move on a
continuous
grid yeah they can technically move on a
grid yeah they can technically move on a
continuous grid but we can do discreet
continuous grid but we can do discreet
pathf finding right for the creeps let's
pathf finding right for the creeps let's
just um
let's like add diagonals
let's like add diagonals
in
right yeah let's just add in
right yeah let's just add in
diagonals and that should be pretty much
diagonals and that should be pretty much
close enough
close enough
right because if they can just do
right because if they can just do
diagonals then like they should be able
diagonals then like they should be able
to learn do the diagonal and then do the
to learn do the diagonal and then do the
shortest like straight line or something
shortest like straight line or something
they're not going to be able to pathfind
they're not going to be able to pathfind
you know
you know
perfectly not going to be able to
perfectly not going to be able to
pathfind perfectly but it'll look pretty
pathfind perfectly but it'll look pretty
reasonable I would
reasonable I would
say it'll be really
close is that going to look weird
close is that going to look weird
you're going to look weird if they uh
you're going to look weird if they uh
they only move eight
directional I don't think it'll look
directional I don't think it'll look
that
weird a pretty minor limitation
weird a pretty minor limitation
honestly and this is just for scripted
honestly and this is just for scripted
agents as well and creeps that's not a
agents as well and creeps that's not a
problem it's fine this'll look way
problem it's fine this'll look way
cooler let's fix it so
we actually get to make this way simpler
we actually get to make this way simpler
now
now
um because all we have to do
is path is not equal to 255
continue equal to action hold
continue equal to action hold
on I'm trying to figure out a way to not
on I'm trying to figure out a way to not
have to do this logic twice
this is always the obnoxious thing with
this is always the obnoxious thing with
algorithms like this is figuring out how
algorithms like this is figuring out how
to roll the initial condition into the
to roll the initial condition into the
main Loop so you don't have to write it
main Loop so you don't have to write it
twice and have it be
twice and have it be
gross
gross
um let's see so
we can just okay I know how to do it so
we can just okay I know how to do it so
we're going to get rid of this I'd
we're going to get rid of this I'd
say uh we're going to just have the Q be
say uh we're going to just have the Q be
equal to uh
equal to uh
zero z
zero z
z which is the initial position
z which is the initial position
right and then what we're going to do is
right and then what we're going to do is
we're going to set this
we're going to set this
Paths of d r d c at the very end to be
Paths of d r d c at the very end to be
five so we just null that last action
five so we just null that last action
and then what we do is we just uh we pop
and then what we do is we just uh we pop
from the Q we get the action and the
from the Q we get the action and the
Delta start R start
C it's an obstacle set it to five that's
C it's an obstacle set it to five that's
good you set it to be the
action yeah which is fine it doesn't
action yeah which is fine it doesn't
matter and now what we just do is we
matter and now what we just do is we
just append uh lots of things so q.
append so we're going to do action index
append so we're going to do action index
is going to be
is going to be
zero uh this is going to be Dr
zero uh this is going to be Dr
minus one
minus one
DC
Dr uh + one
DC Dr minus one Dr +
DC Dr minus one Dr +
one so this is up down left right but we
one so this is up down left right but we
really want to do
I like this up down left right being
I like this up down left right being
like
[Music]
this I'm trying to think if there's a
this I'm trying to think if there's a
clever way I can Index
clever way I can Index
this it's eight
actions not really
actions not really
huh well that's
huh well that's
okay we'll just do it this way
so we'll do up down left
so we'll do up down left
right and then we'll do q.
right and then we'll do q.
append or and then this will be
Dr um minus one DC +
one row +
one all + one
then like this something like this
right now the only thing we have to
right now the only thing we have to
figure out is now how to draw these
figure out is now how to draw these
freaking
freaking
triangles
um be really nice if I could find
um be really nice if I could find
a decent way of doing this let me think
there really isn't a good way of doing
there really isn't a good way of doing
this is there I think I just have to
this is there I think I just have to
write out all the bloody triangle
definitions
definitions
yeah
yeah
well that
sucks
sucks
yeah so these ones were correct I
think what if I just like let super
think what if I just like let super
Maven do it and then I try to fix
them it's probably going to be slop
right yep
right yep
[Music]
[Music]
slop love my slop yep
slop love my slop yep
good
job was there a function that I can use
job was there a function that I can use
that will be just like better than
that will be just like better than
this I don't think so right draw a ring
this I don't think so right draw a ring
draw ring Lines line strip
bezier
bezier
uh no I think
not think not
cool to see they have Collision
cool to see they have Collision
functions in there I didn't know
functions in there I didn't know
that
so is this
so is this
um let's see if these ones are still
um let's see if these ones are still
correct
first
oops else okay we got to take this out
oops else okay we got to take this out
hold
on okay so these ones are correct these
on okay so these ones are correct these
are just the uh the straight the
are just the uh the straight the
straightaway actions
right kind of weird but I think they're
right kind of weird but I think they're
valid
and then we'll do if action is equal to
and then we'll do if action is equal to
four remember I have to go in the
four remember I have to go in the
opposite direction of these which is
opposite direction of these which is
very confusing to think
about so
about so
Dr minus
one so it's pointing that way so I have
one so it's pointing that way so I have
to point the other way
so God that's so hard to think about
so God that's so hard to think about
*
TS
TS
y
um
x y +
x y +
TS and
TS and
then HTS my
head
head
plus three
plus three
and this is supposed to be a
and this is supposed to be a
three
okay
okay
and five is Dr + 1 DC + one so it points
and five is Dr + 1 DC + one so it points
this way so I got to go that
way so what
way so what
that's the the first point is easy it's
that's the the first point is easy it's
just
just
XY then we've got to go around counter
XY then we've got to go around counter
counterclockwise
counterclockwise
which is going to
which is going to
be x + 2 * tile size over
be x + 2 * tile size over
3 y + tile
3 y + tile
size and
size and
then X Plus tile size y
then X Plus tile size y
+ 2 * T size over
+ 2 * T size over
three okay and then six is Dr + 1 DC so
three okay and then six is Dr + 1 DC so
it goes that way so we got to go that
it goes that way so we got to go that
way
way
um counterclockwise so it's X Plus TI
um counterclockwise so it's X Plus TI
size what this one yeah six X Plus TI
size what this one yeah six X Plus TI
size y That's the top right corner then
size y That's the top right corner then
we got to do X Plus TI
size no it's just
size no it's just
x y + 2 * to size over
x y + 2 * to size over
three and then it's going to be X+
three and then it's going to be X+
T size over three
T size over three
y all right one more so Dr minus one
y all right one more so Dr minus one
goes that way it's the bottom right
goes that way it's the bottom right
corner facing one we flip
corner facing one we flip
it bottom right corner facing one is
it bottom right corner facing one is
going to be X Plus T size over
going to be X Plus T size over
three
three
y
y
x TI size over
x TI size over
three and X Plus tile size
three and X Plus tile size
y plus to
size
yeah well that's almost it that's
yeah well that's almost it that's
actually pretty darn good for a first
actually pretty darn good for a first
try uh I don't know why some of these
try uh I don't know why some of these
are
are
blue assumedly I did something
backwards but these ones look good so
backwards but these ones look good so
the one that's facing to the top right
the one that's facing to the top right
is not good getting
is not good getting
rendered top right should be they're
rendered top right should be they're
flipped so
it's it's the one that faces this way
it's it's the one that faces this way
which is minus which is one and minus
which is minus which is one and minus
one I
one I
think so which one is this
think so which one is this
one which one's one minus
one which one's one minus
one six did I do six
wrong so six is supposed to face up
right so I put it top right
right so I put it top right
corner and then I did
corner and then I did
X Y is down
here then
here then
X Plus tile
size much better
and
and
uh yeah only problem is that it we're
uh yeah only problem is that it we're
covering obstacles as well for some
covering obstacles as well for some
reason so maybe let's not freaking do
reason so maybe let's not freaking do
that
um if
um if
the grid
oh we can't give it five because five is
oh we can't give it five because five is
an action value now so we have to give
an action value now so we have to give
this eight so we'll do our heldout value
this eight so we'll do our heldout value
will be eight
right okay this is way better
so is this perfect or not
it does allow you to go through a corner
it does allow you to go through a corner
size gaps and
walls which I thought I think is kind of
walls which I thought I think is kind of
funny honestly that it allows you to do
funny honestly that it allows you to do
that I don't really care about that do
that I don't really care about that do
I if a wall is one thick like
I if a wall is one thick like
that I can just touch up the map to have
that I can just touch up the map to have
two thick walls
did my bit rate just drop a
did my bit rate just drop a
bunch looks like it
bunch looks like it
did hopefully we should be good
did hopefully we should be good
now
now
um
okay
okay
so something weird just happened to some
so something weird just happened to some
of my arrows
of my arrows
though no I think they're
though no I think they're
good some just not you know they're not
good some just not you know they're not
all the same sizes it's no big
deal nice Vector
Fields maybe you can pad all
Fields maybe you can pad all
obstacles so in real time the agents
obstacles so in real time the agents
don't pat long wall yeah that's what I
don't pat long wall yeah that's what I
was going to
was going to
do
do
um I that's
um I that's
easy I can just feather the walls if I
easy I can just feather the walls if I
just feather all the walls one pixel
just feather all the walls one pixel
that will fix it so I might just touch
that will fix it so I might just touch
up the map essentially that's no big
up the map essentially that's no big
deal literally you feather the walls one
deal literally you feather the walls one
pixel it's
pixel it's
fixed but this is nice a good
result uh now do I dare try to run this
result uh now do I dare try to run this
on the full size map I think I do right
on the full size map I think I do right
let me let me just see if I can do so I
let me let me just see if I can do so I
set a big tile size for this didn't I
set a big tile size for this didn't I
not really this is
eight let's do
eight can we see what's going on
eight can we see what's going on
here kind
here kind
of what if I now do the full sizee map
kind of hard to see what's going
kind of hard to see what's going
on can I do like 12
on can I do like 12
maybe to size
maybe to size
12 maybe that looks
better yeah it looks better righto
and I should do like the enemy base
and I should do like the enemy base
right this would be a cool position to
right this would be a cool position to
do which is like 16 hold
on8 minus
16 uh Wrong Way Around 128 - 16 this is
16 uh Wrong Way Around 128 - 16 this is
y right so I flipped Y and X this is 16
y right so I flipped Y and X this is 16
128 minus
16 and we'll do a little bit further in
16 and we'll do a little bit further in
it looks like so this is like
yeah how to get to the enemy
yeah how to get to the enemy
base in your base killing your
base in your base killing your
dudes you just follow the vector field
dudes you just follow the vector field
from anywhere right so like this way
from anywhere right so like this way
this way this way
this way this way
y this way this
y this way this
way this way this way and we're in your
way this way this way and we're in your
base killing your
dudes cool let's do
let's do
let's do
uh render do
render uh we'll
render uh we'll
do turn I need to import the other thing
do turn I need to import the other thing
from render
right what is it
right what is it
uh hold
uh hold
on going to have a cool thing for
on going to have a cool thing for
Twitter renderer do Ren
C data to
C data to
numai C data to
nump data to
nump data to
numpy like
numpy like
so and then we will
so and then we will
do image or this is a
frame right and then we'll do
[Music]
[Music]
we have to import pill here
we have to import pill here
right import
pill save pathing PNG exit
I actually think is it going to
be well the pathing is not going to
change let's see if this works first but
change let's see if this works first but
I think that we're going to do something
I think that we're going to do something
cooler before we tweet it
do we get
do we get
pathing yeah
pathing yeah
so Okay so we've got that
so Okay so we've got that
PNG
um well we can tweet this
um well we can tweet this
first that'll be nice you got to tweet
first that'll be nice you got to tweet
more stuff so that you people see
more stuff so that you people see
it puffer
it puffer
marketing got to do your open source
marketing got to do your open source
marketing after all
okay so we get our pathing
PNG let's see how this
PNG let's see how this
looks very
nice for
okay
cool
frame good time to remind folks to Star
frame good time to remind folks to Star
Puffer lib if they enjoy this stuff
Puffer lib if they enjoy this stuff
helps me out a whole bunch
we've got will who is going to
we've got will who is going to
absolutely refuse to end the stream
absolutely refuse to end the stream
before I do meaning that we're both
before I do meaning that we're both
going to be here
forever okay so this is actually pretty
forever okay so this is actually pretty
solid
solid
um we now need to make this
fast yeah cuz this needs to run like
fast yeah cuz this needs to run like
10,000 times and I don't feel like this
10,000 times and I don't feel like this
taking forever to
pre-compute question is how fast do I
pre-compute question is how fast do I
need this
so literally all I have to do is uh use
so literally all I have to do is uh use
a numpy array
a numpy array
right isn't it that
easy because it's a q right
easy because it's a q right
yeah stack would be a stack would be
yeah stack would be a stack would be
substantially more
substantially more
obnoxious but because it's a q it's
obnoxious but because it's a q it's
actually pretty
easy so we're going to give this um grid
easy so we're going to give this um grid
paths uh this is going to get a
paths uh this is going to get a
buffer and let's take this
buffer so this is going to be kind of
buffer so this is going to be kind of
cool and instructive this is how you
cool and instructive this is how you
make
make
stuff super
stuff super
fast like 100x
fast like 100x
faster okay so
faster okay so
buffer
buffer
zeros the buffer needs to be able to
zeros the buffer needs to be able to
accommodate n * n is the number of uh
accommodate n * n is the number of uh
tiles and then three which is the action
tiles and then three which is the action
row call whatever uh and it can't be a
row call whatever uh and it can't be a
uent
8 and actually I think I'm just going to
8 and actually I think I'm just going to
make it a number pi. uint
make it a number pi. uint
32 would be fast
32 would be fast
right we're just an n32 I think that'll
right we're just an n32 I think that'll
be
optimal could make it a 16 I think it's
optimal could make it a 16 I think it's
usually faster to use um four byte types
usually faster to use um four byte types
I could be wrong on
I could be wrong on
that so now we give it buffer
that so now we give it buffer
right and uh now that it takes buffer
so what we're going to do is we just
so what we're going to do is we just
make a pointer which is just an index so
make a pointer which is just an index so
pointer equal to zero because that's
pointer equal to zero because that's
where we're at right
where we're at right
now uh and we do
now uh and we do
buffer
pointer equals zero so we've zeroed out
pointer equals zero so we've zeroed out
our initial
our initial
right and then what we do
is we're just going to do while
is we're just going to do while
true let's actually make this buffer be
true let's actually make this buffer be
a negative
a negative
one make the buffer be negative
one make the buffer be negative
1es we can do that
right I don't know if we'll need to or
right I don't know if we'll need to or
not but we'll do it
so while
so while
true we're going to
do uh action
do uh action
equals
buffer
buffer
buffer pointer
buffer pointer
zero and then what we do is we have
zero and then what we do is we have
action
action
drdc don't need to increment the pointer
drdc don't need to increment the pointer
just
just
yet okay now we can get our start R our
yet okay now we can get our start R our
start C these are these are good
start C these are these are good
operations these are good
operations these are good
operations this is a good
operations this is a good
operation the only operations that we
operation the only operations that we
have that are bad here are this q.
have that are bad here are this q.
append okay so all we have to do is we
append okay so all we have to do is we
now do buffer of pointer
plus one
be slightly more efficient to do pointer
be slightly more efficient to do pointer
plus equals 1 then buffer of pointer Z
plus equals 1 then buffer of pointer Z
is going to be equal to
is going to be equal to
zero one two is going to be Dr
zero one two is going to be Dr
action uh I don't know where it got this
action uh I don't know where it got this
three from this is completely wrong but
three from this is completely wrong but
this is the first update
this is the first update
here like
here like
this and uh this is Dr minus one of
this and uh this is Dr minus one of
course we mirror this one then we do
course we mirror this one then we do
pointer plus equals
pointer plus equals
1 could technically write Loops over
1 could technically write Loops over
this and it'll be fast
well we might write Loops later I don't
well we might write Loops later I don't
want to have to redo the visualization
want to have to redo the visualization
stuff by reordering things um so we're
stuff by reordering things um so we're
going to do it the stupid way for now
this is
this is
Dr +
Dr +
one
one
pointer let's see so the third one it
pointer let's see so the third one it
gave us was Dr C minus one C + one then
gave us was Dr C minus one C + one then
we got
we got
Dr see this thing consistently gets [ __ ]
Dr see this thing consistently gets [ __ ]
wrong so this is minus one + one for
four minus one + one
four minus one + one
and then it is + one + one
right and then it's + one minus
right and then it's + one minus
one minus
one I don't even know what it thinks
one I don't even know what it thinks
it's doing at this point but it's minus
it's doing at this point but it's minus
one minus
one minus
one 1 2 3 4 five six 7 eight Okay so
we will test this to see if this is the
we will test this to see if this is the
same as
before we
before we
also did we increment the pointer
also did we increment the pointer
enough ah wait wait wait wait we screwed
enough ah wait wait wait wait we screwed
something up here we can't quite do it
something up here we can't quite do it
this way this is pointer +
this way this is pointer +
one like this we can't increment the
one like this we can't increment the
pointer like this cuz we need the
pointer like this cuz we need the
pointer to stay where it
is
is
okay this is+ three + three +
okay this is+ three + three +
three bear with
three bear with
me this is going to be really cool when
me this is going to be really cool when
it runs like a 100 times faster
okay and then I don't know why I just
okay and then I don't know why I just
did that my brain just decided to stop
working and then finally pointer Plus 8
working and then finally pointer Plus 8
+ 8 plus
8 boom boom boom and then at the bottom
8 boom boom boom and then at the bottom
we increment pointer by one for the next
we increment pointer by one for the next
Loop
boom
apparently this was not happy with
that got to break out of
it so
this is a reasonable way to break out of
this is a reasonable way to break out of
the
loop I would hope
loop I would hope
right guess
not would really think it would be
I should get uh print
poter so it gets five
the pointer needs to
advance the pointer always needs to
advance the pointer always needs to
advance by
advance by
one so this pointer
one so this pointer
increment actually should be up
increment actually should be up
here and then I need to edit all of
here and then I need to edit all of
these things
unfortunately
unfortunately
right
right
y one one one two two two of course it's
y one one one two two two of course it's
way easier to edit them than it is to
way easier to edit them than it is to
add
them okay so that that actually did
them okay so that that actually did
run um but I think it did something
run um but I think it did something
weird let's do like
this so it did something
this so it did something
weird
weird
uh let's see what it would have done
weird -1 + 1
+ one wait- one + one right - one + one
+ one wait- one + one right - one + one
plus one +
plus one +
one so these all are
fine pointer gets incremented
fine pointer gets incremented
here oh you need two pointers I'm
dumb yep you need two pointers you need
dumb yep you need two pointers you need
start and end
start and end
okay so you need let me explain
okay so you need let me explain
this you need to have a start pointer
this you need to have a start pointer
that tells you where you're consuming
that tells you where you're consuming
the queue from and an end pointer that
the queue from and an end pointer that
tells you where the Q is done and that's
tells you where the Q is done and that's
also going to tell you you're not going
also going to tell you you're not going
to have to zero the Q out every time so
to have to zero the Q out every time so
this is going to be even faster than I
this is going to be even faster than I
originally intended by quite a bit um
originally intended by quite a bit um
but it does get you do have to keep two
but it does get you do have to keep two
pointers
around so you have start and by pointer
around so you have start and by pointer
I mean index it's the same thing right
mhm
so you do while essentially while
so you do while essentially while
there's still data to consume and then
there's still data to consume and then
this is going to get rid of this ugly
this is going to get rid of this ugly
break condition
here now this is
here now this is
End plus equal to 1
and and
and I don't know why it like keeps
and I don't know why it like keeps
giving me these garbage suggestions
okay
okay go work do your thing
okay go work do your thing
damn
it this shouldn't be possible
right yeah this shouldn't be possible
right yeah this shouldn't be possible
because I allocated enough space essenti
because I allocated enough space essenti
I allocated enough space for every
I allocated enough space for every
single to to go into the
buffer so if this is not working it's
buffer so if this is not working it's
because
why plus equal to one
[Music]
[Music]
uh I don't know
actually that looks good to
me buer start is zero end is
me buer start is zero end is
zero you add one to the
start you don't add anything to the end
start you don't add anything to the end
here
this should be
this should be
action wait should this be action or did
action wait should this be action or did
I totally screw this thing
I totally screw this thing
up wait
up wait
what this isn't action at all I this
what this isn't action at all I this
thing gives me garbage suggestion
thing gives me garbage suggestion
sometimes and it screws me up like I'm
sometimes and it screws me up like I'm
not going to uninstall it because it's
not going to uninstall it because it's
really really nice for the code complete
really really nice for the code complete
but the models actually have to get a
but the models actually have to get a
little bit better
I wouldn't think this will make a
I wouldn't think this will make a
difference in terms of it not running
difference in terms of it not running
though
right yeah it's still going to screww up
right yeah it's still going to screww up
if it's going to screw up um
I don't know print start comma end
I don't know print start comma end
something that tell me anything remotely
useful tells me the start is keeping up
useful tells me the start is keeping up
pretty well with the the start's keeping
pretty well with the the start's keeping
up pretty well with this
thing this should not be possible
here cuz I give it grid shape
here cuz I give it grid shape
right and the buffer is n *
N I don't need to subtract one anymore
N I don't need to subtract one anymore
I'm not using that as a
check uh
oh and you should also return
oh and you should also return
um you should return end as
well wait End plus hold on does this
well wait End plus hold on does this
make sense or am I overwriting
I
I
think I think it makes more sense to
think I think it makes more sense to
start this
start this
at
at
one I do while
one I do while
start is less than end and then I put
start is less than end and then I put
these as postfix Ops
right yeah that'll that'll be nice
right yeah that'll that'll be nice
because I'm going to want to return the
because I'm going to want to return the
end that I know how many elements I have
so we'll do return
so we'll do return
and
and
this that's still not going to fix it
though yeah so
why let me see so you get the
why let me see so you get the
action from start right
action from start right
you get Dr and DC from
start
start
okay you go start R
okay you go start R
here you bounce check
it you
I also don't know why I'm doing it this
I also don't know why I'm doing it this
way
way
right
right
like this Dr and DC doesn't need to be
like this Dr and DC doesn't need to be
this
this
way I can just do this can just be start
way I can just do this can just be start
R so this should just be like buffer
equal
equal
Z I
guess and then we
guess and then we
do buffer start one equals d
do buffer start one equals d
r and then d
c and this is just start R right here
c and this is just start R right here
right this is start C so this
right this is start C so this
simplifies because we don't need this
simplifies because we don't need this
garbage
garbage
anymore yeah because then you just
anymore yeah because then you just
directly do this is just start
directly do this is just start
R start r-
one start
one start
C + one start
C + one start
C start R start C C
-1 start R start C +
-1 start R start C +
one start see almost just did it right
one start see almost just did it right
there start our start C+
there start our start C+
one
one
plus
plus
plus plus
minus minus
minus minus
one's okay still not going to fix it
one's okay still not going to fix it
makes it cleaner
though now aside from us being able to
though now aside from us being able to
roll this into a loop if we um reindex
roll this into a loop if we um reindex
our actions or reindex the triangles for
our actions or reindex the triangles for
drawing so this will be one little Loop
drawing so this will be one little Loop
like over
like over
RNC uh maybe we could also just leave it
RNC uh maybe we could also just leave it
unrolled like
unrolled like
this
this
um but aside from that we're pretty much
um but aside from that we're pretty much
optimal
oh and the issue is just that the buffer
oh and the issue is just that the buffer
isn't big enough
isn't big enough
right um because you can add the same
right um because you can add the same
tile in multiple times uh you just
tile in multiple times uh you just
can't yeah you can add the same tile in
can't yeah you can add the same tile in
multiple times you just can't actually
multiple times you just can't actually
pick the tile multiple times and I think
pick the tile multiple times and I think
that the most number of times you can
that the most number of times you can
add a tile in
is hold on it's eight
is hold on it's eight
right so I think it's the buffer
right so I think it's the buffer
actually got to be pretty freaking big I
actually got to be pretty freaking big I
think it's 8 time n * n which is you
think it's 8 time n * n which is you
know a little bit obnoxious
admittedly boom we
win okay
win okay
so you might be wondering why the heck
so you might be wondering why the heck
did I just do all of that
did I just do all of that
right I just spent a bunch of time to
right I just spent a bunch of time to
make the program I'm going to tell you
make the program I'm going to tell you
right now not even any
right now not even any
faster um to refactor it in that exact
faster um to refactor it in that exact
weird
weird
manner so the reason that I did
that was that now it's going to be
that was that now it's going to be
trivial to scyon
trivial to scyon
eyes and the way I can tell you that is
eyes and the way I can tell you that is
I just wrote this thing in a way where
I just wrote this thing in a way where
every single operation is going to
every single operation is going to
effortlessly translate into uh into
effortlessly translate into uh into
purec with no Reliance on python
purec with no Reliance on python
whatsoever the prerequisites for that
whatsoever the prerequisites for that
are mainly that you're not using lists
are mainly that you're not using lists
or decks or anything like that or tuples
or decks or anything like that or tuples
any python data structures and that all
any python data structures and that all
of your operations can be expressed as
of your operations can be expressed as
Loops over numpy
arrays and if you do that you're
arrays and if you do that you're
good
good
so let's do
so let's do
um let's have a little fun with this I
um let's have a little fun with this I
think we've earned it
right you want answers I think I'm
right you want answers I think I'm
entitled
all right so we don't need all this
all right so we don't need all this
garbage this is
garbage this is
gorbage get rid of the
gorbage all right and now this is
gorbage all right and now this is
CNP ND
CNP ND
array
array
grid can we type
grid can we type
these I think we can I don't know if we
these I think we can I don't know if we
can type
can type
these I don't know if we can type
these I don't know if we can type
these we should be able to
these we should be able to
right he let's try
right he let's try
it grid CNP ND array paths
it grid CNP ND array paths
CNP Ray buff and we got
CNP Ray buff and we got
int
int
int
yeah this is an INT returns an
yeah this is an INT returns an
INT uh we C def int
INT uh we C def int
n and
n and
start kaboom
start now we also have to do of course
start now we also have to do of course
these start R start
C
C
and uh what I like to do is just to
and uh what I like to do is just to
avoid bad variable names is I just like
avoid bad variable names is I just like
prefix I postfix these n p n p like this
prefix I postfix these n p n p like this
right
and then what I do is first of all I
and then what I do is first of all I
don't know why I did this this should
don't know why I did this this should
just be a block like this uh so we got
just be a block like this uh so we got
cdef
cdef
int cdef int and and int like
int cdef int and and int like
this and
this and
then we can see
then we can see
ah this
ah this
is we have to go get the types of these
is we have to go get the types of these
I think it's
un it's Char for grid
un it's Char for grid
Char grid is grid
Char grid is grid
NP I think paths is also a
NP I think paths is also a
Char and then we used an INT for buffer
Char and then we used an INT for buffer
like
like
this
okay
okay
so let's check this
so let's check this
and now what we get to do is we get this
and now what we get to do is we get this
pix import
pix import
right and then we do oops
right and then we do oops
from C precompute import BF as
from C precompute import BF as
cbfs
uhhuh and now what we do is we get to
uhhuh and now what we do is we get to
just do
cbfs let's see why why scy why no scyon
cbfs let's see why why scy why no scyon
I
expected did you use cdef syntax and use
expected did you use cdef syntax and use
decorators and python type annotations
decorators and python type annotations
instead okay so that's slightly awkward
instead okay so that's slightly awkward
um one of the limitations I think what
um one of the limitations I think what
if I CP def it does this
work okay return
one give this an OP
code okay so we have
scon it is
scon it is
aized now we'll have to figure out why
aized now we'll have to figure out why
it doesn't
work figure that out pretty quick
buffer
buffer
zeros buffer
zeros buffer
has only one portion of data in
it and after that is
it and after that is
empty so let's see uh let's see why that
empty so let's see uh let's see why that
is the case did I get the data types
is the case did I get the data types
wrong
wrong
we've got paths is a numpy uh
we've got paths is a numpy uh
ent8 what did I have Game maps
ent8 what did I have Game maps
says game map's the wrong type that
says game map's the wrong type that
could
be D type you and8 okay so this is
fine just have to figure this
out we'll do print
out we'll do print
start or was
start or was
it start
end
end
okay one
okay one
one well that's not good
paths if grid of start
paths if grid of start
R start C is equal to
R start C is equal to
one this is the exact same code as
one this is the exact same code as
before is it
not we manag to make the uh this version
not we manag to make the uh this version
work and the other version not work
work and the other version not work
let's say
yeah so right now the scyon version does
yeah so right now the scyon version does
not
not
match uh the python
version
version
somewhere it does appear that it is
somewhere it does appear that it is
getting
getting
overwritten it's getting overwritten
overwritten it's getting overwritten
somewhere action is equal to
print start R start C
print start R start C
print Paths of start r c print grid
print Paths of start r c print grid
these are the three possible options
these are the three possible options
right I don't know where else it would
right I don't know where else it would
be breaking
negative
negative
one uh that's very
one uh that's very
odd what did we give
paths
paths
Char o that's disgusting is it an
Char o that's disgusting is it an
unsigned I think it's an unsigned Char
unsigned I think it's an unsigned Char
which we shouldn't have to sign it but
okay Char should already be unsigned
okay Char should already be unsigned
there you
there you
go okay gross type bug unsign Char you
go okay gross type bug unsign Char you
got to be
careful so let's uh let's recompile this
and now let's check the uh do we have an
and now let's check the uh do we have an
HTML file in
HTML file in
here we do not have an HTML file so what
here we do not have an HTML file so what
we're going to do is we are going to
we're going to do is we are going to
um we're going to recompile this such
um we're going to recompile this such
that we get HTML out of
it and then we're going to enable all of
it and then we're going to enable all of
these optimizations
oops so we're going to go up here and
oops so we're going to go up here and
now we're going to tell uh we're going
now we're going to tell uh we're going
to instruct cython to compile this with
to instruct cython to compile this with
absolutely no safety features it's not
absolutely no safety features it's not
going to check values for none we're not
going to check values for none we're not
doing any division but if we
were actually since we're not doing any
were actually since we're not doing any
division we can get rid of this one and
division we can get rid of this one and
we can uh
we can uh
yeah we can leave these like this
yeah we can leave these like this
so this is now doing absolutely no
so this is now doing absolutely no
safety checks
whatsoever we're going to add this to
whatsoever we're going to add this to
the setup file here and we're going to
the setup file here and we're going to
turn on this annotation
option and hopefully this should output
option and hopefully this should output
us a uh a very
nice
nice
file that will include for us uh a
file that will include for us uh a
detailed profile of this code and
detailed profile of this code and
anywhere that I've screwed up and is
anywhere that I've screwed up and is
have made it slow by mistake
of course since I just pulled in all the
of course since I just pulled in all the
changes from this weekend it's
changes from this weekend it's
recompiling everything but you know you
recompiling everything but you know you
win some you lose
win some you lose
some okay so perfect we see we have this
some okay so perfect we see we have this
HTML file here recompute pathing
HTML file here recompute pathing
HTML so I have to just because I'm on
HTML so I have to just because I'm on
WSL I have to move this into
Docker where I can get access to it
and then if we look at C precompute
and then if we look at C precompute
pathing
pathing
HTML so we can see that this uh function
HTML so we can see that this uh function
signature because it's cpde it'll call
signature because it's cpde it'll call
back to python no big surprise uh the
back to python no big surprise uh the
initial memory view will call back to
initial memory view will call back to
python as well but we are going to have
python as well but we are going to have
a way around this when we call this in a
a way around this when we call this in a
loop so no big deal and then beautiful I
loop so no big deal and then beautiful I
did it perfect on first try uh the fact
did it perfect on first try uh the fact
that this this is all white and has no
that this this is all white and has no
annotations means that this entire
annotations means that this entire
code this is a pure C
code this is a pure C
call it's a p c call and this is we can
call it's a p c call and this is we can
see right here this is just array
see right here this is just array
indexing so it's just straight up doing
indexing so it's just straight up doing
you know array indexing
you know array indexing
math which is very very
math which is very very
nice um yeah that's that's
perfect so Let's
perfect so Let's
uh how fast do you think that these are
uh how fast do you think that these are
versus one another
versus one another
right what do we
think I have profiling off on this I
think I have profiling off on this I
believe which is what we
want let's do a perf test
okay so we're going to take this code
okay so we're going to take this code
right
right
here
here
and this will
and this will
[Music]
be
be
grid
grid
R2 you don't need uh you don't need R
R2 you don't need uh you don't need R
you just need c right
you just need c right
one okay
so whoops import time start is time.
so whoops import time start is time.
time while time. time is less than start
time while time. time is less than start
can do
can do
BFS uh it equals z it plus equal
1 see it
1 see it
zero start time.
zero start time.
time wow
cbfs see it there's plus equals
perfect and now what we can do test
performance and hopefully runs for us
performance and hopefully runs for us
and we will see how much
and we will see how much
faster this code
is should take 20
is should take 20
seconds if it takes longer than that
seconds if it takes longer than that
then I will be confused nope there we go
then I will be confused nope there we go
okay perfect so
it divided by
it divided by
timeout hold on
iters grid paths
buffer uh I'm not believing
that so it says the C1 is 10 times
that so it says the C1 is 10 times
faster which is about right but um I
faster which is about right but um I
don't believe that the other one is so
don't believe that the other one is so
fast I'm worried that it is just doing
fast I'm worried that it is just doing
the uh the
first right you have to null the grid
first right you have to null the grid
every
every
time yeah you have to know the grid
time yeah you have to know the grid
every time I think or is it the paths or
every time I think or is it the paths or
the grid that you have to know you have
the grid that you have to know you have
to know the paths every time
to know the paths every time
paths
255 and the buffer you shouldn't have to
255 and the buffer you shouldn't have to
know let's try this again this because
know let's try this again this because
the thing is I wouldn't have bothered
the thing is I wouldn't have bothered
automating it if it were running 145,000
automating it if it were running 145,000
steps per second I wouldn't have
steps per second I wouldn't have
bothered sioning
bothered sioning
it that's fast enough that'll like do
it that's fast enough that'll like do
the whole thing in a
the whole thing in a
second but I think you're going to see
second but I think you're going to see
that there's going to be a significant
difference yeah that's more like
difference yeah that's more like
it so
um yeah that's what we'd
um yeah that's what we'd
expect is that c number right that seems
expect is that c number right that seems
really fast
could very well
be yeah cuz this is not just C versus
be yeah cuz this is not just C versus
python this is like oh no wait this is
python this is like oh no wait this is
straight up C versus python thousand
straight up C versus python thousand
times faster that's pushing it isn't
times faster that's pushing it isn't
it isn't that pushing
it 1.6 steps per
second same exact code so it shouldn't
be well I don't want to post this yet
be well I don't want to post this yet
until I'm
until I'm
positive because whenever you post
positive because whenever you post
something oh it's like 3,000 times
something oh it's like 3,000 times
faster or
faster or
whatever and then you're wrong you look
whatever and then you're wrong you look
really stupid so we're going to let this
really stupid so we're going to let this
uh we're going to work on this for a bit
uh we're going to work on this for a bit
and if it looks like it is actually that
and if it looks like it is actually that
fast then we're going to go from there
fast then we're going to go from there
um okay though
um okay though
so perf test is
set if that is actually the performance
set if that is actually the performance
difference though and people are still
difference though and people are still
writing this type of stuff in Python
writing this type of stuff in Python
like get
out prototyping it in Python is fine
hey
hey
Roman
Roman
welcome we just made breath first search
welcome we just made breath first search
really really really
really really really
fast here's your breath first search
fast here's your breath first search
it's a really
fast is that like ballpark reasonable
fast is that like ballpark reasonable
though because let me think this is
though because let me think this is
order of like 10,000 tiles
order of like 10,000 tiles
10,000 time
4,000 oh yeah that's totally reasonable
4,000 oh yeah that's totally reasonable
right it's like tens of millions of St
right it's like tens of millions of St
yeah that's totally reasonable that's
yeah that's totally reasonable that's
actually very reasonable to expect out
actually very reasonable to expect out
of
of
C uh the python one being this slow
is also kind of reasonable to be honest
is also kind of reasonable to be honest
p like Loops end up whenever you're
p like Loops end up whenever you're
doing anything with like any logic plus
doing anything with like any logic plus
Loops it goes from tens of millions to
Loops it goes from tens of millions to
like thous tens of thousands at most
like thous tens of thousands at most
steps per
second so you do lose a
lot slow
lot slow
language slow language is
language slow language is
slow uh the nice thing about this is we
slow uh the nice thing about this is we
should be able to precompute this entire
should be able to precompute this entire
thing now like Stupid Fast right
yeah we should be able to pre-compute
yeah we should be able to pre-compute
this whole thing really really stupidly
this whole thing really really stupidly
fast and I haven't even I'm not even
fast and I haven't even I'm not even
sioning the uh the outer loop
sioning the uh the outer loop
yet so we'll
yet so we'll
do this is going to be
cbfs grid paths
cbfs grid paths
RC starting point return paths and we're
RC starting point return paths and we're
going to do uh
going to do uh
paths M Pi
paths M Pi
[Music]
[Music]
Zer isn't it n
n how much faster it goes when it's
recomputed what do you mean how much
recomputed what do you mean how much
faster oh precompute
faster oh precompute
well I'll tell you how much faster it
well I'll tell you how much faster it
goes when it's precomputed it's the
goes when it's precomputed it's the
difference between being able to do this
difference between being able to do this
and having it be o of one or having to
and having it be o of one or having to
do this and having it be like completely
do this and having it be like completely
unusable this alone I can tell you this
unusable this alone I can tell you this
operation alone if we tried to add this
operation alone if we tried to add this
into our code even if we sconed it it
into our code even if we sconed it it
would limit uh it would limit us to
would limit uh it would limit us to
like well you have it right here
like well you have it right here
technically let's say we can get this
technically let's say we can get this
down a fair bit with uh with
down a fair bit with uh with
AAR this is only 4,000 Maps computed per
AAR this is only 4,000 Maps computed per
second right so if we're going to say
second right so if we're going to say
AAR versus full breath for search is
AAR versus full breath for search is
much more efficient let's say that we
much more efficient let's say that we
get this down by a factor of 10 so
get this down by a factor of 10 so
40,000 steps per second that's still
40,000 steps per second that's still
we're only able to do 40,000 pathfind
we're only able to do 40,000 pathfind
searches right per second times like a
searches right per second times like a
couple hundred Minions we're now down to
couple hundred Minions we're now down to
hundreds of steps per second on our
hundreds of steps per second on our
entire
entire
simulator and I mean maybe you can cach
simulator and I mean maybe you can cach
it and only pre C every so often but
it and only pre C every so often but
still like we're going to be down to
still like we're going to be down to
like maybe thousands of steps per second
like maybe thousands of steps per second
on our whole MOA just because of this
on our whole MOA just because of this
one operation compared to what we're
one operation compared to what we're
doing right now this is O of one this is
doing right now this is O of one this is
like this is nothing this is
like this is nothing this is
instantaneous so we've basically taken
instantaneous so we've basically taken
our path finding from being a bottleneck
our path finding from being a bottleneck
that's going to make this entire Sim C
that's going to make this entire Sim C
to thousands of steps per second to free
to thousands of steps per second to free
that's what this has
done I don't optimize stuff just for the
done I don't optimize stuff just for the
sake of op optimizing it most of the
sake of op optimizing it most of the
time I optimize stuff when it's going to
time I optimize stuff when it's going to
make a massive
difference okay so we do pre-compute
difference okay so we do pre-compute
path
path
thing and then
thing and then
we paths equals this
right yeah
is very
big absolutely
massive okay so we got our pre-compute
massive okay so we got our pre-compute
pathing here is a very nice little
pathing here is a very nice little
function and what are we going to do
function and what are we going to do
with it we're going to call this
with it we're going to call this
function
function
here and uh I did not mean to do it here
here and uh I did not mean to do it here
this should have been up here right
so these can go back where they
so these can go back where they
are we can
are we can
pathing uh let's
do no doesn't need this R1 and R2
anymore so we'll do like this
right and it's grid. shape
right and it's grid. shape
don't need any of this we just
don't need any of this we just
pre-computed all the
paths so now what we get to do is uh
paths so now what we get to do is uh
render do render we can do pass of R1
render do render we can do pass of R1
and C1 let's see if this
works oh
works oh
boy that's not what we wanted
well this is all zeros is what just
well this is all zeros is what just
happened here
happened here
right so it's possible that this was
right so it's possible that this was
uh was this a bad
uh was this a bad
tile hold
on nope that should be
fine we compute
pathing paths row
call a it just mirrors that really
weird do we need to clear buffer as
well do we need to clear
well do we need to clear
buffer I don't think so I think I
buffer I don't think so I think I
intentionally designed this we don't
intentionally designed this we don't
need to clear buffer right
need to clear buffer right
yeah there's zero checks on
yeah there's zero checks on
Buffer zero checks whatsoever on
Buffer though technically there will be
Buffer though technically there will be
garbage in at the end of it if we don't
garbage in at the end of it if we don't
uh well there may there could be garbage
uh well there may there could be garbage
at the end but we actually don't care if
at the end but we actually don't care if
there's garbage at the end the way that
there's garbage at the end the way that
I implemented it so yes this is actually
I implemented it so yes this is actually
a very smart
a very smart
implementation uh the way that this is
implementation uh the way that this is
done so while why then is this
done so while why then is this
not
working it runs real
fast that takes a long time time to run
fast that takes a long time time to run
numai unique on this
data well I don't think we're getting
data well I don't think we're getting
our 4,000 because it's not actually
our 4,000 because it's not actually
running appropriately on
it let me see oh we forgot to
it let me see oh we forgot to
do I think we forgot to add to our paths
do I think we forgot to add to our paths
right plus 255 oh no we're still fine
right plus 255 oh no we're still fine
yeah yeah we're still fine we just
yeah yeah we're still fine we just
forgot to add it here we're good
very
very
nice
so this is not an amazing use of time
so this is not an amazing use of time
but I kind of want to do something
but I kind of want to do something
fun so we're going to do something fun I
fun so we're going to do something fun I
don't think it'll take me very long uh I
don't think it'll take me very long uh I
want to make this
reactive so where's our right code
reactive so where's our right code
here render do
render start R start
render start R start
C no no no no no we don't do start R
C no no no no no we don't do start R
start
C we make it dependent on
C we make it dependent on
the the
the the
mouse uh X
mouse uh X
Y hold on for
takes one positional argument but three
takes one positional argument but three
were given
this follows me around but the map
this follows me around but the map
doesn't change which I do not
like so let's figure out
why self.
paths this is end
paths this is end
R end C right right the way we did it so
R end C right right the way we did it so
end
end
C and
C and
R and then this is and
R and then this is and
R and
R and
C wait
C wait
action
no this is Paths of RC and then what we
no this is Paths of RC and then what we
do is paths equal self. paths okay there
do is paths equal self. paths okay there
boom
work invalid index to scalar
work invalid index to scalar
variable I do not like invalid index to
variable I do not like invalid index to
scalar
variable Raab Vector field where is this
variable Raab Vector field where is this
stupid thing pre-compute pathing paths
stupid thing pre-compute pathing paths
ah right here this is you need all the
ah right here this is you need all the
paths boom
okay tell me this isn't freaking
amazing tell me this isn't freaking
awesome if you go over an obstacle it
awesome if you go over an obstacle it
just immediately you can't path
there tell me that that isn't like the
there tell me that that isn't like the
easiest ever to make a UI to do like
easiest ever to make a UI to do like
ridiculous real time this is technically
ridiculous real time this is technically
realtime pathing by the way this is like
realtime pathing by the way this is like
this is how fast it would be to like
this is how fast it would be to like
literally the map is to look up because
literally the map is to look up because
it's all
pre-computed look at
that write of Passage to make your own
that write of Passage to make your own
realtime pathing demo
realtime pathing demo
it's so cool how it changes as well like
it's so cool how it changes as well like
you can see like diagonals and stuff
you can see like diagonals and stuff
will change a little bit as you path
will change a little bit as you path
around yeah there's a lot of redundant
around yeah there's a lot of redundant
information here but who cares it
information here but who cares it
computes like freaking
instantly I wonder if this computes fast
instantly I wonder if this computes fast
enough for me to
um oh I have an idea we're going to get
um oh I have an idea we're going to get
this so fast that I don't even have to
this so fast that I don't even have to
ship the file we're going to get this to
ship the file we're going to get this to
be so fast that it's just going to we're
be so fast that it's just going to we're
going to make this map on Startup and
going to make this map on Startup and
it's going to be like .1 seconds or
it's going to be like .1 seconds or
something to precompute all of these and
something to precompute all of these and
you're not going to
you're not going to
notice and that's just how we're going
notice and that's just how we're going
to demonstrate software
superiority damn this is awesome
can it be fast enough that you can make
can it be fast enough that you can make
them make them
what path around other creeps and
what path around other creeps and
players
players
nope not even
nope not even
close so I think I can see why you would
close so I think I can see why you would
think that because you say oh look it's
think that because you say oh look it's
really fast like if you can make all
really fast like if you can make all
these maps in less than a second that
these maps in less than a second that
surely that's really fast right but like
surely that's really fast right but like
do you understand how fast the game is
do you understand how fast the game is
going to be running okay let's say that
going to be running okay let's say that
I'm going to I'm going to say I'm going
I'm going to I'm going to say I'm going
to get a mil a minimum of a million
to get a mil a minimum of a million
agent steps per second okay so that is
100,000 uh game steps per second because
100,000 uh game steps per second because
they're 10 player so I said 1 million
they're 10 player so I said 1 million
steps per agent steps per second is
steps per agent steps per second is
100,000 steps per second that I
100,000 steps per second that I
currently have the frame rate set to
currently have the frame rate set to
five I believe it's like five steps per
five I believe it's like five steps per
second so we're going to do over five
second so we're going to do over five
that's the number of uh SEC this is the
that's the number of uh SEC this is the
number of seconds worth of gaml that
number of seconds worth of gaml that
we're simulating every second on one CPU
we're simulating every second on one CPU
core divide by
core divide by
3600 means that we are simulating 5 and
3600 means that we are simulating 5 and
a half hours of DOTA per second on one
a half hours of DOTA per second on one
CPU Cor that is how fast this thing is
CPU Cor that is how fast this thing is
going to have to
run I like to do that once in a while
run I like to do that once in a while
because you know when the performance
because you know when the performance
numbers get to be ridiculous you can
numbers get to be ridiculous you can
just keep saying bigger and bigger
just keep saying bigger and bigger
numbers and everybody will just say oh
numbers and everybody will just say oh
yeah well that's pretty fast but then
yeah well that's pretty fast but then
when you say no no no no I'm simulating
when you say no no no no I'm simulating
five and a half hours of DOTA per second
five and a half hours of DOTA per second
on one CPU core then you get it right
it pretty cool it's pretty
cool what did I want to do with this
cool what did I want to do with this
there was something else I want to do
there was something else I want to do
right I wanted to save a gift of this
oh no no no I know what I wanted to do
so when I put it that way it makes it
so when I put it that way it makes it
makes sense right like the thing I'm
makes sense right like the thing I'm
building it it's way way cooler when you
building it it's way way cooler when you
understand that is the level of
understand that is the level of
performance that I'm going for right
performance that I'm going for right
like games are not made to be this fast
like games are not made to be this fast
like games are made to run real time or
like games are made to run real time or
maybe 10 times real time so that it runs
maybe 10 times real time so that it runs
on like low-end Hardware
on like low-end Hardware
right this
right this
is here where is
is here where is
it actually we know right here just by
it actually we know right here just by
this division by five this is made to
this division by five this is made to
run
run
20,000 times real
20,000 times real
time that's what we
want it's going to take some performance
want it's going to take some performance
engineering to get there but that's what
engineering to get there but that's what
we're going for here 20,000 times real
time I like performance
time I like performance
engineering it's very performant
want to see something
cool we can put the loop in
cool we can put the loop in
scon this is going to be a this is going
scon this is going to be a this is going
to be a CP no this is going to be a defa
to be a CP no this is going to be a defa
that takes a grid this is going to be a
that takes a grid this is going to be a
CDE meaning it runs
CDE meaning it runs
100% in
100% in
scon this is going to be
scon this is going to be
I think we do want to
I think we do want to
um I think this will be a CP def so that
um I think this will be a CP def so that
we can type it like this CNP NP
we can type it like this CNP NP
grid because we're going to do c
grid because we're going to do c
death like
this okay and then we have passed
this okay and then we have passed
in these memory
in these memory
views which are now going to
views which are now going to
be grid
NP I think we can just do like this
NP I think we can just do like this
unsigned
unsigned
Char and then we can do unsign
Char and then we can do unsign
Char they totally screwed up my
Char they totally screwed up my
indexing so I'll type it manually
indexing so I'll type it manually
paths
paths
okay and uh
buffer looks
good grid paths buffer o
good grid paths buffer o
call and uh
call and uh
RNC oh in RNC
RNC oh in RNC
we get rid of all of this
gorbage
gorbage
dep like so
dep like so
right and uh you know now we get
right and uh you know now we get
um Rec compute pathing
here
here
so we can do import we can't import this
so we can do import we can't import this
anymore we can do pre-compute pathing
anymore we can do pre-compute pathing
as C import as C precompute
as C import as C precompute
pathing and now this is just breath for
pathing and now this is just breath for
search
right and this will be even better for
right and this will be even better for
timing though I don't even know if this
timing though I don't even know if this
is going to be reasonable to time
is going to be reasonable to time
because I think that the python version
because I think that the python version
will be too slow to
will be too slow to
run isn't that
funny but yeah so we're going to
funny but yeah so we're going to
do c precompute pathing
we'll have to fix some minor bugs I'm
sure compute
pathing right we uh get rid of these
pathing right we uh get rid of these
numpy variables these are now typed
numpy variables these are now typed
correctly
correctly
as
as
unsigned
unsigned
Char View
grid uh this is unsigned Char
grid uh this is unsigned Char
paths in
paths in
buffer
see grid is declared after it is
used CU we need the this one to be
NP
NP
and this one says cbfs where it should
and this one says cbfs where it should
just be BFS because we are in
just be BFS because we are in
C and what else
C and what else
paths cannot convert unsigned Char to
paths cannot convert unsigned Char to
memory view
memory view
slice well that's because this is just
slice well that's because this is just
stupid and we have to Index this way
cannot impute precompute
pathing pre-compute pathing from C
pathing pre-compute pathing from C
precompute
precompute
pathing this has to be a CP dep
look at that so we have our same code
look at that so we have our same code
working as before let us time the
working as before let us time the
function how fast is this is this fast
function how fast is this is this fast
enough for us to do stuff
enough for us to do stuff
with we
with we
compute or do we have to cach it we
compute or do we have to cach it we
might still have to cach it
let's
see it's a lot of
data 3 seconds so we're going to want to
data 3 seconds so we're going to want to
cach
cach
it but 3 seconds
it's pretty
it's pretty
good 3 seconds is pretty
good 3 seconds is pretty
good uh let us let's make a gift out of
good uh let us let's make a gift out of
this for the
this for the
Twitter this is some performance
engineering so actually based on that
engineering so actually based on that
we'll be able to tell if uh this was
we'll be able to tell if uh this was
correct because this is what did we say
correct because this is what did we say
python 128 *
python 128 *
128 no wait yeah this is the number of
128 no wait yeah this is the number of
maps uh divide by three oh it's even
maps uh divide by three oh it's even
faster now it's 5400 steps per
faster now it's 5400 steps per
second because I automated the outer
second because I automated the outer
loop right so we're no longer remaking
loop right so we're no longer remaking
the data
the data
constantly that's pretty darn good
so like
so like
3,000 like 3,000 times faster than
python what about this paths colon
python what about this paths colon
equals oh yeah yeah we don't need that
equals oh yeah yeah we don't need that
in the main test we're good we are
good and how much data did we say this
good and how much data did we say this
was cuz I saved it as a Char
was cuz I saved it as a Char
right so it's it's a 128 * 128 * 128 *
MB 268
MB 268
megabytes that's ridiculous
uh 268 megabytes of pathing data
uh 268 megabytes of pathing data
calculated and generated in 3
seconds I'm liking this performance
seconds I'm liking this performance
engineering thing I'm liking it
how do we do this it's this thing
here so
let's do like
this let's set the fps to 30
this let's set the fps to 30
maybe now that's still going to be way
maybe now that's still going to be way
too much data at this
too much data at this
resolution uh we'll set the fps to
resolution uh we'll set the fps to
[Music]
15 where's FPS on this thing rayb in
it okay we'll set the fps to 15 on
it okay we'll set the fps to 15 on
this and we'll do
this and we'll do
frames frames equals like
frames frames equals like
this before I in range
6 seconds of data is
6 seconds of data is
90 90
90 90
frames
frames
frame frames.
frame frames.
append and then we'll
do
uh
uh
recompute or let's just do pathing dog
recompute or let's just do pathing dog
so I don't overwrite anything by mistake
Loop equals
zero cool
we'll see how that gift
looks and lots of cool stuff
looks and lots of cool stuff
here lots of cool
here lots of cool
stuff oh yeah that's a great gift six 6
stuff oh yeah that's a great gift six 6
MB
MB
perfect we'll do
uh one more try I want get something
uh one more try I want get something
real cool looking
nope screwed it
up try not to hit the
up try not to hit the
edges got to not hit the
edges got to not hit the
edges right
here that's pretty good
I thought I just fixed
I thought I just fixed
it is this not the right
one yeah there we go
there let's put this up
100 lines of scon
let's commit this and
uh can I like make this
can I just make the terminal font
smaller I think I can just make the font
smaller I think I can just make the font
smaller right so I can put it in a
screenshot not
quite almost
it's not going to be readable in a
it's not going to be readable in a
screenshot if I do this will
it we'll do it
it we'll do it
anyways Miss as
anyways Miss as
well
oops let's
oops let's
do star p ER
we go
h
there we go I'm happy with
that seems will has gotten bored and has
that seems will has gotten bored and has
stopped streaming meaning that I win for
stopped streaming meaning that I win for
the
[Music]
[Music]
day okay well this is
day okay well this is
awesome um I'm very happy with this
awesome um I'm very happy with this
result this didn't even take that long
result this didn't even take that long
right this took what four hours four
right this took what four hours four
hours of streaming is that how long
hours of streaming is that how long
we've been
we've been
live from
scratch so we're going to get to
scratch so we're going to get to
integrate this now with the mooba
integrate this now with the mooba
obviously
obviously
um I'm going to take a couple minutes
um I'm going to take a couple minutes
going to go use the restro real quick
going to go use the restro real quick
going
going
to uh make a shake and then we're going
to uh make a shake and then we're going
to integrate this with the MOBA
to integrate this with the MOBA
and we're basically just going to have
and we're basically just going to have
massively overpowered pathing and uh we
massively overpowered pathing and uh we
can actually have highle commands now
can actually have highle commands now
like we can write a function that's just
like we can write a function that's just
like you know path to or like you know
like you know path to or like you know
move towards and it can be anywhere on
move towards and it can be anywhere on
the map and that function is now o of
the map and that function is now o of
one and we don't even need to like save
one and we don't even need to like save
like you know destinations along the way
like you know destinations along the way
or anything for it it's just it'll just
or anything for it it's just it'll just
do it now so that's real cool
do it now so that's real cool
anyways I'll be right back
anyways I'll be right back
and uh I don't know go like this if you
and uh I don't know go like this if you
want to help with the promo and Star
want to help with the promo and Star
Puffer if you haven't helps me out a ton
Puffer if you haven't helps me out a ton
be right
be right
back anybody ask where I am tell them
back anybody ask where I am tell them
I'll be back in a
moment
e
e
e
e
e
e
e
e
e
e
[Music]
for e
hey Will
I don't know if you're still there if so
I don't know if you're still there if so
how do you like
this oh of one pathing for the entire
this oh of one pathing for the entire
game
this is what it's going to take to fix
this is what it's going to take to fix
reinforcement learning we need
reinforcement learning we need
simulators that care this much about
perf if we don't have
perf if we don't have
simulators that care this much about
simulators that care this much about
perk
perk
RL is just going to be
RL is just going to be
slow and you're going to have to be
slow and you're going to have to be
Google in order to do
Google in order to do
it if we have
it if we have
simulators that can be as complex as
simulators that can be as complex as
like you know I don't know strip down
like you know I don't know strip down
DOTA this is the goal here that actually
DOTA this is the goal here that actually
really care about
really care about
performance and you can never be
performance and you can never be
bottlenecked by
bottlenecked by
them then we're looking pretty good then
them then we're looking pretty good then
we're looking really really
we're looking really really
good so
good so
we're going to integrate
we're going to integrate
this now we're going to integrate
this we might even make some scripted AI
this we might even make some scripted AI
because why not right we can basically
because why not right we can basically
now reuse the creep AI for the heroes
now reuse the creep AI for the heroes
and we can have them just run at each
and we can have them just run at each
other
other
um and then we'll see from there I'm
um and then we'll see from there I'm
probably to spend three-ish hours on
probably to spend three-ish hours on
this right
this right
now so let's get the pathing integrated
now so let's get the pathing integrated
first uh so that we actually get this in
first uh so that we actually get this in
the main
game I think we are going to cash it as
game I think we are going to cash it as
well but we're not going to we're not
well but we're not going to we're not
going to distribute a 200 megabyte file
going to distribute a 200 megabyte file
what we're going to do is we're just
what we're going to do is we're just
going to cash it on start up right we're
going to cash it on start up right we're
just going to cash it on
just going to cash it on
Startup okay let's fix the these uh what
Startup okay let's fix the these uh what
is this this tiny font I think it was
16 oh jeez this now needs to be the
16 oh jeez this now needs to be the
correct size
correct size
boom okay
good let's commit all this code as
well so you guys can actually have this
well so you guys can actually have this
if you want it
oh
what the
what the
heck oh the follow buttons are leaking
heck oh the follow buttons are leaking
from over here that's fine just
from over here that's fine just
wondering the stream looked
weird Ultra fast
let's do what is it
from
from
H see
three pathing import
and then this just takes a grid
right this game map is a little
wonky Rec compute pathing I think we had
wonky Rec compute pathing I think we had
to modify it
right yeah right
here what the heck where's the call oh
here what the heck where's the call oh
right there um game
map pathing map equals we'll just we'll
map pathing map equals we'll just we'll
do it this way for now game map. copy
do it this way for now game map. copy
pathing
pathing
map0 is equal to one and pathing map
map0 is equal to one and pathing map
equal to 255 is equal to
equal to 255 is equal to
Z we'll leave it like that for
now and now we do pre-compute
now and now we do pre-compute
pathing and this is going to return pre
pathing and this is going to return pre
compute returns paths
compute returns paths
so
paths
equals AI paths is going to be
this self. AIP
this self. AIP
paths and actually what we're going to
paths and actually what we're going to
do is we're going to do
do is we're going to do
um
AI cache path
pathing
pathing
cash
cash
numpy
okay
okay
try
try
accept
boom that looks good right
and then what we do
is
man the sea environment right
here
here
a self. AIP paths right
AI
paths your paths is like
this I don't know why these don't
have you know these things on them as
have you know these things on them as
well this should be
well this should be
CNP should all be
CNP should all be
typed it's just like asking for bugs in
typed it's just like asking for bugs in
scon not to type
them scon doesn't always interpret stuff
them scon doesn't always interpret stuff
right if you don't explicitly type it
right if you don't explicitly type it
and unlike you know most compiled
and unlike you know most compiled
languages uh it will actually not typing
languages uh it will actually not typing
it will cause runtime
errors
errors
so now we do self. AIP paths and where
so now we do self. AIP paths and where
did we do this completely got it wrong
did we do this completely got it wrong
it's 4D like
this and then what do we have move to
interesting
interesting
engage
AOE man
so we need to just make a method path
so we need to just make a method path
towards
towards
right is how it's going to
go move modifier agent speed
WS okay so it's going to be
WS okay so it's going to be
entity destination and we need a float
entity destination and we need a float
speed
right
right
yeah this is
yeah this is
good and do we want to give it the
good and do we want to give it the
integer here
integer here
I think we want to give it int dest y
I think we want to give it int dest y
int d x because if you already have it
int d x because if you already have it
computed you don't want to redo the
cast
cast
so shouldn't be that
hard int
hard int
um
um
entity YX
so then we do speed
equals what's this
clip
oh clip to Nega one and
oh clip to Nega one and
one it's kind of
weird move
modifier okay and now what we do
is interaction
self. AIP
self. AIP
pass that's exactly what we
pass that's exactly what we
want
want
okay DX
Dy and now we have to do this uh
Dy and now we have to do this uh
obnoxious thing so if action equals z
obnoxious thing so if action equals z
and we will
and we will
um we have to flip all of these which is
um we have to flip all of these which is
the obnoxious
the obnoxious
portion because this is this is how you
portion because this is this is how you
go away from the destination so we have
go away from the destination so we have
to flip
them so if action is equal to
them so if action is equal to
zero then we
zero then we
do
do
d y =
d y =
1 if action is
1 if action is
one then we do Dy is
one then we do Dy is
1 then DX is 1 DX is 1 and let's
1 then DX is 1 DX is 1 and let's
see so this
see so this
is was it it's goes minus and then plus
is was it it's goes minus and then plus
so we have to do plus and then
so we have to do plus and then
minus and then it goes plus and then
minus and then it goes plus and then
plus so we have to do minus and then
plus so we have to do minus and then
minus
minus
right and then we do for
right and then we do for
seven uh we missed one of these
seven uh we missed one of these
somewhere so that's not good let me see
somewhere so that's not good let me see
three so four is uh we missed one with
three so four is uh we missed one with
four so this
four so this
is
is
plus and then minus right and then this
plus and then minus right and then this
is plus and
is plus and
plus and this is
plus and this is
minus
minus
and
and
plus minus and
plus minus and
plus and
plus and
then plus and plus and we did something
then plus and plus and we did something
backwards
backwards
because I see five here that I have plus
because I see five here that I have plus
and plus this one's supposed to be minus
and plus this one's supposed to be minus
and minus let me double check these
and minus let me double check these
because it's very important that I have
because it's very important that I have
these
these
correct they should be all flipped from
correct they should be all flipped from
The
Originals so this plus and plus goes
Originals so this plus and plus goes
minus and minus this minus and plus goes
minus and minus this minus and plus goes
plus and then
plus and then
minus this one is minus c plus c
minus this one is minus c plus c
yeah so I have all these
yeah so I have all these
correct okay so now what we do
correct okay so now what we do
is entity dox entity
is entity dox entity
doy um actually we need this move two
doy um actually we need this move two
right so we
right so we
do float
do float
dust y float dust
x uh do this do this
dust
dust
y d
x and then we
x and then we
do move two I
think how do you deal with eye fatigue
think how do you deal with eye fatigue
from looking at this monitor for long
from looking at this monitor for long
periods of
periods of
time oh jeez um
time oh jeez um
I've been doing this for so long that I
I've been doing this for so long that I
no longer get eye fatigue from uh
no longer get eye fatigue from uh
looking at a screen I get eye fatigue
looking at a screen I get eye fatigue
from going
from going
outside so basically even if it's
outside so basically even if it's
partially cloudy if I'm outside I'm
partially cloudy if I'm outside I'm
wearing sunglasses
that is the reality of
things does this thing take into account
things does this thing take into account
move
modifier no it doesn't
I think this is good though
I think this is good though
right and then we
right and then we
do we can make this a beant as well
do we can make this a beant as well
right and we can
right and we can
return move
return move
to that's really
to that's really
nice so now with this creep path thing
nice so now with this creep path thing
right we can replace this whole thing
right we can replace this whole thing
with uh
if grid
if grid
dis is not
empty wait
and I think this is fine so what we do
and I think this is fine so what we do
is we do move
creep y +
Dy wait creep
Dy wait creep
path can we just replace this whole
function I think we can replace this
function I think we can replace this
whole
whole
function I think I can just go like this
right and then I can just
right and then I can just
do
do
um yeah literally this right but I do
um yeah literally this right but I do
need this
need this
Clause This is the End way point right
okay invalid index type float
invalid type
float
towards uh I specified this
as what the
[ __ ] AI
[ __ ] AI
paths death why these are both in buddy
paths death why these are both in buddy
what's wrong with
what's wrong with
you invalid in index Type
you invalid in index Type
looat move
looat move
towards am I
dumb int d y int d
x that looks totally fine to
me hold on is it
me hold on is it
maybe no this is self agent speed right
maybe no this is self agent speed right
you call it with creep agent speed into
you call it with creep agent speed into
of dust Y into dust X did I redefine the
of dust Y into dust X did I redefine the
variable somehow
variable somehow
no uh that's freaking weird is there
no uh that's freaking weird is there
another bug up here oh yeah there bugs
another bug up here oh yeah there bugs
up here that's
up here that's
why uh clear nope not that one
why uh clear nope not that one
clear and
build and we still have the bugs up here
build and we still have the bugs up here
float dust y yep
float dust y yep
redeclared as
redeclared as
expected that breaks
expected that breaks
[ __ ] um d y is going to
[ __ ] um d y is going to
be entity doy wait entity
y Dy times speed this is totally
y Dy times speed this is totally
good it's totally
good what other bugs we
good what other bugs we
got cannot assign type float to
got cannot assign type float to
int uh yeah so we're going to just on
int uh yeah so we're going to just on
line This Then entity
doy
doy
y plus Dy *
y plus Dy *
speed okay we're going to just like
speed okay we're going to just like
this that's
nice obviously we got to delete these
nice obviously we got to delete these
guys
builds builds
we dropping frames what's going
on no we're
on no we're
good free invalid neck
size boarded
really do I have to
really do I have to
do I have all the checks
do I have all the checks
on
right do we have anything in here that
right do we have anything in here that
tells us
anything invalid next
anything invalid next
size normal
these things have type checks on them
these things have type checks on them
don't they these memory views
I would have thought that these would
I would have thought that these would
have d
have d
y we're going to do this and we're going
y we're going to do this and we're going
to see if we get any values that are
to see if we get any values that are
like wonk
we didn't get any of these did
we
so I mean if we're not getting any of
so I mean if we're not getting any of
these is this thing aboring even if I
these is this thing aboring even if I
just do it like this like what what's
just do it like this like what what's
going on here right
okay so it's AB boarding this even
okay so it's AB boarding this even
though um we haven't changed the
though um we haven't changed the
freaking code so let's go figure
out I'm sure that there's some weird
out I'm sure that there's some weird
Jank thing in here
Jank thing in here
right compute
right compute
path it's possible this is looping or
path it's possible this is looping or
some dumb [ __ ] is
some dumb [ __ ] is
happening let's see
no file po Li environments ocean M
no file po Li environments ocean M
pathing okay that's fine
pathing okay that's fine
right
right
accept gam map. copy set
set do we get AI paths no we
don't okay let's see what the hell
don't okay let's see what the hell
happened um apparently our our
happened um apparently our our
pre-computation code was working fine
pre-computation code was working fine
before but it was not working
here game map.
here game map.
shape the 128
shape the 128
oops it is a 128 by 128 game
oops it is a 128 by 128 game
MTH game map I should say
128 by
128 by
unate ah well that would be that well
unate ah well that would be that well
there's your problem
there's your problem
pathing
map so we this is the original
code expected
numpy
ND got memory view
slice interesting
um well that's not bad
right try this
okay there we
okay there we
go here's our game we can play it yada
go here's our game we can play it yada
yada
right
GP now what we're going to do is we're
GP now what we're going to do is we're
going to try to change some
[ __ ]
[ __ ]
boards all right and now move towards is
boards all right and now move towards is
going to be like this this
going to be like this this
this nope stop freaking giving me bad
this nope stop freaking giving me bad
suggestions
autocomplete and
autocomplete and
layer build
this build this in place
well P's a bit wonk isn't
it why is this pathing to
here very weird that this paths to there
here very weird that this paths to there
like this
like this
that the neutrals are also pathing
weird is it possible that the pathing
weird is it possible that the pathing
directions are
wrong and never see them turning which
wrong and never see them turning which
is
weird this one right here you'd expect
weird this one right here you'd expect
to turn
so as for the towers right
like no this they should path around
this let me
this let me
see why is this one going this way
see why is this one going this way
it's possible I just have the actions
it's possible I just have the actions
all flipped
right will these two
right will these two
go totally wrong direction
H
okay where do we update the waypoints
okay where do we update the waypoints
here if found Target
else creep
else creep
path L2
Waypoint
Waypoint
move creep agent speed so we have
move creep agent speed so we have
move
towards wrong
towards wrong
order dest y dest x X andd Y ntid
order dest y dest x X andd Y ntid
X there we
go so now let's see decent chance we get
go so now let's see decent chance we get
something more
reasonable ever heard of probabilistic
reasonable ever heard of probabilistic
programming it refers to the probability
programming it refers to the probability
that your program works the way you
that your program works the way you
intend it to
okay oh look at
okay oh look at
that look at this snake action
here look at that that's sweet so
here look at that that's sweet so
they're getting stuck on Towers because
they're getting stuck on Towers because
um towers are not included on the base
map but look at this like that's some
map but look at this like that's some
really freaking cool movement
really freaking cool movement
right Hy they and then like
right Hy they and then like
perfectly it's a little funny that they
perfectly it's a little funny that they
perfectly jump bump into each other so
perfectly jump bump into each other so
we're going to probably want to Jitter
we're going to probably want to Jitter
it a little
bit but that's so cool look at
that okay
that okay
um
um
Towers Tower positions
let's add some Jitter and then we'll do
let's add some Jitter and then we'll do
Tower
positions it's alive yes it is
alive do I not have a Jitter in
alive do I not have a Jitter in
here this thing here
let's do Jitter X
maybe
maybe
float
float
X Lo Jitter
X Lo Jitter
y times
y times
speed do you do two times speed
speed do you do two times speed
I don't think you need these spaces here
either no you like these spaces these
either no you like these spaces these
are good perceptually grouped so agent
are good perceptually grouped so agent
speed oh no but the it should be the the
speed oh no but the it should be the the
two should be grouped here right because
two should be grouped here right because
it's two times thing
it's two times thing
minus5 yeah so this is the perceptual
minus5 yeah so this is the perceptual
this is how it should be grouped and
this is how it should be grouped and
then what we do is we
then what we do is we
do Jitter at y
X I don't know we do we do it this way I
guess let's see what that Jitter does
guess let's see what that Jitter does
agent speed what
agent speed what
the I love it when it makes up variables
the I love it when it makes up variables
that are just not in my freaking code my
that are just not in my freaking code my
favorite thing man
and I think I wanted to do this first
and I think I wanted to do this first
right we can do
right we can do
this let's do it that way that way we
this let's do it that way that way we
have a modified by speed because
have a modified by speed because
otherwise it's going to be
weird Okay
boom we had a little to the movement
boom we had a little to the movement
which to be fair I'd prefer not to have
which to be fair I'd prefer not to have
to
do oh yeah that's way
do oh yeah that's way
better look at that they go right around
better look at that they go right around
the
towers it's a little too jittery isn't
it uh the neutral creeps are behaving a
it uh the neutral creeps are behaving a
little weird there's too much Jitter
little weird there's too much Jitter
right
it's still really
cool I like look at the snaking Mo
cool I like look at the snaking Mo
motion like it when it rounds this
motion like it when it rounds this
corner is pretty
corner is pretty
cool these neutrals are yeah this is too
cool these neutrals are yeah this is too
much so this is too much
Jitter let's
Jitter let's
do we'll cut it in half
I'm incredibly happy with
I'm incredibly happy with
that so like the thing
that so like the thing
is yes they could do that before
is yes they could do that before
technically but before they were using a
technically but before they were using a
series of uh way points and they were
series of uh way points and they were
just going straight line path from one
just going straight line path from one
Waypoint to the
Waypoint to the
next whereas
next whereas
now we have arbitrary path finding that
now we have arbitrary path finding that
can go around
obstacles what are they getting stuck on
obstacles what are they getting stuck on
here what the heck are these guys oh
here what the heck are these guys oh
they're stuck on the
tower this guy shouldn't be stuck though
tower this guy shouldn't be stuck though
what like what is this guy stuck on here
what like what is this guy stuck on here
I think he's stuck on being
stupid maybe the Jitter what
stupid maybe the Jitter what
couldn't be
stuck well maybe we will uh we'll add
stuck well maybe we will uh we'll add
the towers
in do we add the towers uh into the map
where's the tower
where's the tower
positions oh yeah here this
thing so let's just take
this and we we open a file don't
this and we we open a file don't
we yaml
we yaml
here yeah there's yaml
let's open this
yaml and then we'll just
do uh Tower positions equals
what's the
uh it prefix tier
uh it prefix tier
suffix entity data Tower name y
up
then we'll do
this do we set this to one or
this do we set this to one or
zero we'll just try
zero we'll just try
both and
uh get rid of the cach file
only really what's wrong with this
[ __ ] that's mildly obnoxious
okay so now we're just going to put the
okay so now we're just going to put the
Tower data into the the
Tower data into the the
map yeah so now I can't tell for sure if
map yeah so now I can't tell for sure if
they get stuck or not this guy looks
they get stuck or not this guy looks
like yeah they look like they're still
like yeah they look like they're still
getting stuck let's remove the Jitter
getting stuck let's remove the Jitter
just so we can tell for
just so we can tell for
sure Jitter
0 time
Z we'll rebuild
this now let's
this now let's
see I think it's possible that I just
see I think it's possible that I just
have the sign
flipped does it work
flipped does it work
nope so we can see here clearly that
nope so we can see here clearly that
they get stuck on the
they get stuck on the
towers kind of weird that they stop this
towers kind of weird that they stop this
far away as
far away as
well let's just do
well let's just do
um this pathing map is going to be zero
now pathing cash
now pathing cash
numpy okay so now it'll have to
numpy okay so now it'll have to
precompute
again
really no that should definitely solve
it they should not be able to get stuck
it they should not be able to get stuck
on their own Towers
on their own Towers
anymore which is clearly what's
happening right
happening right
here they can't be stuck on each other
here they can't be stuck on each other
right no they can't that's not how the
right no they can't that's not how the
game engine
works this looks this portion here looks
works this looks this portion here looks
good but something's stuck
so we do this way like
this let's see what is in the m in the
this let's see what is in the m in the
map currently I want to just make sure
map currently I want to just make sure
we're correctly we're flipping this on
so it's zero so we were correct the
so it's zero so we were correct the
first time it should be one which is
first time it should be one which is
what I
expected hold on
so
wait is it possible
is it possible that the way that I'm
is it possible that the way that I'm
Computing pathing things can still get
Computing pathing things can still get
stuck if they don't move fast
enough if groups of Agents don't move
enough if groups of Agents don't move
for some seconds
for some seconds
penalize that will not happen with more
penalize that will not happen with more
training there's no mode so this is not
training there's no mode so this is not
a training thing this
a training thing this
is I think what is happening is that
is I think what is happening is that
when I compute the path Maps right I'm
when I compute the path Maps right I'm
Computing the path uh the optimal
Computing the path uh the optimal
pathing
pathing
assuming that agents
assuming that agents
move uh one unit per
move uh one unit per
second but the thing is if they move
second but the thing is if they move
less than one unit per
less than one unit per
second then
second then
like they could still get stuck on stuff
like they could still get stuck on stuff
right so let's say that the optimal path
right so let's say that the optimal path
is like you come up to a corner and you
is like you come up to a corner and you
want to move diagonally around the
want to move diagonally around the
corner right if you don't move fast
corner right if you don't move fast
enough you're going to get stuck on the
enough you're going to get stuck on the
corner that's a thing that can happen
all
right yeah so let me let me explain this
right yeah so let me let me explain this
for the chat
here is this the bad one yeah this is
here is this the bad one yeah this is
the garbage one I don't know why this
the garbage one I don't know why this
freaking app exists this one's so dog
freaking app exists this one's so dog
[ __ ] um is this
[ __ ] um is this
good yeah this one's
good yeah this one's
fine so
you have a tile here like
you have a tile here like
this
this
right and let's say that I'm starting
right and let's say that I'm starting
here this is your
here this is your
obstacle and your destination tile is
obstacle and your destination tile is
here okay so the way that the pathf
here okay so the way that the pathf
finding gets
finding gets
computed it gets computed using uh L1
computed it gets computed using uh L1
distance no l Infinity distance y
distance no l Infinity distance y
Infinity so the way the pathing works is
Infinity so the way the pathing works is
it looks here it looks you know over
it looks here it looks you know over
here it looks here and it looks for you
here it looks here and it looks for you
know a way around this obstacle so let's
know a way around this obstacle so let's
say it finds this one it says look if I
say it finds this one it says look if I
just take one step to the diagonal then
just take one step to the diagonal then
I get to this
I get to this
tile but what happens if your agent
tile but what happens if your agent
isn't that fast right
your agent let's say that they move
your agent let's say that they move
half um or let's say that they get like
half um or let's say that they get like
partially into a tile right so it could
partially into a tile right so it could
happen that your agent gets to like
happen that your agent gets to like
right here and then it does the check
right here and then it does the check
and then it tries to move this way but
and then it tries to move this way but
it actually can only move this far so it
it actually can only move this far so it
gets stuck into this
tile because it can't clip across the
tile because it can't clip across the
corner
so this is not a major
problem this Tower patch is going to be
problem this Tower patch is going to be
better than
nothing we're going to regenerate the uh
nothing we're going to regenerate the uh
the map pathing data one more
time and then uh we're going to we're
time and then uh we're going to we're
going to add just a little bit of
Jitter say this much
Jitter and we're going to hope this is
Jitter and we're going to hope this is
good we got to tune the Jitter amount
good we got to tune the Jitter amount
just a little bit because I don't want
just a little bit because I don't want
it to be too
it to be too
much I think that there should only be a
much I think that there should only be a
little bit of Jitter just enough to
little bit of Jitter just enough to
break up the symmetries and
stuff we also might want to pre-compute
stuff we also might want to pre-compute
the Jitter which would be
funny I'm literally like looking at that
funny I'm literally like looking at that
Rand function as oh the Rand function
Rand function as oh the Rand function
could be too
slow okay well this is
slow okay well this is
weird now this I don't know what they're
weird now this I don't know what they're
getting stuck
on I think we should load this up in
on I think we should load this up in
human
human
mode and go watch
mode and go watch
them oops let's get this out of the way
them oops let's get this out of the way
so it's not obscuring
so it's not obscuring
chat uh pathing map is not associated
chat uh pathing map is not associated
with
with
a
variable
really should
be
whoops no wait it's right there yep
whoops no wait it's right there yep
right there
okay render mode goes to
human huh oh this is just the mouse
human huh oh this is just the mouse
cursor bug that's fine hold
cursor bug that's fine hold
on okay so we have some
puers they're stuck right here
they're stuck on the
tile so these guys should not be stuck
tile so these guys should not be stuck
here
here
right I think they're stuck on each
right I think they're stuck on each
other
maybe did I like lose the check to make
maybe did I like lose the check to make
sure that they don't get stuck on each
sure that they don't get stuck on each
other
this path finding here is pretty
this path finding here is pretty
good
boom no leave me
boom no leave me
[Music]
[Music]
alone we will go in for a
alone we will go in for a
kill
kill
yeah heroically
so they're stuck on something let's see
so they're stuck on something let's see
uh I might have messed up some
logic so what did I do with this creep
logic so what did I do with this creep
pathing logic
right ah it's this thing right here I
right ah it's this thing right here I
believe
this
logic move
to
to
if but this looks good right here
if but this looks good right here
because I have this logic wait
if hold on
if oh this is the Jitter function
right yeah this is the Jitter function
interesting
so let's see this
one so float Jitter
one so float Jitter
X and Float Jitter y this can go in here
X and Float Jitter y this can go in here
right if grid
dis
Y into d
y looat move
y looat move
to
to
Y
Y
in let's just let's make it work and
in let's just let's make it work and
then we'll make it nice
so move to
so move to
Y and get rid of
Jitter
Jitter
okay and then what we're going to going
okay and then what we're going to going
to
do is we're going to
do is we're going to
return move
to Jitter X Jitter
to Jitter X Jitter
y two
times speed
times speed
two *
speed times this
quantity and then what we're going to do
is move
is move
to hold
to hold
on
on
entity
entity
entity um
entity. y plus what the [ __ ] are these
entity. y plus what the [ __ ] are these
suggestions
man MTD X Jitter
X okay so we return move two
X okay so we return move two
otherwise return plus speed no Jitter
otherwise return plus speed no Jitter
maybe maybe no Jitter maybe we determin
maybe maybe no Jitter maybe we determin
ASE for now
pathing is not easy good pathing good
pathing is not easy good pathing good
like creep
like creep
AI not
AI not
easy possible inconsistent
indentation canot assign type bloat to
int okay
I yeah let's just go go like
I yeah let's just go go like
this let's
this let's
go how my
go how my
puffers where my puffers
puffers where my puffers
at well they're not
at well they're not
stuck they pass through this way more
stuck they pass through this way more
cleanly now
right render mode is going to
right render mode is going to
be rib
what do we think about
this looks way better
this looks way better
right a
pathing I'd say that's
pathing I'd say that's
clean occasionally one of them can
clean occasionally one of them can
glitch we're going to increase the
glitch we're going to increase the
Jitter we can actually this is the nice
Jitter we can actually this is the nice
thing is
um I think we just
um I think we just
do we don't do two times speed we just
do we don't do two times speed we just
we just straight up Jitter them one tile
we just straight up Jitter them one tile
this is a one tile
this is a one tile
Jitter that is a lot more aggressive but
Jitter that is a lot more aggressive but
the thing is we only do it when they're
the thing is we only do it when they're
stuck so if we only Jitter them when
stuck so if we only Jitter them when
they're
stuck that'll be better
stuck that'll be better
it might be a bit much we'll see I got
it might be a bit much we'll see I got
to check what the default move speeds
to check what the default move speeds
are I think it's like 0.
five I mean
five I mean
that's that's like perfect
that's that's like perfect
though
though
right and like look at the fight like
right and like look at the fight like
the Frontiers on the fights I just want
the Frontiers on the fights I just want
to point this out like look how clean
to point this out like look how clean
these Frontiers are like you get like
these Frontiers are like you get like
these act like organic looking battles
these act like organic looking battles
cuz they like or they just like Jitter
cuz they like or they just like Jitter
until they find a spot that they can
until they find a spot that they can
fight like the nearest
one and like you get this like snake
one and like you get this like snake
like pathing around all the way
like pathing around all the way
points these are the actual DOTA way
points these are the actual DOTA way
points as
well that's freaking
solid now now the neutral
solid now now the neutral
creeps we're probably going to let them
creeps we're probably going to let them
just chill out
just chill out
because they're like spazzing they
because they're like spazzing they
should kind of just be chilling in place
should kind of just be chilling in place
for the most
part I'm very happy with
that why is this gray one spazzing out
oh they're allowed to spaz out randomly
oh they're allowed to spaz out randomly
it's just gotten lucky that's
it's just gotten lucky that's
fine yeah these ones like they are way
fine yeah these ones like they are way
less locked in oh my gosh do you see
less locked in oh my gosh do you see
this Tower this red one is pulling this
this Tower this red one is pulling this
Tower around do you see
Tower around do you see
this this red one just pulled the tower
this this red one just pulled the tower
all the way they freaking pulled the
all the way they freaking pulled the
tower they pulled the tower through the
tower they pulled the tower through the
wall as well they deleted the wall with
wall as well they deleted the wall with
the tower
okay guys I told you I would leave this
okay guys I told you I would leave this
in as an Easter egg but like are we
sure that's freaking
crazy that they're just like this is
crazy that they're just like this is
them acting randomly imagine that they
them acting randomly imagine that they
actually play this and they just learn
actually play this and they just learn
to pull all of their towers to right
to pull all of their towers to right
around the Nexus and just sit there
around the Nexus and just sit there
like what what are you going to do
like what what are you going to do
you're getting hit by freaking nine
you're getting hit by freaking nine
[Laughter]
[Laughter]
[Music]
Towers just becomes a game about pulling
Towers just becomes a game about pulling
the enemy's
the enemy's
Towers okay we got to kill this before
Towers okay we got to kill this before
it kills us with the
memory oh that's so funny
how's the Twitter have we have we gotten
how's the Twitter have we have we gotten
a million a million billion
likes oh he's still
likes oh he's still
alive had to take a break I
alive had to take a break I
say that's no
goodwi not bad
happy to say we uh we broke 4k on the
happy to say we uh we broke 4k on the
account so the growth has just been
account so the growth has just been
awesome and if I recall puffer lib is um
awesome and if I recall puffer lib is um
oh shoot we got
661 this is
661 this is
awesome right here this is just
awesome right here this is just
great I really hope we can keep this up
this pace of growth is just great for
this pace of growth is just great for
the
project yeah I hope
project yeah I hope
so like the the uh I think that the one
so like the the uh I think that the one
that will potentially do very well is
that will potentially do very well is
the the one that I already posted you're
the the one that I already posted you're
not going to be able to tell the pathing
not going to be able to tell the pathing
difference just looking at the Moa
difference just looking at the Moa
without looking very closely
without looking very closely
it's the key thing is the new pathing is
it's the key thing is the new pathing is
just going to make everything less
just going to make everything less
glitchy and bad so before
glitchy and bad so before
let's say that you lur a
let's say that you lur a
creep if you lur a creep somewhere
creep if you lur a creep somewhere
random it basically would just be stuck
random it basically would just be stuck
now it will actually correctly path back
now it will actually correctly path back
to Lane like in the real
to Lane like in the real
game because it has perfect pathing from
game because it has perfect pathing from
anywhere on the map with the one
anywhere on the map with the one
exception being that if it gets uh there
exception being that if it gets uh there
like there's weird discretization stuff
like there's weird discretization stuff
where it can get stuck on an obstacle
where it can get stuck on an obstacle
but then it'll Jitter out and it'll
but then it'll Jitter out and it'll
continue its path so it's pretty
continue its path so it's pretty
efficient
I really like this
demo wasn't that hard
either
either
funny
okay let's
okay let's
try let's try some stuff out
try let's try some stuff out
so we should be able to simplify and
so we should be able to simplify and
clean up a lot of the uh the NPC logic
clean up a lot of the uh the NPC logic
with this and possibly even add like
with this and possibly even add like
some basic scripted player control to
some basic scripted player control to
this and definitely we should be able to
this and definitely we should be able to
improve the human player control uh with
improve the human player control uh with
this as
this as
well
well
so it's 5:00
so it's 5:00
p.m. I think we can be a little more
p.m. I think we can be a little more
ambitious than just that right
let's start with
let's start with
this so first of all this creep path
thing no longer needs to be a
function because if we go to
here Waypoint is creep.
Waypoint e
okay what we do move
okay what we do move
towards is what we
did okay move
did okay move
towards and do we have float dest y we
towards and do we have float dest y we
do
uh agent
uh agent
speed be
fine and then this is
fine and then this is
also move
also move
towards
towards
this so let's try this to start
right uh we also we forgot that we need
right uh we also we forgot that we need
this in the neutral NPCs as well move
this in the neutral NPCs as well move
fors
so right
so right
here if found
Target move
towards L if
L2 so we're basically always going to do
L2 so we're basically always going to do
a distance calc right so we can just
a distance calc right so we can just
float
dist no we can't because it's a
dist no we can't because it's a
different
L2
L2
L2 does less than
L2 does less than
two then you path towards your spawn if
two then you path towards your spawn if
you're like not close enough to it it
right and then we delete creep path
right and then we delete creep path
which is a nice big block of code to be
which is a nice big block of code to be
able to delete I'm happy with
able to delete I'm happy with
that which puts us now at 11:47
lines let's
lines let's
see I think we just confused some
see I think we just confused some
variables it's that time of day
again very happy with the progress I've
again very happy with the progress I've
been putting and I'm not actually all
been putting and I'm not actually all
that happy with my hours though I would
that happy with my hours though I would
like to be putting in more hours I know
like to be putting in more hours I know
I've been getting tired
fast uh what the heck this shouldn't be
fast uh what the heck this shouldn't be
creep path this should be move
creep path this should be move
towards right agent
towards right agent
speed yeah this should be
this into d
this into d
y move
y move
towards this says Target
doy nice
perfect these creeps are stationary they
perfect these creeps are stationary they
should be
should be
stationary now the question is if we do
stationary now the question is if we do
render mode human and we screw with a
render mode human and we screw with a
couple of them if they're still
couple of them if they're still
stationary here we go here's our MOA
stationary here we go here's our MOA
going to boost on
going to boost on
over and we're going to say hi to the
over and we're going to say hi to the
neutral
neutral
creeps the neutral creeps are kind of
creeps the neutral creeps are kind of
hidden in this terrain we can fix
hidden in this terrain we can fix
that ah no they're
that ah no they're
attacking and if they stop attacking do
attacking and if they stop attacking do
they path back to their
they path back to their
target okay so they get stuck let me
target okay so they get stuck let me
just double check that they don't have
just double check that they don't have
two
okay they get stuck at the moment let's
okay they get stuck at the moment let's
figure out why that
figure out why that
is scan
is scan
AOE exclude
friendly exclude
hostile do you intend to let neutral
hostile do you intend to let neutral
creeps be pulled into Lane creeps oh
creeps be pulled into Lane creeps oh
[ __ ] I forgot is that a thing in Dota
[ __ ] I forgot is that a thing in Dota
did the lane creeps fight the neutrals
did the lane creeps fight the neutrals
in DotA
pulling yeah yeah it's been so long
pulling yeah yeah it's been so long
since I've played man I haven't played
since I've played man I haven't played
since like open AI 5 days done on
since like open AI 5 days done on
radiant bottomer yeah okay I used to
radiant bottomer yeah okay I used to
play
play
um P4 Lena which tells you that I have
um P4 Lena which tells you that I have
no idea what the hell I'm
no idea what the hell I'm
doing
um let me
um let me
think yeah I remember you would pull the
think yeah I remember you would pull the
camps you could stack the camps there's
camps you could stack the camps there's
a lot of [ __ ] you could do right
it's interesting I'd be open to
it's interesting I'd be open to
it not the first thing I'm going to
it not the first thing I'm going to
implement
but neutrals near Mid look very close to
but neutrals near Mid look very close to
the Lane could work out on all Lanes
the Lane could work out on all Lanes
they shouldn't be any closer than they
they shouldn't be any closer than they
would be
normally I guess the map is slightly
normally I guess the map is slightly
downscaled so the character model should
downscaled so the character model should
maybe be
maybe be
smaller um but this is the exact DOTA
smaller um but this is the exact DOTA
map
like so here's the DOTA map right this
like so here's the DOTA map right this
is exactly where all the obstacles are
is exactly where all the obstacles are
on the real DOTA map just
downscaled everything should be one to
downscaled everything should be one to
one the same with
that let me figure out what the heck is
that let me figure out what the heck is
happening here first because this is
happening here first because this is
higher priority uh I think what I was
higher priority uh I think what I was
going to do is I was kind of just G to
going to do is I was kind of just G to
code you know a whatever the heck I can
code you know a whatever the heck I can
do with the MOBA to make it interesting
do with the MOBA to make it interesting
and then get some kind of cool RL models
and then get some kind of cool RL models
on it that was going to be the highest
on it that was going to be the highest
priority thing and then if people like
priority thing and then if people like
this project if this project gets enough
this project if this project gets enough
attention then what I will do is I'll
attention then what I will do is I'll
open it up to some DOTA players and say
open it up to some DOTA players and say
like hey you know what are some of like
like hey you know what are some of like
the most important things about DOTA
the most important things about DOTA
that I'm missing here that you know
that I'm missing here that you know
maybe I could easily add a few modif
maybe I could easily add a few modif
ifications right
awesome project by the way I was
awesome project by the way I was
watching videos on YouTube first time
watching videos on YouTube first time
ACR the stream what map version of are
ACR the stream what map version of are
you're using I think it's really old I
you're using I think it's really old I
think it's like 7.3 or something I can
think it's like 7.3 or something I can
update it very easily as the thing I
update it very easily as the thing I
just need the data files in like a
just need the data files in like a
reasonable format so I found some repo
reasonable format so I found some repo
online that had already like scraped all
online that had already like scraped all
the tower positions and scraped the
the tower positions and scraped the
neutral positions and like the map data
neutral positions and like the map data
and stuff so I'm using that I only found
and stuff so I'm using that I only found
one from like 7.3 or something like that
one from like 7.3 or something like that
um I have no idea how much it's changed
um I have no idea how much it's changed
over the years no
idea like I'm sure it's changed in ways
idea like I'm sure it's changed in ways
that DOTA players find like yeah they
that DOTA players find like yeah they
make huge differences on the game playay
make huge differences on the game playay
but like visually if you were to look at
but like visually if you were to look at
the map then and look at the map now are
the map then and look at the map now are
you immediately going to go oh that's
you immediately going to go oh that's
totally different or is it like at a
totally different or is it like at a
high level the same
thing like I know League redid the like
thing like I know League redid the like
they redid the way that the jungle
they redid the way that the jungle
worked I don't know last year and it was
worked I don't know last year and it was
like a huge thing for the way that the
like a huge thing for the way that the
game plays but for anybody who doesn't
game plays but for anybody who doesn't
play league like you look at the map
play league like you look at the map
before you look at the map after and
before you look at the map after and
it's like the same
map found
Target found Target equal scan AOE if
Target found Target equal scan AOE if
found
found
Target nearest scanned but basic
Target nearest scanned but basic
otherwise move
otherwise move
towards L
towards L
if spawn y spawn X less than two move
if spawn y spawn X less than two move
towards neutral spawn y neutral spawn
towards neutral spawn y neutral spawn
X why is this not
[Music]
[Music]
valid do they spawn inside of uh
valid do they spawn inside of uh
uh do they like spawn inside of um
uh do they like spawn inside of um
terrain or something hold on maybe this
terrain or something hold on maybe this
is just like a bad spawn I don't
is just like a bad spawn I don't
know and not really live Human
mode but yeah the goal is not to spend
mode but yeah the goal is not to spend
forever on this project right like I
forever on this project right like I
want to do a whole bunch of cool stuff
want to do a whole bunch of cool stuff
on stream I don't want to get stuck on
on stream I don't want to get stuck on
this forever come on
this forever come on
puffer yeah yeah you know you want to
puffer yeah yeah you know you want to
follow me ha what are you going to do
follow me ha what are you going to do
you're going to stay there and be
you're going to stay there and be
stuck get blink stried on I don't know
stuck get blink stried on I don't know
why this blink strike drains my Mana
why this blink strike drains my Mana
like that without teleporting me uh we
like that without teleporting me uh we
got stuff to fix but so it just doesn't
got stuff to fix but so it just doesn't
freaking follow
me L2 distance of neutral. Y neutral
me L2 distance of neutral. Y neutral
dox if found
Target if the L2
distance you're going to basic attack
distance you're going to basic attack
otherwise you're going to move towards
otherwise you're going to move towards
me L
me L
if what the
if what the
hell why is this
hell why is this
not why does this not do
not why does this not do
it neutral that spawn one
it neutral that spawn one
y neutral. spawn
X move
towards
uh moving towards
I don't know if you've seen them as well
I don't know if you've seen them as well
uh I guess I really need to upload the
uh I guess I really need to upload the
uh the snake Dev streams to X cuz that
uh the snake Dev streams to X cuz that
was the first week I built like this
was the first week I built like this
4096 player snake game in a week that
4096 player snake game in a week that
runs at 14 million steps per second
runs at 14 million steps per second
single
single
core that was like an easier to follow
core that was like an easier to follow
stream as
well cuz that environment is like way
well cuz that environment is like way
simpler than
simpler than
this way
this way
simpler okay puffers pull the puffers
simpler okay puffers pull the puffers
come on
come on
puffer you know you want to follow
puffer you know you want to follow
me okay so now he just moving towards a
me okay so now he just moving towards a
whole bunch
right and now he's no longer moving
right and now he's no longer moving
towards oh no he is still moving towards
towards oh no he is still moving towards
what the heck
do you have a g good resource to learn
do you have a g good resource to learn
ml wanted to make a game similar to
ml wanted to make a game similar to
Total
Total
War and make an AI for
War and make an AI for
that you're jumping in at the deep end
that you're jumping in at the deep end
so I've worked in natural language
so I've worked in natural language
processing vision and reinforcement
processing vision and reinforcement
learning uh reinforcement learning is by
learning uh reinforcement learning is by
by far the hardest because in addition
by far the hardest because in addition
to the things that you need to learn
to the things that you need to learn
with ML you need a substantial bit of
with ML you need a substantial bit of
engineering to deal with the simulation
engineering to deal with the simulation
stack right not to mention we have a
stack right not to mention we have a
bunch of very cursed things as well
bunch of very cursed things as well
though I'm working on that um ml in
though I'm working on that um ml in
general cs231n lectures online either
general cs231n lectures online either
Andre or
Andre or
Justin's probably the best place to
Justin's probably the best place to
start reinforcement learning from there
start reinforcement learning from there
the fundamentals aren't all that
the fundamentals aren't all that
complicated if you get ml little bit of
complicated if you get ml little bit of
math not too much the main thing is just
math not too much the main thing is just
ridiculous quantities of engineering
ridiculous quantities of engineering
you know I spent four hours today
you know I spent four hours today
pre-computing pathing I don't know if
pre-computing pathing I don't know if
you were here for this um I spent four
you were here for this um I spent four
hours today pre-computing
hours today pre-computing
pathing uh this is 268 megabytes of
pathing uh this is 268 megabytes of
pathing data and as a result the
pathing data and as a result the
simulator can now do pathing while
simulator can now do pathing while
running like a thousand times faster
running like a thousand times faster
than it would otherwise um like this is
than it would otherwise um like this is
the level of stuff that it takes to get
the level of stuff that it takes to get
really high performance Sims that are
really high performance Sims that are
going to be usable with reinforcement
going to be usable with reinforcement
learning um I mean that said it is just
learning um I mean that said it is just
getting easier and easier and the
getting easier and easier and the
approach that I've been taking with uh
approach that I've been taking with uh
snake and with this project and with all
snake and with this project and with all
the other Sims I've been developing is
the other Sims I've been developing is
one that I would say is fairly
one that I would say is fairly
accessible um it's it's something that
accessible um it's it's something that
you can pick up for sure uh it will take
you can pick up for sure uh it will take
some work it will definitely take some
some work it will definitely take some
work fundamentals though start with 231n
work fundamentals though start with 231n
go from there
RL there's I forgot that uh it's kind of
RL there's I forgot that uh it's kind of
dated but for RL there's open AI
dated but for RL there's open AI
spinning up
spinning up
documents it's way more math than you
documents it's way more math than you
need and the code isn't great still
need and the code isn't great still
probably one of the better
probably one of the better
resources you can also just read through
resources you can also just read through
clean RL clean RL is awesome
found
Target move towards
right does this say moving towards still
I think I might just not have been
I think I might just not have been
paying
attention no it say moving towards
attention no it say moving towards
[Music]
[Music]
already right
because oh
because oh
stupid stupid
stupid stupid
stupid there we go
man I got to not be recking messing up
man I got to not be recking messing up
my code bases towards the end of the day
my code bases towards the end of the day
because I just like Miss stuff like
that all right puffers what do you got
that all right puffers what do you got
you got
you got
game H you got nothing that's right you
game H you got nothing that's right you
go back to the hole here we're going to
go back to the hole here we're going to
lure a puffer hey puffer what are you
lure a puffer hey puffer what are you
doing what are you doing you're doing
doing what are you doing you're doing
nothing go
back get AO
Eed
Eed
cool isn't
nice very nice
why did the puffers go underneath the
map it'd be better if they went on top
map it'd be better if they went on top
of the map if they were going to clip
of the map if they were going to clip
like this
right PR computed pathing is very cool
right PR computed pathing is very cool
does it rule out any Dynamic Mac changes
does it rule out any Dynamic Mac changes
Co though like collision with other nope
Co though like collision with other nope
you can still collide with other
you can still collide with other
entities you just can't account for them
entities you just can't account for them
in pathf finding um which you wouldn't
in pathf finding um which you wouldn't
be doing anyways
be doing anyways
pdubs the difference
pdubs the difference
in the difference in computational
in the difference in computational
efficiency though with doing it this way
efficiency though with doing it this way
versus like trying to do AAR in in the
versus like trying to do AAR in in the
loop it's like a difference of like
loop it's like a difference of like
Factor 10,000 or something
Factor 10,000 or something
so yeah it's
so yeah it's
massive stuff like this is what's going
massive stuff like this is what's going
to let this run a million steps per
to let this run a million steps per
second
pdubs is the original author of the uh
pdubs is the original author of the uh
the viral Pokemon Red reinforcement
the viral Pokemon Red reinforcement
learning
learning
project been helping out with that with
project been helping out with that with
puffer mostly just sponsoring compute
puffer mostly just sponsoring compute
these days but uh awesome awesome
these days but uh awesome awesome
project go check it out if you haven't
already Okay so this now works
already Okay so this now works
um what was wrong with my renderer again
oh right I forgot I still was using the
oh right I forgot I still was using the
old renderer for the
old renderer for the
grid that's obnoxious
um we're probably going to swap this out
um we're probably going to swap this out
anyways
right let's hit
this will do it right this fixes
this will do it right this fixes
it
whoops hey
whoops hey
bebs
welcome uh tile is zero or two
welcome uh tile is zero or two
continue and then I forgot to just
continue and then I forgot to just
Define this here
Define this here
right and we're just going to hack this
right and we're just going to hack this
because I'm going to replace this client
because I'm going to replace this client
any I wrote a better client
any I wrote a better client
this will just make it cleaner for the
this will just make it cleaner for the
time being cuz now when you do when you
time being cuz now when you do when you
do weird stuff um yeah you'll go on top
do weird stuff um yeah you'll go on top
or you'll you'll go through the map when
or you'll you'll go through the map when
you
you
do so like if I boost towards this you
do so like if I boost towards this you
can boost through it just depends on
can boost through it just depends on
your
speed and then you can actually see the
speed and then you can actually see the
targets oh
targets oh
no what's the data format for
no what's the data format for
pre-computed path how are they looked up
pre-computed path how are they looked up
it is a 268 megabyte 4D table you index
it is a 268 megabyte 4D table you index
it with um destination y comma
it with um destination y comma
destination X because
destination X because
assumedly that's the thing that's
assumedly that's the thing that's
changing the least often so for cache
changing the least often so for cache
coherency those go first and then um
coherency those go first and then um
your current y your current X so simple
your current y your current X so simple
4 DET table lookup
takes 3 seconds to pre-compute those um
takes 3 seconds to pre-compute those um
268 megabytes of data by the way the
268 megabytes of data by the way the
scon implementation for pre-computation
scon implementation for pre-computation
is 3 seconds uh that's about 3,000 times
is 3 seconds uh that's about 3,000 times
slower than the python Implement 3,000
slower than the python Implement 3,000
times faster than the python
times faster than the python
implementation so the python
implementation so the python
implementation would literally take
implementation would literally take
hours to run
so ionized it both because it would be
so ionized it both because it would be
cool it would you know save me time
cool it would you know save me time
ultimately not having to wait for the
ultimately not having to wait for the
thing and also I don't have to
thing and also I don't have to
distribute a 260 whatever megabyte
distribute a 260 whatever megabyte
file right I just cach it the first time
file right I just cach it the first time
you make the environment so you only get
you make the environment so you only get
3 second startup once and after that you
3 second startup once and after that you
have much faster
startup okay so this is good now we made
startup okay so this is good now we made
the render a little
the render a little
prettier um technically we could get a
prettier um technically we could get a
nice background for
nice background for
this if we wanted to we could paint like
this if we wanted to we could paint like
a cool background for
a cool background for
this I don't want to use the DOTA map I
this I don't want to use the DOTA map I
think that
think that
that like using DOTA data for a science
that like using DOTA data for a science
project that's one thing using their
project that's one thing using their
artwork that's kind of sketch so we're
artwork that's kind of sketch so we're
not going to do that
not going to do that
unless they tell me I
can 5:30 wasn't that bad let me think
can 5:30 wasn't that bad let me think
what else we can do for tonight let me
what else we can do for tonight let me
think of something
think of something
cool how many paths is that in total
cool how many paths is that in total
well it's from every tile on a 128 by
well it's from every tile on a 128 by
128 map to every other
128 map to every other
path right on the
path right on the
map so
behind each index is a full path no it's
behind each index is a full path no it's
no behind each index is the movement
no behind each index is the movement
that you should take right so if you're
that you should take right so if you're
if you want to get to d y comma d x and
if you want to get to d y comma d x and
you're currently at start y comma start
you're currently at start y comma start
X what move do you take and then you do
X what move do you take and then you do
the next lookup with your new start
the next lookup with your new start
position and you get your next move so
position and you get your next move so
that's 200 128 to the 4th IS 268
that's 200 128 to the 4th IS 268
million we're storing it each uh each
million we're storing it each uh each
action is one bite so that gives you 268
action is one bite so that gives you 268
MB also had you seen pre-computed path
MB also had you seen pre-computed path
used in other projects or is this just
used in other projects or is this just
what made sense to you this is just what
what made sense to you this is just what
made sense to me I haven't seen people
made sense to me I haven't seen people
do
this I mean maybe there probably some
this I mean maybe there probably some
projects that do it but I'd assume it's
projects that do it but I'd assume it's
pretty
pretty
rare I mean like
rare I mean like
If This Were when you implement this
If This Were when you implement this
efficiently like you could do this
efficiently like you could do this
probably 10,000 plus times per second if
probably 10,000 plus times per second if
you wanted to and you don't ever have to
you wanted to and you don't ever have to
like update the paths that often so you
like update the paths that often so you
could have a game with a thousand
could have a game with a thousand
players doing this in a real time
players doing this in a real time
without pre-computation no problem but
without pre-computation no problem but
the thing is that
the thing is that
um this game is going to run at 20,000
um this game is going to run at 20,000
times real time per core 128 squared um
times real time per core 128 squared um
um no not really it it depends what you
um no not really it it depends what you
mean by how many paths are there
mean by how many paths are there
like the number of paths is technically
like the number of paths is technically
from any node to any other node on the
from any node to any other node on the
graph right so the number of nodes is
graph right so the number of nodes is
equal to 128 squared and then the number
equal to 128 squared and then the number
of paths is 128 squar squared so they're
of paths is 128 squar squared so they're
128 to the 4th different possible
128 to the 4th different possible
paths and they're stored in 128 to 4
paths and they're stored in 128 to 4
bites because um the paths all overlap
bites because um the paths all overlap
so you can you know you don't have to
so you can you know you don't have to
store the individual path that way
store the individual path that way
otherwise it would be ridiculous you
otherwise it would be ridiculous you
wouldn't be able to store it if you
wouldn't be able to store it if you
stored the individual paths like that
stored the individual paths like that
without overlap and it wouldn't even be
without overlap and it wouldn't even be
any
faster I think the chat is pretty
faster I think the chat is pretty
delayed uh let me see edit
delayed uh let me see edit
settings we have stream settings for
YouTube is there like a stream hold on
YouTube is there like a stream hold on
let me do this off
let me do this off
screen uh
screen uh
[Music]
[Music]
settings
settings playback and
settings playback and
performance is there streaming are there
performance is there streaming are there
like streaming like laty things on
like streaming like laty things on
YouTube I seem to remember there
YouTube I seem to remember there
being streaming latency
settings I'll mess with this later
settings I'll mess with this later
because I don't think I can do it while
because I don't think I can do it while
keeping the stream
up I think it's like 10 or 15 seconds I
up I think it's like 10 or 15 seconds I
didn't notice the last one for a bit
didn't notice the last one for a bit
um but yeah when you see my when you see
um but yeah when you see my when you see
your message pop up on my screen that's
your message pop up on my screen that's
when I can see it it shouldn't be 40
when I can see it it shouldn't be 40
seconds that's
seconds that's
ridiculous if it is that's YouTube being
ridiculous if it is that's YouTube being
Jank but basically as soon as you see
Jank but basically as soon as you see
your message pop up on the actual stream
your message pop up on the actual stream
um message there I can see it if I were
um message there I can see it if I were
to open the YouTube chat window I'd be
to open the YouTube chat window I'd be
able to see him
instantly I don't have that open though
instantly I don't have that open though
I just have the uh the plugin it's only
I just have the uh the plugin it's only
delayed about 5 Seconds okay okay yeah I
delayed about 5 Seconds okay okay yeah I
don't know
then okay next stuff with the Moa um
then okay next stuff with the Moa um
there was so much stuff I wanted to do
there was so much stuff I wanted to do
with this project but I want to figure
with this project but I want to figure
out like what are the key key things we
out like what are the key key things we
need because I'd like to have models
need because I'd like to have models
training on this relatively
training on this relatively
soon message is taking like a minute to
soon message is taking like a minute to
show up in the Stream after that's weird
show up in the Stream after that's weird
then I don't know uh it can be endpoint
then I don't know uh it can be endpoint
specific I don't know if you're on
specific I don't know if you're on
mobile or
whatever it's
weird I haven't changed anything in my
weird I haven't changed anything in my
settings as far as I'm
aware oh it's my fault I was watching
aware oh it's my fault I was watching
the video a minute
the video a minute
behind
behind
LOL that's
funny okay
um stuff to do on this project
um stuff to do on this project
now there's some game balance stuff that
now there's some game balance stuff that
we have to
we have to
do there is a little bit of debugging
do there is a little bit of debugging
stuff that we have to do with specific
stuff that we have to do with specific
skills uh it would be cool to get like
skills uh it would be cool to get like
some sort of Baseline type
some sort of Baseline type
thing like can we just have the what if
thing like can we just have the what if
we just like make the agents run at each
we just like make the agents run at each
other down mid or like run at each other
other down mid or like run at each other
down a specific
down a specific
aisle so are there multiple heroes yes
aisle so are there multiple heroes yes
we have five different
Heroes we don't have like 20 Heroes but
Heroes we don't have like 20 Heroes but
we have
we have
five I'll show you
five I'll show you
them we've got uh we've got a support
them we've got uh we've got a support
character that has a hook a hook pull an
character that has a hook a hook pull an
AOE heal and a uh single Target stun I
AOE heal and a uh single Target stun I
believe we've got an assassin character
believe we've got an assassin character
that's the one that I've been playing
that's the one that I've been playing
that has uh an AOE that can only target
that has uh an AOE that can only target
creeps they have a blink strike so they
creeps they have a blink strike so they
can teleport and hit and then they have
can teleport and hit and then they have
a channeled movement buff tox move speed
a channeled movement buff tox move speed
there is the mid character that's
there is the mid character that's
supposed to be bursty so they've got a
supposed to be bursty so they've got a
single Target nuke they've got uh a
single Target nuke they've got uh a
pretty strong AOE and they also have an
pretty strong AOE and they also have an
AOE
AOE
stun basically modeled this off of
stun basically modeled this off of
Lena and then we've got uh there's a
Lena and then we've got uh there's a
tank that has an AOE damage over time a
tank that has an AOE damage over time a
strong self heal as well as an engage
strong self heal as well as an engage
AOE and then there is a uh a
AOE and then there is a uh a
carry the carry or the bottom whatever
carry the carry or the bottom whatever
has a a retreat slow a spell that they
has a a retreat slow a spell that they
can use on an enemy to push themselves
can use on an enemy to push themselves
back and slow that enemy down uh this
back and slow that enemy down uh this
was modeled off of like Caitlyn's net if
was modeled off of like Caitlyn's net if
you know that there is a a slowing
you know that there is a a slowing
damage so you can use it to poke Dam
damage so you can use it to poke Dam
poke and also slow the target you can
poke and also slow the target you can
use it to like cut them off from
use it to like cut them off from
retreating lots of things and then they
retreating lots of things and then they
also have an AOE to help them uh farming
also have an AOE to help them uh farming
minions can other Heroes see what heroes
minions can other Heroes see what heroes
are with the purpose to know their
are with the purpose to know their
strength or weakness that will be
strength or weakness that will be
implemented I haven't implemented it yet
implemented I haven't implemented it yet
I just need to have different Graphics
I just need to have different Graphics
basically uh I need to like make
basically uh I need to like make
different character Graphics or
something I don't know maybe I should
something I don't know maybe I should
just like export a 2d of the puffer
just like export a 2d of the puffer
swimming or something that'd be a fun
swimming or something that'd be a fun
that'd be fun for movement
I think what we're going to do for today
I think what we're going to do for today
because it would be
because it would be
fun um let's try to just
fun um let's try to just
like hack the creep AI to make it work
like hack the creep AI to make it work
with the
with the
heroes right so we can have the heroes
heroes right so we can have the heroes
run at each other down you know three
run at each other down you know three
different Lanes or whatever
different Lanes or whatever
and uh then we can run the game really
and uh then we can run the game really
really fast and we can see if like
really fast and we can see if like
anybody actually takes all the towers
anybody actually takes all the towers
right and we can get some like some cool
right and we can get some like some cool
graphs or some cool stats on like levels
graphs or some cool stats on like levels
and stuff like that I think that would
and stuff like that I think that would
be a cool thing to
do yeah because then the thing is once
do yeah because then the thing is once
we know that then we can like start
we know that then we can like start
tuning stuff around that and uh then we
tuning stuff around that and uh then we
can start doing like a little bit of RS
can start doing like a little bit of RS
stuff around this cuz I definitely I
stuff around this cuz I definitely I
don't I want to have uh I want to start
don't I want to have uh I want to start
working on the neuronet side of this no
working on the neuronet side of this no
later than Wednesday so we can start
later than Wednesday so we can start
getting experiments
running because it's going to take a
running because it's going to take a
little bit of
little bit of
work how did you learn coding I'm in uni
work how did you learn coding I'm in uni
first year and it's so hard to code any
first year and it's so hard to code any
advice takes a long time to get
advice takes a long time to get
good um I started programming
good um I started programming
I guess we'll say seriously at like age
I guess we'll say seriously at like age
16 or 15 but really more like
16 or 15 but really more like
so 13 14 years by
so 13 14 years by
now
now
um I've been doing research for most of
um I've been doing research for most of
that amount of
that amount of
time I've been doing like software heavy
time I've been doing like software heavy
side stuff in research for most of that
side stuff in research for most of that
time I've always had like tons of side
time I've always had like tons of side
projects and other things that I've been
projects and other things that I've been
working
working
on and it really really pisses me off
on and it really really pisses me off
when I write bad code which is the ma
when I write bad code which is the ma
the biggest
thing I make a few exceptions for this
thing I make a few exceptions for this
stream so I can get stuff done fast but
stream so I can get stuff done fast but
then I always go back and refactor
stuff these skills aren't
stuff these skills aren't
bad just create a class be able to add
bad just create a class be able to add
edit remove a class
yeah little games are
yeah little games are
fun you can try to implement like a
fun you can try to implement like a
basic snake game or
basic snake game or
whatever that's like a you can do that
whatever that's like a you can do that
in 200 lines of code
let me think what we're going to do
let me think what we're going to do
here so I want to hack
here so I want to hack
this creep
AI what happens if I just call creep
AI what happens if I just call creep
AI on the heroes can I just do that
AI on the heroes can I just do that
that I think I can
that I think I can
right just call creep AI on the
right just call creep AI on the
heroes and have them not use their
heroes and have them not use their
skills
skills
yet I think I literally can do that hold
yet I think I literally can do that hold
on let me
on let me
um let me apply the lanes and stuff to
um let me apply the lanes and stuff to
things
uh I have to go copy I don't I just need
uh I have to go copy I don't I just need
to see this for a moment
to see this for a moment
okay
so all I have to do
so all I have to do
is
is
uh self. get
uh self. get
entity player uh
entity player uh
of
of
player
zero yeah
zero yeah
dot
dot
Lane this is lane two I
think creep. Lane where do we set the
think creep. Lane where do we set the
lanes
here yeah that's where so lane two is
here yeah that's where so lane two is
the bottom Lane so we're going to set
the bottom Lane so we're going to set
support and
both supports go to the bottom
both supports go to the bottom
Lane oh no wait that's that's
Lane oh no wait that's that's
wrong this is
five get entity one lane
five get entity one lane
is the Assassin
is the Assassin
is oh yeah this is supposed to be a
is oh yeah this is supposed to be a
roaming
character I actually don't know where to
character I actually don't know where to
send this Ro roing character so I'm just
send this Ro roing character so I'm just
going to send it to the Top Lane for now
going to send it to the Top Lane for now
cuz I didn't account for that like it's
cuz I didn't account for that like it's
going to have to learn how to do other
going to have to learn how to do other
stuff get entity two this is the mid
stuff get entity two this is the mid
character this is going to go
mid three is going to go
top and then four is going to be bottom
which is
which is
two
two
okay so and then we're going to do self
okay so and then we're going to do self
get
get
entity
entity
five it's going to be sent to Lane the
five it's going to be sent to Lane the
bottom Lane which is uh
bottom Lane which is uh
five get ntity six is going to be sent
five get ntity six is going to be sent
to the Top Lane which is
to the Top Lane which is
three and D7 is going to be sent to the
three and D7 is going to be sent to the
uh mid lane which is
uh mid lane which is
four get entity
four get entity
8 is going to be sent to
8 is going to be sent to
the uh bottom Lane as well which is
the uh bottom Lane as well which is
five get entity 9 is going to be sent to
five get entity 9 is going to be sent to
the a Top Lane which is three and self.
the a Top Lane which is three and self.
get entity 10 is going to be sent to
get entity 10 is going to be sent to
the bottom Lane which is five
the bottom Lane which is five
okay remove all this I was just using it
okay remove all this I was just using it
as a
reference we need to move this down
reference we need to move this down
one like
this hard code lanes for
now and then what we're going to
do is we're going to do the creep AI on
do is we're going to do the creep AI on
the
players so player logic right
players so player logic right
here is going to
be okay so they they have this for their
be okay so they they have this for their
skills I
skills I
guess um let's just let's just comment
guess um let's just let's just comment
these three
these three
lines
creep creep
creep creep
yeah I wonder what this does I wonder if
yeah I wonder what this does I wonder if
this
works render
works render
mode Li
Oho well would you look at
that why is this one
stuck okay very weird that this one is
stuck okay very weird that this one is
stuck but
stuck but
overall look at
that
boom why is this one stuck here this is
boom why is this one stuck here this is
so weird
I don't
know nobody's taken a tower
know nobody's taken a tower
yet I would also like to know the levels
yet I would also like to know the levels
of these various things
did they take a tower in mid I didn't
see I'm do this so that it doesn't clog
see I'm do this so that it doesn't clog
memory yeah they took a tower
memory yeah they took a tower
okay on a
start let's do a little logging Maybe
it
entities is dot we got to put this here
entities is dot we got to put this here
so we
can we're going to get the levels I want
can we're going to get the levels I want
to see them level
up e
okay
okay mpai float 6 4
okay mpai float 6 4
object is not
callable garbage suggestions I
guess we'll just do the
means I can't see this because it's
means I can't see this because it's
going too
going too
fast so
what are we going to
do what if we just do percent
32 will this do it
how is this so fast
oh okay let's try
this is that fast enough
they're
leveling level
16 and then we get to the really rare
16 and then we get to the really rare
bug that I have to
bug that I have to
fix cool though
right I don't think that we've actually
right I don't think that we've actually
given them stats yet so maybe that's
given them stats yet so maybe that's
what we'll do maybe we'll do uh stat
what we'll do maybe we'll do uh stat
scaling for a bit
scaling for a bit
because what I would like to have happen
because what I would like to have happen
is I'd like to at least have the the
is I'd like to at least have the the
ability for like I'd like to be able to
ability for like I'd like to be able to
run this game super fast like that and
run this game super fast like that and
see that um you know eventually the
see that um you know eventually the
players just start murking the creep
players just start murking the creep
waves or
waves or
whatever though the creep waves scale
whatever though the creep waves scale
pretty hard in Dota too don't they the
pretty hard in Dota too don't they the
creeps get
stronger but still by the end you're
stronger but still by the end you're
like one-shotting the creep waves
like one-shotting the creep waves
right
right
yeah okay I will be right back I'm going
yeah okay I will be right back I'm going
to use a rest room then we're going to
to use a rest room then we're going to
do another hour on this and we are going
do another hour on this and we are going
to um we're going to get something that
to um we're going to get something that
actually looks like a winnable game of
actually looks like a winnable game of
DOTA and I think we'll probably add in
DOTA and I think we'll probably add in
the
the
um the Nexus objectives or whatever they
um the Nexus objectives or whatever they
are Fountain no not Fountain
are Fountain no not Fountain
Nexus uh and then we'll like we'll set
Nexus uh and then we'll like we'll set
the wi con of the game that'll be cool
the wi con of the game that'll be cool
be right
back
e
e e
okay
Let's uh let's make this thing freaking
awesome what is the issue right
awesome what is the issue right
here oh there's no issue this is
here oh there's no issue this is
literally just the gift
saving oh did we actually go through all
saving oh did we actually go through all
these
frames we simulated 10,000 frames that's
frames we simulated 10,000 frames that's
funny so there's no bug we just
funny so there's no bug we just
simulated 10,000
simulated 10,000
frames faster than I thought we could
do we have any form of scaling in right
do we have any form of scaling in right
now
doesn't look like we have any form of
doesn't look like we have any form of
scaling
in what do we have their damage set
too Health
Mana we have their basic attack damage
Mana we have their basic attack damage
set too basic
attack
attack
basic oh wait I saw player dot here it
basic oh wait I saw player dot here it
is reset player.
is reset player.
damage you have it set to
25 which is very low isn't it I think I
25 which is very low isn't it I think I
use Lena as the model for this it's
use Lena as the model for this it's
probably way too low give me another
probably way too low give me another
hero um it's like a reasonable thing
hero um it's like a reasonable thing
to herob base damage what's like a
to herob base damage what's like a
middle
middle
tier damage
base attack
damage oh it's actually not that far
damage oh it's actually not that far
off the really high ones are like
off the really high ones are like
30s agility
30s agility
[Music]
[Music]
Heroes okay so like some of them are
Heroes okay so like some of them are
really slow really
really slow really
low okay I think 30 is a good one to
low okay I think 30 is a good one to
start off
start off
with and what's the scaling
with and what's the scaling
what's like good scaling or like random
what's like good scaling or like random
scaling
scaling
um attack damage scaling Dota
2 main damage
sources selected
attribute does anybody just want to tell
attribute does anybody just want to tell
me how
me how
much how much scaling you get
much how much scaling you get
roughly bonus attack
roughly bonus attack
no what is
no what is
this
strength is it main attack damage per
strength is it main attack damage per
point you get one damage per
point you get one damage per
point
point
right detailed
right detailed
table main attack damage at level
table main attack damage at level
one which what base attack damage and
one which what base attack damage and
Main attack damage oh because it's with
Main attack damage oh because it's with
the scaling right okay so I was
the scaling right okay so I was
underestimating drastically drastically
underestimating drastically drastically
underestimating it should be more like
underestimating it should be more like
50 5050 base attack damage which is
50 5050 base attack damage which is
about what a creep does
about what a creep does
right is that what a creep hits maybe a
right is that what a creep hits maybe a
little
more yeah so you do about that amount of
more yeah so you do about that amount of
damage so let's up this to
damage so let's up this to
50 because we don't have strength
50 because we don't have strength
scaling or
anything and then we can do
how much do they get so we can
how much do they get so we can
actually Max main attack
actually Max main attack
damage we can get it right here right
damage we can get it right here right
that the average is
that the average is
like well depends on which how much they
like well depends on which how much they
scale uh 150 I'm seeing a lot of 150s
scale uh 150 I'm seeing a lot of 150s
140s 160s
120s 140s 120s
let's say 100
and what the heck some of these are like
and what the heck some of these are like
crazy okay let's say 150
crazy okay let's say 150
damage so it's 100 divided
30 so let's say three it's
30 so let's say three it's
90 is damage a float or an
90 is damage a float or an
INT it's a float so we'll do
3.3 self. Lev player.
3.3 self. Lev player.
xp. damage equals 50+ 3 3 times player
xp. damage equals 50+ 3 3 times player
dot
level simplest scaling we can do
and then the max Health as well goes up
and then the max Health as well goes up
right and Max
Mana we're going to have to organize all
Mana we're going to have to organize all
this data I just want to get something
this data I just want to get something
to start
with layer. Max
with layer. Max
Health 500 and 100
okay
okay
plus and now we need to
plus and now we need to
have player Health
have player Health
right and no Health
scaling where's the freaking
scaling Talent grants them a flat Health
scaling Talent grants them a flat Health
bonus
what is
what is
the health
scaling base
Health 20
Health 20
hp 22 times base
strength plus level minus one time oh 22
strength plus level minus one time oh 22
* strength
so 22 times base
so 22 times base
strength
strength
so I don't know what the hell that's
so I don't know what the hell that's
going to equate to there's not a table
going to equate to there's not a table
of level 30 health
strength agil oh here it
strength agil oh here it
is damage damage
is damage damage
Max
vsd what is
this do we have health on here
this do we have health on here
anywhere
anywhere
RG int T MS
T30 move
T30 move
speed what the hell where's the where's
speed what the hell where's the where's
health is Health not in
here attack
here attack
speed well at least we see the HP and MP
speed well at least we see the HP and MP
per
second which is
okay that's nice to
know I'm just going to guess because I
know I'm just going to guess because I
don't know
they don't have 3,000 health I'm going
they don't have 3,000 health I'm going
to say it's 50 Health a level so 2,000
to say it's 50 Health a level so 2,000
at 30 I don't
at 30 I don't
know player.
level and then we're going to
do uh 100
plus well I'm going to actually leave
plus well I'm going to actually leave
the Mana as is right now because I have
the Mana as is right now because I have
it I don't have that scaling set
it I don't have that scaling set
up but I am going to actually make I'm
up but I am going to actually make I'm
going to add a a very slow
going to add a a very slow
heal I'm going to add
a player
a player
dot if
player okay
player okay
so now if I rebuild
so now if I rebuild
[Music]
[Music]
this I think we should see him murking
this I think we should see him murking
some
enemies with some basic scaling
level
level
[Music]
four one tower has been
taken invalid
XP level
XP level
17 invalid XP
I guess somebody broke level 30
rebuild definitely the heroes are
rebuild definitely the heroes are
they're still getting stuck in stuff at
they're still getting stuck in stuff at
places so we're going to have some
places so we're going to have some
glitches to
fix but let's see if we can get these
fix but let's see if we can get these
things taking some towers and if this
things taking some towers and if this
doesn't work I'll make it
doesn't work I'll make it
asymmetric because DOTA has like the
asymmetric because DOTA has like the
hard Lane and the safe Lane
thing okay so they both took each
thing okay so they both took each
other's mid
other's mid
Towers uh one top T1 is Fallen
I think that they're uh the they're just
I think that they're uh the they're just
spamming their
spamming their
skills and they're not actually hitting
skills and they're not actually hitting
with
with
them there nothing is happening because
them there nothing is happening because
they're already at level
they're already at level
26 so let's see about
26 so let's see about
that if you use Q
yeah these need to all be be to tell you
yeah these need to all be be to tell you
if they've used
them we're going to replace this with
them we're going to replace this with
basic attack for
now and the reason is just so that we
now and the reason is just so that we
can tell uh I think that they spamming
can tell uh I think that they spamming
skills without knowing what they're
skills without knowing what they're
doing using them for and as a result um
doing using them for and as a result um
they're not like just using their basic
they're not like just using their basic
attack to kill NPCs which should be
attack to kill NPCs which should be
incredibly effective once they're level
incredibly effective once they're level
something let's just rebuild this and
something let's just rebuild this and
try this
again oh it's Monday I actually I can
again oh it's Monday I actually I can
stream a little later today then
maybe at least while I'm getting stuff
maybe at least while I'm getting stuff
done
here okay
so okay there's a Tower
falling top T1 is
fallen so ders lost two tier ones mid
fallen so ders lost two tier ones mid
and top
I could probably make a jungle AI
I could probably make a jungle AI
without too much difficulty
without too much difficulty
right
right
maybe is that yeah mid just lost tier
maybe is that yeah mid just lost tier
two
we're at
we're at
level radiant is at level 30 dire is
level radiant is at level 30 dire is
only at level 19 which is
only at level 19 which is
odd but then if radiant is at level 30
odd but then if radiant is at level 30
they should be sweeping though I guess
they should be sweeping though I guess
they're not using abilities and there's
they're not using abilities and there's
no scaling for item builds built
in they are pushed back very very far
in they are pushed back very very far
though um but they are
though um but they are
holding I think it's because a couple
holding I think it's because a couple
players keep getting
players keep getting
stuck or maybe just the the tier threes
stuck or maybe just the the tier threes
are very very
strong the minions don't even have
strong the minions don't even have
scaling on them at the
scaling on them at the
moment so they should just be getting
moment so they should just be getting
wrecked though I guess again they're not
wrecked though I guess again they're not
using spells and there's no they're no
using spells and there's no they're no
items
items
on okay so the thing that we know will
on okay so the thing that we know will
definitely cause this it's a mirror
definitely cause this it's a mirror
match so it's hard to say how long it
match so it's hard to say how long it
should take for somebody to like win
should take for somebody to like win
we're going to make this more DOTA style
we're going to make this more DOTA style
um this
um this
like one one2 jungle is a it's a league
like one one2 jungle is a it's a league
thing let's make this more DOTA with the
thing let's make this more DOTA with the
lane
lane
assignments this should
assignments this should
help we're going to
do okay we're going to
do okay we're going to
do the entity assignments again
so it's uh what is
so it's uh what is
it
it
support
support
06 and we actually need to swap
06 and we actually need to swap
these
these
one
one
so 0 one
so 0 one
six
six
two is I these suggestions are so stupid
two is I these suggestions are so stupid
this is burst not
this is burst not
tank then this one is tank this one is
carry okay
so we're going to
so we're going to
assign uh
support screw it support assassin and
support screw it support assassin and
carrye are all just going to go to the
carrye are all just going to go to the
safe Lane
so zero this is going to be lane
so zero this is going to be lane
two one lane is also going to be
two one lane is also going to be
two and then uh what is
two and then uh what is
it entity four is going to be lane two
it entity four is going to be lane two
as well so this is the safe Lane then we
as well so this is the safe Lane then we
do self. get
do self. get
entity uh the mid is going to go to one
entity uh the mid is going to go to one
and then get entity this will go to zero
and then get entity this will go to zero
okay so this is three one and one get
okay so this is three one and one get
entity five is going to
entity five is going to
be uh
be uh
Lane this is their support so their
Lane this is their support so their
support goes to their safe Lane which is
support goes to their safe Lane which is
three so 5
three so 5
six and then what is it their their uh
six and then what is it their their uh
carry also goes there so
nine nine goes to three
nine nine goes to three
and
and
then their uh burst goes to Lane
then their uh burst goes to Lane
four and then their eight which is their
four and then their eight which is their
tank goes to the the off Lane so this
tank goes to the the off Lane so this
should be more the DOTA meta which is
should be more the DOTA meta which is
actually way better for this the lane
actually way better for this the lane
assignments because uh it makes it
assignments because uh it makes it
asymmetric so it makes it easier to see
asymmetric so it makes it easier to see
a
result cuz the expectation there is that
result cuz the expectation there is that
they should both push into the to the
they should both push into the to the
end of the game right because 3v
one okay let's see how fast this
one okay let's see how fast this
happens
so not particularly fast no there's a
so not particularly fast no there's a
tower that's been
tower that's been
taken it's the wrong side though that's
taken it's the wrong side though that's
supposed to be the
uh are the lane assignments
uh are the lane assignments
right I want to run this
slower I want to run this way
slower now we're going to run this where
slower now we're going to run this where
we can actually see what's going on okay
we can actually see what's going on okay
so they have three three assigned here
so they have three three assigned here
then one in
then one in
one yeah okay so this is
good this is good
right
and maybe they don't have the attack AI
and maybe they don't have the attack AI
on I think they don't have the attack AI
on I think they don't have the attack AI
on that's got to be it
reap
AI move towards basic attack so they
AI move towards basic attack so they
don't actually need any of this [ __ ] at
don't actually need any of this [ __ ] at
all
right yeah cuz that's going to set the
right yeah cuz that's going to set the
cool down to be
cool down to be
Jank so we just are going to comment all
Jank so we just are going to comment all
this skill
this skill
stuff and uh they're going to just use
stuff and uh they're going to just use
the creep AI in their assigned lane and
the creep AI in their assigned lane and
then we're going to see what that does
then we're going to see what that does
for
us should be the same thing right it's
us should be the same thing right it's
just that these guys scale so three of
just that these guys scale so three of
these pushing down one lane should equal
these pushing down one lane should equal
win you win the game we're gonna run it
win you win the game we're gonna run it
slow so I can catch bugs
slow so I can catch bugs
maybe hold
on okay so here it
is okay so they did get a wave
is okay so they did get a wave
Advantage yeah so actually on the first
Advantage yeah so actually on the first
push they got all the way to the
push they got all the way to the
tower uh and then they all went down
mid Okay so the lane assignments that
mid Okay so the lane assignments that
appear to be breaking
right yeah the lane assignments are 100%
right yeah the lane assignments are 100%
breaking
breaking
so respawn
Player move
to uh where is this breaking
to uh where is this breaking
that the lane the lane assignments get
that the lane the lane assignments get
broken move
to reap AI
oh I have to reset the way points
oh I have to reset the way points
right when you spawn the
right when you spawn the
creep you reset their Waypoint to
creep you reset their Waypoint to
zero
right we
do let's see if that fixes it because if
do let's see if that fixes it because if
they were all going down mid then it's
they were all going down mid then it's
not going to
work
work
okay so here we go here's our F first
okay so here we go here's our F first
push they get pretty far right they get
push they get pretty far right they get
all the way to the the tower and here
all the way to the the tower and here
they come
back uh but wait is this
working yes it is I should probably swap
working yes it is I should probably swap
the colors with the
the colors with the
creeps um because the gray ones
creeps um because the gray ones
are are the heroes in this case so
are are the heroes in this case so
they've pushed to the
tower the thing is they are
trickling they're only level four as
trickling they're only level four as
well which I base the scaling off of
well which I base the scaling off of
DOTA so this would be very early to take
DOTA so this would be very early to take
a tower
anyways uh radiant is now level 3.4 dire
anyways uh radiant is now level 3.4 dire
is level 5.4 on
is level 5.4 on
average I don't know why there's such a
average I don't know why there's such a
big difference but hey who knows maybe
big difference but hey who knows maybe
there's some weird as
symetry okay they're pushing to the
symetry okay they're pushing to the
tower they're having a hard time it
tower they're having a hard time it
looks like getting past the
looks like getting past the
tower which is reasonable because towers
tower which is reasonable because towers
are strong they do a lot of damage
they are pushing all the way to the
they are pushing all the way to the
towers
towers
though and then mid
though and then mid
is H not
much they pulled a neutral creep and it
much they pulled a neutral creep and it
was just hitting them that was funny
so this is crashing for some reason hold
on hopefully the computer doesn't go
on hopefully the computer doesn't go
down this is ridiculous
literally not letting me kill
it uh they should not be oing though
it uh they should not be oing though
that's
that's
weird I don't think I was appending the
weird I don't think I was appending the
frames to
frames to
this yeah this is locked
this yeah this is locked
up there we go this is
where's the stupid python kill
script I don't know why that's
script I don't know why that's
happening I should not be um saving the
happening I should not be um saving the
frames
there you go it's the only one that
there you go it's the only one that
works I don't know
why
why
um that's a little bit of a bummer
um that's a little bit of a bummer
what's
happening yeah I'm not a I'm not saving
happening yeah I'm not a I'm not saving
the
the
frames right
that should not be ramping memory usage
that should not be ramping memory usage
something's wrong can't be any leaks we
something's wrong can't be any leaks we
don't allocate any memory dynamically so
don't allocate any memory dynamically so
something's just being cashed
something's just being cashed
[Music]
weird let's watch what happens
weird let's watch what happens
here so we're not going to play it we're
here so we're not going to play it we're
just going to watch what happens when
just going to watch what happens when
they play it for
they play it for
us so here we have our bottom safe
Lane we
fight right I'm not allowed to have the
fight right I'm not allowed to have the
mouse outside of the
mouse outside of the
screen I haven't fixed that bug yet
screen I haven't fixed that bug yet
that's just a render bug
okay so we should see them attacking
right yep lots of
right yep lots of
damage I saw him getting
chunked I don't know what killed us at
chunked I don't know what killed us at
the end there that was a lot of burst
the end there that was a lot of burst
damage to be
taking looks like they get stuck on the
taking looks like they get stuck on the
tower way point for just a
moment and
moment and
then we are level two now so we have 600
then we are level two now so we have 600
Health do a little bit more
damage okay we died at a relatively
damage okay we died at a relatively
reasonable rate inside of a full pack of
reasonable rate inside of a full pack of
minions
right not getting that much xp but then
right not getting that much xp but then
again I have it set right now so you
again I have it set right now so you
only get XP on last
hits okay
hits okay
I saw it did a lot of damage and tanked
I saw it did a lot of damage and tanked
a bunch of
stuff I'm not seeing anything
stuff I'm not seeing anything
immediately wrong um it looks like I'm
immediately wrong um it looks like I'm
going to have to fix that leak but um in
going to have to fix that leak but um in
the meantime I'm guessing it's based on
the meantime I'm guessing it's based on
frames and not simulation steps so I'm
frames and not simulation steps so I'm
just going to run it super fast and I'm
just going to run it super fast and I'm
going to run it in the uh Raab mode
okay so here we
okay so here we
go we should be able to watch Towers
go we should be able to watch Towers
being taken
it does look like occasionally the AI
it does look like occasionally the AI
gets bugged because I can see on the
gets bugged because I can see on the
left there's a player that's just
Frozen radiant now has level 24 players
Frozen radiant now has level 24 players
they should absolutely be taking this
they should absolutely be taking this
bottom
Tower dire's caught
up let me get HTP just to make sure
up let me get HTP just to make sure
we're
we're
not killing our memory no we're fine
not killing our memory no we're fine
whatever it was that caused that before
whatever it was that caused that before
doesn't look like it was just uh we are
doesn't look like it was just uh we are
actually leaking memory very slowly
actually leaking memory very slowly
though
we'll kill it way before then no
worries what the heck is going on why
worries what the heck is going on why
aren't they taking
Towers oh there we
Towers oh there we
go radiant just took the uh their first
go radiant just took the uh their first
Tower in safe
Lane about time
oh and dire's taken one as well I just
oh and dire's taken one as well I just
didn't notice
it so yeah this is exactly how it's
it so yeah this is exactly how it's
supposed to work it's just being
supposed to work it's just being
slow uh I would expect this to have
slow uh I would expect this to have
happened by now so I guess the scaling
happened by now so I guess the scaling
is just off
