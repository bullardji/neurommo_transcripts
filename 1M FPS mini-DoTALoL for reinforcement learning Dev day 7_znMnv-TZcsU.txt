Kind: captions
Language: en
okay it looks like it
reconnected is it
working looks like
it yeah okay we're back up that's so
it yeah okay we're back up that's so
obnoxious
it like Cuts up my stream and like just
it like Cuts up my stream and like just
like boots everybody off of
like boots everybody off of
it it's really obnoxious
they're using a vector for the nodes
welcome
welcome
back don't know I don't know what's
back don't know I don't know what's
wrong with this
wrong with this
thing I think I'm dropping xinity
thing I think I'm dropping xinity
they're like they're charging me for a
they're like they're charging me for a
gig and giving me 100 megab uh
megabits and it's not even stable
we have a set of
we have a set of
points we want to build it such that
points we want to build it such that
every leite
every leite
node contains exactly one
node contains exactly one
point which is not always possible
yeah so here's your node which is 2 by
yeah so here's your node which is 2 by
two
all the nodes is a single
all the nodes is a single
array and use array indices as nodes
okay that's kind of
okay that's kind of
cool that's giv me some ideas this is
cool that's giv me some ideas this is
kind of like a heap right
faster
faster
deletion
mhm you need to be able to look up
mhm you need to be able to look up
the indices though don't
you we need to be a look up the indices
you we need to be a look up the indices
was the hard
thing wait do I even need a recursive
thing wait do I even need a recursive
tree there's absolutely no reason I need
tree there's absolutely no reason I need
a recursive tree
a recursive tree
right am I just being dumb
here yeah
wait I really just need this find like
wait I really just need this find like
this partition tree don't I like I need
this partition tree don't I like I need
the coarsest partition
tree okay let me think about
that so if I just have a list of
if I just have a list of all of the uh
if I just have a list of all of the uh
the agents in a chunk essentially if I
the agents in a chunk essentially if I
just use a chunk system instead of a
just use a chunk system instead of a
recursive
recursive
system and then I just check current
system and then I just check current
chunk and adjacent chunks
chunk and adjacent chunks
right I think that solves The Entity
right I think that solves The Entity
loading
loading
problem that does solve The Entity
problem that does solve The Entity
loading
problem so
the only thing I need to figure out is
the only thing I need to figure out is
essentially like the
essentially like the
vector you need something like the C++
vector you need something like the C++
Vector don't
you which can
you which can
be what's the uh what's the data
be what's the uh what's the data
structure for a C++ vector
dynamically resizing
dynamically resizing
array list is a doubly linked
array list is a doubly linked
list and the set is
list and the set is
a that's actually really weird that a
a that's actually really weird that a
set is a red black tree that's funny
um this is what I want is I want a list
um this is what I want is I want a list
I wanted just a doubly link list
I really don't want to have to use the
I really don't want to have to use the
C++
API it doesn't even need to be doubly
linked but yeah you need you need some
linked but yeah you need you need some
data structure that you
can actually a doubly linked list is not
can actually a doubly linked list is not
great is
great is
it see the problem with wait does this
work okay I can see in my head how this
work okay I can see in my head how this
works
works
algorithmically but from just an
algorithmically but from just an
implementation perspective this is
implementation perspective this is
pretty
pretty
tricky Welcome Back YouTube folks we're
tricky Welcome Back YouTube folks we're
online
online
um you know what since I've just kind of
um you know what since I've just kind of
been sitting here thinking out loud for
been sitting here thinking out loud for
a bunch I'm going to diagram all this
a bunch I'm going to diagram all this
cuz there's kind of a cool algorithmic
cuz there's kind of a cool algorithmic
thing that you can do here I'm sure this
thing that you can do here I'm sure this
has been done in other games and
has been done in other games and
stuff but like this
stuff but like this
is I mean it's an interesting and very
is I mean it's an interesting and very
very performance sensitive thing so let
very performance sensitive thing so let
me let me draw this out for you
guys I wish there were a link I could
guys I wish there were a link I could
just paste in chat for this this would
just paste in chat for this this would
would be funny okay anyways so you have
would be funny okay anyways so you have
your game board right I'm going to draw
your game board right I'm going to draw
this over
here now right
here now right
now the way that I do this game
now the way that I do this game
board um I just divide it up into tiles
board um I just divide it up into tiles
so I mean this thing is this thing is
so I mean this thing is this thing is
tile you can just pretend each of these
tile you can just pretend each of these
little uh gray or white cells as a
little uh gray or white cells as a
tile and it's pretty darn expensive to
tile and it's pretty darn expensive to
do nearest uh neighbor checks not
do nearest uh neighbor checks not
nearest neighbor checks it's pretty darn
nearest neighbor checks it's pretty darn
expensive to compute like all of the
expensive to compute like all of the
agents within a 5x5 around you because
agents within a 5x5 around you because
you have to look through all the
you have to look through all the
individual
individual
tiles so what I could do is I could
tiles so what I could do is I could
partition this up into chunks
like this and then let's say that you're
like this and then let's say that you're
right here somewhere your agent is
right here somewhere your agent is
here then

Kind: captions
Language: en
okay it looks like it
reconnected is it
working looks like
it yeah okay we're back up that's so
it yeah okay we're back up that's so
obnoxious
it like Cuts up my stream and like just
it like Cuts up my stream and like just
like boots everybody off of
like boots everybody off of
it it's really obnoxious
they're using a vector for the nodes
welcome
welcome
back don't know I don't know what's
back don't know I don't know what's
wrong with this
wrong with this
thing I think I'm dropping xinity
thing I think I'm dropping xinity
they're like they're charging me for a
they're like they're charging me for a
gig and giving me 100 megab uh
megabits and it's not even stable
we have a set of
we have a set of
points we want to build it such that
points we want to build it such that
every leite
every leite
node contains exactly one
node contains exactly one
point which is not always possible
yeah so here's your node which is 2 by
yeah so here's your node which is 2 by
two
all the nodes is a single
all the nodes is a single
array and use array indices as nodes
okay that's kind of
okay that's kind of
cool that's giv me some ideas this is
cool that's giv me some ideas this is
kind of like a heap right
faster
faster
deletion
mhm you need to be able to look up
mhm you need to be able to look up
the indices though don't
you we need to be a look up the indices
you we need to be a look up the indices
was the hard
thing wait do I even need a recursive
thing wait do I even need a recursive
tree there's absolutely no reason I need
tree there's absolutely no reason I need
a recursive tree
a recursive tree
right am I just being dumb
here yeah
wait I really just need this find like
wait I really just need this find like
this partition tree don't I like I need
this partition tree don't I like I need
the coarsest partition
tree okay let me think about
that so if I just have a list of
if I just have a list of all of the uh
if I just have a list of all of the uh
the agents in a chunk essentially if I
the agents in a chunk essentially if I
just use a chunk system instead of a
just use a chunk system instead of a
recursive
recursive
system and then I just check current
system and then I just check current
chunk and adjacent chunks
chunk and adjacent chunks
right I think that solves The Entity
right I think that solves The Entity
loading
loading
problem that does solve The Entity
problem that does solve The Entity
loading
problem so
the only thing I need to figure out is
the only thing I need to figure out is
essentially like the
essentially like the
vector you need something like the C++
vector you need something like the C++
Vector don't
you which can
you which can
be what's the uh what's the data
be what's the uh what's the data
structure for a C++ vector
dynamically resizing
dynamically resizing
array list is a doubly linked
array list is a doubly linked
list and the set is
list and the set is
a that's actually really weird that a
a that's actually really weird that a
set is a red black tree that's funny
um this is what I want is I want a list
um this is what I want is I want a list
I wanted just a doubly link list
I really don't want to have to use the
I really don't want to have to use the
C++
API it doesn't even need to be doubly
linked but yeah you need you need some
linked but yeah you need you need some
data structure that you
can actually a doubly linked list is not
can actually a doubly linked list is not
great is
great is
it see the problem with wait does this
work okay I can see in my head how this
work okay I can see in my head how this
works
works
algorithmically but from just an
algorithmically but from just an
implementation perspective this is
implementation perspective this is
pretty
pretty
tricky Welcome Back YouTube folks we're
tricky Welcome Back YouTube folks we're
online
online
um you know what since I've just kind of
um you know what since I've just kind of
been sitting here thinking out loud for
been sitting here thinking out loud for
a bunch I'm going to diagram all this
a bunch I'm going to diagram all this
cuz there's kind of a cool algorithmic
cuz there's kind of a cool algorithmic
thing that you can do here I'm sure this
thing that you can do here I'm sure this
has been done in other games and
has been done in other games and
stuff but like this
stuff but like this
is I mean it's an interesting and very
is I mean it's an interesting and very
very performance sensitive thing so let
very performance sensitive thing so let
me let me draw this out for you
guys I wish there were a link I could
guys I wish there were a link I could
just paste in chat for this this would
just paste in chat for this this would
would be funny okay anyways so you have
would be funny okay anyways so you have
your game board right I'm going to draw
your game board right I'm going to draw
this over
here now right
here now right
now the way that I do this game
now the way that I do this game
board um I just divide it up into tiles
board um I just divide it up into tiles
so I mean this thing is this thing is
so I mean this thing is this thing is
tile you can just pretend each of these
tile you can just pretend each of these
little uh gray or white cells as a
little uh gray or white cells as a
tile and it's pretty darn expensive to
tile and it's pretty darn expensive to
do nearest uh neighbor checks not
do nearest uh neighbor checks not
nearest neighbor checks it's pretty darn
nearest neighbor checks it's pretty darn
expensive to compute like all of the
expensive to compute like all of the
agents within a 5x5 around you because
agents within a 5x5 around you because
you have to look through all the
you have to look through all the
individual
individual
tiles so what I could do is I could
tiles so what I could do is I could
partition this up into chunks
like this and then let's say that you're
like this and then let's say that you're
right here somewhere your agent is
right here somewhere your agent is
here then
