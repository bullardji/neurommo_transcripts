Kind: captions
Language: en
It's
It's
crazy how much stuff just randomly
breaks. Got
back. I don't want to ask somebody with
back. I don't want to ask somebody with
round
round
like if um software just randomly broke
like if um software just randomly broke
constantly. That's a modern
invention. All right.
For reference, I'm not even running
For reference, I'm not even running
anything weird. Like this is a standard
anything weird. Like this is a standard
like pretty much default Abuntu
install. So it's
install. So it's
like like I'm not even doing anything
like like I'm not even doing anything
where it's like you kind of expect that
where it's like you kind of expect that
it's on
it's on
you got to figure out. It's just like
you got to figure out. It's just like
bolts randomly
breaking.
breaking.
Okay, go back to this M.
anywhere else. I'm doing
this. That's
this. That's
it. I
it. I
actually I tend to prefer to put
actually I tend to prefer to put
um little things
function that
actually I think it is I think I am
actually I think it is I think I am
going to do
going to do
I think that you just kind of
like I don't know one of the things I
like I don't know one of the things I
kind of have uh noticed before you sort
kind of have uh noticed before you sort
of fight the way a language is designed
of fight the way a language is designed
to do language jankier things get I
to do language jankier things get I
think we just write out the full
think we just write out the full
conditionals try to compactify the
conditionals try to compactify the
little
function
function
read I mean technically it could be
This is not even a
turnary totally
fine. Now we have this
fine. Now we have this
pretty that function.
Um,
I actually don't think this is that
I actually don't think this is that
bad. We uh I repeat myself once, right?
bad. We uh I repeat myself once, right?
Because this is a goal and this is an
Because this is a goal and this is an
example.
fine have
this actually the way I wrote the code
this actually the way I wrote the code
the first time is not bad to see if
the first time is not bad to see if
there's anything structurally simplified
there's anything structurally simplified
here go through the agents goals we can
buy target
buy target
distance set things
This
This
is observation
computation. Extra
ops. All
right. So, I
right. So, I
think up I'm actually interested. You
think up I'm actually interested. You
need you need this piece
here. I added this random respawning
here. I added this random respawning
when I was trying to debug something. I
when I was trying to debug something. I
don't know if we need
here. This should be our
here. This should be our
baseline. 5 second
run. This will get an episode length.
high30s 37 38. Right now, what I want to
high30s 37 38. Right now, what I want to
see is if I just take this piece
out. This is kind of like an un like an
unst but I don't think we need
unst but I don't think we need
it. I want to see if it's Trains just
it. I want to see if it's Trains just
fall
regardless. Very different dynamics
regardless. Very different dynamics
actually. Right.
Hey,
Hey,
Captain Sound should work now,
right? Any reason you're logging N?
right? Any reason you're logging N?
Yes, n is the number of
Yes, n is the number of
samples that
samples that
we're I need uh this n is for uh the
we're I need uh this n is for uh the
averaging plate all the logs into one
structure be divided by now I could not
structure be divided by now I could not
print it
technically I could technically just not
technically I could technically just not
print out n but it's kind of nice
print out n but it's kind of nice
because it tells you the number of
because it tells you the number of
samples that we're estimate if you see
samples that we're estimate if you see
like 10 is
like 10 is
10. Be a pretty noisy estimate,
10. Be a pretty noisy estimate,
right? One pretty interesting thing
right? One pretty interesting thing
here. It's kind of interesting to me
here. It's kind of interesting to me
that this
that this
matters. I think if you were to train it
matters. I think if you were to train it
long enough, it would work either way,
long enough, it would work either way,
but like this unsticking thing seems
but like this unsticking thing seems
pretty
important. I think we can just start
important. I think we can just start
commenting this uh commenting this up.
Um, so what I do, this is a common
Um, so what I do, this is a common
trick. If you have an end that never
trick. If you have an end that never
resets, one thing you could like
resets, one thing you could like
randomly respawn the agents once in a
randomly respawn the agents once in a
while to unstick them. So the idea is
while to unstick them. So the idea is
like early on in training, right, they
like early on in training, right, they
might just be running into walls and
might just be running into walls and
they're not going to really get any
they're not going to really get any
training signal early on. Um, so if
training signal early on. Um, so if
every 500 steps, if they haven't gotten
every 500 steps, if they haven't gotten
any reward in the last 500 steps, I just
any reward in the last 500 steps, I just
respawn them somewhere, then you get a
respawn them somewhere, then you get a
way stronger
way stronger
policy because you don't have such bad
policy because you don't have such bad
early training data.
early training data.
Now, it's possible that with like hyper
Now, it's possible that with like hyper
pram sweeps and if I do like learning
pram sweeps and if I do like learning
rate warm-up and stuff, I might be able
rate warm-up and stuff, I might be able
to same thing anyways, but it's just a
to same thing anyways, but it's just a
very easy way to
very easy way to
like make
things very happy to announce I've added
things very happy to announce I've added
uh I've added
some that resets what's on the LSTM. No,
some that resets what's on the LSTM. No,
it doesn't. LSTM reset doesn't freaking
matter. We just ignore that and nothing
matter. We just ignore that and nothing
and like it doesn't care.
Now some of your words are
dropped. Okay.
test.
What? I think I know.
What? I think I know.
So, it's cuz I fiddled with the gain
So, it's cuz I fiddled with the gain
knob before when you told me I was
knob before when you told me I was
quiet. All right. So,
quiet. All right. So,
um I think I want it to like peak at
um I think I want it to like peak at
like -12ish.
So, I mean, this should hopefully be
So, I mean, this should hopefully be
good. If it's
good. If it's
uh let me know if this is better.
uh let me know if this is better.
Freaking audio video settings are a
Freaking audio video settings are a
pain.
So,
um I just saw some random bird go up to
um I just saw some random bird go up to
the uh the bird box and an angry
the uh the bird box and an angry
bluebird like came flying out of the box
bluebird like came flying out of the box
and chased him off.
and is now sitting century above the uh
and is now sitting century above the uh
the box.
I should probably comment up uh squared
I should probably comment up uh squared
first. So
first. So
[Music]
like you
Okay. None of these are required.
Can you explain the PyTorch I
Can you explain the PyTorch I
might be running into? Yeah. So, um
might be running into? Yeah. So, um
there's this pep that uh makes PyTorch
there's this pep that uh makes PyTorch
uh that makes Python by default.
uh that makes Python by default.
Regardless of what PyTorch you have
Regardless of what PyTorch you have
installed on your system, when you pip
installed on your system, when you pip
install a package that depends on
install a package that depends on
PyTorch for at build time, it will just
PyTorch for at build time, it will just
go fetch the default version of PyTorch.
go fetch the default version of PyTorch.
Um,
Um,
and yeah, it'll just go fetch like the
and yeah, it'll just go fetch like the
default version of PyTorch. And there's
default version of PyTorch. And there's
no way to tell it to use your system
no way to tell it to use your system
PyTorch on my side. Like there's nothing
PyTorch on my side. Like there's nothing
I can add to the file that says, hey,
I can add to the file that says, hey,
use like whatever PyTorch is already
use like whatever PyTorch is already
installed. So it'll install some version
installed. So it'll install some version
of PyTorch, build the kernels, uh the
of PyTorch, build the kernels, uh the
CUDA kernel with that and then it'll
CUDA kernel with that and then it'll
like get rid of that version of PyTorch
like get rid of that version of PyTorch
and give you back your own version of
and give you back your own version of
PyTorch when you actually run training.
PyTorch when you actually run training.
But because the kernels have been built
But because the kernels have been built
with some other version of PyTorch, if
with some other version of PyTorch, if
they're different, everything just
they're different, everything just
breaks and like you'll see like CUDA
breaks and like you'll see like CUDA
version incompatibility like compiled
version incompatibility like compiled
with different version.
genius. Dude, it's literally Let me just
genius. Dude, it's literally Let me just
show you what I've had to do, okay? Let
show you what I've had to do, okay? Let
me just show you why why this stuff is
me just show you why why this stuff is
hard and why like Python devs are just
hard and why like Python devs are just
morons. And there's a whole thread on
morons. And there's a whole thread on
this, by the way, that I found on Reddit
this, by the way, that I found on Reddit
where it's basically just a whole bunch
where it's basically just a whole bunch
of Python devs proving that they all
of Python devs proving that they all
collectively share the same two brain
cells. This is how I have to install
cells. This is how I have to install
Popper. All
right, UV. So UV is tell it to use the
right, UV. So UV is tell it to use the
version of pip that some Rust devs made
version of pip that some Rust devs made
so that it doesn't like is not horribly
so that it doesn't like is not horribly
slow. Okay, d--system, which is tell the
slow. Okay, d--system, which is tell the
UV devs that they're dumb asses for
UV devs that they're dumb asses for
requiring virtual M's by default, even
requiring virtual M's by default, even
in containers. Okay, then there's break
in containers. Okay, then there's break
system packages, which is tell the
system packages, which is tell the
Python devs that they're dumb asses for
Python devs that they're dumb asses for
requiring um virtual M's everywhere.
requiring um virtual M's everywhere.
Okay. And then there's no build
Okay. And then there's no build
isolation, which is tell the Python devs
isolation, which is tell the Python devs
that they're dumb asses for trying to
that they're dumb asses for trying to
make an extra virtual M inside of the
make an extra virtual M inside of the
virtual M that they already have for the
virtual M that they already have for the
purpose of building in order to break
purpose of building in order to break
your
your
stuff. Dash E says, don't put my random
stuff. Dash E says, don't put my random
don't put my file some random place
don't put my file some random place
where if I edit the code locally, none
where if I edit the code locally, none
of the changes are actually
of the changes are actually
reflected. And then you finally get your
reflected. And then you finally get your
package with optional arguments with a
package with optional arguments with a
very restrictive optional argument
very restrictive optional argument
system. Okay, this is what you have to
system. Okay, this is what you have to
do and there's nothing I can do about
it. So for most users, if you are using
it. So for most users, if you are using
a virtual M and you're not in the
a virtual M and you're not in the
Docker, you can get rid of these two.
Docker, you can get rid of these two.
But regardless, you're always going to
But regardless, you're always going to
get screwed by
this, which is just
like, good job.
No idea what you're on about,
Jason. This isn't even PyTorch's fault.
Jason. This isn't even PyTorch's fault.
This is just straight up like look
This is just straight up like look
there's literally and the way that you
there's literally and the way that you
would fix this even if you had to do
this.
this.
Um, so the way that you would fix
Um, so the way that you would fix
this.
Oops. So you would be able to do like
Oops. So you would be able to do like
torch. You'd be able to use like system
torch. You'd be able to use like system
torch or whatever or like make this
torch or whatever or like make this
default to their system torch or
default to their system torch or
something. But as usual, right, what
something. But as usual, right, what
they did is they added this like dumb
they did is they added this like dumb
new like dumb new feature of isolation,
new like dumb new feature of isolation,
forced it to be the default, and gave
forced it to be the default, and gave
you no way to not just like screw up
you no way to not just like screw up
everyone's workflow by
everyone's workflow by
default. Python devs are
dumb. I actually really don't mind the
dumb. I actually really don't mind the
language either. Like, Python as a
language either. Like, Python as a
language is pretty chill. It's slow as
language is pretty chill. It's slow as
hell, but it's chill. But then the
hell, but it's chill. But then the
tooling is just
horrid. Like you know all the C code I
horrid. Like you know all the C code I
just build it and it works. That's it. I
just build it and it works. That's it. I
build the code it works.
And I can write the dumbest code
And I can write the dumbest code
imaginable and still 100 times faster
imaginable and still 100 times faster
than
Python. End ramped.
I split these two out. So this
is update goals.
I can probably do like this, right?
And I got breakfast in a few. But I will
And I got breakfast in a few. But I will
be back after for the whole rest of the
be back after for the whole rest of the
day working on
stuff.
stuff.
Be cute observations.
What's the error message,
Captain? Okay. Try um Python setup.py Pi
Captain? Okay. Try um Python setup.py Pi
uh build x d-in
place. It seems like it's not building
place. It seems like it's not building
the uh kernel for
you. Just did
that. Do you not see it
building like there should be an unders?
building like there should be an unders?
So the way that it should work,
So the way that it should work,
right, there should be this underscore C
right, there should be this underscore C
file here,
CPython.so. And if it's not there,
CPython.so. And if it's not there,
you're not going to have the
function. You have that built.
And this is on a GPU machine as
well. I haven't gotten that error
well. I haven't gotten that error
before. That's
weird.
weird.
H. And you get like the build messages,
H. And you get like the build messages,
right?
like if I just run
this like like build
torch, you'll get the ninja
builder.c You'll see it'll build
It does the eval loop. Yeah, because
It does the eval loop. Yeah, because
that doesn't use the advantage
that doesn't use the advantage
function.
H I don't know. There could be some
H I don't know. There could be some
weird torch versioning stuff going
weird torch versioning stuff going
on.
on.
Um I'm happy to look at with look at
Um I'm happy to look at with look at
that with you, though. I do have to run
that with you, though. I do have to run
for breakfast in a couple.
for breakfast in a couple.
Um I'm trying to think what that would
be. It seems like some like torch thing
be. It seems like some like torch thing
isn't getting configured
correctly. Are you using the same um the
correctly. Are you using the same um the
same Python for build and stuff?
same Python for build and stuff?
Sometimes you have multiple Python
Sometimes you have multiple Python
versions and it like builds. It's like
versions and it like builds. It's like
does it have the right Python
does it have the right Python
version like see Python 312 if you're on
version like see Python 312 if you're on
312 or
312 or
whatever. I got to make sure that it um
whatever. I got to make sure that it um
if you have a VN it's using the right
if you have a VN it's using the right
one. If you don't it's like all
one. If you don't it's like all
that I am 311
that I am 311
everywhere should work then.
Not implemented error.
You can try I mean you can if you just
You can try I mean you can if you just
import that function and see if it
import that function and see if it
actually has a CPU back
actually has a CPU back
end or if it's just not getting
end or if it's just not getting
registered
registered
correctly. I'm going to have to look at
correctly. I'm going to have to look at
your specific setup after uh breakfast
your specific setup after uh breakfast
if you're still
around cuz we definitely want that to
around cuz we definitely want that to
work and if it doesn't we definitely
work and if it doesn't we definitely
want it to have a smooth CPU fallback.
All right, quick breakfast in a couple
All right, quick breakfast in a couple
minutes. Uh, for the folks watching, I
minutes. Uh, for the folks watching, I
will be doing RLdev for the rest of
will be doing RLdev for the rest of
today right after breakfast.
today right after breakfast.
So, you want to see that? Um, drop back
So, you want to see that? Um, drop back
by. And
by. And
also, all the stuff we build is right
also, all the stuff we build is right
here on puffer.ai. It's all free and
here on puffer.ai. It's all free and
open source. Want to help me out? are
open source. Want to help me out? are
the GitHub. You can get involved with
the GitHub. You can get involved with
development by joining the Discord.
They just commit on
dev. I could jump on a call, but I'm
dev. I could jump on a call, but I'm
literally going to have to run in a
literally going to have to run in a
minute.
Um, I have to leave.
But I will be back right after breakfast
But I will be back right after breakfast
and then we'll just we'll start right on
and then we'll just we'll start right on
that with
you. You can get rid of this function.

Kind: captions
Language: en
It's
It's
crazy how much stuff just randomly
breaks. Got
back. I don't want to ask somebody with
back. I don't want to ask somebody with
round
round
like if um software just randomly broke
like if um software just randomly broke
constantly. That's a modern
invention. All right.
For reference, I'm not even running
For reference, I'm not even running
anything weird. Like this is a standard
anything weird. Like this is a standard
like pretty much default Abuntu
install. So it's
install. So it's
like like I'm not even doing anything
like like I'm not even doing anything
where it's like you kind of expect that
where it's like you kind of expect that
it's on
it's on
you got to figure out. It's just like
you got to figure out. It's just like
bolts randomly
breaking.
breaking.
Okay, go back to this M.
anywhere else. I'm doing
this. That's
this. That's
it. I
it. I
actually I tend to prefer to put
actually I tend to prefer to put
um little things
function that
actually I think it is I think I am
actually I think it is I think I am
going to do
going to do
I think that you just kind of
like I don't know one of the things I
like I don't know one of the things I
kind of have uh noticed before you sort
kind of have uh noticed before you sort
of fight the way a language is designed
of fight the way a language is designed
to do language jankier things get I
to do language jankier things get I
think we just write out the full
think we just write out the full
conditionals try to compactify the
conditionals try to compactify the
little
function
function
read I mean technically it could be
This is not even a
turnary totally
fine. Now we have this
fine. Now we have this
pretty that function.
Um,
I actually don't think this is that
I actually don't think this is that
bad. We uh I repeat myself once, right?
bad. We uh I repeat myself once, right?
Because this is a goal and this is an
Because this is a goal and this is an
example.
fine have
this actually the way I wrote the code
this actually the way I wrote the code
the first time is not bad to see if
the first time is not bad to see if
there's anything structurally simplified
there's anything structurally simplified
here go through the agents goals we can
buy target
buy target
distance set things
This
This
is observation
computation. Extra
ops. All
right. So, I
right. So, I
think up I'm actually interested. You
think up I'm actually interested. You
need you need this piece
here. I added this random respawning
here. I added this random respawning
when I was trying to debug something. I
when I was trying to debug something. I
don't know if we need
here. This should be our
here. This should be our
baseline. 5 second
run. This will get an episode length.
high30s 37 38. Right now, what I want to
high30s 37 38. Right now, what I want to
see is if I just take this piece
out. This is kind of like an un like an
unst but I don't think we need
unst but I don't think we need
it. I want to see if it's Trains just
it. I want to see if it's Trains just
fall
regardless. Very different dynamics
regardless. Very different dynamics
actually. Right.
Hey,
Hey,
Captain Sound should work now,
right? Any reason you're logging N?
right? Any reason you're logging N?
Yes, n is the number of
Yes, n is the number of
samples that
samples that
we're I need uh this n is for uh the
we're I need uh this n is for uh the
averaging plate all the logs into one
structure be divided by now I could not
structure be divided by now I could not
print it
technically I could technically just not
technically I could technically just not
print out n but it's kind of nice
print out n but it's kind of nice
because it tells you the number of
because it tells you the number of
samples that we're estimate if you see
samples that we're estimate if you see
like 10 is
like 10 is
10. Be a pretty noisy estimate,
10. Be a pretty noisy estimate,
right? One pretty interesting thing
right? One pretty interesting thing
here. It's kind of interesting to me
here. It's kind of interesting to me
that this
that this
matters. I think if you were to train it
matters. I think if you were to train it
long enough, it would work either way,
long enough, it would work either way,
but like this unsticking thing seems
but like this unsticking thing seems
pretty
important. I think we can just start
important. I think we can just start
commenting this uh commenting this up.
Um, so what I do, this is a common
Um, so what I do, this is a common
trick. If you have an end that never
trick. If you have an end that never
resets, one thing you could like
resets, one thing you could like
randomly respawn the agents once in a
randomly respawn the agents once in a
while to unstick them. So the idea is
while to unstick them. So the idea is
like early on in training, right, they
like early on in training, right, they
might just be running into walls and
might just be running into walls and
they're not going to really get any
they're not going to really get any
training signal early on. Um, so if
training signal early on. Um, so if
every 500 steps, if they haven't gotten
every 500 steps, if they haven't gotten
any reward in the last 500 steps, I just
any reward in the last 500 steps, I just
respawn them somewhere, then you get a
respawn them somewhere, then you get a
way stronger
way stronger
policy because you don't have such bad
policy because you don't have such bad
early training data.
early training data.
Now, it's possible that with like hyper
Now, it's possible that with like hyper
pram sweeps and if I do like learning
pram sweeps and if I do like learning
rate warm-up and stuff, I might be able
rate warm-up and stuff, I might be able
to same thing anyways, but it's just a
to same thing anyways, but it's just a
very easy way to
very easy way to
like make
things very happy to announce I've added
things very happy to announce I've added
uh I've added
some that resets what's on the LSTM. No,
some that resets what's on the LSTM. No,
it doesn't. LSTM reset doesn't freaking
matter. We just ignore that and nothing
matter. We just ignore that and nothing
and like it doesn't care.
Now some of your words are
dropped. Okay.
test.
What? I think I know.
What? I think I know.
So, it's cuz I fiddled with the gain
So, it's cuz I fiddled with the gain
knob before when you told me I was
knob before when you told me I was
quiet. All right. So,
quiet. All right. So,
um I think I want it to like peak at
um I think I want it to like peak at
like -12ish.
So, I mean, this should hopefully be
So, I mean, this should hopefully be
good. If it's
good. If it's
uh let me know if this is better.
uh let me know if this is better.
Freaking audio video settings are a
Freaking audio video settings are a
pain.
So,
um I just saw some random bird go up to
um I just saw some random bird go up to
the uh the bird box and an angry
the uh the bird box and an angry
bluebird like came flying out of the box
bluebird like came flying out of the box
and chased him off.
and is now sitting century above the uh
and is now sitting century above the uh
the box.
I should probably comment up uh squared
I should probably comment up uh squared
first. So
first. So
[Music]
like you
Okay. None of these are required.
Can you explain the PyTorch I
Can you explain the PyTorch I
might be running into? Yeah. So, um
might be running into? Yeah. So, um
there's this pep that uh makes PyTorch
there's this pep that uh makes PyTorch
uh that makes Python by default.
uh that makes Python by default.
Regardless of what PyTorch you have
Regardless of what PyTorch you have
installed on your system, when you pip
installed on your system, when you pip
install a package that depends on
install a package that depends on
PyTorch for at build time, it will just
PyTorch for at build time, it will just
go fetch the default version of PyTorch.
go fetch the default version of PyTorch.
Um,
Um,
and yeah, it'll just go fetch like the
and yeah, it'll just go fetch like the
default version of PyTorch. And there's
default version of PyTorch. And there's
no way to tell it to use your system
no way to tell it to use your system
PyTorch on my side. Like there's nothing
PyTorch on my side. Like there's nothing
I can add to the file that says, hey,
I can add to the file that says, hey,
use like whatever PyTorch is already
use like whatever PyTorch is already
installed. So it'll install some version
installed. So it'll install some version
of PyTorch, build the kernels, uh the
of PyTorch, build the kernels, uh the
CUDA kernel with that and then it'll
CUDA kernel with that and then it'll
like get rid of that version of PyTorch
like get rid of that version of PyTorch
and give you back your own version of
and give you back your own version of
PyTorch when you actually run training.
PyTorch when you actually run training.
But because the kernels have been built
But because the kernels have been built
with some other version of PyTorch, if
with some other version of PyTorch, if
they're different, everything just
they're different, everything just
breaks and like you'll see like CUDA
breaks and like you'll see like CUDA
version incompatibility like compiled
version incompatibility like compiled
with different version.
genius. Dude, it's literally Let me just
genius. Dude, it's literally Let me just
show you what I've had to do, okay? Let
show you what I've had to do, okay? Let
me just show you why why this stuff is
me just show you why why this stuff is
hard and why like Python devs are just
hard and why like Python devs are just
morons. And there's a whole thread on
morons. And there's a whole thread on
this, by the way, that I found on Reddit
this, by the way, that I found on Reddit
where it's basically just a whole bunch
where it's basically just a whole bunch
of Python devs proving that they all
of Python devs proving that they all
collectively share the same two brain
cells. This is how I have to install
cells. This is how I have to install
Popper. All
right, UV. So UV is tell it to use the
right, UV. So UV is tell it to use the
version of pip that some Rust devs made
version of pip that some Rust devs made
so that it doesn't like is not horribly
so that it doesn't like is not horribly
slow. Okay, d--system, which is tell the
slow. Okay, d--system, which is tell the
UV devs that they're dumb asses for
UV devs that they're dumb asses for
requiring virtual M's by default, even
requiring virtual M's by default, even
in containers. Okay, then there's break
in containers. Okay, then there's break
system packages, which is tell the
system packages, which is tell the
Python devs that they're dumb asses for
Python devs that they're dumb asses for
requiring um virtual M's everywhere.
requiring um virtual M's everywhere.
Okay. And then there's no build
Okay. And then there's no build
isolation, which is tell the Python devs
isolation, which is tell the Python devs
that they're dumb asses for trying to
that they're dumb asses for trying to
make an extra virtual M inside of the
make an extra virtual M inside of the
virtual M that they already have for the
virtual M that they already have for the
purpose of building in order to break
purpose of building in order to break
your
your
stuff. Dash E says, don't put my random
stuff. Dash E says, don't put my random
don't put my file some random place
don't put my file some random place
where if I edit the code locally, none
where if I edit the code locally, none
of the changes are actually
of the changes are actually
reflected. And then you finally get your
reflected. And then you finally get your
package with optional arguments with a
package with optional arguments with a
very restrictive optional argument
very restrictive optional argument
system. Okay, this is what you have to
system. Okay, this is what you have to
do and there's nothing I can do about
it. So for most users, if you are using
it. So for most users, if you are using
a virtual M and you're not in the
a virtual M and you're not in the
Docker, you can get rid of these two.
Docker, you can get rid of these two.
But regardless, you're always going to
But regardless, you're always going to
get screwed by
this, which is just
like, good job.
No idea what you're on about,
Jason. This isn't even PyTorch's fault.
Jason. This isn't even PyTorch's fault.
This is just straight up like look
This is just straight up like look
there's literally and the way that you
there's literally and the way that you
would fix this even if you had to do
this.
this.
Um, so the way that you would fix
Um, so the way that you would fix
this.
Oops. So you would be able to do like
Oops. So you would be able to do like
torch. You'd be able to use like system
torch. You'd be able to use like system
torch or whatever or like make this
torch or whatever or like make this
default to their system torch or
default to their system torch or
something. But as usual, right, what
something. But as usual, right, what
they did is they added this like dumb
they did is they added this like dumb
new like dumb new feature of isolation,
new like dumb new feature of isolation,
forced it to be the default, and gave
forced it to be the default, and gave
you no way to not just like screw up
you no way to not just like screw up
everyone's workflow by
everyone's workflow by
default. Python devs are
dumb. I actually really don't mind the
dumb. I actually really don't mind the
language either. Like, Python as a
language either. Like, Python as a
language is pretty chill. It's slow as
language is pretty chill. It's slow as
hell, but it's chill. But then the
hell, but it's chill. But then the
tooling is just
horrid. Like you know all the C code I
horrid. Like you know all the C code I
just build it and it works. That's it. I
just build it and it works. That's it. I
build the code it works.
And I can write the dumbest code
And I can write the dumbest code
imaginable and still 100 times faster
imaginable and still 100 times faster
than
Python. End ramped.
I split these two out. So this
is update goals.
I can probably do like this, right?
And I got breakfast in a few. But I will
And I got breakfast in a few. But I will
be back after for the whole rest of the
be back after for the whole rest of the
day working on
stuff.
stuff.
Be cute observations.
What's the error message,
Captain? Okay. Try um Python setup.py Pi
Captain? Okay. Try um Python setup.py Pi
uh build x d-in
place. It seems like it's not building
place. It seems like it's not building
the uh kernel for
you. Just did
that. Do you not see it
building like there should be an unders?
building like there should be an unders?
So the way that it should work,
So the way that it should work,
right, there should be this underscore C
right, there should be this underscore C
file here,
CPython.so. And if it's not there,
CPython.so. And if it's not there,
you're not going to have the
function. You have that built.
And this is on a GPU machine as
well. I haven't gotten that error
well. I haven't gotten that error
before. That's
weird.
weird.
H. And you get like the build messages,
H. And you get like the build messages,
right?
like if I just run
this like like build
torch, you'll get the ninja
builder.c You'll see it'll build
It does the eval loop. Yeah, because
It does the eval loop. Yeah, because
that doesn't use the advantage
that doesn't use the advantage
function.
H I don't know. There could be some
H I don't know. There could be some
weird torch versioning stuff going
weird torch versioning stuff going
on.
on.
Um I'm happy to look at with look at
Um I'm happy to look at with look at
that with you, though. I do have to run
that with you, though. I do have to run
for breakfast in a couple.
for breakfast in a couple.
Um I'm trying to think what that would
be. It seems like some like torch thing
be. It seems like some like torch thing
isn't getting configured
correctly. Are you using the same um the
correctly. Are you using the same um the
same Python for build and stuff?
same Python for build and stuff?
Sometimes you have multiple Python
Sometimes you have multiple Python
versions and it like builds. It's like
versions and it like builds. It's like
does it have the right Python
does it have the right Python
version like see Python 312 if you're on
version like see Python 312 if you're on
312 or
312 or
whatever. I got to make sure that it um
whatever. I got to make sure that it um
if you have a VN it's using the right
if you have a VN it's using the right
one. If you don't it's like all
one. If you don't it's like all
that I am 311
that I am 311
everywhere should work then.
Not implemented error.
You can try I mean you can if you just
You can try I mean you can if you just
import that function and see if it
import that function and see if it
actually has a CPU back
actually has a CPU back
end or if it's just not getting
end or if it's just not getting
registered
registered
correctly. I'm going to have to look at
correctly. I'm going to have to look at
your specific setup after uh breakfast
your specific setup after uh breakfast
if you're still
around cuz we definitely want that to
around cuz we definitely want that to
work and if it doesn't we definitely
work and if it doesn't we definitely
want it to have a smooth CPU fallback.
All right, quick breakfast in a couple
All right, quick breakfast in a couple
minutes. Uh, for the folks watching, I
minutes. Uh, for the folks watching, I
will be doing RLdev for the rest of
will be doing RLdev for the rest of
today right after breakfast.
today right after breakfast.
So, you want to see that? Um, drop back
So, you want to see that? Um, drop back
by. And
by. And
also, all the stuff we build is right
also, all the stuff we build is right
here on puffer.ai. It's all free and
here on puffer.ai. It's all free and
open source. Want to help me out? are
open source. Want to help me out? are
the GitHub. You can get involved with
the GitHub. You can get involved with
development by joining the Discord.
They just commit on
dev. I could jump on a call, but I'm
dev. I could jump on a call, but I'm
literally going to have to run in a
literally going to have to run in a
minute.
Um, I have to leave.
But I will be back right after breakfast
But I will be back right after breakfast
and then we'll just we'll start right on
and then we'll just we'll start right on
that with
you. You can get rid of this function.
