Kind: captions
Language: en
We are back live.
Hi. I want to check a couple quick
Hi. I want to check a couple quick
things and then
things and then
um and then I've had some
um and then I've had some
ideas on what I want to do.
So the
uh I think I've decided that I want to
uh I think I've decided that I want to
at least
at least
try formatting this thing as a
class out.
Let
Let
me ban that bot real
me ban that bot real
quick. I don't know why it is that only
quick. I don't know why it is that only
Twitch has the
Twitch has the
bots.
bots.
Okay, welcome folks.
Okay, welcome folks.
So, what we're going to do right
So, what we're going to do right
now, we are going to
now, we are going to
reformat a good chunk of this file uh as
reformat a good chunk of this file uh as
a
a
class. I'm going to see if that cleans
class. I'm going to see if that cleans
anything up. And I
anything up. And I
think it's kind of a tricky thing and
think it's kind of a tricky thing and
there's not really a fully right
there's not really a fully right
answer, but
um some maintenance
outside the mic is probably picking that
outside the mic is probably picking that
up. Fortunately, it'll be done soon.
Um, so yeah, the the thing that I've
Um, so yeah, the the thing that I've
realized is that
realized is that
uh in a a dynamically typed language
uh in a a dynamically typed language
actually classes start to make more
actually classes start to make more
sense because you can't get the type
sense because you can't get the type
wrong on the call signature. It's kind
wrong on the call signature. It's kind
of silly, but there are these sort of
of silly, but there are these sort of
natural things built
natural things built
into a dynamically typed language that
into a dynamically typed language that
push you towards more classes over
push you towards more classes over
strrus.
strrus.
So, I'm just going to try to do it like
So, I'm just going to try to do it like
the Python way, but cleaner, like as
the Python way, but cleaner, like as
clean as I can, and see how that looks
clean as I can, and see how that looks
versus this, which is kind of like me
versus this, which is kind of like me
doing something that would work really
doing something that would work really
well in C, but not great
This at least will get rid of this whole
This at least will get rid of this whole
mess here,
Some of these probably don't need to be
Some of these probably don't need to be
stored.
So here actually we don't want to set
So here actually we don't want to set
policy up
policy up
front because it can get compiled.
I'm trying to be very disciplined here
I'm trying to be very disciplined here
so I don't break anything. And then the
so I don't break anything. And then the
plan is to go back several passes over
plan is to go back several passes over
this uh and just cut it down as much as
this uh and just cut it down as much as
possible.
possible.
If I get this file to a thousand lines
If I get this file to a thousand lines
and everything still works as is and we
and everything still works as is and we
have like our like high quality RL PF, I
have like our like high quality RL PF, I
mean the best RL implementation in a
mean the best RL implementation in a
thousand lines is pretty darn
good. And this will do multi-achine too.
good. And this will do multi-achine too.
We haven't done much with multiachine
We haven't done much with multiachine
yet, but uh we do have support. There
yet, but uh we do have support. There
are a couple people that use it. So,
are a couple people that use it. So,
this will be perfectly good distributed
this will be perfectly good distributed
as well. Welcome YouTube
folks. I've uh been away for about a
folks. I've uh been away for about a
week. You can probably see in the
week. You can probably see in the
background with all the setup I've been
background with all the setup I've been
doing.
doing.
Why we have one
Why we have one
machine got to start somewhere, right?
machine got to start somewhere, right?
You can kind of see it behind the box on
You can kind of see it behind the box on
the rack
the rack
there. But there will be 40 machines
there. But there will be 40 machines
there reasonably soon. Hopefully soon as
there reasonably soon. Hopefully soon as
the tariffs come down
policy stuff like global step and
policy stuff like global step and
epochs. Guess that goes at the start
right here.
We're going to get rid of last log time,
We're going to get rid of last log time,
I'm sure. But for
I'm sure. But for
now, put it
there. Do I use this
I
I
do that uh that's going to get be
do that uh that's going to get be
removed. But so P3 was this like new
removed. But so P3 was this like new
advantage function I
advantage function I
guess. I guess it was an advantage
guess. I guess it was an advantage
function. Yeah. that I was experimenting
function. Yeah. that I was experimenting
with. I still think that there's
with. I still think that there's
something important in
something important in
there. I would like to come back to it
there. I would like to come back to it
even before the next release. It's just
even before the next release. It's just
going to be a matter of how many hours I
going to be a matter of how many hours I
can put in
can put in
streaming to get that all
streaming to get that all
done. Think this will go after our
setup. Or maybe here. Maybe we do put it
setup. Or maybe here. Maybe we do put it
here.
Now, a lot of these things are just
Now, a lot of these things are just
setting params from the config to params
setting params from the config to params
of the
of the
class. That's a thing to
consider if I just want to like set all
consider if I just want to like set all
of them automatically or something like
of them automatically or something like
that.
Do we still use pointer and step
etr? We don't use
this.
this.
Uh, this does not seem to get used
Uh, this does not seem to get used
anywhere else that I can
anywhere else that I can
see. Epoch or
something. Yeah. So, epoch does get
set, but step does not. So, we have
set, but step does not. So, we have
redundant ramps.
Hopefully the uh background noise is not
Hopefully the uh background noise is not
too bad here when I'm talking. I have it
too bad here when I'm talking. I have it
noise gated and compressed as best I
noise gated and compressed as best I
can, but there's power washing outside
can, but there's power washing outside
today. Lots of new uh setup for this
today. Lots of new uh setup for this
place.
A lot of these probably don't need to
A lot of these probably don't need to
even be assigned to the class in the
even be assigned to the class in the
first place,
first place,
right? We can just do like config is
right? We can just do like config is
self.config and then it's just
self.config and then it's just
config this instead of self do. Yeah, we
config this instead of self do. Yeah, we
can simplify quite a bit here.
All this does get used.
Okay. And we're already down
to something more uh reasonable.
mini batch
Nice. Got total agents and total
epochs. Oops.
this down here for
now. And then uh start
time and up time.
We do this after in a netit as
We do this after in a netit as
well. And ideally we would do this a
well. And ideally we would do this a
little later because uh first epoch
little later because uh first epoch
compile screws up screws us up a little
bit. Okay. So now print dashboard's
bit. Okay. So now print dashboard's
going to be a part of this
I don't like this being at the top of
I don't like this being at the top of
the file like this. But
the file like this. But
um we will see about
that just cuz like you open the file and
that just cuz like you open the file and
like you see this, right? Like what the
like you see this, right? Like what the
hell?
Hey,
welcome. Been a while by boxing.
That's
redundant. Fully set up. I don't know if
redundant. Fully set up. I don't know if
I'd say I'm fully set up. We have one
I'd say I'm fully set up. We have one
server in the background there. Uh
server in the background there. Uh
there's more equipment
there's more equipment
coming. Stuff is still a mess and needs
coming. Stuff is still a mess and needs
to be cleaned. This camera quality is
to be cleaned. This camera quality is
actually going to improve. I have a
actually going to improve. I have a
couple more cables and things
couple more cables and things
coming, but and I still don't have
coming, but and I still don't have
running water in this building. Um, but
running water in this building. Um, but
I'm like reasonably set
up. What? Oh, I think I don't think
up. What? Oh, I think I don't think
that's a scar. I think I just dropped a
that's a scar. I think I just dropped a
wrench on myself.
wrench on myself.
Uh, while I
Uh, while I
was I was helping to put the where is
was I was helping to put the where is
it? the big rack
together. But I did finally get to use
together. But I did finally get to use
the equipment uh for the first time this
the equipment uh for the first time this
morning. And it's nice All my stuff
morning. And it's nice All my stuff
right here.
I have a couple questions regarding
I have a couple questions regarding
puffer stuff. Yeah, of
puffer stuff. Yeah, of
course. I can answer things. Half the
course. I can answer things. Half the
reason I stream just here or you want me
reason I stream just here or you want me
to jump in the Discord?
Hello. Hello. Hey. How's it going? Yeah,
Hello. Hello. Hey. How's it going? Yeah,
going good. Thanks. Thanks. Yeah.
going good. Thanks. Thanks. Yeah.
Um, so I was basically trying not sure
Um, so I was basically trying not sure
if you've seen my messages in Discord,
if you've seen my messages in Discord,
but basically I've tried to uh been
but basically I've tried to uh been
working with the latest
working with the latest
dev.
dev.
Um, it's uh, but I've I've run into a
Um, it's uh, but I've I've run into a
couple of issues and I wasn't sure if
couple of issues and I wasn't sure if
this was the type of stuff that I could
this was the type of stuff that I could
uh, uh, that was just not working on my
uh, uh, that was just not working on my
own and or if I could like do any PR for
own and or if I could like do any PR for
that or if it was a non bug or
that or if it was a non bug or
something. Basically, I was trying to
something. Basically, I was trying to
run a default policy, so nonrecurrent
run a default policy, so nonrecurrent
uh policy, and I've been using the I
uh policy, and I've been using the I
think it was in a cleanl or model uh pi
think it was in a cleanl or model uh pi
file, and I've had a couple of issues
file, and I've had a couple of issues
um with the latest uh Python file where
um with the latest uh Python file where
there was missing imports, some missing
there was missing imports, some missing
torch import or something like that.
torch import or something like that.
Let's see.
Let's see.
[Music]
Um, so let me link to you the exact file
Um, so let me link to you the exact file
thing. Oh, so okay. So,
thing. Oh, so okay. So,
um,
um,
uh, let me hang on. I should just switch
branches, but I've also had B try to
branches, but I've also had B try to
help me and he said like it was working
help me and he said like it was working
with Python 3
with Python 3
3.12, but I've had issues running it
3.12, but I've had issues running it
with it as well.
So, I wasn't sure. Maybe I should just
So, I wasn't sure. Maybe I should just
jump on the 2.0 O branch and just stay
jump on the 2.0 O branch and just stay
there. Maybe it's just a little bit more
there. Maybe it's just a little bit more
stable since I'm only running CPU.
stable since I'm only running CPU.
So this is buffer snake with the RNN and
So this is buffer snake with the RNN and
everything. This is now training at 2
everything. This is now training at 2
point something millisecond.
I probably didn't test it without the
I probably didn't test it without the
recurrent policy lately.
Okay. What's going on here?
Okay. What's going on here?
I think there's some remaining E3D
I think there's some remaining E3D
stuff.
stuff.
Mhm.
just some migration pains from uh you
just some migration pains from uh you
know API changes. No worries. Let me fix
know API changes. No worries. Let me fix
those.
those.
Okay. Yeah. That's the point. No, no,
Okay. Yeah. That's the point. No, no,
this is the point. Like I break stuff in
this is the point. Like I break stuff in
dev, right? But like I don't do like
dev, right? But like I don't do like
really comprehensive testing or anything
really comprehensive testing or anything
like that on dev, but like you I it
like that on dev, but like you I it
should be very easy for you to just do
should be very easy for you to just do
this and I'll just fix it live for you
this and I'll just fix it live for you
really quick, right? Because like I
really quick, right? Because like I
didn't test the non-recurrent policy.
didn't test the non-recurrent policy.
Oops, I forgot. Right. Yeah, that makes
Oops, I forgot. Right. Yeah, that makes
total sense. So, basically my question
total sense. So, basically my question
is uh is it better if I wait for you to
is uh is it better if I wait for you to
be on stream and I I do it like this way
be on stream and I I do it like this way
or or is it okay for me to just fix it
or or is it okay for me to just fix it
myself and and PR when it's like as easy
myself and and PR when it's like as easy
as this? For for instance, you can do
as this? For for instance, you can do
that as well either way. Yeah. I mean,
that as well either way. Yeah. I mean,
it's just like I've mostly been away for
it's just like I've mostly been away for
the last week, which is not common,
the last week, which is not common,
right? Because I've been like I've been
right? Because I've been like I've been
helping put stuff together and getting
helping put stuff together and getting
this stuff set up for the last week and
this stuff set up for the last week and
I just finally got um you know working
I just finally got um you know working
internet and was able to do stuff for a
internet and was able to do stuff for a
couple hours last night and that's been
couple hours last night and that's been
about the first time I've been able to
about the first time I've been able to
do anything here. But like this now just
do anything here. But like this now just
returns this
because I know there's the same uh stuff
because I know there's the same uh stuff
happening in a default policy um which
happening in a default policy um which
is well it's because there's a split
is well it's because there's a split
policy. It's the it's the default
policy. It's the it's the default
without the recurrent. There's a
without the recurrent. There's a
different code path for it. So the
different code path for it. So the
recurrent is the one that we usually use
recurrent is the one that we usually use
and that's the one that I test always.
and that's the one that I test always.
Right? But you can see here it's just
Right? But you can see here it's just
like there's this this extra thing. And
like there's this this extra thing. And
now that I'm looking at this and this
now that I'm looking at this and this
ends up being the same code everywhere,
ends up being the same code everywhere,
I'm like, okay, that's a little silly,
I'm like, okay, that's a little silly,
right? So like these things are always
right? So like these things are always
in
in
flux. I value
flux. I value
um you know, constantly improving it
um you know, constantly improving it
over having it always be stable API.
And this also looks dated.
So are we looking to get a uniform uh
So are we looking to get a uniform uh
signature of what the forward method
signature of what the forward method
returns? So action and value because
I mean this is all like I changed a
I mean this is all like I changed a
bunch of stuff right in this latest dev
bunch of stuff right in this latest dev
branch and there are reasons for it.
branch and there are reasons for it.
Like for instance, this split forward
Like for instance, this split forward
function allows us to have a much much
function allows us to have a much much
faster inference time
faster inference time
LSTM. You actually need to use two
LSTM. You actually need to use two
different you need LSTM and LSTM. So
different you need LSTM and LSTM. So
it's a little
jank and I don't like that I'm just
jank and I don't like that I'm just
having to basically copy these uh these
having to basically copy these uh these
functions either for now. But I don't
functions either for now. But I don't
want a base class either. I don't want
want a base class either. I don't want
there to be like a puffer model base
there to be like a puffer model base
class either. We got to figure that out,
class either. We got to figure that out,
right? So there are a lot of these
right? So there are a lot of these
things that are in flux.
What's going to be the difference
What's going to be the difference
between the forward and forward train?
between the forward and forward train?
for train is called is the forward path
for train is called is the forward path
that is called uh when you are training
that is called uh when you are training
and when you use the LSTM
and when you use the LSTM
uh it will be
uh it will be
different because the there's like a
different because the there's like a
CUDA optimization that has to be done
Don't know what I'm doing there.
New value is going to come
New value is going to come
back bashed
I see.
Little tricky.
It's just like there's some shape
It's just like there's some shape
differences, right?
Okay, there you go. So, that's 2.8
Okay, there you go. So, that's 2.8
mil uh 2.9 mil whatever on snake.
mil uh 2.9 mil whatever on snake.
Okay. And then if I do, let me make sure
Okay. And then if I do, let me make sure
it still works.
Yeah. Okay, there you go. And so what
Yeah. Okay, there you go. And so what
what happens if you if you decide to use
what happens if you if you decide to use
uh the the standard policy that is in
uh the the standard policy that is in
the cleanl Python file because here you
the cleanl Python file because here you
have a specific uh policy for snake but
have a specific uh policy for snake but
we used to have a bunch of policies in
we used to have a bunch of policies in
cleanl file too. I'm not sure clean.
cleanl file too. I'm not sure clean.
Okay. Yeah. I'm not sure if that's
Okay. Yeah. I'm not sure if that's
supposed to still be in use cuz which in
supposed to still be in use cuz which in
where it was uh the cleaner
where it was uh the cleaner
cleaner files. Yeah. This is this is now
cleaner files. Yeah. This is this is now
garbage. Like this these are no longer
garbage. Like this these are no longer
used.
used.
Okay. These were these didn't do
Okay. These were these didn't do
anything either. These were always just
anything either. These were always just
wrappers.
wrappers.
Yeah. Okay. So it's puffer lib models
Yeah. Okay. So it's puffer lib models
their stuff in here. We have this
their stuff in here. We have this
default
default
policy and then we have this LSTM
policy and then we have this LSTM
wrapper. And we have this comp policy
wrapper. And we have this comp policy
and we also have this reset.
and we also have this reset.
Okay. So that's where I should look for
Okay. So that's where I should look for
because I've tried to use the default
because I've tried to use the default
policy and say it wasn't working. I
policy and say it wasn't working. I
think there's some uh remaining stuff
think there's some uh remaining stuff
about E3. I mean I I've had some
about E3. I mean I I've had some
remaining stuff about A3B. Not sure.
remaining stuff about A3B. Not sure.
Okay. Hang on.
This should be default policy.
It seems to run. Okay. Well, this might
It seems to run. Okay. Well, this might
might mean something on my end, so I'll
might mean something on my end, so I'll
check. I mean, I could have missed
check. I mean, I could have missed
something as well,
something as well,
right? It's I'm not infallible. I go
right? It's I'm not infallible. I go
fast and make mistakes as a result,
fast and make mistakes as a result,
right?
Um, like you're allowed to criticize
Um, like you're allowed to criticize
stuff. Like I screw stuff up very often.
stuff. Like I screw stuff up very often.
It's just that the overall pace of
It's just that the overall pace of
progress is better as a result. Um, no,
progress is better as a result. Um, no,
it's okay. It's just Yeah, sometimes I'm
it's okay. It's just Yeah, sometimes I'm
just uh confuses to whether something on
just uh confuses to whether something on
my end or just there shouldn't be E3B at
my end or just there shouldn't be E3B at
all is the thing.
I guess this is still in here, but we
I guess this is still in here, but we
don't use these
because you basically didn't find any
because you basically didn't find any
ways to make it 3D work and so you just
ways to make it 3D work and so you just
we're not using it for now. Okay,
we're not using it for now. Okay,
I'm going to add I'm going to commit
I'm going to add I'm going to commit
these for you.
these for you.
Okay, thanks.
You can let me know if that works.
Let me know if that doesn't work.
Let me know if that doesn't work.
Yeah, just changes color, you know.
Mhm. Of course, I'm now then going to
Mhm. Of course, I'm now then going to
have to do like a jank merge to this new
have to do like a jank merge to this new
one. Oh, if I break it again, come yell
one. Oh, if I break it again, come yell
at
me. Oh, yeah. a cache. We're doing um
me. Oh, yeah. a cache. We're doing um
we're starting on a big refactor for the
we're starting on a big refactor for the
release. The main thing.
see how this looks.
Okay, so snake's working. Uh, can you
Okay, so snake's working. Uh, can you
just uh show me the latest common you
just uh show me the latest common you
used to train
used to train
carpole to make sure I'm trying that as
carpole to make sure I'm trying that as
well with the with the default?
well with the with the default?
That's it, man.
Okay. Yeah, thanks. Perfect. Okay. Yeah.
Okay. Yeah, thanks. Perfect. Okay. Yeah.
bet added
bet added
um bet like went and implemented no
um bet like went and implemented no
depth cart pull for us. It's really
depth cart pull for us. It's really
nice. It's trans in like a couple
seconds. Even like really simple stuff
seconds. Even like really simple stuff
like that is actually quite helpful to
like that is actually quite helpful to
us. Just like having classic benchmarks,
makes a difference.
And were you you're doing voids or you
And were you you're doing voids or you
on a different end?
What end were you doing? Uh I'm not the
What end were you doing? Uh I'm not the
one working on boys. I was working on
one working on boys. I was working on
and everyone has different freaking
and everyone has different freaking
usernames like literally everywhere. My
usernames like literally everywhere. My
bad. Yeah, maybe I'll maybe I'll merge
bad. Yeah, maybe I'll maybe I'll merge
them into a single one. But no, I was
them into a single one. But no, I was
working on a common pool resource, but
working on a common pool resource, but
Oh, yeah. Yeah, that's a cool length.
Oh, yeah. Yeah, that's a cool length.
Yeah, I remember we merged that. That is
Yeah, I remember we merged that. That is
a very cool end. I would like to I've
a very cool end. I would like to I've
been improving it.
I would like to see some policies doing
I would like to see some policies doing
something on that. It's like it's kind
something on that. It's like it's kind
of a tricky problem cuz it's like a
of a tricky problem cuz it's like a
delayed gratification kind of a thing.
delayed gratification kind of a thing.
Um like honestly you could probably come
Um like honestly you could probably come
up
up
with like you could probably show that
with like you could probably show that
it's kind of tricky to do that even
it's kind of tricky to do that even
without it being a multi- aent thing.
without it being a multi- aent thing.
Like does it even does it even train
Like does it even does it even train
with one agent or do they just harvest
with one agent or do they just harvest
everything?
everything?
Uh that's a good question. That would
Uh that's a good question. That would
probably be insanity, right? And it
probably be insanity, right? And it
should be very easy to configure, right?
should be very easy to configure, right?
You just pass one agent per end the
You just pass one agent per end the
config. Yeah,
I've actually spent quite a lot of time
I've actually spent quite a lot of time
trying to make them to work. But uh
trying to make them to work. But uh
yeah, they just end up harvesting
yeah, they just end up harvesting
everything. Uh so far I saw a paper on
everything. Uh so far I saw a paper on
this, right? There was just a paper on
this, right? There was just a paper on
this on like um you know agents overh
this on like um you know agents overh
harvesting the bushes or whatever. I I
harvesting the bushes or whatever. I I
don't know if it was deep mind or apples
don't know if it was deep mind or apples
or like whatever but yeah I saw I saw
or like whatever but yeah I saw I saw
something on that and now to be fair I
something on that and now to be fair I
don't know if their solution was any
don't know if their solution was any
good. Very often like these multi-aging
good. Very often like these multi-aging
problems people come up with like very
problems people come up with like very
very hacky and brittle like very fancy
very hacky and brittle like very fancy
solutions.
Okay about that I had another question
Okay about that I had another question
related to multi- aent uh like how would
related to multi- aent uh like how would
you handle dynamic number of agents in
you handle dynamic number of agents in
in the current stuff because we're
in the current stuff because we're
flattening everything, right? But let's
flattening everything, right? But let's
say you have a uh I mean in NMO I'm sure
say you have a uh I mean in NMO I'm sure
you have a um
you have a um
in old dynamic number of in old versions
in old dynamic number of in old versions
I did in the new version I didn't want
I did in the new version I didn't want
to deal with it. Um so to answer your
to deal with it. Um so to answer your
question in 2.0
question in 2.0
And in some of the not too too recent
And in some of the not too too recent
dev branches, it's kind of just works
dev branches, it's kind of just works
because you set this mask and um
because you set this mask and um
anything that is not like anything
anything that is not like anything
that's masked out just doesn't get added
that's masked out just doesn't get added
to the experience buffer. But in the
to the experience buffer. But in the
more recent stuff, uh we restructured
more recent stuff, uh we restructured
the experience buffer in a way that
the experience buffer in a way that
makes that a little bit harder. So we're
makes that a little bit harder. So we're
kind of punting on that for now. Uh that
kind of punting on that for now. Uh that
said, that is going to be something that
said, that is going to be something that
we're going to uh to look at like how we
we're going to uh to look at like how we
adjust for. I don't think it's going to
adjust for. I don't think it's going to
be that bad. I think we're going to end
be that bad. I think we're going to end
up like with a couple padding segments
up like with a couple padding segments
or something in the data. Um because we
or something in the data. Um because we
have GPU drive, right? And GPU drive uh
have GPU drive, right? And GPU drive uh
GPU drive actually
GPU drive actually
requires this type of stuff to
requires this type of stuff to
work. But you know, ideally in the
work. But you know, ideally in the
current form, GPU drive requires that.
current form, GPU drive requires that.
in general like whenever possible I try
in general like whenever possible I try
to restructure MS to not do that because
to restructure MS to not do that because
from an infrastructure perspective like
from an infrastructure perspective like
we can handle it but it's like so much
we can handle it but it's like so much
easier and cleaner to handle things
easier and cleaner to handle things
efficiently when you don't have that.
efficiently when you don't have that.
So whenever you have an M that's like
So whenever you have an M that's like
yeah I could just respawn the agents and
yeah I could just respawn the agents and
then at EVEL time it'll still work for
then at EVEL time it'll still work for
the most part right like they'll still
the most part right like they'll still
want to do the same thing even if agents
want to do the same thing even if agents
are like cut out it's
are like cut out it's
fine but it's it's not even an algorithm
fine but it's it's not even an algorithm
problem at all. It's literally just
problem at all. It's literally just
annoying infrastructure buffers.
annoying infrastructure buffers.
Yeah, because even then in the current
Yeah, because even then in the current
way that you're uh dealing with it, it
way that you're uh dealing with it, it
means that you have to start with a max
means that you have to start with a max
number of agent uh and you're just
number of agent uh and you're just
masking out the ones that aren't there
masking out the ones that aren't there
anymore. That's basically it, right? But
anymore. That's basically it, right? But
yeah, but like this is like this is not
yeah, but like this is like this is not
even an RL problem. This is like a
even an RL problem. This is like a
computer's problem, right? You want to
computer's problem, right? You want to
have your your you want to have your
have your your you want to have your
buffers pre-allocated to that if you
buffers pre-allocated to that if you
want stuff to be fast and like all the
want stuff to be fast and like all the
frameworks that do this like dynamically
frameworks that do this like dynamically
like oh yeah we just store stuff in a
like oh yeah we just store stuff in a
list and then you train at a thousand
list and then you train at a thousand
steps per second yay like no don't do
steps per second yay like no don't do
that.
that.
So it's probably just going to be like
So it's probably just going to be like
try to do it as little as possible
try to do it as little as possible
combined with relatively efficient
combined with relatively efficient
masking.
masking.
Okay. But like this has become a lot
Okay. But like this has become a lot
less interesting of a problem to me
less interesting of a problem to me
frankly because like I kind of realized
frankly because like I kind of realized
that that annoying like variable number
that that annoying like variable number
of agents thing. It was the
of agents thing. It was the
infrastructure difficulty associated
infrastructure difficulty associated
with that was masking a lot of like the
with that was masking a lot of like the
cool multi-agent problems that you'd
cool multi-agent problems that you'd
want to think about. So like you know
want to think about. So like you know
you were trying to think about cool
you were trying to think about cool
multi-agent problems and collaboration
multi-agent problems and collaboration
and things and actually you didn't get
and things and actually you didn't get
stuck on those at all. you just got
stuck on those at all. you just got
stuck on the infrastructure associated
stuck on the infrastructure associated
with variable num agents. If you just do
with variable num agents. If you just do
it with fixed num agents, things get a
it with fixed num agents, things get a
lot easier. You just have to like
lot easier. You just have to like
rethink some MS a little tiny bit
cuz it's a little get stuck, right? It's
cuz it's a little get stuck, right? It's
a little silly to get stuck on a uh like
a little silly to get stuck on a uh like
a fundamental research problem because
a fundamental research problem because
you can't implement a buffer or
you can't implement a buffer or
whatever.
Well, I mean, okay, well, you could
Well, I mean, okay, well, you could
basically have like a fixed size buffer
basically have like a fixed size buffer
and then not even you don't even have to
and then not even you don't even have to
respond the agents basically and just
respond the agents basically and just
max mask them, right? Cuz I mean, you
max mask them, right? Cuz I mean, you
might have environments where it's
might have environments where it's
important for you,
important for you,
you can reuse uh the same row. Yeah.
you can reuse uh the same row. Yeah.
Yeah. Right. Right. Right. I see. Okay.
Yeah. Right. Right. Right. I see. Okay.
Yeah. So, that's fine. That probably
Yeah. So, that's fine. That probably
fixes 99% of the It does the dynamic
fixes 99% of the It does the dynamic
number. Okay. Cool. Cool. Thanks. So, I
number. Okay. Cool. Cool. Thanks. So, I
mean, you can get really pedantic about
it. I'm getting sprayed with power
it. I'm getting sprayed with power
washer. The window in front of me is
washer. The window in front of me is
um let's hope that those don't break
um let's hope that those don't break
with all my stuff
with all my stuff
here.
here.
Uh yeah, like you can get really
Uh yeah, like you can get really
pedantic about it and try to handle
pedantic about it and try to handle
every single possible case or whatever.
every single possible case or whatever.
And like I think petting zoo did this
And like I think petting zoo did this
like there's this knights archer zombies
like there's this knights archer zombies
m that has like heterogeneous spaces and
m that has like heterogeneous spaces and
like variable numb agents like all the
like variable numb agents like all the
things ever and like yeah look it works
things ever and like yeah look it works
we can handle it and yeah but you can
we can handle it and yeah but you can
train at like zero steps a second or
train at like zero steps a second or
whatever. So like there's not much point
whatever. So like there's not much point
there's really not much point in
there's really not much point in
handling everything if it's going to be
handling everything if it's going to be
slow is kind of what I figured out.
Yeah, about that. Is the MI agent uh
Yeah, about that. Is the MI agent uh
from meta stuff binding supposed to work
from meta stuff binding supposed to work
or
or
the what agent?
the what agent?
Uh M agent or MA agents? Not sure how to
Uh M agent or MA agents? Not sure how to
M agent is not meta. Those are totally
M agent is not meta. Those are totally
different.
different.
Okay. I I thought I was from meta. Uh
Okay. I I thought I was from meta. Uh
but yes, I see there there are bindings
but yes, I see there there are bindings
for meta. MTA is not from me. It's not
for meta. MTA is not from me. It's not
from Facebook. It's a just like a
from Facebook. It's a just like a
different new like small uh research
different new like small uh research
group. Um Okay. And
group. Um Okay. And
it's it's kind of like this factoryesque
it's it's kind of like this factoryesque
envir where like agents are collecting
envir where like agents are collecting
resources and converting resources to
resources and converting resources to
energy and like converting one thing to
energy and like converting one thing to
another. Um and yes, it does work. Now,
another. Um and yes, it does work. Now,
we've recently had a little bit of a
we've recently had a little bit of a
difficulty reproducing the really good
difficulty reproducing the really good
training run that I set a couple weeks
training run that I set a couple weeks
ago. I suspect something just changed
ago. I suspect something just changed
under the hood in like one of the M uh
under the hood in like one of the M uh
the M commits or something, but uh you
the M commits or something, but uh you
know, we'll be getting that back because
know, we'll be getting that back because
we did set soda on the on that
we did set soda on the on that
environment a couple weeks ago or a week
environment a couple weeks ago or a week
agoish before I left and it's very
agoish before I left and it's very
unusual for me to like lose a run like
unusual for me to like lose a run like
that as well because like I'm usually
that as well because like I'm usually
pretty good about tracking that stuff.
pretty good about tracking that stuff.
So, uh I I don't know. I suspect
So, uh I I don't know. I suspect
something changed.
I don't know what it would have been,
I don't know what it would have been,
but it's probably something dumb. Like,
but it's probably something dumb. Like,
you know, there was a specific commit I
you know, there was a specific commit I
trained it on and then I probably like
trained it on and then I probably like
pulled a new end version when I was like
pulled a new end version when I was like
messing around with Aaron on learning
messing around with Aaron on learning
progress and then like I don't know like
progress and then like I don't know like
something got reintroduced at some
something got reintroduced at some
point. It's probably something done like
point. It's probably something done like
that.
Okay, I see.
Okay, I see.
Right. Yeah, basically I just wanted to
Right. Yeah, basically I just wanted to
start doing some experiment about uh ex
start doing some experiment about uh ex
different exploration strategies and
different exploration strategies and
that's why I've been uh trying really to
that's why I've been uh trying really to
be able to run most ms in perfect if you
be able to run most ms in perfect if you
want uh exploration stuff the active
want uh exploration stuff the active
area the active research that we have on
area the active research that we have on
that is with Diane
that is with Diane
um I I've seen it do things on snake I
um I I've seen it do things on snake I
have not seen it make snake learn better
have not seen it make snake learn better
stuff but you can definitely get it so
stuff but you can definitely get it so
that you can visually tell apart which
that you can visually tell apart which
which uh policy is which
which uh policy is which
snake. So I think that there is
snake. So I think that there is
something in it's not quite dian like
something in it's not quite dian like
the original paper. I've done some
the original paper. I've done some
modifications to it but there's
modifications to it but there's
something there about like training
something there about like training
visually rec uh distinct
visually rec uh distinct
policies that should allow you to
policies that should allow you to
uh that should allow you to like get
uh that should allow you to like get
better
better
exploration. That's what I would
exploration. That's what I would
suggest.
Okay. C can you uh say again who's the
Okay. C can you uh say again who's the
the other dude working on this on what
the other dude working on this on what
on Diane? No, Dian's a paper name.
D. Yeah. Yeah. So D like Diane is the
D. Yeah. Yeah. So D like Diane is the
the paper name. This is I was working on
the paper name. This is I was working on
that one. I don't have anyone else who
that one. I don't have anyone else who
is working on Diane specifically. though
is working on Diane specifically. though
the meta guys are interested uh in
the meta guys are interested uh in
Diane. I can tell you that because like
Diane. I can tell you that because like
they also would like exploration stuff
they also would like exploration stuff
working. I know exploration is kind of a
working. I know exploration is kind of a
tough one because there's been so much
tough one because there's been so much
bad research on like exploration in RL
bad research on like exploration in RL
because it's just a not a it's often not
because it's just a not a it's often not
a well- definfined problem, right? Oh,
a well- definfined problem, right? Oh,
we want ex agents that explore more.
we want ex agents that explore more.
Well, what does that mean? Right? It's a
Well, what does that mean? Right? It's a
tabularasa agent. Oh, well, they should
tabularasa agent. Oh, well, they should
go through all the rooms. Well, how
go through all the rooms. Well, how
should they know how to do that? Like by
should they know how to do that? Like by
what mechanism should they know how to
what mechanism should they know how to
do that? It's a tabularasa agent. How
do that? It's a tabularasa agent. How
should they learn that? Like what is the
should they learn that? Like what is the
objective that they're maximizing? Oh,
objective that they're maximizing? Oh,
exploration. What like it's circular,
exploration. What like it's circular,
right? So like people try to maximize
right? So like people try to maximize
like surprisal which you can actually
like surprisal which you can actually
quantify. Um you can quantify that in
quantify. Um you can quantify that in
terms of like value function changes or
terms of like value function changes or
you know error and error in predictions
you know error and error in predictions
or stuff like that. Um people try to do
or stuff like that. Um people try to do
like countsbased stuff which kind of
like countsbased stuff which kind of
janky from what I've seen. It works only
janky from what I've seen. It works only
when you have explicit counts otherwise
when you have explicit counts otherwise
it doesn't. Um people have tried to do
it doesn't. Um people have tried to do
noise based stuff which is like R&D
noise based stuff which is like R&D
style work which is a little bit janky
style work which is a little bit janky
as well. Uh the thing that's been the
as well. Uh the thing that's been the
most interesting to me I think is like
most interesting to me I think is like
uh behavioral diversity with the Diane
uh behavioral diversity with the Diane
line of stuff. And we have some
line of stuff. And we have some
modifications that I think are pretty
modifications that I think are pretty
close to doing something in there uh in
close to doing something in there uh in
here. But like it's the type of thing
here. But like it's the type of thing
where I would probably have to go put
where I would probably have to go put
together a test M that's just like an
together a test M that's just like an
empty room with an agent or whatever and
empty room with an agent or whatever and
just see like can you get different
just see like can you get different
agents to go in different directions or
agents to go in different directions or
something basic like even something that
something basic like even something that
simple is
simple is
not like you don't get that by default.
not like you don't get that by default.
Yeah, I was thinking about basically you
Yeah, I was thinking about basically you
would need uh probably to make better
would need uh probably to make better
progress you need a dedicated amp which
progress you need a dedicated amp which
uh probably makes things easier to
uh probably makes things easier to
develop. Uh like a very simple one
develop. Uh like a very simple one
actually as you said doesn't need to be
actually as you said doesn't need to be
complicated but even just an empty room
complicated but even just an empty room
with some agents that start in the
with some agents that start in the
middle would already be something. So I
middle would already be something. So I
mean you could try I if you want to
mean you could try I if you want to
check this stuff out like go take a look
check this stuff out like go take a look
at the some of the Diane stuff that I
at the some of the Diane stuff that I
have. It's very short. It's in that
have. It's very short. It's in that
file. It's all Matt Clean Puffer file.
file. It's all Matt Clean Puffer file.
Um, you can ask me questions, whatever
Um, you can ask me questions, whatever
if you get stuck.
if you get stuck.
Sure. That would be like a good research
Sure. That would be like a good research
side stuff. And if you're trying to get
side stuff. And if you're trying to get
involved with like research side
involved with like research side
contribution, that's a good way to do it
contribution, that's a good way to do it
as well.
as well.
Yeah.
Yeah.
Okay. All
right. Anything else?
Um, okay. Yeah, actually one last
Um, okay. Yeah, actually one last
question about um multi- Asian stuff.
question about um multi- Asian stuff.
So, right now we're just uh training all
So, right now we're just uh training all
the agents are contri contributing to
the agents are contri contributing to
the same policy. Yeah. Um
uh unless I'm wrong. I think uh well all
uh unless I'm wrong. I think uh well all
the experience from every agents is just
the experience from every agents is just
being batched together and sent to one
being batched together and sent to one
policy and then all the agents Yeah.
policy and then all the agents Yeah.
Okay. So what would happen if you wanted
Okay. So what would happen if you wanted
to model some very independent
to model some very independent
behaviors? Let's say from a very naive
behaviors? Let's say from a very naive
point of view, you would want every
point of view, you would want every
agent to have their own policy.
agent to have their own policy.
How would you want that? So, because
How would you want that? So, because
I've done that before and I've done that
I've done that before and I've done that
like literally in 2018 or whatever, it's
like literally in 2018 or whatever, it's
not fun. And the reason it's not fun is
not fun. And the reason it's not fun is
because you're splitting your data n
because you're splitting your data n
ways now, right? You're splitting your
ways now, right? You're splitting your
data across a whole bunch of different
data across a whole bunch of different
policies. Um, there are a couple cases
policies. Um, there are a couple cases
where it makes hardware sense to do
where it makes hardware sense to do
that. If you look at some of like
that. If you look at some of like
Brennan's work on Madrona, when like the
Brennan's work on Madrona, when like the
agent batch sizes get to be so large,
agent batch sizes get to be so large,
you can't train anymore. So, like you
you can't train anymore. So, like you
may as well just train extra policies to
may as well just train extra policies to
play against. That's a thing. Um,
play against. That's a thing. Um,
there's also work that's like indicating
there's also work that's like indicating
that environment diversity is more
that environment diversity is more
important than behavior diversity. So
important than behavior diversity. So
like it might make more sense to look at
like it might make more sense to look at
like automated end randomization more
like automated end randomization more
than automated opponent randomization.
than automated opponent randomization.
Um, that I would also kind of buy. I
Um, that I would also kind of buy. I
think though if you like to your point,
think though if you like to your point,
Diane does tie in with this because what
Diane does tie in with this because what
Diane lets you do is it lets you get
Diane lets you do is it lets you get
conditionally different behavior out of
conditionally different behavior out of
the same policy. So you actually still
the same policy. So you actually still
get to share all that experience and use
get to share all that experience and use
it to train the one policy. you get way
it to train the one policy. you get way
more training data but still potentially
more training data but still potentially
get different distinct behaviors. Now
get different distinct behaviors. Now
getting that to actually work is very
getting that to actually work is very
tricky. But if you were to do that then
tricky. But if you were to do that then
you would basically eliminate the need
you would basically eliminate the need
for all forms of like historical or
for all forms of like historical or
fictitious selfplay uh league training
fictitious selfplay uh league training
like you could kind of do it all within
like you could kind of do it all within
one policy and share all the data and
one policy and share all the data and
that would be very very powerful. So
that would be very very powerful. So
that's kind of why I like the Diane line
that's kind of why I like the Diane line
because it's not just exploration it
because it's not just exploration it
also kind of solves like multi- aent
also kind of solves like multi- aent
competitive dynamics being jank at the
competitive dynamics being jank at the
same time.
same time.
Okay. Okay. But but then what would
Okay. Okay. But but then what would
happen if you were to want to model some
happen if you were to want to model some
sort of multi- aent setting let's say um
sort of multi- aent setting let's say um
I don't know you want to model some uh
I don't know you want to model some uh
urban uh citizen path or something some
urban uh citizen path or something some
social dynamics where you actually do
social dynamics where you actually do
want each agent to uh display a very
want each agent to uh display a very
different sort of behaviors
different sort of behaviors
uh maybe with uh some agents uh uh
uh maybe with uh some agents uh uh
sharing their own policy with their kids
sharing their own policy with their kids
if you were to like you know
if you were to like you know
specifically let's talk about you know
specifically let's talk about you know
social dynamics some some some sort of
social dynamics some some some sort of
uh genetic stuff that gets passed away
uh genetic stuff that gets passed away
to the child um in this case you would
to the child um in this case you would
truly want them to have a different
truly want them to have a different
policy right well then that's not even
policy right well then that's not even
going to be RL necessarily anymore if
going to be RL necessarily anymore if
you're doing genetic stuff
you're doing genetic stuff
um and also like you got to be careful
um and also like you got to be careful
because if you're just training if
because if you're just training if
you're just going to train a bunch of
you're just going to train a bunch of
policies on the same data they're going
policies on the same data they're going
to learn roughly similar stuff anyway
to learn roughly similar stuff anyway
ways subject to I mean I have a paper on
ways subject to I mean I have a paper on
that sometimes they don't but usually
that sometimes they don't but usually
they learn pretty similar stuff so like
they learn pretty similar stuff so like
it's not the first thing I would look at
it's not the first thing I would look at
let's put it that way just training
let's put it that way just training
independent policies it's like oh I want
independent policies it's like oh I want
independent behavior so I want
independent behavior so I want
independent policies that's not the
independent policies that's not the
first thing I would look to say that um
first thing I would look to say that um
because first of all each agent is being
because first of all each agent is being
computed independently and has an
computed independently and has an
independent state anyways when you have
independent state anyways when you have
a shared policy right it's not like
a shared policy right it's not like
you're it's not a joint it's very
you're it's not a joint it's very
different from like a joint policy in
different from like a joint policy in
which you're taking n observations from
which you're taking n observations from
n different agents in and then
n different agents in and then
outputting jointly n different
outputting jointly n different
decisions. No, you're still outputting,
decisions. No, you're still outputting,
you know, each agent's decisions
you know, each agent's decisions
independently and conditioned on their
independently and conditioned on their
own state.
Yep.
So, I mean like there is reason to do
So, I mean like there is reason to do
this stuff. Like if you look at league
this stuff. Like if you look at league
play style stuff, um that's definitely a
play style stuff, um that's definitely a
thing. But like I almost wonder what
thing. But like I almost wonder what
would happen with the League Play stuff
would happen with the League Play stuff
if you tried to just make it conditional
if you tried to just make it conditional
on the same policy. I actually think
on the same policy. I actually think
that there was some follow-up that might
that there was some follow-up that might
have done things like that. Um it's one
have done things like that. Um it's one
of the things I want to look into in the
of the things I want to look into in the
next like pass on re next research pass.
All right. Yeah. Well, that uh that
All right. Yeah. Well, that uh that
crit. Thanks.
crit. Thanks.
Mhm. Um, yeah. All right. I think I'm
Mhm. Um, yeah. All right. I think I'm
going to go back try to uh, you know,
going to go back try to uh, you know,
just uh make the latest step branch work
just uh make the latest step branch work
and then uh, Sounds good. Maybe I can. I
and then uh, Sounds good. Maybe I can. I
actually had a couple of improvements
actually had a couple of improvements
over my M2, so maybe I can PR that once
over my M2, so maybe I can PR that once
I'm done, right? Yeah, looking forward
I'm done, right? Yeah, looking forward
to I've just been on autopilot
to I've just been on autopilot
refactoring stuff here.
refactoring stuff here.
Yeah, I've seen that. All right, good
Yeah, I've seen that. All right, good
chat. Uh, right. Yeah,
thanks. That's cool.
thanks. That's cool.
So for folks watching, if you contribute
So for folks watching, if you contribute
to Puffer Lib and you have
to Puffer Lib and you have
questions, that's how easy it is to get
questions, that's how easy it is to get
help when you get stuck.
to one message on. I do have one meeting
to one message on. I do have one meeting
that is going to be scheduled
today. Often have meetings that are just
today. Often have meetings that are just
scheduled same day. I honestly think
scheduled same day. I honestly think
that's better. You should not have such
that's better. You should not have such
a full calendar that you can't just like
a full calendar that you can't just like
schedule stuff same day.
schedule stuff same day.
I get way more stuff done when I have
I get way more stuff done when I have
like fully open calendar and like no
like fully open calendar and like no
pressure on any specific Okay.
And then this roll out
And then this roll out
thing is separate,
thing is separate,
right? This roll out thing is
right? This roll out thing is
separate. So that's everything that
separate. So that's everything that
needs to be tabbed. Uh let's just see
needs to be tabbed. Uh let's just see
what I forgot.
Uh, what is wrong with
this? Oh,
oops. All right. So, we have to fix the
oops. All right. So, we have to fix the
call signatures.
I'll just call this
puffel. But like now that I have these
puffel. But like now that I have these
two files together, I can kind of see
two files together, I can kind of see
that they're like they're coupled kind
that they're like they're coupled kind
of weirdly, right?
of weirdly, right?
like the amount of stuff that I'm like
like the amount of stuff that I'm like
grabbing from Puffarel here.
That should be
off. Okay, that's kind of jank.
Ah,
Thomas. Isn't that like
Thomas. Isn't that like
ridiculous that you can do that? You can
ridiculous that you can do that? You can
just leave a trailing comment and then
just leave a trailing comment and then
like the tpple evaluates to true.
And I actually don't hate Python as much
And I actually don't hate Python as much
as like a lot of devs do, but when you
as like a lot of devs do, but when you
start writing too much
Python, there's definitely such thing as
Python, there's definitely such thing as
writing too much Python.
So this is tabbed. Uh this is indented
So this is tabbed. Uh this is indented
one too
much.
much.
Wait, this is
Wait, this is
not Oh, this is not
not Oh, this is not
invented. What happened?
Okay, these do not need to
Okay, these do not need to
be these don't need to be here, right?
be these don't need to be here, right?
These can be
These can be
untapped. They don't depend on literally
untapped. They don't depend on literally
anything.
And there's your instantaneous
And there's your instantaneous
training. It
works.
works.
So, setting up the
So, setting up the
warehouse. Welcome.
We have uh pretty much everything except
We have uh pretty much everything except
except the servers. Well, there's more
except the servers. Well, there's more
equipment as well. So, but we have a lot
equipment as well. So, but we have a lot
of stuff nicely set
up. It's just
up. It's just
like 40 capacity with uh for 40 machines
like 40 capacity with uh for 40 machines
for training agents and 1,000 square
for training agents and 1,000 square
feet for gym equipment to train me.
That is pretty much the whole building
though. Like the gym area, the gym and
though. Like the gym area, the gym and
server area is like twothirds of the
server area is like twothirds of the
space.
Okay. So, what do we think about this
Okay. So, what do we think about this
initial
initial
refactor? There's way too much stuff
refactor? There's way too much stuff
imported
here. Hang on. There's We can
here. Hang on. There's We can
consolidate this, can't we?
Yeah, you're looking
Yeah, you're looking
different. I should be looking about the
different. I should be looking about the
same except for the new camera, which
same except for the new camera, which
this is not the final camera quality.
this is not the final camera quality.
This is
This is
um All right, here we're going to do a
um All right, here we're going to do a
product unendorsement on stream. Don't
product unendorsement on stream. Don't
buy these cables. They suck. They put
buy these cables. They suck. They put
too much force on your other important
too much force on your other important
things and this thing broke my nice cam
things and this thing broke my nice cam
link within 30 minutes of using it. So I
link within 30 minutes of using it. So I
am uh I had to buy another one of these
am uh I had to buy another one of these
which probably will be here today or
which probably will be here today or
tomorrow. And uh then I will actually
tomorrow. And uh then I will actually
have full camera
have full camera
quality. I also have to probably
quality. I also have to probably
fine-tune the audio a little bit. But we
fine-tune the audio a little bit. But we
do
have nice new audio
setup. The goal is to upgrade quite a
setup. The goal is to upgrade quite a
bit.
It took a while to figure all that stuff
It took a while to figure all that stuff
out.
Okay, that works nicely.
Okay, that works nicely.
Now, what do we think of the new uh the
Now, what do we think of the new uh the
new structure
new structure
here? Lot of imports. I want to like
here? Lot of imports. I want to like
compress dependencies a little bit. But
compress dependencies a little bit. But
then we have clean
then we have clean
puffl with what will be like better
puffl with what will be like better
grouped
grouped
arguments. This is now how long is this
thing?
249. So it's a little under 200 lines
249. So it's a little under 200 lines
for a net. I think we can easily get
for a net. I think we can easily get
that down to like 150.
This print dashboard is way too high
This print dashboard is way too high
up. It should be eval
up. It should be eval
train. And then we can put this stuff at
train. And then we can put this stuff at
the bottom.
Okay. And now the bottom of our trainer
Okay. And now the bottom of our trainer
is 900 lines.
is 900 lines.
So if we can cut two 300 off of
this, which we should be able to do, not
this, which we should be able to do, not
just today, because uh some of it
just today, because uh some of it
requires like removing code paths that
requires like removing code paths that
we no longer need to use for which we
we no longer need to use for which we
need to run really comprehensive
need to run really comprehensive
experiments.
I do probably want to do like the
I do probably want to do like the
distributional RL thing though. I think
distributional RL thing though. I think
we should try that at
least. Right. So here we have
puffer. I guess we just start on
puffer. I guess we just start on
refactoring all this.
Um, is it
Um, is it
crazy how much other stuff from the
crazy how much other stuff from the
config do we set?
We don't set like a ton of other stuff
We don't set like a ton of other stuff
in the config, do
we? Yeah.
So, but we do end up accessing the
So, but we do end up accessing the
config a ton, right?
So, hang on. What if I do
this? I knew what I was going to do.
this? I knew what I was going to do.
What if I do this?
That probably
That probably
cleans a lot of stuff up,
right? Is there any reason that would be
right? Is there any reason that would be
a bad idea?
Not
particularly. Is that reasonable to do
particularly. Is that reasonable to do
for something with a massive
for something with a massive
config instead of keeping the config
config instead of keeping the config
around and having to like
around and having to like
do stuff from
that. I mean the alternative,
that. I mean the alternative,
right? Okay, hang on. There are a couple
right? Okay, hang on. There are a couple
of alternatives here. Let's not be too
of alternatives here. Let's not be too
ridiculous. There is actually a value in
ridiculous. There is actually a value in
knowing what comes from the config
knowing what comes from the config
because you can know what you have to
because you can know what you have to
set in the config. So what if instead of
set in the config. So what if instead of
doing
doing
that, what if I do selfconfig equal
that, what if I do selfconfig equal
config? I remove these and then I
config? I remove these and then I
exclusively grab stuff from the
exclusively grab stuff from the
config. What about that?
And then I just fix
this anywhere that I've used
it which like this can be config. egg.
I guess the only thing is like if there
are Well, if you had to like overwrite
are Well, if you had to like overwrite
the device or
the device or
something, then it wouldn't be so
something, then it wouldn't be so
good. Oh, you can also delete the self
good. Oh, you can also delete the self
from all these. You never want to be
from all these. You never want to be
doing selfconfig whatever. It's just do
doing selfconfig whatever. It's just do
the one
access. I uh I intentionally have my
access. I uh I intentionally have my
self keyword in a really annoying to
self keyword in a really annoying to
read font so that I use it less
Okay, this now works
Okay, this now works
again. So, we no longer have self-config
again. So, we no longer have self-config
everywhere. We no longer have mixed
everywhere. We no longer have mixed
config and um like config stuff with the
config and um like config stuff with the
clean RL uh clean puffl stuff. So, that
clean RL uh clean puffl stuff. So, that
shortens a little bit, right?
Okay. 1450 lines. A little tiny bit
Okay. 1450 lines. A little tiny bit
shorter as
well. What's the next thing to tackle? I
well. What's the next thing to tackle? I
think I want to look high level
think I want to look high level
first. Let's look for high level wins
first. Let's look for high level wins
first. You can really like fine-tune
first. You can really like fine-tune
this over time.
LSTM slice
LSTM slice
shenanigans. There's stuff to
fix. I could get rid of cron
fix. I could get rid of cron
here. I still want to do stuff with it
here. I still want to do stuff with it
though.
There's still stuff to do here.
I'm just looking for like where the
I'm just looking for like where the
majority
majority
of of fluff
is. There's a little bit around
is. There's a little bit around
LSTMs. Like there's a little bit around
logging. There's a lot around uh
logging. There's a lot around uh
different advantage functions.
different advantage functions.
And a little bit of brown dying as
And a little bit of brown dying as
well. Experience buffer stuff
too. A little bit around
losses, little bit of flop. Like it's a
losses, little bit of flop. Like it's a
lot of just there being a little bit in
lot of just there being a little bit in
a bunch of places.
a bunch of places.
little bit in
little bit in
storage. This is P30 and like
storage. This is P30 and like
alternatives, different
alternatives, different
methods, things that don't need to
methods, things that don't need to
necessarily be
necessarily be
supported. Too many options is
bad. SPS not being logged, we want that
back. Saving and loading needs to be
back. Saving and loading needs to be
changed as well.
the dashboard. The dashboard is long,
the dashboard. The dashboard is long,
but the dashboard's actually pretty
but the dashboard's actually pretty
dense with uh correct
code. Dashboard's pretty
good. Got some distributed shenanigans.
good. Got some distributed shenanigans.
We've got this count params. It's used
We've got this count params. It's used
once
Let's see once.
mean and
log. Yeah, there's a little bit of fluff
log. Yeah, there's a little bit of fluff
in mean and
log artifact
log artifact
stuff.
Checkpointing. Checkpoint.
Okay, I'm pretty confident then we're at
Okay, I'm pretty confident then we're at
the point here
where I mean this stuff. Yeah, like
where I mean this stuff. Yeah, like
there are few there are a few things
there are few there are a few things
that like I just haven't bothered to get
that like I just haven't bothered to get
to. Um profiling is pretty
to. Um profiling is pretty
dense. So yeah, there just there are a
dense. So yeah, there just there are a
few things I haven't bothered to get to.
few things I haven't bothered to get to.
Um, there are a few things that could be
Um, there are a few things that could be
done
better, but generally like this is
better, but generally like this is
pretty good what we have here. It's just
pretty good what we have here. It's just
that we have a lot of leftover fluff
that we have a lot of leftover fluff
from um all these other methods that
from um all these other methods that
we've been like supporting and then we
we've been like supporting and then we
have leftover fluff
have leftover fluff
um just like little bits here and there.
So probably most of the optimization is
So probably most of the optimization is
going to come
going to come
from or a good chunk of the optimization
from or a good chunk of the optimization
is going to come from little bits of
is going to come from little bits of
fluff. Just removing little bits of
fluff. Just removing little bits of
fluff and then a little bit of the
fluff and then a little bit of the
optimization as well is going to come
optimization as well is going to come
from
uh us figuring out those new methods.
uh us figuring out those new methods.
Let me just go look up one thing to see
Let me just go look up one thing to see
how likely it
is. What was the
is. What was the
uh
uh
distributional? What's like the main
distributional? What's like the main
one? Is it this one?
I think it's
this. This is like the
main the main one that people use,
main the main one that people use,
right?
I'm just checking this because I want to
I'm just checking this because I want to
see how hard it would be to like mess
see how hard it would be to like mess
with P30 real
with P30 real
quick. If this does anything
Okay, so this is all their math that
Okay, so this is all their math that
they say you can skip. Lovely. We did
they say you can skip. Lovely. We did
some
math. We will model the value
math. We will model the value
distribution using a discrete
distribution whose support is the set of
distribution whose support is the set of
atoms. Okay, this is all this math and
atoms. Okay, this is all this math and
literally they're just bucketing the
literally they're just bucketing the
value
function. This is a softmax.
function. This is a softmax.
So all this math just to say bucket the
So all this math just to say bucket the
value function.
So hang on. This
So hang on. This
is if I can just figure out what their
is if I can just figure out what their
algorithm is. We can probably do this
algorithm is. We can probably do this
very quickly.
Uh, let me see. What's this say? French
Uh, let me see. What's this say? French
girls are interested in getting involved
girls are interested in getting involved
with your RL drone
with your RL drone
project. Have to find an object in a
project. Have to find an object in a
room. Shoots a laser at the
room. Shoots a laser at the
object. Oh,
object. Oh,
cool. Yeah. Yeah, I mean we haven't
cool. Yeah. Yeah, I mean we haven't
really done much with the drone stuff
really done much with the drone stuff
yet, but we do have some people in
yet, but we do have some people in
Puffer that have built like a fast uh
Puffer that have built like a fast uh
continuous end. And Spencer's also been
continuous end. And Spencer's also been
interested in this stuff as
interested in this stuff as
well. See if I can find
it. They're doing coordinate. So is the
it. They're doing coordinate. So is the
stuff they're doing at the
stuff they're doing at the
moment.
moment.
Um, so multiple drones. Yeah. Is the
Um, so multiple drones. Yeah. Is the
stuff she's doing at the moment like RL
stuff she's doing at the moment like RL
or is it just coordination with drones
or is it just coordination with drones
and like the RL is the next thing to
try? Cuz if there's no RL in it yet, we
try? Cuz if there's no RL in it yet, we
do have there's some students here. If
do have there's some students here. If
you scroll up a bit, trying to see where
you scroll up a bit, trying to see where
it is. Yeah, these guys um they made
it is. Yeah, these guys um they made
like a really simple drone sim in Puffer
like a really simple drone sim in Puffer
and then they trained it really fast and
and then they trained it really fast and
they're looking to PR it as well. It's
they're looking to PR it as well. It's
right
right
here and they actually ran it on a real
here and they actually ran it on a real
drone and it did like kind of okay
drone and it did like kind of okay
apparently.
apparently.
This thing doesn't run. But
yeah, there is stuff to do in this
space. Not RL right now. Well, then this
space. Not RL right now. Well, then this
is a good spot to start because it's
is a good spot to start because it's
like relatively simple
like relatively simple
sim. Would be good to get this thing in
sim. Would be good to get this thing in
puffer. Would be good to get this thing
puffer. Would be good to get this thing
running on more real drones. And I have
running on more real drones. And I have
lots of space here if I want to. Like I
lots of space here if I want to. Like I
can order some to here as well. We can
can order some to here as well. We can
see uh how they do on real drones. I've
see uh how they do on real drones. I've
got lots of space where it doesn't
got lots of space where it doesn't
really matter what they run
into. I'm afraid to report RL works. RL
into. I'm afraid to report RL works. RL
is
good. I've been trying to spend less
good. I've been trying to spend less
time on X.
time on X.
Honestly, would never work on
Honestly, would never work on
RL.
No, RL is
No, RL is
good. It's just
good. It's just
hard. But it is good.
What do I even have for P30 right
now? Oh, I don't even have this in here
now? Oh, I don't even have this in here
at the moment, do
at the moment, do
I? Cuz this was C. This wasn't CUDA,
I? Cuz this was C. This wasn't CUDA,
right? Or did I write a CUDA kernel for
right? Or did I write a CUDA kernel for
this? Oh, wait. I thought I did. Yeah, I
this? Oh, wait. I thought I did. Yeah, I
have P30 right
here.
here.
Yeah. Well,
I'm trying to think how much I want to
I'm trying to think how much I want to
like put into this right
now. I should probably do everything
now. I should probably do everything
except this
except this
first. Yeah, that would be smarter. Like
first. Yeah, that would be smarter. Like
it's my tendency to want to dive into
it's my tendency to want to dive into
the rabbit holes here, but it would be
the rabbit holes here, but it would be
way smarter to just like go through do
way smarter to just like go through do
the line by line optimizations, line by
the line by line optimizations, line by
line like cleanups, and then we'll see
line like cleanups, and then we'll see
how much code we end up left
how much code we end up left
with. Starting literally from top
with. Starting literally from top
here. Need this anymore.
Yo, stuff works on the latest dev
Yo, stuff works on the latest dev
branch.
Thanks. It
Thanks. It
should generally things should work by
should generally things should work by
default unless I break them.
Ideally, I'd be knowing puffer enough to
Ideally, I'd be knowing puffer enough to
confidently fix stuff. No
worries. I try not to break too much
worries. I try not to break too much
stuff.
Is there a reason this has so many of
Is there a reason this has so many of
these these
lines? Can I not
lines? Can I not
like Does it like have to be a certain
like Does it like have to be a certain
number of
boxes? For some reason, it's an eight
boxes? For some reason, it's an eight
line box. Like exactly an eight line
line box. Like exactly an eight line
box. I don't know why
The corners actually break on my rounded
The corners actually break on my rounded
box anyways, don't they?
Does every policy is supposed to output
Does every policy is supposed to output
actions? Default model outputs
logits. Every policy I think is supposed
logits. Every policy I think is supposed
to output logits not actions.
I think it's labeled actions, but it is
I think it's labeled actions, but it is
logits or something like that. I need to
logits or something like that. I need to
clean some things
up. Yeah.
This is the same thing, isn't
it? Did they add this
it? Did they add this
recently? I don't think IPRed it,
right? Well, that seems like it just
right? Well, that seems like it just
works, right?
I forget if it like looked worse
I forget if it like looked worse
on ASI or
something. I think we'll just keep that.
That's a little better.
optimizer is not optional. So, I don't
optimizer is not optional. So, I don't
know why there's a default
This is actually a config now, isn't
it? So, we don't
it? So, we don't
need we don't need this.
It's config back end
policy. These are all
reasonable and takes either wand or
reasonable and takes either wand or
Neptune which you pass in
I believe you passed this in because of
sweeps. Hang on, let me see. Why do you
sweeps. Hang on, let me see. Why do you
Why do you pass this
in? Okay. So, you knit stuff in
in? Okay. So, you knit stuff in
here, right?
and you do a bunch of
and you do a bunch of
nonsense and then when you call
sweep, you don't
init. So,
um, yeah, the way I have this set up,
um, yeah, the way I have this set up,
there's no reason to pass these in,
there's no reason to pass these in,
right?
I guess cuz like the final eval or
something. But like all this stuff
something. But like all this stuff
should be probably just wound up into
should be probably just wound up into
the
the
uh into the
training. So hang on. You have your back
training. So hang on. You have your back
ends.
this. There was a reason to pass
And then there's also this DDP
stuff. Yeah, I think Clean Puffer should
stuff. Yeah, I think Clean Puffer should
just eat this.
The only thing is that there's this args
The only thing is that there's this args
of XD and args of tag.
So, how's our run doing?
about what we
expect.
expect.
Ah okay. So they
Ah okay. So they
uh they have Neptune scale. Now,
Is there any reason this can't just go
Is there any reason this can't just go
into config?
I just need the uh the defaults I guess
right in
It this takes
ID. Oh, wait. Maybe this is my own
stuff. Yeah, this
stuff. Yeah, this
is Neptune and it run.
This doesn't even get
This doesn't even get
used. This ID
doesn't. Resume doesn't get freaking
doesn't. Resume doesn't get freaking
used either.
I see. So that because I didn't
I see. So that because I didn't
implement it yet. So there should be
implement it yet. So there should be
this is for
resuming. We should be able to do
resuming. We should be able to do
this. I just haven't done it yet. Fine.
Yeah, these can just be none by default.
Yeah, these can just be none by default.
Vault.
do not have config
Yeah. So, it's args of run
Yeah. So, it's args of run
ID. Okay. But stuff in base doesn't get
ID. Okay. But stuff in base doesn't get
passed. Oops. Covering
passed. Oops. Covering
chat. The stuff that's in base doesn't
chat. The stuff that's in base doesn't
get passed in. Only stuff that's in
get passed in. Only stuff that's in
train gets passed
in. Move it to train for now and then
in. Move it to train for now and then
figure it out.
or move it to workspace
maybe. Or maybe move everything under
maybe. Or maybe move everything under
workspace to
train be easiest for now.
We do
this. Envis
name. Okay. So, we'll just we'll leave
name. Okay. So, we'll just we'll leave
that one for now, but we'll do this.
We'll configure our
We'll configure our
loggers
loggers
ideally late as
possible here.
Not
bad.
bad.
Okay, then we can actually take these
Okay, then we can actually take these
args out.
The config gets
simpler
now. Args of Neptune. So this is now
now. Args of Neptune. So this is now
going to get screwy again.
going to get screwy again.
It is.
Do I want to thread all this into a
Do I want to thread all this into a
um Where is
it? Here's your
it? Here's your
train. So, we want to thread all this
train. So, we want to thread all this
together.
I kind of want to like just get rid of
I kind of want to like just get rid of
this whole function at some point, don't
I? Kind of.
So then where would this logic
go? Like reasonably this logic could go
I mean, some of it could go into
um
um
into just the bottom like main
script. That'll work for everything but
script. That'll work for everything but
like sweep and DDP.
Yeah. So, there's like two there two
Yeah. So, there's like two there two
different things going on here,
right? Hey, bet. How's it
going?
Could this logic be in sweep
Could this logic be in sweep
somehow?
somehow?
Could be in
sweeps. I don't know what you
sweeps. I don't know what you
expected. I I don't know what you
expected. I I don't know what you
expected doing
that. I have four PRs
that. I have four PRs
open. What? What do you have
open? Oh, very nice.
open? Oh, very nice.
And these work.
doesn't train well
locally. I can fix the slice error, but
locally. I can fix the slice error, but
doesn't train well
doesn't train well
locally. Does it train
locally. Does it train
like that means it doesn't work,
like that means it doesn't work,
right? because this definitely trained
right? because this definitely trained
well
before. I
see that. What should I merge
here? This. This
Tell me what is merged and I will
merge not blaster connect for a new
bind. Okay. Well, this is fine if this
bind. Okay. Well, this is fine if this
actually works. Let's see.
actually works. Let's see.
We have
binding you. It says doesn't train well
binding you. It says doesn't train well
locally on triple triad. Like does that
locally on triple triad. Like does that
mean something broke because it trained
mean something broke because it trained
well before or does this mean that it
well before or does this mean that it
doesn't train with like Adam and
doesn't train with like Adam and
whatever defaults are there for muon?
Yeah. So things don't work locally,
Yeah. So things don't work locally,
right? But did
you Okay, so we actually do need to
test. Yeah, cuz the puffer box you were
test. Yeah, cuz the puffer box you were
on got sent to main
on got sent to main
gear. I need to get more puffer
boxes.
boxes.
Okay. Well, I'm gonna have to figure out
Okay. Well, I'm gonna have to figure out
who's on what box and give you
one. Okay, you know what? Let's just do
one. Okay, you know what? Let's just do
Let's do something.
they're just yolo
they're just yolo
merging your
merging your
stuff.
Merge, we do this one.
And we'll do this
one. Why is
one. Why is
um why is there so much new stuff in
um why is there so much new stuff in
ending
here? What is this?
[Music]
[Music]
No, that is
sauce. Okay. But like I think you're
sauce. Okay. But like I think you're
misunderstanding the
misunderstanding the
way this is supposed to
way this is supposed to
work. I hope I didn't just merge that in
work. I hope I didn't just merge that in
the other
thing. No, you didn't. So, this one is
clean. I don't care if it doesn't break
clean. I don't care if it doesn't break
anything. It's going to cause me
anything. It's going to cause me
headaches if I don't now look at it and
headaches if I don't now look at it and
figure out. Um, hang on.
Let me do this first.
Hang on. Doesn't snake
already. And I did not make a binding
already. And I did not make a binding
for
snake. Uh, was Connect 4 this fast
snake. Uh, was Connect 4 this fast
before? What did you do on speed with
before? What did you do on speed with
Connect 4?
And I got to now look I got to look at
And I got to now look I got to look at
both these closely
So I have connect 4 baseline
here. Which is the run that I should
here. Which is the run that I should
compare to?
None of these seem to
None of these seem to
uh to do
anything. Pink
one. Well, you didn't run any You don't
one. Well, you didn't run any You don't
have any full runs
have any full runs
here, right?
Yeah. So, something is
weird. This is
weird. This is
like way faster than before.
Well, you don't have any numbers, right?
Well, you don't have any numbers, right?
Like I guess I have to do my own run
Like I guess I have to do my own run
There.
Width and height shouldn't make a
Width and height shouldn't make a
difference.
Okay. So, it's hardcoded. You still have
Okay. So, it's hardcoded. You still have
hardcoded depth
three. Oh, wait. That's on your locals,
three. Oh, wait. That's on your locals,
probably.
Yeah, these are close.
Yeah, these are close.
Okay, these are quite
Okay, these are quite
close. I don't know why the M is a
close. I don't know why the M is a
different speed. It could just be
different speed. It could just be
machine
machine
[Music]
[Music]
differences. I don't actually even know
differences. I don't actually even know
if there are speed differences. This one
if there are speed differences. This one
looks fine. Let me uh let me do your
looks fine. Let me uh let me do your
other N
other N
here cuz this one is the one that's
here cuz this one is the one that's
sketch. I thought I I thought I told you
sketch. I thought I I thought I told you
about this. Let me see
about this. Let me see
here. Is you should not have to be doing
here. Is you should not have to be doing
stuff like this.
a hard-coded agent depth. I thought that
a hard-coded agent depth. I thought that
maybe you'd reduce the opponent like
maybe you'd reduce the opponent like
search depth or something which would
search depth or something which would
make it way faster, but you
didn't. Okay. So, the issue with this,
didn't. Okay. So, the issue with this,
I'm going to guess,
I'm going to guess,
is you probably
did you probably use the wrong
did you probably use the wrong
API. Let's
see. Yeah. So, didn't I show you
see. Yeah. So, didn't I show you
this?
this?
like you're passing a param to each end
like you're passing a param to each end
of
of
here and because you've done this right
here and because you've done this right
you're like dramatically
you're like dramatically
complicating you're dramatically
complicating you're dramatically
complicating the C
complicating the C
code because you have you're passing
code because you have you're passing
these listen where I literally I made a
these listen where I literally I made a
separate API for this that's like really
separate API for this that's like really
easy and doesn't have you don't have to
easy and doesn't have you don't have to
do any of this but
Look, I thought I showed you this as
Look, I thought I showed you this as
well. If I didn't show you this, it's on
well. If I didn't show you this, it's on
me for wasting time, but I I thought I
had So, like Neural MMO has the exact
had So, like Neural MMO has the exact
same thing, right? These are all
lists. Look what we do.
lists. Look what we do.
We do
We do
envit. We put all these in a
envit. We put all these in a
list. And then we call
vectorz. And it
works. That is in the Python file. Yes.
works. That is in the Python file. Yes.
But this
But this
vector, you give it these lists, right?
vector, you give it these lists, right?
Or you give it this
Or you give it this
list and now it gives you your CMS as a
list and now it gives you your CMS as a
single
reference. Well, if I didn't tell you,
reference. Well, if I didn't tell you,
that's on me for not showing you this. I
that's on me for not showing you this. I
know I told a few other people. I could
know I told a few other people. I could
have sworn that you were on one of the
have sworn that you were on one of the
streams, but this is supposed to be like
streams, but this is supposed to be like
if you want to do variable param
if you want to do variable param
stuff, this would be the easy way to do
stuff, this would be the easy way to do
it. Now, let's see. I mean, to be fair,
it. Now, let's see. I mean, to be fair,
maybe your way is better. Let me
maybe your way is better. Let me
see. I don't know.
see. I don't know.
Um, it kind of just depends on the
Um, it kind of just depends on the
complexity.
Yeah. So I just added a second path so I
Yeah. So I just added a second path so I
could keep the C file really
simple. Okay. So this is 80 something
simple. Okay. So this is 80 something
lines to this. You have unpack with
lines to this. You have unpack with
index.
Yeah, cuz you you also added all this
Yeah, cuz you you also added all this
stuff into the
stuff into the
snake file.
Well, the thing is you shouldn't have to
Well, the thing is you shouldn't have to
do this mess anywhere,
right? Yeah. This is also in the triple
right? Yeah. This is also in the triple
triad PR as well.
Yeah, you have all the snake stuff in
Yeah, you have all the snake stuff in
here, too.
Well, I mean, look, if there is a way
Well, I mean, look, if there is a way
that we can add
that we can add
like we can add a few lines into the end
like we can add a few lines into the end
binding and simplify the Python for
binding and simplify the Python for
people so you don't have to write a
people so you don't have to write a
loop. I guess then that's worth
loop. I guess then that's worth
considering. But there's definitely too
considering. But there's definitely too
much stuff going into
much stuff going into
the binding C's. Now, this one's
the binding C's. Now, this one's
fine. Uh, this one you actually don't
fine. Uh, this one you actually don't
even have
even have
unpacked. Wait, you don't
unpacked. Wait, you don't
have you don't have any of that stuff in
here. Okay. So, if you make a clean
here. Okay. So, if you make a clean
triple triad PR, I can definitely add
triple triad PR, I can definitely add
that, right?
The thing is most ms don't need the loop
The thing is most ms don't need the loop
logic. It's only if you have
custom it's only if you have like custom
custom it's only if you have like custom
stuff. And then
like now snake isn't done because this
like now snake isn't done because this
is a mass bat.
Like this likely this likely creates for
Like this likely this likely creates for
me at least two hours of looking through
me at least two hours of looking through
this if not three and like trying to
this if not three and like trying to
figure all this stuff
out because you can't have like this
out because you can't have like this
cannot be what the binding has to look
cannot be what the binding has to look
like,
right? Because this is way worse to have
right? Because this is way worse to have
people try to write this stuff in C.
Yeah. So, I'm still open to like doing
Yeah. So, I'm still open to like doing
something like this, but and I actually
something like this, but and I actually
do want to look at the piece of code
do want to look at the piece of code
that you have here for the list loop.
that you have here for the list loop.
Um, I would say what you should do is
Um, I would say what you should do is
you should save
you should save
this because I want to look at this with
this because I want to look at this with
you uh maybe in Discord at some point or
you uh maybe in Discord at some point or
whatever and
whatever and
uh because it's potentially, you know,
uh because it's potentially, you know,
we can unify the API with it.
we can unify the API with it.
But I think for now you can very very
But I think for now you can very very
easily do the snake thing as just like
easily do the snake thing as just like
the uh the neural MMO style loop one and
the uh the neural MMO style loop one and
that'll just work immediately and then
that'll just work immediately and then
we can have both of these
we can have both of these
PR. Yeah. So clean up the PRs. Do that
PR. Yeah. So clean up the PRs. Do that
and then we will uh we'll get that stuff
and then we will uh we'll get that stuff
merged. And then something like this is
merged. And then something like this is
obviously going to be like I can't just
obviously going to be like I can't just
yolo merge this like right like come on.
yolo merge this like right like come on.
Like I can't give this oh yeah here it's
Like I can't give this oh yeah here it's
so easy to write a multi- aent M. Just
so easy to write a multi- aent M. Just
write all this, right? Like nobody knows
write all this, right? Like nobody knows
what this is.
Thank you for the connect 4 PR. That's
Thank you for the connect 4 PR. That's
very nice. We're getting uh more of
very nice. We're getting uh more of
these M into
these M into
bindings, new bindings.
full. No
meeting. I get to just keep deving.
Not a waste of time when they're with
Not a waste of time when they're with
new
clients. Got to pay for server somehow.
The cool thing is a lot of it is
The cool thing is a lot of it is
actually inbound now. Like we get
actually inbound now. Like we get
inbound people just like asking about
inbound people just like asking about
puffer stuff, which is what we want
puffer stuff, which is what we want
because I want to be able to spend my
because I want to be able to spend my
time building stuff.
time building stuff.
I mean, even things like what I'm doing
I mean, even things like what I'm doing
now, this is just incredibly basic and
now, this is just incredibly basic and
just slow work. But like, cleaning stuff
just slow work. But like, cleaning stuff
up like this is very, very important for
up like this is very, very important for
usability. It's honestly like if I don't
usability. It's honestly like if I don't
do this, nothing else really
matters.
Cool. That
Cool. That
works. I
am Let me take a few minutes. I'm going
am Let me take a few minutes. I'm going
to go use the
to go use the
restroom. I don't know. Do a couple
restroom. I don't know. Do a couple
things here. I'll be back in a couple
things here. I'll be back in a couple
minutes. And uh we'll keep going. Just
minutes. And uh we'll keep going. Just
need to kind of refresh a bit. And I
need to kind of refresh a bit. And I
have gym equipment in the
have gym equipment in the
background. That's always nice.
Okay, that's me woken back up.
One of the things I really wanted to
One of the things I really wanted to
have was just the ability to uh, you
have was just the ability to uh, you
know, go do a light set of
know, go do a light set of
whatever in between working on stuff.
Right. I was on um config replacements
Right. I was on um config replacements
for Neptune and uh WB. All
right. Do you notice his audio quality
right. Do you notice his audio quality
better than before, by the way, or worse
better than before, by the way, or worse
or about the same?
versus um previous
versus um previous
location about the same is not good
location about the same is not good
because this is a substantially better
because this is a substantially better
microphone. So I will have to fine-tune
that little on the quiet
that little on the quiet
side.
side.
Okay, let's
do do this. I can only get it so
close. We'll try
close. We'll try
that. We'll try that for a little
bit. It should be like very noticeably
bit. It should be like very noticeably
better.
Like this is a pretty ridiculous setup.
Like this is a pretty ridiculous setup.
I've got a tripod with the camera upside
I've got a tripod with the camera upside
down mounted on it over here. I've got a
down mounted on it over here. I've got a
pop filter in my face with a fullsize
pop filter in my face with a fullsize
boom arm and a mic here. And then
boom arm and a mic here. And then
there's actually there's a plan to put a
there's actually there's a plan to put a
TV over there so I can just turn the
TV over there so I can just turn the
setup and do like, you know, paper
setup and do like, you know, paper
review or like whatever presentation
review or like whatever presentation
style stuff I want as well.
So I guess we do
um shouldn't go into close
It should go
into Wait, doesn't mean and log do this
into Wait, doesn't mean and log do this
for you already? Hang on.
Mean and log should do this for you
Mean and log should do this for you
already.
already.
Yeah, but I don't actually think you
Yeah, but I don't actually think you
need to do this.
I think it's
redundant. We can just do
redundant. We can just do
this. And now we no longer have any
this. And now we no longer have any
dependence on Neptune after this
dependence on Neptune after this
point. So we should be
good. And this should still
run. And we are down uh 80 lines from
run. And we are down uh 80 lines from
earlier today
almost. We fight for
those. Now we get to
extensions. All my PRs are negative.
extensions. All my PRs are negative.
many
many
lines. You can't take too much credit
lines. You can't take too much credit
when I put a lot of work into that
when I put a lot of work into that
endbinding file to make it possible to
endbinding file to make it possible to
do that. But I do appreciate the
do that. But I do appreciate the
contributions. It's a pain in the ass to
contributions. It's a pain in the ass to
refactor all those
refactor all those
ends. I spent like a good two days on
ends. I spent like a good two days on
that end binding to make that
that end binding to make that
work. It's okay. I do the heavy lifting
work. It's okay. I do the heavy lifting
around here.
Okay, so now we can think about how to
Okay, so now we can think about how to
load this extension
better. How does PyTorch do their CPU
better. How does PyTorch do their CPU
fallbacks?
part of dispatch.
Okay. So, they have something fancy, I
Okay. So, they have something fancy, I
guess.
Dispatcher checks the
table. Oh, hang on. Wait. Is there
table. Oh, hang on. Wait. Is there
something for
something for
this porch library imple?
Okay.
Okay. So, here's the kernel.
Huh? I think this is just feeding me
Huh? I think this is just feeding me
garbage.
It's telling me how to write a CPU
It's telling me how to write a CPU
kernel and add a fallback for
kernel and add a fallback for
CPU. Okay, this is it right.
Portable kernel library.
Gh. Well, that's a mess.
So this is just all stuff that Torch has
So this is just all stuff that Torch has
done on top
of on top of CUDA.
This is so bloated.
CPP
extension.load. Okay, I think this is
extension.load. Okay, I think this is
better.
better.
You may wish to okay here. So you have a
You may wish to okay here. So you have a
Python
function. You have some Python bindings
function. You have some Python bindings
to C++ and CUDA.
to C++ and CUDA.
You are using
Python. Okay.
Here's some
Python. Past bets rationale has been
elucidated. Local snake newbind dev
elucidated. Local snake newbind dev
local what?
How did you even do that to like combine
How did you even do that to like combine
two?
Oh, okay. Wrap the function in a PyTorch
Oh, okay. Wrap the function in a PyTorch
custom operator.
Okay. So this is registering
autograd is
autograd is
this okay custom C++ and CUDA. This is
this okay custom C++ and CUDA. This is
what we want.
So here you get your extension.
We're building a single wheel that can
We're building a single wheel that can
run across multiple CPython versions.
run across multiple CPython versions.
Okay.
defining custom op and adding backend
defining custom op and adding backend
implementations. Okay, so you
write something like this.
If you also have a CUDA
If you also have a CUDA
implementation, you can register it as
implementation, you can register it as
in a separate torched library
implementation. Okay.
My add cuda.
To add torch compile support, we must
To add torch compile support, we must
add a fake tensor
add a fake tensor
kernel. Fake tensor are tensors that
kernel. Fake tensor are tensors that
have metadata but no
data. You can just do this with Python.
data. You can just do this with Python.
Cool.
To use the custom operator, we must
To use the custom operator, we must
first load the C++
library. We will replace the unstable
library. We will replace the unstable
PIBind 11 with stable API calls.
Avoid Python.h entirely
You don't need
autograd. Hang on. What?
or the exclamation
points.
points.
Oh, okay.
So, a little
So, a little
tricky, but um at least there is a
tricky, but um at least there is a
tutorial on this.
Let's see. Uh, first of all, how how we
Let's see. Uh, first of all, how how we
on this
So, we go to
setup.py and I don't think we have the
setup.py and I don't think we have the
extension in here at all, do
we? No, we do not have the extension in
we? No, we do not have the extension in
here at all. We have it just in in the
here at all. We have it just in in the
Python. So we have to
do plus
equals tension.
Uh, this is a little sketchy actually
Uh, this is a little sketchy actually
now that I'm thinking about it because
now that I'm thinking about it because
it makes a hard dependency on torch,
it makes a hard dependency on torch,
doesn't it?
Yeah, this is a hard dependency on on
torch. Hang on. Can we do it just from
torch. Hang on. Can we do it just from
uh the Python? I think we
can. So, we got C++ extension.
Load
Load
name
name
sources. This is probably it right here.
sources. This is probably it right here.
Right.
Okay, so this is actually mostly build
Okay, so this is actually mostly build
time
stuff, but I might still be able to do
stuff, but I might still be able to do
something with this.
So this is torch
So this is torch
tensor for some reason. And this
tensor for some reason. And this
is at
tensor and then they give you some
asserts. Fortune terminal. Okay.
In order to use this from Python PyTorch
In order to use this from Python PyTorch
front PyTorch's Python front end, we
front PyTorch's Python front end, we
need to register it using a torch
need to register it using a torch
library
library
API. This will automatically bind the
API. This will automatically bind the
operator to Python.
Name of your top level project.
So something like
this. And then this needs the signature.
VS float
VS float
gamma and then this returns nothing.
F. And then this is it, right?
This makes the
This makes the
operator available
operator available
via porch ops
via porch ops
extension my ad.
Okay. Expected arrow but found end of
Okay. Expected arrow but found end of
file.
Let's try
this. Okay, so this runs
Uh, I still don't know if this is going
Uh, I still don't know if this is going
to be available
from torch. We will
from torch. We will
see from torch.
Yeah. So, what's the extension
name?
name?
Extension. Probably just puffer lib.
No
No
module. Yeah. So maybe you do need to
module. Yeah. So maybe you do need to
actually have the module be
actually have the module be
built like
built like
this. We could do this for now, right?
We can do this for now.
command
command
class
equals H. You actually have to pass this
equals H. You actually have to pass this
command class thing in as well
command class thing in as well
apparently. Interesting.
We'll do
this.
This offer li.cpp
CPP. So what is this? Upper lib and then
CPP. So what is this? Upper lib and then
upper lib.cpp. Something like
this. Unknown compilation option. Remove
this. Unknown compilation option. Remove
command class.
command class.
Uh when you call setup
here, you do
here, you do
have man class,
right? So that's weird that that doesn't
right? So that's weird that that doesn't
do
anything. Maybe this does something.
Do we
see bufferlib cython? Okay, built
see bufferlib cython? Okay, built
something.
Okay. So no module torch offs puffer
But I don't see it in here, right?
end to end working example from the
end to end working example from the
tutorial
tutorial
here. Okay, this looks decent, right?
Lots of extra
args. They do have command class in
here. So, something's weird that I can't
here. So, something's weird that I can't
do that.
Like this should work, right? Build ex.
Like this should work, right? Build ex.
Oh, hang on. Maybe I didn't have build
extension. So, import C++ and build
extension. So, import C++ and build
extension. Gotcha.
It's CPP.build extension. Okay.
Got unknown compilation
Got unknown compilation
option. Please remove command
option. Please remove command
class. Okay, so something's weird
here. Oh, you know what? This is cuz
here. Oh, you know what? This is cuz
it's in Syoniz.
it's in Syoniz.
Shoot. Well, how the heck are we
Shoot. Well, how the heck are we
supposed to do
that?
Also, most of these don't even need Syon
Also, most of these don't even need Syon
anymore, so we're doing something
anymore, so we're doing something
screwy.
Let's just do um
the
heck?
heck?
Oh, you just messed this up. Hang
on. So, this
on. So, this
is Yeah, this is just indented poorly,
is Yeah, this is just indented poorly,
isn't it?
What's this
What's this
close? Yeah, this
close? Yeah, this
closes.
closes.
Okay, so I
apparently got this indented totally
apparently got this indented totally
screwy.
by this
by this
error compiling objects for an
extension. Well, you don't need all
extension. Well, you don't need all
these, right?
What did I break?
Oh man, this is like so wacky.
Okay. So, this Syoniz is like this
massive so confusing.
Okay, this is
Okay, this is
good. Now we do this. This goes to next
line goes to here.
on
on
sequence on
sequence on
end
end
plus should be less right.
Each element must be an instance
Each element must be an instance
extension.
This should give me multiple extensions.
This should give me multiple extensions.
No.
Maybe this needs to be a list. I don't
Maybe this needs to be a list. I don't
freaking
know. It's just like
know. It's just like
undocumented dumb build systems.
undocumented dumb build systems.
must be an
must be an
instance extension or a
twouple should
be I do
this.
Nope.
Nope.
Okay, take Syon out for a second.
Portra extension must be a extension
Portra extension must be a extension
instance or a
twouple. Okay.
So each
element of ext modules option must be an
element of ext modules option must be an
extension
extension
instance or twole. It is isn't it?
Oh, cuz it's a
list. Okay, so this actually
works. And then this probably works as
works. And then this probably works as
well, right?
Maybe the Sython one's a little
Maybe the Sython one's a little
ambitious. Let's get rid of that for
ambitious. Let's get rid of that for
now.
invalid. You need extra args, I guess,
invalid. You need extra args, I guess,
for
for
these. It's fine. Can we get the torch
these. It's fine. Can we get the torch
extension? We can get the torch
extension? We can get the torch
extension. Now I see
pufferlib.cython. So it said that this
pufferlib.cython. So it said that this
would be available at like torch ops or
would be available at like torch ops or
whatever.
Yes, you cannot get compute pop
advantage and there's no torch ops
advantage and there's no torch ops
puffer
li. Um, that's bizarre.
Maybe there's a name conflict. Hang on.
import puffer
X. Now this actually
has Okay, so this actually has compute
has Okay, so this actually has compute
pup advantage in it.
This does have compute puff advantage in
This does have compute puff advantage in
it. Now it doesn't show up where we
it. Now it doesn't show up where we
expect it to though.
Where was that
tutorial? So they have their
extension. And then how do they import
extension. And then how do they import
this?
extension
extension
CPO
ops import extension
CPP. So I have
So there somehow got put under
ops. Mine did
not. Ah, because they registered it
not. Ah, because they registered it
here.
Hey YouTube folks. I'm currently trying
Hey YouTube folks. I'm currently trying
to figure out um how to properly
to figure out um how to properly
register a custom op with PyTorch so
register a custom op with PyTorch so
that I can have a clean CUDA kernel with
that I can have a clean CUDA kernel with
C uh with
C uh with
C++ CPU
C++ CPU
fallback and it's just demonic like
fallback and it's just demonic like
they're doing all sorts of ridiculous
things. It's just like so many layers of
things. It's just like so many layers of
registering and rappering and stuff. I
registering and rappering and stuff. I
don't know.
Okay. So you actually hear
Okay. So you actually hear
torch.ops.extension C++. So this does
torch.ops.extension C++. So this does
actually go
into into this here.
Yeah, there's no
Yeah, there's no
torch.pufferlib,
right? And there's no porch torch puffer
right? And there's no porch torch puffer
x
either. It's not getting registered.
I mean, this is like a ridiculous amount
I mean, this is like a ridiculous amount
of code for this is literally their
of code for this is literally their
tutorial on how to add how to have a
tutorial on how to add how to have a
multiply ad kernel and it's like several
multiply ad kernel and it's like several
hundred lines of code.
And I have the death as
well. Is this supposed to be like this?
I doubt that
matters. Wasn't in the docks
originally. Maybe this needs to be
originally. Maybe this needs to be
puffer Xed.
Let me see there.
Let me see there.
C++ torch
library to find the
library to find the
C++
C++
version dummy C
version dummy C
module. But this is what I was doing
module. But this is what I was doing
with pi bind anyways.
I guess this.
Oh, so that is actually loaded.
It doesn't seem to be defining
It doesn't seem to be defining
uh the
function. No module torch ops. Puffer
X.
X.
Okay. And this is Oh, you can just
Okay. And this is Oh, you can just
import anything from here. Okay. So,
import anything from here. Okay. So,
it's not actually defined. It's just the
it's not actually defined. It's just the
shitty library. Like, you can just
shitty library. Like, you can just
import anything from here.
Okay. Been not liking Torch
Okay. Been not liking Torch
lately. Not going to lie. I have not
lately. Not going to lie. I have not
been enjoying torch.
I mean, it's here, but it's not
registered. I mean, I guess I could try
registered. I mean, I guess I could try
this.
Okay. Well, I mean, I'm not going to
Okay. Well, I mean, I'm not going to
complain if I don't need
PiBBind. Where's the name space
PiBBind. Where's the name space
end bottom?
Yeah. See, so it's still not there.
Oh, I'm dumb. This
Oh, I'm dumb. This
library, how the heck does it not give
library, how the heck does it not give
me like an
me like an
undefined? Wait, do I
not buffer lib
CPP? How the hell does this not give me
CPP? How the hell does this not give me
a torch undefined? I don't
a torch undefined? I don't
even It can't be loading this then,
even It can't be loading this then,
right?
I don't freaking
Oh, that's
So, we should have the It should be in
So, we should have the It should be in
here
somewhere. Buffer lip.
still nothing. But I don't even know how
still nothing. But I don't even know how
this is like does this even give me a
this is like does this even give me a
warning if I just
warning if I just
like or an
error. No, it's like completely freaking
error. No, it's like completely freaking
Oh no, we do get an error.
Oh no, we do get an error.
Okay, so it is actually loading the
Okay, so it is actually loading the
correct file.
Why does it not
Why does it not
then? It doesn't bind.
You have to import the underscore C I
You have to import the underscore C I
guess or something.
I mean, this whole thing is just janky.
I mean, this whole thing is just janky.
The way that they're
The way that they're
like, this whole thing is just janky.
Like this code is fine, but then I have
Like this code is fine, but then I have
no idea how this hooks into their like
no idea how this hooks into their like
their crazy registries with these
their crazy registries with these
macros. This
That's not in there either.
Is it some way that like I'm Doing
this
sources is
fine, right? This is all fine.
Hang on. So this test of the
extension they're not actually
extension they're not actually
testing they're not actually testing
testing they're not actually testing
this import
this import
right here. They're importing it
right here. They're importing it
directly.
Okay, hang
Okay, hang
on. This is
one torch ops
one torch ops
extension. So, it is supposed to be
extension. So, it is supposed to be
registered.
Yeah, this is like crazy. So, this is
Yeah, this is like crazy. So, this is
now they're calling it
now they're calling it
here through the registered
version. Yeah. So, like the extension
version. Yeah. So, like the extension
just isn't getting bound.
drives me nuts.
How does this thing get built?
underscorec.
That's so
That's so
weird. And that's like so weird what
weird. And that's like so weird what
they're thing.
It's got to be something with this
It's got to be something with this
like underscore
C. But how the heck is this
C. But how the heck is this
input? library
named_c. I mean this thing has to get
named_c. I mean this thing has to get
built,
right? Make sure I didn't miss anything
here. Like how are they importing a file
here. Like how are they importing a file
that hasn't been built yet?
Is it this?
Okay. So, this is probably
Okay, now we
have we now have the underscore C
But we still don't have
this. Nothing.
Do you have to import the underscore C
Do you have to import the underscore C
for this to be
for this to be
available? Okay, I didn't think of that.
Really? Import torch. Okay.
Still
nothing. That's
bizarre. Let me see how they imported
bizarre. Let me see how they imported
it. I think they said the import order
it. I think they said the import order
matters or something.
So in their
So in their
test they import
torch and then they import this
Ah, okay. So, it's not in the dur, but
Ah, okay. So, it's not in the dur, but
it's
it's
there.
there.
Okay. So, we actually get
Okay. So, we actually get
it.
it.
Cool. Crazy
Cool. Crazy
packaging. But we get it. Oh,
packaging. But we get it. Oh,
man. Okay.
Now we can hopefully add the CUDA one as
well. We can hopefully add the Cuda
one now. How do you
do? Hang
do? Hang
on. Hang on a second here. Now I get to
on. Hang on a second here. Now I get to
see how they do their fallback at the
see how they do their fallback at the
least properly. Right. So this has no
least properly. Right. So this has no
CUDA in it. So this will always
CUDA in it. So this will always
work. And then they have
work. And then they have
test dimple.
M will add
CPU registers. CUDA
implementations wait my add
implementations wait my add
CPP will add
CPP will add
CU ah and
CU ah and
this this registers
uh the CUDA in here.
uh the CUDA in here.
Okay. So, we can do
Okay. So, we can do
this. And then they both load
this. And then they both load
shared, but other than that, it's
shared, but other than that, it's
fine. And then this doesn't need a
fine. And then this doesn't need a
module, I
guess. This includes shared CPP.
name space puffer
name space puffer
lib. We get rid of the pi
bind which is kind of
bind which is kind of
nice. And we take
nice. And we take
this this imple
And this is like this doesn't need the
And this is like this doesn't need the
name definitions it
seems. So this
seems. So this
is cute.
And probably this needs different names,
And probably this needs different names,
but we'll
but we'll
uh we'll do it this way for
uh we'll do it this way for
now and we will
now and we will
see. Now in their
setup, they also import.cu, don't
setup, they also import.cu, don't
they? Library
they? Library
named_c sources
Hey, welcome. How's it going,
man? Okay. So, in their sources
here they have this CUDA
sources. Okay. So they
conditionally they conditionally add the
conditionally they conditionally add the
CUDA. We're going to do it for both for
now. So in
sources we do puffer lib
sources we do puffer lib
cu. Okay.
cu. Okay.
And let's then just
do let's just like put
do let's just like put
this into a
file. Can you ask a question? Yeah,
file. Can you ask a question? Yeah,
sure.
sure.
[Music]
Uh, can't initialize NVML. Okay, that
Uh, can't initialize NVML. Okay, that
seems
like my drivers die. Yeah, my drivers
like my drivers die. Yeah, my drivers
just died. So, that's fine. We can fix
just died. So, that's fine. We can fix
that. That's
just container needing a reboot.
That's easy
enough. Which is why you want the coup
enough. Which is why you want the coup
to fall back as well.
from Aaron.
Do we not get an error
message. Where's our
trace?
trace?
Uh huh.
We just don't get an error message.
There are
no version bounds.
Yeah, it just doesn't give us a
Yeah, it just doesn't give us a
freaking That's ridiculous. Where's our
freaking That's ridiculous. Where's our
error message?
They do this.
So extension includes the runtime.
What does it use from uh the
runtime
runtime
weird? Is this a dot? This is a CU.
Yeah. Explicitly
Yeah. Explicitly
include the runtime like that in a CU.
include the runtime like that in a CU.
What's the point of having it that? H
What's the point of having it that? H
Bizarre.
And that is matching Now,
Okay. So that's like immediately
failing this
like not these
like not these
includes currently first year of
includes currently first year of
college.
college.
Did I you learn data structures and
Did I you learn data structures and
algorithms webdev or something? I've
algorithms webdev or something? I've
only learned some C and
only learned some C and
Python. So the thing is that normally
Python. So the thing is that normally
data structures and algorithms are
data structures and algorithms are
taught as part of your first or second
taught as part of your first or second
CS course in general because you really
CS course in general because you really
don't know anything unless you know
don't know anything unless you know
basic data structures and algorithms. uh
basic data structures and algorithms. uh
you're very very rarely going to like go
you're very very rarely going to like go
reach for a try or very very rarely
reach for a try or very very rarely
going to have to I mean ex except in
going to have to I mean ex except in
specific applications reach for dynamic
specific applications reach for dynamic
programming but like you should know
programming but like you should know
what a you should know what a map or
what a you should know what a map or
addict is and how it's implemented you
addict is and how it's implemented you
should know what binary search is and
should know what binary search is and
what is like what how it is implemented
what is like what how it is implemented
you should know basic sorting like
you should know basic sorting like
there's a lot of things that you should
there's a lot of things that you should
know that do come up quite often uh
know that do come up quite often uh
computational complexity all of that so
computational complexity all of that so
if you haven't taken one of those, I'm
if you haven't taken one of those, I'm
surprised because it's like it should be
surprised because it's like it should be
among your first
among your first
courses. Um, it's also, and I hate that
courses. Um, it's also, and I hate that
this is the case, but it is pretty much
this is the case, but it is pretty much
all of interview questions ever for
all of interview questions ever for
actual jobs are just like based on your
actual jobs are just like based on your
data structures and algorithms course,
data structures and algorithms course,
which is ridiculous because it's like
which is ridiculous because it's like
it's one small piece and like you use a
it's one small piece and like you use a
small portion of it dayto-day, but
small portion of it dayto-day, but
that's how it is at the moment.
that's how it is at the moment.
Um, you should probably do that.
Um, you should probably do that.
Uh, yeah, if you just like if you take
Uh, yeah, if you just like if you take
like this is what a language is and this
like this is what a language is and this
is how to do webdev, you do not know how
is how to do webdev, you do not know how
to program. Um, so you should definitely
to program. Um, so you should definitely
learn basic data structures and
learn basic data structures and
algorithms. You should definitely build
algorithms. You should definitely build
some stuff and then if you want to do
some stuff and then if you want to do
web dev from there, go for
it. Because the thing with webdev is
it. Because the thing with webdev is
it's like it's just a giant mess where
it's like it's just a giant mess where
like people have just like piled crap
like people have just like piled crap
onto the web development ecosystem for
onto the web development ecosystem for
the last couple of decades and it's just
the last couple of decades and it's just
like it's a gigantic
like it's a gigantic
disaster. So
disaster. So
like honestly not much is going to make
like honestly not much is going to make
sense unless you've just been
sense unless you've just been
programming for a long time in that
programming for a long time in that
space. Uh and then you can see like okay
space. Uh and then you can see like okay
this is the way they did this. That's
this is the way they did this. That's
annoying but I get it right.
like junior webdev is not going to be a
like junior webdev is not going to be a
fun job.
fun job.
I can tell you
I can tell you
that. Especially with all the AI crap
that. Especially with all the AI crap
now. It's just like people already
now. It's just like people already
didn't understand what they're doing and
didn't understand what they're doing and
now they absolutely have no idea what
now they absolutely have no idea what
they're
thing. Yeah, we don't we don't cover
thing. Yeah, we don't we don't cover
autogen stuff.
But let's let's talk about how pathetic
But let's let's talk about how pathetic
that is, right? So like we took this
that is, right? So like we took this
very very simple thing, build a basic
very very simple thing, build a basic
web page. We piled like React and Next
web page. We piled like React and Next
and Tailwind and like all these like
and Tailwind and like all these like
crap modern things on top of it that
crap modern things on top of it that
make no bloody sense um just to do basic
make no bloody sense um just to do basic
things. And now nobody knows how the
things. And now nobody knows how the
hell anything works anymore. So we built
hell anything works anymore. So we built
an AI to figure out all of our
an AI to figure out all of our
[ __ ] Like, isn't that just
[ __ ] Like, isn't that just
incredibly stupid?
I I also think that the thing people
I I also think that the thing people
should realize is that there isn't there
should realize is that there isn't there
isn't n't going to be like, uh, oh, I
isn't n't going to be like, uh, oh, I
don't know how to program, but I'm good
don't know how to program, but I'm good
at using AI. Like, that just means you
at using AI. Like, that just means you
have no idea what's going on. And you're
have no idea what's going on. And you're
like, you might be able to hack out a
like, you might be able to hack out a
couple things over the next few
couple things over the next few
years, but like that's just zero useful
years, but like that's just zero useful
skills. Like, there are no useful skills
skills. Like, there are no useful skills
there at all.
I wish this would give me a freaking
I wish this would give me a freaking
build error.
Okay. Like if you want to do if you want
Okay. Like if you want to do if you want
to use AI for
something, this is what I will do. We'll
something, this is what I will do. We'll
see if this gives me anything.
Is there a dash V?
Okay, it's probably they're outputting
Okay, it's probably they're outputting
the same stuff.
the same stuff.
Then try something.
Oh, and there we go. We actually get
Oh, and there we go. We actually get
a This looks like a proper error
a This looks like a proper error
message. It was a name duplication
message. It was a name duplication
issue. There we go.
float is not a supported argument type.
float is not a supported argument type.
Use type double
instead. That would seem weird.
You tried to register a
You tried to register a
kernel. Please use double
instead. That's disgusting.
Is that how it was in their
example? What are you doing? I can't
example? What are you doing? I can't
understand anything. Well, I mean, the
understand anything. Well, I mean, the
stuff I'm doing, you're not going to
stuff I'm doing, you're not going to
know if you're just like a firstear
know if you're just like a firstear
programmer. I work on high performance
programmer. I work on high performance
reinforcement learning dev. Um, you can
reinforcement learning dev. Um, you can
see some cool demos at puffer.ai AI and
see some cool demos at puffer.ai AI and
I am currently attempting to register a
I am currently attempting to register a
CUDA extension to PyTorch with a CPU
CUDA extension to PyTorch with a CPU
fallback. So essentially I have a custom
fallback. So essentially I have a custom
piece of code that I want to hook into
piece of code that I want to hook into
uh the major the main learning library
uh the major the main learning library
that everyone uses and I want that piece
that everyone uses and I want that piece
of code to run on the GPU or on the CPU
of code to run on the GPU or on the CPU
depending on the context in which you're
depending on the context in which you're
running it automatically without you
running it automatically without you
having to do anything. And that involves
having to do anything. And that involves
digging through a bunch of sludge, which
digging through a bunch of sludge, which
is what I'm doing
now. So, what am I doing now? Digging
now. So, what am I doing now? Digging
through
sludge. That's pretty much it.
Okay. So, they have
Okay. So, they have
double in this signature. I guess it's
probably I appreciate the
probably I appreciate the
explanations. I mean, this stuff is like
explanations. I mean, this stuff is like
kind of out there. This is not stuff
kind of out there. This is not stuff
that most people will see for quite a
that most people will see for quite a
while, if ever.
while, if ever.
So, and the thing is, it's like it's a
So, and the thing is, it's like it's a
lot harder than it needs to be, right?
lot harder than it needs to be, right?
like when I was just writing my basic
like when I was just writing my basic
CUDA extensions, if you just use CUDA,
CUDA extensions, if you just use CUDA,
it's kind of fine. Um, now when you get
it's kind of fine. Um, now when you get
the torch binding system involved and
the torch binding system involved and
stuff, then yeah, stuff is painful. Like
stuff, then yeah, stuff is painful. Like
if I were just writing CUDA, could kind
if I were just writing CUDA, could kind
of jam that. Let's kind of just see
It's got to just be that these
are, right?
Like how Python by default just uses
Like how Python by default just uses
doubles cuz like screw it, we're slow
anyways. All
right. Is
that okay? That's actually built.
dynamic
dynamic
module does not define module
export. Okay, so I I know how we do this
export. Okay, so I I know how we do this
though.
Wait. Uh, before I spend more time, can
Wait. Uh, before I spend more time, can
you try running triple
you try running triple
triad? Just local
triad? Just local
compile. It doesn't seem to work
properly. Sure.
I mean, this is like could be close
enough. I haven't touched this in a
enough. I haven't touched this in a
while.
Huh? It just didn't release all the
Huh? It just didn't release all the
memory. That's bizaro.
I'm the screw.
Hang
on.
on.
Huh? Well, that's probably left over.
Broken pipe is
Broken pipe is
weird. There is something screw with
weird. There is something screw with
it. There is definitely something screw
it. There is definitely something screw
with
it. Does it not have seating or
it. Does it not have seating or
something?
Well, this is this version is totally
off. Yeah. So, this I mean this is
off. Yeah. So, this I mean this is
missing like this has a no op or
missing like this has a no op or
whatever. We got rid of no
op. I got to finish this while I'm still
op. I got to finish this while I'm still
in the mindset to debug obtuse cuda
in the mindset to debug obtuse cuda
though. There. It does look like
though. There. It does look like
something is
screwy. Mhm.
Okay, this comment is wrong.
Okay. So now we get this conflict
thing where we don't get any errors.
Noah puppet advantage.
CUDA advantage
row. I'm about to pain just seeing your
row. I'm about to pain just seeing your
work.
work.
You get used to
it. Eventually like the feeling of like
it. Eventually like the feeling of like
feeling very dumb goes away and it's
feeling very dumb goes away and it's
like oh actually the code I'm reading is
like oh actually the code I'm reading is
in fact the thing that is very dumb.
It's like why is it like this? Why why
It's like why is it like this? Why why
couldn't we have just built
couldn't we have just built
simple simple CUDA extension interface?
simple simple CUDA extension interface?
Why did we have to do
this? Why do we have magic magic static
this? Why do we have magic magic static
load macros?
still
still
nothing. See how they do their imports.
So they do add the CUDA sources
So they do add the CUDA sources
star.cu. Okay. So they have multiple
sources that go into this one
sources that go into this one
extension. All
right. Don't need this.
right. Don't need this.
Do I need CUDA
Do I need CUDA
extension? I need CUDA extension, don't
I? This should now be CUDA
extension. It's already 12:17. Going to
extension. It's already 12:17. Going to
sleep. Can you tell me what time you
sleep. Can you tell me what time you
start your live stream? Uh, it is
start your live stream? Uh, it is
currently 2:49 EST. I generally try to
currently 2:49 EST. I generally try to
do a short stream in the morning
do a short stream in the morning
somewhere between 8:30 and 9:30 a.m.
somewhere between 8:30 and 9:30 a.m.
EST. And then uh after breakfast like
EST. And then uh after breakfast like
say 10:30ish then I'm on for the rest of
say 10:30ish then I'm on for the rest of
the day. Modulo meetings and other stuff
the day. Modulo meetings and other stuff
I have to
do and I will be back streaming quite a
do and I will be back streaming quite a
bit for the next several weeks.
Some of it
Some of it
is in the trenches like random packaging
is in the trenches like random packaging
and extension stuff like this. Some of
and extension stuff like this. Some of
it is cool research. Some of it's like
it is cool research. Some of it's like
building new environments. Some of it is
building new environments. Some of it is
working with
working with
collaborators. Whole bunch of different
collaborators. Whole bunch of different
stuff. We do a lot of different things
stuff. We do a lot of different things
around here.
Multiple rules
Multiple rules
generate this build for lib.0
Oh
Oh
extensions
extensions
multiple there is multiple rules
multiple there is multiple rules
generate this
file torch extensions
night. Thanks for dropping
by
by
sources. See, this is one extension
sources. See, this is one extension
though, isn't
it? This is one extension.
We got the
CPP. Oh, did they put them in uh
CPP. Oh, did they put them in uh
separate directories just for this
reason? That would be kind of evil,
reason? That would be kind of evil,
wouldn't
wouldn't
it? I just thought of something.
and then shared is not going to be
and then shared is not going to be
there. Yep.
Uhhuh. Now we get an
error. You tried to register.
So now we actually we get
somewhere. Now we get somewhere.
So many poor decisions in
here. Puff advantage
here. Puff advantage
[Music]
[Music]
colonel. Puff
colonel. Puff
advantage. Did you mean puff advantage
advantage. Did you mean puff advantage
row?
I include the share, don't
I? Uh, you forgot this one, my guy.
Max
Horizon. Where does this get
defined? It's a global, isn't it?
Puff advantage colonel. I probably did
Puff advantage colonel. I probably did
the same
thing. Freaking flies everywhere.
expected a declaration.
Oh, is this not a valid comment in
CUDA? Could it just not have block
CUDA? Could it just not have block
comments?
It
should. Oh, it's because it's
nested.
Getting somewhere.
Okay. So, what do we have here? Multiple
Okay. So, what do we have here? Multiple
definitions of vrace
check. I know. I like I can fix all
check. I know. I like I can fix all
these is the thing.
Uh, this is only defined once as far as
Uh, this is only defined once as far as
I can
see. Is it because both of these are
see. Is it because both of these are
including
including
shared? That could be
it. It's probably including both of
it. It's probably including both of
these.
I just do
this max horizon undefined. Yeah. So
this max horizon undefined. Yeah. So
this needs shared
And this also needs a shared because up
And this also needs a shared because up
advantage row is in shared C++.
multiple
declarations. Yeah. So, it's getting
declarations. Yeah. So, it's getting
included multiple times.
I could just paste it. Hang
on. Kind of dumb to do that.
these are the two functions we need,
these are the two functions we need,
right? Max Horizon
I need the same code here.
I probably need the same code right in
I probably need the same code right in
uh the shared or in purple
libp do here.
not declared in scope. Puff advantage
not declared in scope. Puff advantage
row.
up
advantage. The heck
Okay, there we
Okay, there we
go.
go.
Now, now we have something
here. Now, this should actually work.
use float instead of
use float instead of
double in an operator schema
string. Okay, so this one needs to be
string. Okay, so this one needs to be
float.
We're getting
there. Lovely.
there. Lovely.
So now we actually have
So now we actually have
uh our CPU, GPU, fallback,
uh our CPU, GPU, fallback,
whatever. We have it all
running. Now the only question is going
running. Now the only question is going
to be how we how we integrate
to be how we how we integrate
everything how we do everything uh
everything how we do everything uh
cleanly here.
I don't really know if I feel like
I don't really know if I feel like
messing with that at the moment to be
messing with that at the moment to be
honest. Kind of want to just get the the
honest. Kind of want to just get the the
full thing running cuz like at least
full thing running cuz like at least
this is the way like this will make it
this is the way like this will make it
clean in the place it's imported.
chunks. So, this like needs extra args,
chunks. So, this like needs extra args,
I think.
F permissive. Yeah. So this this needs
F permissive. Yeah. So this this needs
extra
arcs. I don't have F permissive here.
or maybe I do actually want to mess with
or maybe I do actually want to mess with
this here.
And actually you don't because
And actually you don't because
this Yeah, you just want to set the
this Yeah, you just want to set the
pointer. Okay.
Oh, it's pedantic, I
guess. But I don't have pedantic on
guess. But I don't have pedantic on
either.
We can siphonize
We can siphonize
it like we were doing
it like we were doing
before and just say that I've done
before and just say that I've done
enough bloody
um packaging for one
um packaging for one
day. That's an option.
You can do that.
Error handling is a
Error handling is a
pain. Yeah, I'm definitely sick of doing
pain. Yeah, I'm definitely sick of doing
um I'm definitely sick of uh packaging
um I'm definitely sick of uh packaging
for one
day. Okay, that doesn't break.
Do
Do
this. We do this. No
this. We do this. No
errors. Do this.
No
No
errors.
Yes. Okay, there we
go. Uh, okay.
go. Uh, okay.
So it looks
like Yeah. So the torch builder
whatever different command class.
Do we have to do a custom
one? Let's just do it
quick. It's so stupid.
Python packaging just sucks honestly.
How do you do this stupid thing?
Why is this like why is this a parram of
Why is this like why is this a parram of
setup and not of the extension as
well? Like this is just annoying me.
Did they not have this? I guess they
Did they not have this? I guess they
don't have this cuz they don't have
don't have this cuz they don't have
multiple
extensions. Custom build.
deal with this [ __ ] man.
Does it still work if I do it without
Does it still work if I do it without
this? Hey Quinn,
this? Hey Quinn,
welcome. The camera is not a webcam and
welcome. The camera is not a webcam and
it's going to look better than this as
it's going to look better than this as
soon as I get another cable for it.
soon as I get another cable for it.
I've
I've
got well what should be a professional
got well what should be a professional
quality AB setup now but um got to fix a
quality AB setup now but um got to fix a
few small
things. I think that this still works
things. I think that this still works
hopefully.
I'm seeing this getting
I'm seeing this getting
built. So, we'll
built. So, we'll
see. I mean, it's
see. I mean, it's
like whatever at this point
right now. I should be able to
do all that just so I can do
Pump
two.
Boom. Okay.
No module torch ops popper
lib. You have to import torch and then
lib. You have to import torch and then
you have to import
Do
Do
this. Do it this
way. Still no.
You need this thing,
huh? I mean,
huh? I mean,
I How do we do this?
Can I just do like dash dash?
No. It's like adding stupid args, isn't
No. It's like adding stupid args, isn't
it?
I do not know how to get rid of these.
Sting.
I don't know how you Bad.
I guess I do have to do this custom.
Yeah, this is like
Yeah, this is like
ridiculous. There just so many bad
ridiculous. There just so many bad
decisions in here.
I'm actually going to rock this for
once cuz I just like I can't even I
once cuz I just like I can't even I
don't know where the [ __ ] API would
don't know where the [ __ ] API would
be for this thing is ridiculous.
These are just like horribly
These are just like horribly
documented this utils nonsense.
You literally have to write a custom
You literally have to write a custom
one, don't you?
What?
Uh
huh. Oh, no. I can't.
Yeah. So, you do have to do a custom
buildex. Let's see if this runs out of
buildex. Let's see if this runs out of
the
the
box and we will go back because this
box and we will go back because this
solution sucks.
sub
sub
[Music]
[Music]
tools. Okay.
and like the number of just ridiculous
and like the number of just ridiculous
build things
today. Okay, so that now
does it seems happy.
Okay. So, it does build the CUDA
Okay. So, it does build the CUDA
extension right there.
Okay, this one
runs. This one doesn't
I think you just have to be very careful
I think you just have to be very careful
with this import, right?
Uh, okay. I don't know why it prints all
Uh, okay. I don't know why it prints all
this
Okay. So, it's telling me it doesn't
exist.
omitted only available through these
omitted only available through these
back
ends. What in the heck?
Autograd CPU.
is there a place where we tell it what
is there a place where we tell it what
backend is registered to
what? Let's see.
Takuda extension.
not what I
want. Okay. So,
porch
library puffer lib
m and then this is registered right here
m and then this is registered right here
to CPU.
So, I see it right here. Will we be
So, I see it right here. Will we be
streaming tomorrow? Should be streaming
streaming tomorrow? Should be streaming
all
day. Hopefully, I get past this by then
day. Hopefully, I get past this by then
so I'm not just stuck doing this
so I'm not just stuck doing this
nonsense because it's explicitly
nonsense because it's explicitly
registered here, right?
not getting registered somehow.
Still. Okay. So, here it like it
Still. Okay. So, here it like it
correctly finds the op. It's not just
correctly finds the op. It's not just
inventing one, right?
Thanks. Yeah, I'm going to try to finish
Thanks. Yeah, I'm going to try to finish
this.
Um, and what did I register with? Uh,
Can't pop the bandage.
Okay. Huh.
We definitely need to do
We definitely need to do
this, but uh that's not the issue just
this, but uh that's not the issue just
yet.
Do we have puffer lib in here? Python
Do we have puffer lib in here? Python
dispatcher
dispatcher
[Music]
registered cannot
registered cannot
run because the operator doesn't exist
run because the operator doesn't exist
for this back end or is omitted.
So, it is getting the right back end,
So, it is getting the right back end,
but then it's not finding. It's
but then it's not finding. It's
dispatching to the correct back end, but
dispatching to the correct back end, but
it's not finding
it. And I don't see I should see puffer
it. And I don't see I should see puffer
li in here, shouldn't Okay.
Hang
on. This has
on. This has
it with the underscore C, right?
Build extension.
Can I run this on a non-puffer
end? But no, it's definitely getting
end? But no, it's definitely getting
it's definitely getting cold and built
it's definitely getting cold and built
like we're see we're seeing it here.
Let me see how they imported
this. They import it in the
this. They import it in the
test. So they import
test. So they import
torch. They import their thing which
torch. They import their thing which
imports the C.
Yeah, you don't have to import it. As
Yeah, you don't have to import it. As
soon as you import the underscore the C,
soon as you import the underscore the C,
it should be working.
I don't know how it thinks it's
I don't know how it thinks it's
available from all of these backends
available from all of these backends
that I didn't
define. You can't click this,
define. You can't click this,
right? Open source library that links
right? Open source library that links
you to the Facebook page.
Yeah. So this is what I have as
well. Yeah. So, it's available for these
well. Yeah. So, it's available for these
backends and it lists a whole bunch of
crap. Does it list CPU when I do
this? Doesn't list CPU.
Vantage.
I'm trying to think what I could
I'm trying to think what I could
possibly be screwing
up. Maybe it is just something with the
up. Maybe it is just something with the
setup. Hang
on. So, we
on. So, we
do double check their CUDA extension.
They have a
They have a
setup at their
extension CUDA
extension. Compile args.
by limited API.
Alex
This is not actually changing the
This is not actually changing the
extension.
So now it'll actually force
rebuild. See if that does anything.
Still Help.
Yeah,
as if I missed anything else important.
I have
I have
this. I wonder if it's actually the
mutation arcs. Hang on.
It's not smart enough to catch that, is
It's not smart enough to catch that, is
it?
There's no way it's smart enough to
know. I don't like that it immediately
know. I don't like that it immediately
copies these either.
copies these either.
Hang on. That's not good,
Hang on. That's not good,
right? It immediately copies
right? It immediately copies
stuff. I don't see puffer lilib. Um
stuff. I don't see puffer lilib. Um
um puffer's not getting built at all in
um puffer's not getting built at all in
this
this
one. It's not there.
extensions.c
extensions.c
Python. That's not it.
This goes to extension C Python,
right? It says building
Okay. So, that's weird,
Okay. So, that's weird,
right? It says it's building
it. Um, but it doesn't actually build
it. Um, but it doesn't actually build
it. So, it is an issue with this
it. So, it is an issue with this
shenanigans.
shenanigans.
This whole
thing is just not running it.
Can I put a break point in here?
Can I put a break point in here?
Probably not,
Probably not,
right? Oh, I
can. Okay.
What's this thing take?
man. Yeah, I think that this is wrong.
not run.
The issue is I don't understand what
The issue is I don't understand what
this gets called
on I guess technically I could
do can I not just
do. Let's do this.
I just want to see if I can get it to
I just want to see if I can get it to
load with this.
failed. Argument
two. Okay. So, we can definitely see for
two. Okay. So, we can definitely see for
sure it's not getting built.
or
or
dumped. Inspecting
indent
indent
flies. I get some fly paper.
flies. I get some fly paper.
I was just had the doors open too much
I was just had the doors open too much
with all the uh setup around here.
Ident. Did I mess something obvious up
Ident. Did I mess something obvious up
in
in
here? Values. Let me see if I got the
here? Values. Let me see if I got the
syntax right.
Let me do one thing real quick.
minus two obnoxious flying insects.
apparently there are a few more still.
Okay.
Okay.
So, here is the mutated operators thing.
Wait, we must
Wait, we must
specify that mutates the out
tensor. Huh?
Oh, it's literally like just give it
Oh, it's literally like just give it
some
random Okay, so I misunderstood how this
random Okay, so I misunderstood how this
works. That's
bizarre.
Actually, let's see if this
even was probably not smart enough to
even was probably not smart enough to
know. We'll
see. We're going to try this.
see. We're going to try this.
There's a mutate
thing is it was the other order,
thing is it was the other order,
right? Tensor of
a very weird syntax.
Okay, so it still doesn't recognize this
Okay, so it still doesn't recognize this
thing even though it's definitely
thing even though it's definitely
building it now. Building it with the
building it now. Building it with the
correct back end as well.
Thought that would fix
it
flies. Hang
on. Not one.
I just like clone this repo real
I just like clone this repo real
quick and
quick and
see. Wait, why does it have vector in
see. Wait, why does it have vector in
here? There's no way this matters,
here? There's no way this matters,
right? They actually use this
This is in the C uh CPP
What else I miss?
extension go to h runtime. I have all
this and I
this and I
have
colonel. Got
this. And you got your
this. And you got your
imple
advantage. So I've kind of gotten
advantage. So I've kind of gotten
everything I think out of
here. Gotten pretty much out of
here. Gotten pretty much out of
everything out of here.
extension CP.
Yeah. Oh my gosh.
Why did it even like define it? I guess
Why did it even like define it? I guess
cuz I defined the extension. But yeah.
cuz I defined the extension. But yeah.
Okay. Well, that's actually on me.
Okay. Well, that's actually on me.
That's actually my screw
up. Let's see if it works now.
Boom.
Boom.
Okay, there is the
Okay, there is the
running
running
thing. Still a ton of work to do with
thing. Still a ton of work to do with
the
packaging. I'm committing this though.
So there is one very nice upside to
So there is one very nice upside to
doing all this. Um we also kill the pi
doing all this. Um we also kill the pi
bind
bind
dependency. So we have no pi bind now in
dependency. So we have no pi bind now in
puffer lib since it's just a
puffer lib since it's just a
capi. Uh so once I clean the cuda code
capi. Uh so once I clean the cuda code
up it'll actually be probably a lot
up it'll actually be probably a lot
nicer
nicer
now. But that was a pain. That was a
now. But that was a pain. That was a
total pain. Okay.
total pain. Okay.
Um, I got another hour and a halfish,
Um, I got another hour and a halfish,
hour
hour
45. I'm going to take a couple minutes,
45. I'm going to take a couple minutes,
use the restroom, wake up a little, and
use the restroom, wake up a little, and
then I think we're just going to like,
then I think we're just going to like,
we've done enough packaging today. I'm
we've done enough packaging today. I'm
going to keep going on clean puffer.
going to keep going on clean puffer.
We're going to keep finding more things
We're going to keep finding more things
to clean up.
to clean up.
Um, yeah, we're going to find more
Um, yeah, we're going to find more
things to clean up. That gets rid of the
things to clean up. That gets rid of the
weird CUDA loading in here though at the
weird CUDA loading in here though at the
least. Most of the things that we have
least. Most of the things that we have
to fix should not be that hard. Not
to fix should not be that hard. Not
anywhere near that. So, I'll be back in
anywhere near that. So, I'll be back in
a few
All
right.
Well,
Well,
um, we're like 60
um, we're like 60
lines into this file for optimization.
[Music]
[Music]
Uh, that last one took a whole bunch of
Uh, that last one took a whole bunch of
hours.
There's probably a lot of stuff we could
There's probably a lot of stuff we could
do in here.
What?
What?
Wait, is this a
thing? There's no way this is a thing,
thing? There's no way this is a thing,
right?
2.4
stable. Same. Okay. Well, there's some
stable. Same. Okay. Well, there's some
stuff to mess with in the uh
stuff to mess with in the uh
flags, would
think. We'll see if there are any other
think. We'll see if there are any other
magic
flags. Where's KudnN.benchmark?
flags. Where's KudnN.benchmark?
Benchmark.
So this is like way faster potentially.
Okay. So, we get like 400
something
450. And then with this enabled
Not really seeing any
Not really seeing any
improvement. Interestingly enough,
We'll look for more optins at some
We'll look for more optins at some
point. For now, let's go back to this.
point. For now, let's go back to this.
So, next thing on this list here is
um let's reset seed
um let's reset seed
here. Let's do this.
I think this was the line,
right? That probably already has it
enabled. Oops.
sensor float
sensor float
32 medium.
Okay, so there might actually be
Okay, so there might actually be
something here.
So, we'll do a couple quick things on
So, we'll do a couple quick things on
this and then we'll look at the
losses. That's why we weren't seeing a
losses. That's why we weren't seeing a
performance difference with that other
performance difference with that other
flag.
Cool.
Got an
Got an
[Music]
invite. Okay. So, this is slower here,
invite. Okay. So, this is slower here,
right? Whatever this default is is
right? Whatever this default is is
slower.
a little
bit. I do medium.
40. So there is a difference, but it's
40. So there is a difference, but it's
really not a huge difference.
Interesting. Oh, this could be why am
Interesting. Oh, this could be why am
working though, cuz I had this
working though, cuz I had this
set. It's worth checking.
Okay, let's go to the losses thing
Okay, let's go to the losses thing
next. So, I wanted to see if there's a
next. So, I wanted to see if there's a
better way of doing
this. So, I have it like this so that I
this. So, I have it like this so that I
can iterate over them, I
can iterate over them, I
guess. Here and here.
They don't need to
They don't need to
be uh accumulated really do
I don't think they need to be here.
Well, it's not really any worse that
Well, it's not really any worse that
they are they are here though, is it?
It's cuz the print Well, actually, no,
It's cuz the print Well, actually, no,
they do need to be here. So, they show
they do need to be here. So, they show
up on the dashboard initially. I
guess there anything better I could
could be default dicted.
I don't know how well Python handles
I don't know how well Python handles
string keys internally and
dicks. I don't actually know if it's
dicks. I don't actually know if it's
slow or
slow or
not. You would hope it would do
not. You would hope it would do
something for static string keys,
something for static string keys,
but I mean, you never know.
That's
something and We get utilization as
well. Then we get Ven.
OB shape.
Okay. So,
Okay. So,
uh we can
uh we can
potentially inline some more stuff here.
this config this config that is
this config this config that is
like million times config here.
We could call this segment
length. I think for now we can just
length. I think for now we can just
alias a few things.
Also, this can go
here above this
stuff. Really, this stuff shouldn't
stuff. Really, this stuff shouldn't
matter too much, but uh we'll leave it
matter too much, but uh we'll leave it
like that.
OB's device
uh does not get
used in memory is pinned.
experience
experience
rows on policy rows and off policy
rows. We will punt for now because we
rows. We will punt for now because we
have not
have not
seen any case where off policy rows have
seen any case where off policy rows have
helped but we do want to go there next
helped but we do want to go there next
potentially.
And these should be segments.
Roll out episode segment
trace replay
buffers snippet sample.
I think tra length is
I think tra length is
good or segment length
So this should now be
So this should now be
segments and then this is
Culine. Horizon's good.
Okay, that's a little nicer.
These things need to get
Okay.
So, Horizon
device. I think this is going to go
device. I think this is going to go
print. This is going to go like
print. This is going to go like
somewhere here.
The stuff I'm doing at the moment is
The stuff I'm doing at the moment is
like very very basic, but I honestly I
like very very basic, but I honestly I
think that this makes a huge difference.
think that this makes a huge difference.
And like often times the difference
And like often times the difference
between a good library and a bad library
between a good library and a bad library
is just like how often have you actually
is just like how often have you actually
gone through it and like does this make
gone through it and like does this make
sense? Is this as good as it could be?
sense? Is this as good as it could be?
Is this simple? Can I make it easier?
Is this simple? Can I make it easier?
Can I make it shorter?
just
just
chill. Okay, it gives you your segment
chill. Okay, it gives you your segment
parameters.
Batch size.
I still use
this. Yeah, I still need this, right?
Is there an easier way of saying this?
And then this shouldn't be an assert.
Something like Yes.
I'm pretty much just like trying to make
I'm pretty much just like trying to make
stuff shorter where possible, make names
stuff shorter where possible, make names
better where possible, and like better
better where possible, and like better
semantically group stuff where
semantically group stuff where
possible. That's all I'm doing.
But like imagine I do this to the whole
But like imagine I do this to the whole
file. I cut a couple hundred lines out.
file. I cut a couple hundred lines out.
I make a lot of lines shorter. I make a
I make a lot of lines shorter. I make a
lot of stuff make more sense. That's
lot of stuff make more sense. That's
like a substantially better library
like a substantially better library
right there. Right. Just by doing this.
An idea I really like is um white box
An idea I really like is um white box
software. The idea that instead of me
software. The idea that instead of me
trying to
trying to
focus really heavily on like giving you
focus really heavily on like giving you
an API boundary where it's like you know
an API boundary where it's like you know
you just read the docs, you just read
you just read the docs, you just read
the API whatever I focus on giving you
the API whatever I focus on giving you
like a really really concise simple easy
like a really really concise simple easy
to read easy to modify code. So that
to read easy to modify code. So that
instead of having like a 20,000line
instead of having like a 20,000line
library that does most of what you want
library that does most of what you want
most of the time, but you're screwed
most of the time, but you're screwed
whenever you need to do something that's
whenever you need to do something that's
like outside of the design spec. I give
like outside of the design spec. I give
you one or 2,000 lines uh that does all
you one or 2,000 lines uh that does all
of that, but is also like way way easier
of that, but is also like way way easier
to modify.
to modify.
The trade-off is you're not going to
The trade-off is you're not going to
have all the options, you know, upfront
have all the options, you know, upfront
of the 20,000 line API, but when you go
of the 20,000 line API, but when you go
outside of one of those options as it's
outside of one of those options as it's
intended, it's a lot easier to hack on
intended, it's a lot easier to hack on
this and a lot easier to understand
this and a lot easier to understand
exact
exact
exactly what is going on.
line's too long, right? Where am I
line's too long, right? Where am I
cutting
cutting
these? Is like around
hereish. And I should probably cut at
hereish. And I should probably cut at
least around like try to keep most of it
least around like try to keep most of it
around here.
What I should probably do is just
like Hang on a
second. That looks very different.
If I do like
that. Yeah. I doubt people have like you
that. Yeah. I doubt people have like you
have this much screen space, right? I'll
have this much screen space, right? I'll
check it on my laptop as well.
Why Abuntu over any other
Why Abuntu over any other
OS? Well, I've used Arch for like 5
OS? Well, I've used Arch for like 5
years. It's great until it explodes. Uh
years. It's great until it explodes. Uh
I ran Debian on a bunch of servers,
I ran Debian on a bunch of servers,
which is fine until you realize that
which is fine until you realize that
Debian doesn't have any of the drivers
Debian doesn't have any of the drivers
that you need. So, your stable OS needs
that you need. So, your stable OS needs
to use all the experimental packages
to use all the experimental packages
anyways. Um I've used both Mac and
anyways. Um I've used both Mac and
Windows, which are just trolling for
Windows, which are just trolling for
development straight up.
development straight up.
Uh, what else have I
Uh, what else have I
used? I think that's most of it. So, you
used? I think that's most of it. So, you
know, I probably missed a few in there,
know, I probably missed a few in there,
but I've kind of covered most of the
but I've kind of covered most of the
bases with that.
Does this need to be
defined? Probably doesn't.
Okay, so this is already looking much
Okay, so this is already looking much
cleaner. And then assuming that this
cleaner. And then assuming that this
either gets kept or removed, one of the
either gets kept or removed, one of the
two.
That's pretty clean.
And I I like one of these things need to
And I I like one of these things need to
be assigned. I always don't know like do
be assigned. I always don't know like do
you do
this do this or is this
this do this or is this
disgusting, right? Like I can never make
disgusting, right? Like I can never make
up my
mind. I think that's kind of gross,
mind. I think that's kind of gross,
right?
This is where it should go
logically. I've also never been able to
logically. I've also never been able to
make up my mind on stuff like
make up my mind on stuff like
this. Like that looks too cramped to me.
this. Like that looks too cramped to me.
But then like you almost want to have a
But then like you almost want to have a
double space between sections which is
double space between sections which is
too
much. These are smaller things though.
I think we just get to
I think we just get to
do to do this now, right? We just get to
do to do this now, right? We just get to
keep this
keep this
one like a bunch of
slices and then it's like a
slices and then it's like a
multibuffered
thing. And slices are not hashable
thing. And slices are not hashable
though.
So as of Python 312 slices are hashable.
Cool. Anything else I can do with this?
I think what we do is for now we
just do this.
Can you not do this on a
Can you not do this on a
device? You
can. Welcome, Dragon Bone.
We've gotten quite the upgrade in our
We've gotten quite the upgrade in our
setup here, and I should be back for the
setup here, and I should be back for the
next several weeks with nothing to do
next several weeks with nothing to do
but
build, train agents, and train myself,
So they do make torch zeros work like
So they do make torch zeros work like
this now. I swear that used to not work,
this now. I swear that used to not work,
right?
assert total agents greater than
assert total agents greater than
zero. Probably do that anyways.
Yeah. So, the cool thing here,
um, I have capacity now for 40
um, I have capacity now for 40
servers. You can just see it over the
servers. You can just see it over the
box
box
thereish. Is that still on the camera?
thereish. Is that still on the camera?
Yeah, you can. It's just poking up over
Yeah, you can. It's just poking up over
the box. I have one
the box. I have one
server. I need to buy 39 more as soon as
server. I need to buy 39 more as soon as
the tariffs go
the tariffs go
down, but the tariffs are like plus 40%
down, but the tariffs are like plus 40%
right now. So, I'm waiting for that. And
right now. So, I'm waiting for that. And
then uh other than
then uh other than
that, bunch of gym equipment going in
that, bunch of gym equipment going in
there. Gym equipment. It turns out
there. Gym equipment. It turns out
commercial gym equipment is much cheaper
commercial gym equipment is much cheaper
than servers. So, uh may as well treat
than servers. So, uh may as well treat
myself a little
there. especially if you get like
there. especially if you get like
secondhand commercial stuff.
secondhand commercial stuff.
So yeah, buffer training facility.
So yeah, buffer training facility.
Training for agents. Training for Okay.
I think this is going to get shorter
I think this is going to get shorter
when I fix the slicing stuff. So, I will
when I fix the slicing stuff. So, I will
uh I'll just leave it like long for
uh I'll just leave it like long for
now. Mini batch size.
max mini batch
Guys, I guess you have to do
Guys, I guess you have to do
this. So, this is going to be for
this. So, this is going to be for
gradient accumulation, right?
Wait, what?
awkward little lines like segment here.
Yeah, you need this to Save.
I guess if you do
I guess if you do
this, not as bad, but like then you want
this, not as bad, but like then you want
like this. So much space.
Put this down to here.
and then
and then
dashboard. I like losses
here. It's down
here. It's down
[Music]
here. All right. So, we are
here. All right. So, we are
now That's a lot
now That's a lot
cleaner. It's a lot a lot cleaner. Still
cleaner. It's a lot a lot cleaner. Still
not finished yet. Even just the init
not finished yet. Even just the init
still not finished yet.
I've got uh roughly 40 minutes here
I've got uh roughly 40 minutes here
until dinner.
I guess they're like it annoys me that
I guess they're like it annoys me that
there's still like all these little
there's still like all these little
sections that don't cleanly go with one
sections that don't cleanly go with one
thing or another.
So all these self variables can go
So all these self variables can go
wherever
technically. What if we just did at the
end? We could also do something like
end? We could also do something like
this.
I think they're only needed by this
I think they're only needed by this
dashboard
here. And so now you get to
here. And so now you get to
see this gets set. This gets set.
back end.
I mean this should go in Vean honestly,
I mean this should go in Vean honestly,
right?
I could put it in puffer m
Yeah, there's no reason to have this
Yeah, there's no reason to have this
here.
Okay. So now we have batch size
horizon total
agents
device. I mean this whole thing is a
device. I mean this whole thing is a
block right? This whole thing is the
block right? This whole thing is the
experience setup.
I mean the other option is like we do
I mean the other option is like we do
this All
right. Not bad.
Okay, not bad.
So, the experience section is long, but
So, the experience section is long, but
it's going to get way shorter.
optimizer as well.
We might even just make this thing not
We might even just make this thing not
configurable because Muan's just better.
logging profiling initialization
logging profiling initialization
dashboard. Okay, this is like this is
dashboard. Okay, this is like this is
reasonable. This is like a good start,
reasonable. This is like a good start,
I'd
I'd
say. Let's see if we can get this to
say. Let's see if we can get this to
actually run.
that for now.
Good. That runs.
a lot of
a lot of
code, but I think if a good chunk of
code, but I think if a good chunk of
this goes away from features we don't
this goes away from features we don't
really care to
really care to
support, it'll be reasonable when people
support, it'll be reasonable when people
open Huh?
I would like a better way to check this
I would like a better way to check this
than doing an is
than doing an is
instance every time. I'm just trying to
instance every time. I'm just trying to
like do some things for now.
So we are always doing slicing now.
Do you use end by anywhere in
Do you use end by anywhere in
here? Actually, I think you
do.
Petros, you don't use it anywhere.
We should put this in vectorzation if
We should put this in vectorzation if
we're going to do it this way.
You have this done mask
needs to be
handled as
handled as
tensor. Your non-blocking transfers
Okay.
Okay.
Shorter. Still
Shorter. Still
runs. Still runs
nicely. This unroll nested dict.
Oh, we're not quite there yet. Right.
device.
Okay, so now we get to the logging
Okay, so now we get to the logging
stuff.
Get rid of this for
Get rid of this for
now. We'll add it back better when we
now. We'll add it back better when we
need
it. Instance
I'm a somewhat confused here
I'm a somewhat confused here
because we've appended every single
because we've appended every single
item in a dictionary.
There's two list here.
I mean, this is just poip trying really
I mean, this is just poip trying really
hard to log whatever your crazy data
hard to log whatever your crazy data
This
So,
um, you shouldn't be able to have any
um, you shouldn't be able to have any
dictionaries left in here
dictionaries left in here
essentially, unless you did some
essentially, unless you did some
weird weird weird stuff.
I like that this handles next to
I like that this handles next to
dictionary infos. That's a common use
dictionary infos. That's a common use
case even though I no longer use it for
case even though I no longer use it for
native ms.
Is there any reason I can't just
Is there any reason I can't just
um do the aggregation right
um do the aggregation right
here? I can,
right? Because this is now I can just do
right? Because this is now I can just do
this, right?
Then we no longer need
inpos. Don't need any of this.
If we do this for now.
You don't use infos
here. Yeah, you don't use it at
here. Yeah, you don't use it at
all. Perfect.
Now, what about this little block here?
Okay. So this cannot be
This cannot be a dictionary.
something like that.
It's fine for neural MMO.
And these f lengths
fuses need to be reviewed as part of
sample. Total mini batches.
Okay, that's radian
accumulation and samples.
Mini batch size over horizon.
decent.
I kind of like the idea of
Bomb. Oh, because you reset these
Bomb. Oh, because you reset these
every Okay, we'll leave that as is for
every Okay, we'll leave that as is for
now.
basically every little thing in here
basically every little thing in here
that possibly be weird or confusing I
that possibly be weird or confusing I
want out.
Oops.
Oops.
Yeah. Okay. Be right
Yeah. Okay. Be right
there. Thank
there. Thank
you. Uh, okay. That's it for today. Lost
you. Uh, okay. That's it for today. Lost
track of time, guys. I am uh I will be
track of time, guys. I am uh I will be
back either right after dinner for a
back either right after dinner for a
shorter stream or if not, then tomorrow.
shorter stream or if not, then tomorrow.
So, thanks for tuning in.
So, thanks for tuning in.
Um, if you are interested in getting
Um, if you are interested in getting
involved with the
involved with the
project, join the Discord here,
project, join the Discord here,
discord.gg/puffer. If you want to help
discord.gg/puffer. If you want to help
us out for free, start the repo. And
us out for free, start the repo. And
other than that, you can follow me on X
other than that, you can follow me on X
for more RL content. Thanks and I will
for more RL content. Thanks and I will
be back

Kind: captions
Language: en
We are back live.
Hi. I want to check a couple quick
Hi. I want to check a couple quick
things and then
things and then
um and then I've had some
um and then I've had some
ideas on what I want to do.
So the
uh I think I've decided that I want to
uh I think I've decided that I want to
at least
at least
try formatting this thing as a
class out.
Let
Let
me ban that bot real
me ban that bot real
quick. I don't know why it is that only
quick. I don't know why it is that only
Twitch has the
Twitch has the
bots.
bots.
Okay, welcome folks.
Okay, welcome folks.
So, what we're going to do right
So, what we're going to do right
now, we are going to
now, we are going to
reformat a good chunk of this file uh as
reformat a good chunk of this file uh as
a
a
class. I'm going to see if that cleans
class. I'm going to see if that cleans
anything up. And I
anything up. And I
think it's kind of a tricky thing and
think it's kind of a tricky thing and
there's not really a fully right
there's not really a fully right
answer, but
um some maintenance
outside the mic is probably picking that
outside the mic is probably picking that
up. Fortunately, it'll be done soon.
Um, so yeah, the the thing that I've
Um, so yeah, the the thing that I've
realized is that
realized is that
uh in a a dynamically typed language
uh in a a dynamically typed language
actually classes start to make more
actually classes start to make more
sense because you can't get the type
sense because you can't get the type
wrong on the call signature. It's kind
wrong on the call signature. It's kind
of silly, but there are these sort of
of silly, but there are these sort of
natural things built
natural things built
into a dynamically typed language that
into a dynamically typed language that
push you towards more classes over
push you towards more classes over
strrus.
strrus.
So, I'm just going to try to do it like
So, I'm just going to try to do it like
the Python way, but cleaner, like as
the Python way, but cleaner, like as
clean as I can, and see how that looks
clean as I can, and see how that looks
versus this, which is kind of like me
versus this, which is kind of like me
doing something that would work really
doing something that would work really
well in C, but not great
This at least will get rid of this whole
This at least will get rid of this whole
mess here,
Some of these probably don't need to be
Some of these probably don't need to be
stored.
So here actually we don't want to set
So here actually we don't want to set
policy up
policy up
front because it can get compiled.
I'm trying to be very disciplined here
I'm trying to be very disciplined here
so I don't break anything. And then the
so I don't break anything. And then the
plan is to go back several passes over
plan is to go back several passes over
this uh and just cut it down as much as
this uh and just cut it down as much as
possible.
possible.
If I get this file to a thousand lines
If I get this file to a thousand lines
and everything still works as is and we
and everything still works as is and we
have like our like high quality RL PF, I
have like our like high quality RL PF, I
mean the best RL implementation in a
mean the best RL implementation in a
thousand lines is pretty darn
good. And this will do multi-achine too.
good. And this will do multi-achine too.
We haven't done much with multiachine
We haven't done much with multiachine
yet, but uh we do have support. There
yet, but uh we do have support. There
are a couple people that use it. So,
are a couple people that use it. So,
this will be perfectly good distributed
this will be perfectly good distributed
as well. Welcome YouTube
folks. I've uh been away for about a
folks. I've uh been away for about a
week. You can probably see in the
week. You can probably see in the
background with all the setup I've been
background with all the setup I've been
doing.
doing.
Why we have one
Why we have one
machine got to start somewhere, right?
machine got to start somewhere, right?
You can kind of see it behind the box on
You can kind of see it behind the box on
the rack
the rack
there. But there will be 40 machines
there. But there will be 40 machines
there reasonably soon. Hopefully soon as
there reasonably soon. Hopefully soon as
the tariffs come down
policy stuff like global step and
policy stuff like global step and
epochs. Guess that goes at the start
right here.
We're going to get rid of last log time,
We're going to get rid of last log time,
I'm sure. But for
I'm sure. But for
now, put it
there. Do I use this
I
I
do that uh that's going to get be
do that uh that's going to get be
removed. But so P3 was this like new
removed. But so P3 was this like new
advantage function I
advantage function I
guess. I guess it was an advantage
guess. I guess it was an advantage
function. Yeah. that I was experimenting
function. Yeah. that I was experimenting
with. I still think that there's
with. I still think that there's
something important in
something important in
there. I would like to come back to it
there. I would like to come back to it
even before the next release. It's just
even before the next release. It's just
going to be a matter of how many hours I
going to be a matter of how many hours I
can put in
can put in
streaming to get that all
streaming to get that all
done. Think this will go after our
setup. Or maybe here. Maybe we do put it
setup. Or maybe here. Maybe we do put it
here.
Now, a lot of these things are just
Now, a lot of these things are just
setting params from the config to params
setting params from the config to params
of the
of the
class. That's a thing to
consider if I just want to like set all
consider if I just want to like set all
of them automatically or something like
of them automatically or something like
that.
Do we still use pointer and step
etr? We don't use
this.
this.
Uh, this does not seem to get used
Uh, this does not seem to get used
anywhere else that I can
anywhere else that I can
see. Epoch or
something. Yeah. So, epoch does get
set, but step does not. So, we have
set, but step does not. So, we have
redundant ramps.
Hopefully the uh background noise is not
Hopefully the uh background noise is not
too bad here when I'm talking. I have it
too bad here when I'm talking. I have it
noise gated and compressed as best I
noise gated and compressed as best I
can, but there's power washing outside
can, but there's power washing outside
today. Lots of new uh setup for this
today. Lots of new uh setup for this
place.
A lot of these probably don't need to
A lot of these probably don't need to
even be assigned to the class in the
even be assigned to the class in the
first place,
first place,
right? We can just do like config is
right? We can just do like config is
self.config and then it's just
self.config and then it's just
config this instead of self do. Yeah, we
config this instead of self do. Yeah, we
can simplify quite a bit here.
All this does get used.
Okay. And we're already down
to something more uh reasonable.
mini batch
Nice. Got total agents and total
epochs. Oops.
this down here for
now. And then uh start
time and up time.
We do this after in a netit as
We do this after in a netit as
well. And ideally we would do this a
well. And ideally we would do this a
little later because uh first epoch
little later because uh first epoch
compile screws up screws us up a little
bit. Okay. So now print dashboard's
bit. Okay. So now print dashboard's
going to be a part of this
I don't like this being at the top of
I don't like this being at the top of
the file like this. But
the file like this. But
um we will see about
that just cuz like you open the file and
that just cuz like you open the file and
like you see this, right? Like what the
like you see this, right? Like what the
hell?
Hey,
welcome. Been a while by boxing.
That's
redundant. Fully set up. I don't know if
redundant. Fully set up. I don't know if
I'd say I'm fully set up. We have one
I'd say I'm fully set up. We have one
server in the background there. Uh
server in the background there. Uh
there's more equipment
there's more equipment
coming. Stuff is still a mess and needs
coming. Stuff is still a mess and needs
to be cleaned. This camera quality is
to be cleaned. This camera quality is
actually going to improve. I have a
actually going to improve. I have a
couple more cables and things
couple more cables and things
coming, but and I still don't have
coming, but and I still don't have
running water in this building. Um, but
running water in this building. Um, but
I'm like reasonably set
up. What? Oh, I think I don't think
up. What? Oh, I think I don't think
that's a scar. I think I just dropped a
that's a scar. I think I just dropped a
wrench on myself.
wrench on myself.
Uh, while I
Uh, while I
was I was helping to put the where is
was I was helping to put the where is
it? the big rack
together. But I did finally get to use
together. But I did finally get to use
the equipment uh for the first time this
the equipment uh for the first time this
morning. And it's nice All my stuff
morning. And it's nice All my stuff
right here.
I have a couple questions regarding
I have a couple questions regarding
puffer stuff. Yeah, of
puffer stuff. Yeah, of
course. I can answer things. Half the
course. I can answer things. Half the
reason I stream just here or you want me
reason I stream just here or you want me
to jump in the Discord?
Hello. Hello. Hey. How's it going? Yeah,
Hello. Hello. Hey. How's it going? Yeah,
going good. Thanks. Thanks. Yeah.
going good. Thanks. Thanks. Yeah.
Um, so I was basically trying not sure
Um, so I was basically trying not sure
if you've seen my messages in Discord,
if you've seen my messages in Discord,
but basically I've tried to uh been
but basically I've tried to uh been
working with the latest
working with the latest
dev.
dev.
Um, it's uh, but I've I've run into a
Um, it's uh, but I've I've run into a
couple of issues and I wasn't sure if
couple of issues and I wasn't sure if
this was the type of stuff that I could
this was the type of stuff that I could
uh, uh, that was just not working on my
uh, uh, that was just not working on my
own and or if I could like do any PR for
own and or if I could like do any PR for
that or if it was a non bug or
that or if it was a non bug or
something. Basically, I was trying to
something. Basically, I was trying to
run a default policy, so nonrecurrent
run a default policy, so nonrecurrent
uh policy, and I've been using the I
uh policy, and I've been using the I
think it was in a cleanl or model uh pi
think it was in a cleanl or model uh pi
file, and I've had a couple of issues
file, and I've had a couple of issues
um with the latest uh Python file where
um with the latest uh Python file where
there was missing imports, some missing
there was missing imports, some missing
torch import or something like that.
torch import or something like that.
Let's see.
Let's see.
[Music]
Um, so let me link to you the exact file
Um, so let me link to you the exact file
thing. Oh, so okay. So,
thing. Oh, so okay. So,
um,
um,
uh, let me hang on. I should just switch
branches, but I've also had B try to
branches, but I've also had B try to
help me and he said like it was working
help me and he said like it was working
with Python 3
with Python 3
3.12, but I've had issues running it
3.12, but I've had issues running it
with it as well.
So, I wasn't sure. Maybe I should just
So, I wasn't sure. Maybe I should just
jump on the 2.0 O branch and just stay
jump on the 2.0 O branch and just stay
there. Maybe it's just a little bit more
there. Maybe it's just a little bit more
stable since I'm only running CPU.
stable since I'm only running CPU.
So this is buffer snake with the RNN and
So this is buffer snake with the RNN and
everything. This is now training at 2
everything. This is now training at 2
point something millisecond.
I probably didn't test it without the
I probably didn't test it without the
recurrent policy lately.
Okay. What's going on here?
Okay. What's going on here?
I think there's some remaining E3D
I think there's some remaining E3D
stuff.
stuff.
Mhm.
just some migration pains from uh you
just some migration pains from uh you
know API changes. No worries. Let me fix
know API changes. No worries. Let me fix
those.
those.
Okay. Yeah. That's the point. No, no,
Okay. Yeah. That's the point. No, no,
this is the point. Like I break stuff in
this is the point. Like I break stuff in
dev, right? But like I don't do like
dev, right? But like I don't do like
really comprehensive testing or anything
really comprehensive testing or anything
like that on dev, but like you I it
like that on dev, but like you I it
should be very easy for you to just do
should be very easy for you to just do
this and I'll just fix it live for you
this and I'll just fix it live for you
really quick, right? Because like I
really quick, right? Because like I
didn't test the non-recurrent policy.
didn't test the non-recurrent policy.
Oops, I forgot. Right. Yeah, that makes
Oops, I forgot. Right. Yeah, that makes
total sense. So, basically my question
total sense. So, basically my question
is uh is it better if I wait for you to
is uh is it better if I wait for you to
be on stream and I I do it like this way
be on stream and I I do it like this way
or or is it okay for me to just fix it
or or is it okay for me to just fix it
myself and and PR when it's like as easy
myself and and PR when it's like as easy
as this? For for instance, you can do
as this? For for instance, you can do
that as well either way. Yeah. I mean,
that as well either way. Yeah. I mean,
it's just like I've mostly been away for
it's just like I've mostly been away for
the last week, which is not common,
the last week, which is not common,
right? Because I've been like I've been
right? Because I've been like I've been
helping put stuff together and getting
helping put stuff together and getting
this stuff set up for the last week and
this stuff set up for the last week and
I just finally got um you know working
I just finally got um you know working
internet and was able to do stuff for a
internet and was able to do stuff for a
couple hours last night and that's been
couple hours last night and that's been
about the first time I've been able to
about the first time I've been able to
do anything here. But like this now just
do anything here. But like this now just
returns this
because I know there's the same uh stuff
because I know there's the same uh stuff
happening in a default policy um which
happening in a default policy um which
is well it's because there's a split
is well it's because there's a split
policy. It's the it's the default
policy. It's the it's the default
without the recurrent. There's a
without the recurrent. There's a
different code path for it. So the
different code path for it. So the
recurrent is the one that we usually use
recurrent is the one that we usually use
and that's the one that I test always.
and that's the one that I test always.
Right? But you can see here it's just
Right? But you can see here it's just
like there's this this extra thing. And
like there's this this extra thing. And
now that I'm looking at this and this
now that I'm looking at this and this
ends up being the same code everywhere,
ends up being the same code everywhere,
I'm like, okay, that's a little silly,
I'm like, okay, that's a little silly,
right? So like these things are always
right? So like these things are always
in
in
flux. I value
flux. I value
um you know, constantly improving it
um you know, constantly improving it
over having it always be stable API.
And this also looks dated.
So are we looking to get a uniform uh
So are we looking to get a uniform uh
signature of what the forward method
signature of what the forward method
returns? So action and value because
I mean this is all like I changed a
I mean this is all like I changed a
bunch of stuff right in this latest dev
bunch of stuff right in this latest dev
branch and there are reasons for it.
branch and there are reasons for it.
Like for instance, this split forward
Like for instance, this split forward
function allows us to have a much much
function allows us to have a much much
faster inference time
faster inference time
LSTM. You actually need to use two
LSTM. You actually need to use two
different you need LSTM and LSTM. So
different you need LSTM and LSTM. So
it's a little
jank and I don't like that I'm just
jank and I don't like that I'm just
having to basically copy these uh these
having to basically copy these uh these
functions either for now. But I don't
functions either for now. But I don't
want a base class either. I don't want
want a base class either. I don't want
there to be like a puffer model base
there to be like a puffer model base
class either. We got to figure that out,
class either. We got to figure that out,
right? So there are a lot of these
right? So there are a lot of these
things that are in flux.
What's going to be the difference
What's going to be the difference
between the forward and forward train?
between the forward and forward train?
for train is called is the forward path
for train is called is the forward path
that is called uh when you are training
that is called uh when you are training
and when you use the LSTM
and when you use the LSTM
uh it will be
uh it will be
different because the there's like a
different because the there's like a
CUDA optimization that has to be done
Don't know what I'm doing there.
New value is going to come
New value is going to come
back bashed
I see.
Little tricky.
It's just like there's some shape
It's just like there's some shape
differences, right?
Okay, there you go. So, that's 2.8
Okay, there you go. So, that's 2.8
mil uh 2.9 mil whatever on snake.
mil uh 2.9 mil whatever on snake.
Okay. And then if I do, let me make sure
Okay. And then if I do, let me make sure
it still works.
Yeah. Okay, there you go. And so what
Yeah. Okay, there you go. And so what
what happens if you if you decide to use
what happens if you if you decide to use
uh the the standard policy that is in
uh the the standard policy that is in
the cleanl Python file because here you
the cleanl Python file because here you
have a specific uh policy for snake but
have a specific uh policy for snake but
we used to have a bunch of policies in
we used to have a bunch of policies in
cleanl file too. I'm not sure clean.
cleanl file too. I'm not sure clean.
Okay. Yeah. I'm not sure if that's
Okay. Yeah. I'm not sure if that's
supposed to still be in use cuz which in
supposed to still be in use cuz which in
where it was uh the cleaner
where it was uh the cleaner
cleaner files. Yeah. This is this is now
cleaner files. Yeah. This is this is now
garbage. Like this these are no longer
garbage. Like this these are no longer
used.
used.
Okay. These were these didn't do
Okay. These were these didn't do
anything either. These were always just
anything either. These were always just
wrappers.
wrappers.
Yeah. Okay. So it's puffer lib models
Yeah. Okay. So it's puffer lib models
their stuff in here. We have this
their stuff in here. We have this
default
default
policy and then we have this LSTM
policy and then we have this LSTM
wrapper. And we have this comp policy
wrapper. And we have this comp policy
and we also have this reset.
and we also have this reset.
Okay. So that's where I should look for
Okay. So that's where I should look for
because I've tried to use the default
because I've tried to use the default
policy and say it wasn't working. I
policy and say it wasn't working. I
think there's some uh remaining stuff
think there's some uh remaining stuff
about E3. I mean I I've had some
about E3. I mean I I've had some
remaining stuff about A3B. Not sure.
remaining stuff about A3B. Not sure.
Okay. Hang on.
This should be default policy.
It seems to run. Okay. Well, this might
It seems to run. Okay. Well, this might
might mean something on my end, so I'll
might mean something on my end, so I'll
check. I mean, I could have missed
check. I mean, I could have missed
something as well,
something as well,
right? It's I'm not infallible. I go
right? It's I'm not infallible. I go
fast and make mistakes as a result,
fast and make mistakes as a result,
right?
Um, like you're allowed to criticize
Um, like you're allowed to criticize
stuff. Like I screw stuff up very often.
stuff. Like I screw stuff up very often.
It's just that the overall pace of
It's just that the overall pace of
progress is better as a result. Um, no,
progress is better as a result. Um, no,
it's okay. It's just Yeah, sometimes I'm
it's okay. It's just Yeah, sometimes I'm
just uh confuses to whether something on
just uh confuses to whether something on
my end or just there shouldn't be E3B at
my end or just there shouldn't be E3B at
all is the thing.
I guess this is still in here, but we
I guess this is still in here, but we
don't use these
because you basically didn't find any
because you basically didn't find any
ways to make it 3D work and so you just
ways to make it 3D work and so you just
we're not using it for now. Okay,
we're not using it for now. Okay,
I'm going to add I'm going to commit
I'm going to add I'm going to commit
these for you.
these for you.
Okay, thanks.
You can let me know if that works.
Let me know if that doesn't work.
Let me know if that doesn't work.
Yeah, just changes color, you know.
Mhm. Of course, I'm now then going to
Mhm. Of course, I'm now then going to
have to do like a jank merge to this new
have to do like a jank merge to this new
one. Oh, if I break it again, come yell
one. Oh, if I break it again, come yell
at
me. Oh, yeah. a cache. We're doing um
me. Oh, yeah. a cache. We're doing um
we're starting on a big refactor for the
we're starting on a big refactor for the
release. The main thing.
see how this looks.
Okay, so snake's working. Uh, can you
Okay, so snake's working. Uh, can you
just uh show me the latest common you
just uh show me the latest common you
used to train
used to train
carpole to make sure I'm trying that as
carpole to make sure I'm trying that as
well with the with the default?
well with the with the default?
That's it, man.
Okay. Yeah, thanks. Perfect. Okay. Yeah.
Okay. Yeah, thanks. Perfect. Okay. Yeah.
bet added
bet added
um bet like went and implemented no
um bet like went and implemented no
depth cart pull for us. It's really
depth cart pull for us. It's really
nice. It's trans in like a couple
seconds. Even like really simple stuff
seconds. Even like really simple stuff
like that is actually quite helpful to
like that is actually quite helpful to
us. Just like having classic benchmarks,
makes a difference.
And were you you're doing voids or you
And were you you're doing voids or you
on a different end?
What end were you doing? Uh I'm not the
What end were you doing? Uh I'm not the
one working on boys. I was working on
one working on boys. I was working on
and everyone has different freaking
and everyone has different freaking
usernames like literally everywhere. My
usernames like literally everywhere. My
bad. Yeah, maybe I'll maybe I'll merge
bad. Yeah, maybe I'll maybe I'll merge
them into a single one. But no, I was
them into a single one. But no, I was
working on a common pool resource, but
working on a common pool resource, but
Oh, yeah. Yeah, that's a cool length.
Oh, yeah. Yeah, that's a cool length.
Yeah, I remember we merged that. That is
Yeah, I remember we merged that. That is
a very cool end. I would like to I've
a very cool end. I would like to I've
been improving it.
I would like to see some policies doing
I would like to see some policies doing
something on that. It's like it's kind
something on that. It's like it's kind
of a tricky problem cuz it's like a
of a tricky problem cuz it's like a
delayed gratification kind of a thing.
delayed gratification kind of a thing.
Um like honestly you could probably come
Um like honestly you could probably come
up
up
with like you could probably show that
with like you could probably show that
it's kind of tricky to do that even
it's kind of tricky to do that even
without it being a multi- aent thing.
without it being a multi- aent thing.
Like does it even does it even train
Like does it even does it even train
with one agent or do they just harvest
with one agent or do they just harvest
everything?
everything?
Uh that's a good question. That would
Uh that's a good question. That would
probably be insanity, right? And it
probably be insanity, right? And it
should be very easy to configure, right?
should be very easy to configure, right?
You just pass one agent per end the
You just pass one agent per end the
config. Yeah,
I've actually spent quite a lot of time
I've actually spent quite a lot of time
trying to make them to work. But uh
trying to make them to work. But uh
yeah, they just end up harvesting
yeah, they just end up harvesting
everything. Uh so far I saw a paper on
everything. Uh so far I saw a paper on
this, right? There was just a paper on
this, right? There was just a paper on
this on like um you know agents overh
this on like um you know agents overh
harvesting the bushes or whatever. I I
harvesting the bushes or whatever. I I
don't know if it was deep mind or apples
don't know if it was deep mind or apples
or like whatever but yeah I saw I saw
or like whatever but yeah I saw I saw
something on that and now to be fair I
something on that and now to be fair I
don't know if their solution was any
don't know if their solution was any
good. Very often like these multi-aging
good. Very often like these multi-aging
problems people come up with like very
problems people come up with like very
very hacky and brittle like very fancy
very hacky and brittle like very fancy
solutions.
Okay about that I had another question
Okay about that I had another question
related to multi- aent uh like how would
related to multi- aent uh like how would
you handle dynamic number of agents in
you handle dynamic number of agents in
in the current stuff because we're
in the current stuff because we're
flattening everything, right? But let's
flattening everything, right? But let's
say you have a uh I mean in NMO I'm sure
say you have a uh I mean in NMO I'm sure
you have a um
you have a um
in old dynamic number of in old versions
in old dynamic number of in old versions
I did in the new version I didn't want
I did in the new version I didn't want
to deal with it. Um so to answer your
to deal with it. Um so to answer your
question in 2.0
question in 2.0
And in some of the not too too recent
And in some of the not too too recent
dev branches, it's kind of just works
dev branches, it's kind of just works
because you set this mask and um
because you set this mask and um
anything that is not like anything
anything that is not like anything
that's masked out just doesn't get added
that's masked out just doesn't get added
to the experience buffer. But in the
to the experience buffer. But in the
more recent stuff, uh we restructured
more recent stuff, uh we restructured
the experience buffer in a way that
the experience buffer in a way that
makes that a little bit harder. So we're
makes that a little bit harder. So we're
kind of punting on that for now. Uh that
kind of punting on that for now. Uh that
said, that is going to be something that
said, that is going to be something that
we're going to uh to look at like how we
we're going to uh to look at like how we
adjust for. I don't think it's going to
adjust for. I don't think it's going to
be that bad. I think we're going to end
be that bad. I think we're going to end
up like with a couple padding segments
up like with a couple padding segments
or something in the data. Um because we
or something in the data. Um because we
have GPU drive, right? And GPU drive uh
have GPU drive, right? And GPU drive uh
GPU drive actually
GPU drive actually
requires this type of stuff to
requires this type of stuff to
work. But you know, ideally in the
work. But you know, ideally in the
current form, GPU drive requires that.
current form, GPU drive requires that.
in general like whenever possible I try
in general like whenever possible I try
to restructure MS to not do that because
to restructure MS to not do that because
from an infrastructure perspective like
from an infrastructure perspective like
we can handle it but it's like so much
we can handle it but it's like so much
easier and cleaner to handle things
easier and cleaner to handle things
efficiently when you don't have that.
efficiently when you don't have that.
So whenever you have an M that's like
So whenever you have an M that's like
yeah I could just respawn the agents and
yeah I could just respawn the agents and
then at EVEL time it'll still work for
then at EVEL time it'll still work for
the most part right like they'll still
the most part right like they'll still
want to do the same thing even if agents
want to do the same thing even if agents
are like cut out it's
are like cut out it's
fine but it's it's not even an algorithm
fine but it's it's not even an algorithm
problem at all. It's literally just
problem at all. It's literally just
annoying infrastructure buffers.
annoying infrastructure buffers.
Yeah, because even then in the current
Yeah, because even then in the current
way that you're uh dealing with it, it
way that you're uh dealing with it, it
means that you have to start with a max
means that you have to start with a max
number of agent uh and you're just
number of agent uh and you're just
masking out the ones that aren't there
masking out the ones that aren't there
anymore. That's basically it, right? But
anymore. That's basically it, right? But
yeah, but like this is like this is not
yeah, but like this is like this is not
even an RL problem. This is like a
even an RL problem. This is like a
computer's problem, right? You want to
computer's problem, right? You want to
have your your you want to have your
have your your you want to have your
buffers pre-allocated to that if you
buffers pre-allocated to that if you
want stuff to be fast and like all the
want stuff to be fast and like all the
frameworks that do this like dynamically
frameworks that do this like dynamically
like oh yeah we just store stuff in a
like oh yeah we just store stuff in a
list and then you train at a thousand
list and then you train at a thousand
steps per second yay like no don't do
steps per second yay like no don't do
that.
that.
So it's probably just going to be like
So it's probably just going to be like
try to do it as little as possible
try to do it as little as possible
combined with relatively efficient
combined with relatively efficient
masking.
masking.
Okay. But like this has become a lot
Okay. But like this has become a lot
less interesting of a problem to me
less interesting of a problem to me
frankly because like I kind of realized
frankly because like I kind of realized
that that annoying like variable number
that that annoying like variable number
of agents thing. It was the
of agents thing. It was the
infrastructure difficulty associated
infrastructure difficulty associated
with that was masking a lot of like the
with that was masking a lot of like the
cool multi-agent problems that you'd
cool multi-agent problems that you'd
want to think about. So like you know
want to think about. So like you know
you were trying to think about cool
you were trying to think about cool
multi-agent problems and collaboration
multi-agent problems and collaboration
and things and actually you didn't get
and things and actually you didn't get
stuck on those at all. you just got
stuck on those at all. you just got
stuck on the infrastructure associated
stuck on the infrastructure associated
with variable num agents. If you just do
with variable num agents. If you just do
it with fixed num agents, things get a
it with fixed num agents, things get a
lot easier. You just have to like
lot easier. You just have to like
rethink some MS a little tiny bit
cuz it's a little get stuck, right? It's
cuz it's a little get stuck, right? It's
a little silly to get stuck on a uh like
a little silly to get stuck on a uh like
a fundamental research problem because
a fundamental research problem because
you can't implement a buffer or
you can't implement a buffer or
whatever.
Well, I mean, okay, well, you could
Well, I mean, okay, well, you could
basically have like a fixed size buffer
basically have like a fixed size buffer
and then not even you don't even have to
and then not even you don't even have to
respond the agents basically and just
respond the agents basically and just
max mask them, right? Cuz I mean, you
max mask them, right? Cuz I mean, you
might have environments where it's
might have environments where it's
important for you,
important for you,
you can reuse uh the same row. Yeah.
you can reuse uh the same row. Yeah.
Yeah. Right. Right. Right. I see. Okay.
Yeah. Right. Right. Right. I see. Okay.
Yeah. So, that's fine. That probably
Yeah. So, that's fine. That probably
fixes 99% of the It does the dynamic
fixes 99% of the It does the dynamic
number. Okay. Cool. Cool. Thanks. So, I
number. Okay. Cool. Cool. Thanks. So, I
mean, you can get really pedantic about
it. I'm getting sprayed with power
it. I'm getting sprayed with power
washer. The window in front of me is
washer. The window in front of me is
um let's hope that those don't break
um let's hope that those don't break
with all my stuff
with all my stuff
here.
here.
Uh yeah, like you can get really
Uh yeah, like you can get really
pedantic about it and try to handle
pedantic about it and try to handle
every single possible case or whatever.
every single possible case or whatever.
And like I think petting zoo did this
And like I think petting zoo did this
like there's this knights archer zombies
like there's this knights archer zombies
m that has like heterogeneous spaces and
m that has like heterogeneous spaces and
like variable numb agents like all the
like variable numb agents like all the
things ever and like yeah look it works
things ever and like yeah look it works
we can handle it and yeah but you can
we can handle it and yeah but you can
train at like zero steps a second or
train at like zero steps a second or
whatever. So like there's not much point
whatever. So like there's not much point
there's really not much point in
there's really not much point in
handling everything if it's going to be
handling everything if it's going to be
slow is kind of what I figured out.
Yeah, about that. Is the MI agent uh
Yeah, about that. Is the MI agent uh
from meta stuff binding supposed to work
from meta stuff binding supposed to work
or
or
the what agent?
the what agent?
Uh M agent or MA agents? Not sure how to
Uh M agent or MA agents? Not sure how to
M agent is not meta. Those are totally
M agent is not meta. Those are totally
different.
different.
Okay. I I thought I was from meta. Uh
Okay. I I thought I was from meta. Uh
but yes, I see there there are bindings
but yes, I see there there are bindings
for meta. MTA is not from me. It's not
for meta. MTA is not from me. It's not
from Facebook. It's a just like a
from Facebook. It's a just like a
different new like small uh research
different new like small uh research
group. Um Okay. And
group. Um Okay. And
it's it's kind of like this factoryesque
it's it's kind of like this factoryesque
envir where like agents are collecting
envir where like agents are collecting
resources and converting resources to
resources and converting resources to
energy and like converting one thing to
energy and like converting one thing to
another. Um and yes, it does work. Now,
another. Um and yes, it does work. Now,
we've recently had a little bit of a
we've recently had a little bit of a
difficulty reproducing the really good
difficulty reproducing the really good
training run that I set a couple weeks
training run that I set a couple weeks
ago. I suspect something just changed
ago. I suspect something just changed
under the hood in like one of the M uh
under the hood in like one of the M uh
the M commits or something, but uh you
the M commits or something, but uh you
know, we'll be getting that back because
know, we'll be getting that back because
we did set soda on the on that
we did set soda on the on that
environment a couple weeks ago or a week
environment a couple weeks ago or a week
agoish before I left and it's very
agoish before I left and it's very
unusual for me to like lose a run like
unusual for me to like lose a run like
that as well because like I'm usually
that as well because like I'm usually
pretty good about tracking that stuff.
pretty good about tracking that stuff.
So, uh I I don't know. I suspect
So, uh I I don't know. I suspect
something changed.
I don't know what it would have been,
I don't know what it would have been,
but it's probably something dumb. Like,
but it's probably something dumb. Like,
you know, there was a specific commit I
you know, there was a specific commit I
trained it on and then I probably like
trained it on and then I probably like
pulled a new end version when I was like
pulled a new end version when I was like
messing around with Aaron on learning
messing around with Aaron on learning
progress and then like I don't know like
progress and then like I don't know like
something got reintroduced at some
something got reintroduced at some
point. It's probably something done like
point. It's probably something done like
that.
Okay, I see.
Okay, I see.
Right. Yeah, basically I just wanted to
Right. Yeah, basically I just wanted to
start doing some experiment about uh ex
start doing some experiment about uh ex
different exploration strategies and
different exploration strategies and
that's why I've been uh trying really to
that's why I've been uh trying really to
be able to run most ms in perfect if you
be able to run most ms in perfect if you
want uh exploration stuff the active
want uh exploration stuff the active
area the active research that we have on
area the active research that we have on
that is with Diane
that is with Diane
um I I've seen it do things on snake I
um I I've seen it do things on snake I
have not seen it make snake learn better
have not seen it make snake learn better
stuff but you can definitely get it so
stuff but you can definitely get it so
that you can visually tell apart which
that you can visually tell apart which
which uh policy is which
which uh policy is which
snake. So I think that there is
snake. So I think that there is
something in it's not quite dian like
something in it's not quite dian like
the original paper. I've done some
the original paper. I've done some
modifications to it but there's
modifications to it but there's
something there about like training
something there about like training
visually rec uh distinct
visually rec uh distinct
policies that should allow you to
policies that should allow you to
uh that should allow you to like get
uh that should allow you to like get
better
better
exploration. That's what I would
exploration. That's what I would
suggest.
Okay. C can you uh say again who's the
Okay. C can you uh say again who's the
the other dude working on this on what
the other dude working on this on what
on Diane? No, Dian's a paper name.
D. Yeah. Yeah. So D like Diane is the
D. Yeah. Yeah. So D like Diane is the
the paper name. This is I was working on
the paper name. This is I was working on
that one. I don't have anyone else who
that one. I don't have anyone else who
is working on Diane specifically. though
is working on Diane specifically. though
the meta guys are interested uh in
the meta guys are interested uh in
Diane. I can tell you that because like
Diane. I can tell you that because like
they also would like exploration stuff
they also would like exploration stuff
working. I know exploration is kind of a
working. I know exploration is kind of a
tough one because there's been so much
tough one because there's been so much
bad research on like exploration in RL
bad research on like exploration in RL
because it's just a not a it's often not
because it's just a not a it's often not
a well- definfined problem, right? Oh,
a well- definfined problem, right? Oh,
we want ex agents that explore more.
we want ex agents that explore more.
Well, what does that mean? Right? It's a
Well, what does that mean? Right? It's a
tabularasa agent. Oh, well, they should
tabularasa agent. Oh, well, they should
go through all the rooms. Well, how
go through all the rooms. Well, how
should they know how to do that? Like by
should they know how to do that? Like by
what mechanism should they know how to
what mechanism should they know how to
do that? It's a tabularasa agent. How
do that? It's a tabularasa agent. How
should they learn that? Like what is the
should they learn that? Like what is the
objective that they're maximizing? Oh,
objective that they're maximizing? Oh,
exploration. What like it's circular,
exploration. What like it's circular,
right? So like people try to maximize
right? So like people try to maximize
like surprisal which you can actually
like surprisal which you can actually
quantify. Um you can quantify that in
quantify. Um you can quantify that in
terms of like value function changes or
terms of like value function changes or
you know error and error in predictions
you know error and error in predictions
or stuff like that. Um people try to do
or stuff like that. Um people try to do
like countsbased stuff which kind of
like countsbased stuff which kind of
janky from what I've seen. It works only
janky from what I've seen. It works only
when you have explicit counts otherwise
when you have explicit counts otherwise
it doesn't. Um people have tried to do
it doesn't. Um people have tried to do
noise based stuff which is like R&D
noise based stuff which is like R&D
style work which is a little bit janky
style work which is a little bit janky
as well. Uh the thing that's been the
as well. Uh the thing that's been the
most interesting to me I think is like
most interesting to me I think is like
uh behavioral diversity with the Diane
uh behavioral diversity with the Diane
line of stuff. And we have some
line of stuff. And we have some
modifications that I think are pretty
modifications that I think are pretty
close to doing something in there uh in
close to doing something in there uh in
here. But like it's the type of thing
here. But like it's the type of thing
where I would probably have to go put
where I would probably have to go put
together a test M that's just like an
together a test M that's just like an
empty room with an agent or whatever and
empty room with an agent or whatever and
just see like can you get different
just see like can you get different
agents to go in different directions or
agents to go in different directions or
something basic like even something that
something basic like even something that
simple is
simple is
not like you don't get that by default.
not like you don't get that by default.
Yeah, I was thinking about basically you
Yeah, I was thinking about basically you
would need uh probably to make better
would need uh probably to make better
progress you need a dedicated amp which
progress you need a dedicated amp which
uh probably makes things easier to
uh probably makes things easier to
develop. Uh like a very simple one
develop. Uh like a very simple one
actually as you said doesn't need to be
actually as you said doesn't need to be
complicated but even just an empty room
complicated but even just an empty room
with some agents that start in the
with some agents that start in the
middle would already be something. So I
middle would already be something. So I
mean you could try I if you want to
mean you could try I if you want to
check this stuff out like go take a look
check this stuff out like go take a look
at the some of the Diane stuff that I
at the some of the Diane stuff that I
have. It's very short. It's in that
have. It's very short. It's in that
file. It's all Matt Clean Puffer file.
file. It's all Matt Clean Puffer file.
Um, you can ask me questions, whatever
Um, you can ask me questions, whatever
if you get stuck.
if you get stuck.
Sure. That would be like a good research
Sure. That would be like a good research
side stuff. And if you're trying to get
side stuff. And if you're trying to get
involved with like research side
involved with like research side
contribution, that's a good way to do it
contribution, that's a good way to do it
as well.
as well.
Yeah.
Yeah.
Okay. All
right. Anything else?
Um, okay. Yeah, actually one last
Um, okay. Yeah, actually one last
question about um multi- Asian stuff.
question about um multi- Asian stuff.
So, right now we're just uh training all
So, right now we're just uh training all
the agents are contri contributing to
the agents are contri contributing to
the same policy. Yeah. Um
uh unless I'm wrong. I think uh well all
uh unless I'm wrong. I think uh well all
the experience from every agents is just
the experience from every agents is just
being batched together and sent to one
being batched together and sent to one
policy and then all the agents Yeah.
policy and then all the agents Yeah.
Okay. So what would happen if you wanted
Okay. So what would happen if you wanted
to model some very independent
to model some very independent
behaviors? Let's say from a very naive
behaviors? Let's say from a very naive
point of view, you would want every
point of view, you would want every
agent to have their own policy.
agent to have their own policy.
How would you want that? So, because
How would you want that? So, because
I've done that before and I've done that
I've done that before and I've done that
like literally in 2018 or whatever, it's
like literally in 2018 or whatever, it's
not fun. And the reason it's not fun is
not fun. And the reason it's not fun is
because you're splitting your data n
because you're splitting your data n
ways now, right? You're splitting your
ways now, right? You're splitting your
data across a whole bunch of different
data across a whole bunch of different
policies. Um, there are a couple cases
policies. Um, there are a couple cases
where it makes hardware sense to do
where it makes hardware sense to do
that. If you look at some of like
that. If you look at some of like
Brennan's work on Madrona, when like the
Brennan's work on Madrona, when like the
agent batch sizes get to be so large,
agent batch sizes get to be so large,
you can't train anymore. So, like you
you can't train anymore. So, like you
may as well just train extra policies to
may as well just train extra policies to
play against. That's a thing. Um,
play against. That's a thing. Um,
there's also work that's like indicating
there's also work that's like indicating
that environment diversity is more
that environment diversity is more
important than behavior diversity. So
important than behavior diversity. So
like it might make more sense to look at
like it might make more sense to look at
like automated end randomization more
like automated end randomization more
than automated opponent randomization.
than automated opponent randomization.
Um, that I would also kind of buy. I
Um, that I would also kind of buy. I
think though if you like to your point,
think though if you like to your point,
Diane does tie in with this because what
Diane does tie in with this because what
Diane lets you do is it lets you get
Diane lets you do is it lets you get
conditionally different behavior out of
conditionally different behavior out of
the same policy. So you actually still
the same policy. So you actually still
get to share all that experience and use
get to share all that experience and use
it to train the one policy. you get way
it to train the one policy. you get way
more training data but still potentially
more training data but still potentially
get different distinct behaviors. Now
get different distinct behaviors. Now
getting that to actually work is very
getting that to actually work is very
tricky. But if you were to do that then
tricky. But if you were to do that then
you would basically eliminate the need
you would basically eliminate the need
for all forms of like historical or
for all forms of like historical or
fictitious selfplay uh league training
fictitious selfplay uh league training
like you could kind of do it all within
like you could kind of do it all within
one policy and share all the data and
one policy and share all the data and
that would be very very powerful. So
that would be very very powerful. So
that's kind of why I like the Diane line
that's kind of why I like the Diane line
because it's not just exploration it
because it's not just exploration it
also kind of solves like multi- aent
also kind of solves like multi- aent
competitive dynamics being jank at the
competitive dynamics being jank at the
same time.
same time.
Okay. Okay. But but then what would
Okay. Okay. But but then what would
happen if you were to want to model some
happen if you were to want to model some
sort of multi- aent setting let's say um
sort of multi- aent setting let's say um
I don't know you want to model some uh
I don't know you want to model some uh
urban uh citizen path or something some
urban uh citizen path or something some
social dynamics where you actually do
social dynamics where you actually do
want each agent to uh display a very
want each agent to uh display a very
different sort of behaviors
different sort of behaviors
uh maybe with uh some agents uh uh
uh maybe with uh some agents uh uh
sharing their own policy with their kids
sharing their own policy with their kids
if you were to like you know
if you were to like you know
specifically let's talk about you know
specifically let's talk about you know
social dynamics some some some sort of
social dynamics some some some sort of
uh genetic stuff that gets passed away
uh genetic stuff that gets passed away
to the child um in this case you would
to the child um in this case you would
truly want them to have a different
truly want them to have a different
policy right well then that's not even
policy right well then that's not even
going to be RL necessarily anymore if
going to be RL necessarily anymore if
you're doing genetic stuff
you're doing genetic stuff
um and also like you got to be careful
um and also like you got to be careful
because if you're just training if
because if you're just training if
you're just going to train a bunch of
you're just going to train a bunch of
policies on the same data they're going
policies on the same data they're going
to learn roughly similar stuff anyway
to learn roughly similar stuff anyway
ways subject to I mean I have a paper on
ways subject to I mean I have a paper on
that sometimes they don't but usually
that sometimes they don't but usually
they learn pretty similar stuff so like
they learn pretty similar stuff so like
it's not the first thing I would look at
it's not the first thing I would look at
let's put it that way just training
let's put it that way just training
independent policies it's like oh I want
independent policies it's like oh I want
independent behavior so I want
independent behavior so I want
independent policies that's not the
independent policies that's not the
first thing I would look to say that um
first thing I would look to say that um
because first of all each agent is being
because first of all each agent is being
computed independently and has an
computed independently and has an
independent state anyways when you have
independent state anyways when you have
a shared policy right it's not like
a shared policy right it's not like
you're it's not a joint it's very
you're it's not a joint it's very
different from like a joint policy in
different from like a joint policy in
which you're taking n observations from
which you're taking n observations from
n different agents in and then
n different agents in and then
outputting jointly n different
outputting jointly n different
decisions. No, you're still outputting,
decisions. No, you're still outputting,
you know, each agent's decisions
you know, each agent's decisions
independently and conditioned on their
independently and conditioned on their
own state.
Yep.
So, I mean like there is reason to do
So, I mean like there is reason to do
this stuff. Like if you look at league
this stuff. Like if you look at league
play style stuff, um that's definitely a
play style stuff, um that's definitely a
thing. But like I almost wonder what
thing. But like I almost wonder what
would happen with the League Play stuff
would happen with the League Play stuff
if you tried to just make it conditional
if you tried to just make it conditional
on the same policy. I actually think
on the same policy. I actually think
that there was some follow-up that might
that there was some follow-up that might
have done things like that. Um it's one
have done things like that. Um it's one
of the things I want to look into in the
of the things I want to look into in the
next like pass on re next research pass.
All right. Yeah. Well, that uh that
All right. Yeah. Well, that uh that
crit. Thanks.
crit. Thanks.
Mhm. Um, yeah. All right. I think I'm
Mhm. Um, yeah. All right. I think I'm
going to go back try to uh, you know,
going to go back try to uh, you know,
just uh make the latest step branch work
just uh make the latest step branch work
and then uh, Sounds good. Maybe I can. I
and then uh, Sounds good. Maybe I can. I
actually had a couple of improvements
actually had a couple of improvements
over my M2, so maybe I can PR that once
over my M2, so maybe I can PR that once
I'm done, right? Yeah, looking forward
I'm done, right? Yeah, looking forward
to I've just been on autopilot
to I've just been on autopilot
refactoring stuff here.
refactoring stuff here.
Yeah, I've seen that. All right, good
Yeah, I've seen that. All right, good
chat. Uh, right. Yeah,
thanks. That's cool.
thanks. That's cool.
So for folks watching, if you contribute
So for folks watching, if you contribute
to Puffer Lib and you have
to Puffer Lib and you have
questions, that's how easy it is to get
questions, that's how easy it is to get
help when you get stuck.
to one message on. I do have one meeting
to one message on. I do have one meeting
that is going to be scheduled
today. Often have meetings that are just
today. Often have meetings that are just
scheduled same day. I honestly think
scheduled same day. I honestly think
that's better. You should not have such
that's better. You should not have such
a full calendar that you can't just like
a full calendar that you can't just like
schedule stuff same day.
schedule stuff same day.
I get way more stuff done when I have
I get way more stuff done when I have
like fully open calendar and like no
like fully open calendar and like no
pressure on any specific Okay.
And then this roll out
And then this roll out
thing is separate,
thing is separate,
right? This roll out thing is
right? This roll out thing is
separate. So that's everything that
separate. So that's everything that
needs to be tabbed. Uh let's just see
needs to be tabbed. Uh let's just see
what I forgot.
Uh, what is wrong with
this? Oh,
oops. All right. So, we have to fix the
oops. All right. So, we have to fix the
call signatures.
I'll just call this
puffel. But like now that I have these
puffel. But like now that I have these
two files together, I can kind of see
two files together, I can kind of see
that they're like they're coupled kind
that they're like they're coupled kind
of weirdly, right?
of weirdly, right?
like the amount of stuff that I'm like
like the amount of stuff that I'm like
grabbing from Puffarel here.
That should be
off. Okay, that's kind of jank.
Ah,
Thomas. Isn't that like
Thomas. Isn't that like
ridiculous that you can do that? You can
ridiculous that you can do that? You can
just leave a trailing comment and then
just leave a trailing comment and then
like the tpple evaluates to true.
And I actually don't hate Python as much
And I actually don't hate Python as much
as like a lot of devs do, but when you
as like a lot of devs do, but when you
start writing too much
Python, there's definitely such thing as
Python, there's definitely such thing as
writing too much Python.
So this is tabbed. Uh this is indented
So this is tabbed. Uh this is indented
one too
much.
much.
Wait, this is
Wait, this is
not Oh, this is not
not Oh, this is not
invented. What happened?
Okay, these do not need to
Okay, these do not need to
be these don't need to be here, right?
be these don't need to be here, right?
These can be
These can be
untapped. They don't depend on literally
untapped. They don't depend on literally
anything.
And there's your instantaneous
And there's your instantaneous
training. It
works.
works.
So, setting up the
So, setting up the
warehouse. Welcome.
We have uh pretty much everything except
We have uh pretty much everything except
except the servers. Well, there's more
except the servers. Well, there's more
equipment as well. So, but we have a lot
equipment as well. So, but we have a lot
of stuff nicely set
up. It's just
up. It's just
like 40 capacity with uh for 40 machines
like 40 capacity with uh for 40 machines
for training agents and 1,000 square
for training agents and 1,000 square
feet for gym equipment to train me.
That is pretty much the whole building
though. Like the gym area, the gym and
though. Like the gym area, the gym and
server area is like twothirds of the
server area is like twothirds of the
space.
Okay. So, what do we think about this
Okay. So, what do we think about this
initial
initial
refactor? There's way too much stuff
refactor? There's way too much stuff
imported
here. Hang on. There's We can
here. Hang on. There's We can
consolidate this, can't we?
Yeah, you're looking
Yeah, you're looking
different. I should be looking about the
different. I should be looking about the
same except for the new camera, which
same except for the new camera, which
this is not the final camera quality.
this is not the final camera quality.
This is
This is
um All right, here we're going to do a
um All right, here we're going to do a
product unendorsement on stream. Don't
product unendorsement on stream. Don't
buy these cables. They suck. They put
buy these cables. They suck. They put
too much force on your other important
too much force on your other important
things and this thing broke my nice cam
things and this thing broke my nice cam
link within 30 minutes of using it. So I
link within 30 minutes of using it. So I
am uh I had to buy another one of these
am uh I had to buy another one of these
which probably will be here today or
which probably will be here today or
tomorrow. And uh then I will actually
tomorrow. And uh then I will actually
have full camera
have full camera
quality. I also have to probably
quality. I also have to probably
fine-tune the audio a little bit. But we
fine-tune the audio a little bit. But we
do
have nice new audio
setup. The goal is to upgrade quite a
setup. The goal is to upgrade quite a
bit.
It took a while to figure all that stuff
It took a while to figure all that stuff
out.
Okay, that works nicely.
Okay, that works nicely.
Now, what do we think of the new uh the
Now, what do we think of the new uh the
new structure
new structure
here? Lot of imports. I want to like
here? Lot of imports. I want to like
compress dependencies a little bit. But
compress dependencies a little bit. But
then we have clean
then we have clean
puffl with what will be like better
puffl with what will be like better
grouped
grouped
arguments. This is now how long is this
thing?
249. So it's a little under 200 lines
249. So it's a little under 200 lines
for a net. I think we can easily get
for a net. I think we can easily get
that down to like 150.
This print dashboard is way too high
This print dashboard is way too high
up. It should be eval
up. It should be eval
train. And then we can put this stuff at
train. And then we can put this stuff at
the bottom.
Okay. And now the bottom of our trainer
Okay. And now the bottom of our trainer
is 900 lines.
is 900 lines.
So if we can cut two 300 off of
this, which we should be able to do, not
this, which we should be able to do, not
just today, because uh some of it
just today, because uh some of it
requires like removing code paths that
requires like removing code paths that
we no longer need to use for which we
we no longer need to use for which we
need to run really comprehensive
need to run really comprehensive
experiments.
I do probably want to do like the
I do probably want to do like the
distributional RL thing though. I think
distributional RL thing though. I think
we should try that at
least. Right. So here we have
puffer. I guess we just start on
puffer. I guess we just start on
refactoring all this.
Um, is it
Um, is it
crazy how much other stuff from the
crazy how much other stuff from the
config do we set?
We don't set like a ton of other stuff
We don't set like a ton of other stuff
in the config, do
we? Yeah.
So, but we do end up accessing the
So, but we do end up accessing the
config a ton, right?
So, hang on. What if I do
this? I knew what I was going to do.
this? I knew what I was going to do.
What if I do this?
That probably
That probably
cleans a lot of stuff up,
right? Is there any reason that would be
right? Is there any reason that would be
a bad idea?
Not
particularly. Is that reasonable to do
particularly. Is that reasonable to do
for something with a massive
for something with a massive
config instead of keeping the config
config instead of keeping the config
around and having to like
around and having to like
do stuff from
that. I mean the alternative,
that. I mean the alternative,
right? Okay, hang on. There are a couple
right? Okay, hang on. There are a couple
of alternatives here. Let's not be too
of alternatives here. Let's not be too
ridiculous. There is actually a value in
ridiculous. There is actually a value in
knowing what comes from the config
knowing what comes from the config
because you can know what you have to
because you can know what you have to
set in the config. So what if instead of
set in the config. So what if instead of
doing
doing
that, what if I do selfconfig equal
that, what if I do selfconfig equal
config? I remove these and then I
config? I remove these and then I
exclusively grab stuff from the
exclusively grab stuff from the
config. What about that?
And then I just fix
this anywhere that I've used
it which like this can be config. egg.
I guess the only thing is like if there
are Well, if you had to like overwrite
are Well, if you had to like overwrite
the device or
the device or
something, then it wouldn't be so
something, then it wouldn't be so
good. Oh, you can also delete the self
good. Oh, you can also delete the self
from all these. You never want to be
from all these. You never want to be
doing selfconfig whatever. It's just do
doing selfconfig whatever. It's just do
the one
access. I uh I intentionally have my
access. I uh I intentionally have my
self keyword in a really annoying to
self keyword in a really annoying to
read font so that I use it less
Okay, this now works
Okay, this now works
again. So, we no longer have self-config
again. So, we no longer have self-config
everywhere. We no longer have mixed
everywhere. We no longer have mixed
config and um like config stuff with the
config and um like config stuff with the
clean RL uh clean puffl stuff. So, that
clean RL uh clean puffl stuff. So, that
shortens a little bit, right?
Okay. 1450 lines. A little tiny bit
Okay. 1450 lines. A little tiny bit
shorter as
well. What's the next thing to tackle? I
well. What's the next thing to tackle? I
think I want to look high level
think I want to look high level
first. Let's look for high level wins
first. Let's look for high level wins
first. You can really like fine-tune
first. You can really like fine-tune
this over time.
LSTM slice
LSTM slice
shenanigans. There's stuff to
fix. I could get rid of cron
fix. I could get rid of cron
here. I still want to do stuff with it
here. I still want to do stuff with it
though.
There's still stuff to do here.
I'm just looking for like where the
I'm just looking for like where the
majority
majority
of of fluff
is. There's a little bit around
is. There's a little bit around
LSTMs. Like there's a little bit around
logging. There's a lot around uh
logging. There's a lot around uh
different advantage functions.
different advantage functions.
And a little bit of brown dying as
And a little bit of brown dying as
well. Experience buffer stuff
too. A little bit around
losses, little bit of flop. Like it's a
losses, little bit of flop. Like it's a
lot of just there being a little bit in
lot of just there being a little bit in
a bunch of places.
a bunch of places.
little bit in
little bit in
storage. This is P30 and like
storage. This is P30 and like
alternatives, different
alternatives, different
methods, things that don't need to
methods, things that don't need to
necessarily be
necessarily be
supported. Too many options is
bad. SPS not being logged, we want that
back. Saving and loading needs to be
back. Saving and loading needs to be
changed as well.
the dashboard. The dashboard is long,
the dashboard. The dashboard is long,
but the dashboard's actually pretty
but the dashboard's actually pretty
dense with uh correct
code. Dashboard's pretty
good. Got some distributed shenanigans.
good. Got some distributed shenanigans.
We've got this count params. It's used
We've got this count params. It's used
once
Let's see once.
mean and
log. Yeah, there's a little bit of fluff
log. Yeah, there's a little bit of fluff
in mean and
log artifact
log artifact
stuff.
Checkpointing. Checkpoint.
Okay, I'm pretty confident then we're at
Okay, I'm pretty confident then we're at
the point here
where I mean this stuff. Yeah, like
where I mean this stuff. Yeah, like
there are few there are a few things
there are few there are a few things
that like I just haven't bothered to get
that like I just haven't bothered to get
to. Um profiling is pretty
to. Um profiling is pretty
dense. So yeah, there just there are a
dense. So yeah, there just there are a
few things I haven't bothered to get to.
few things I haven't bothered to get to.
Um, there are a few things that could be
Um, there are a few things that could be
done
better, but generally like this is
better, but generally like this is
pretty good what we have here. It's just
pretty good what we have here. It's just
that we have a lot of leftover fluff
that we have a lot of leftover fluff
from um all these other methods that
from um all these other methods that
we've been like supporting and then we
we've been like supporting and then we
have leftover fluff
have leftover fluff
um just like little bits here and there.
So probably most of the optimization is
So probably most of the optimization is
going to come
going to come
from or a good chunk of the optimization
from or a good chunk of the optimization
is going to come from little bits of
is going to come from little bits of
fluff. Just removing little bits of
fluff. Just removing little bits of
fluff and then a little bit of the
fluff and then a little bit of the
optimization as well is going to come
optimization as well is going to come
from
uh us figuring out those new methods.
uh us figuring out those new methods.
Let me just go look up one thing to see
Let me just go look up one thing to see
how likely it
is. What was the
is. What was the
uh
uh
distributional? What's like the main
distributional? What's like the main
one? Is it this one?
I think it's
this. This is like the
main the main one that people use,
main the main one that people use,
right?
I'm just checking this because I want to
I'm just checking this because I want to
see how hard it would be to like mess
see how hard it would be to like mess
with P30 real
with P30 real
quick. If this does anything
Okay, so this is all their math that
Okay, so this is all their math that
they say you can skip. Lovely. We did
they say you can skip. Lovely. We did
some
math. We will model the value
math. We will model the value
distribution using a discrete
distribution whose support is the set of
distribution whose support is the set of
atoms. Okay, this is all this math and
atoms. Okay, this is all this math and
literally they're just bucketing the
literally they're just bucketing the
value
function. This is a softmax.
function. This is a softmax.
So all this math just to say bucket the
So all this math just to say bucket the
value function.
So hang on. This
So hang on. This
is if I can just figure out what their
is if I can just figure out what their
algorithm is. We can probably do this
algorithm is. We can probably do this
very quickly.
Uh, let me see. What's this say? French
Uh, let me see. What's this say? French
girls are interested in getting involved
girls are interested in getting involved
with your RL drone
with your RL drone
project. Have to find an object in a
project. Have to find an object in a
room. Shoots a laser at the
room. Shoots a laser at the
object. Oh,
object. Oh,
cool. Yeah. Yeah, I mean we haven't
cool. Yeah. Yeah, I mean we haven't
really done much with the drone stuff
really done much with the drone stuff
yet, but we do have some people in
yet, but we do have some people in
Puffer that have built like a fast uh
Puffer that have built like a fast uh
continuous end. And Spencer's also been
continuous end. And Spencer's also been
interested in this stuff as
interested in this stuff as
well. See if I can find
it. They're doing coordinate. So is the
it. They're doing coordinate. So is the
stuff they're doing at the
stuff they're doing at the
moment.
moment.
Um, so multiple drones. Yeah. Is the
Um, so multiple drones. Yeah. Is the
stuff she's doing at the moment like RL
stuff she's doing at the moment like RL
or is it just coordination with drones
or is it just coordination with drones
and like the RL is the next thing to
try? Cuz if there's no RL in it yet, we
try? Cuz if there's no RL in it yet, we
do have there's some students here. If
do have there's some students here. If
you scroll up a bit, trying to see where
you scroll up a bit, trying to see where
it is. Yeah, these guys um they made
it is. Yeah, these guys um they made
like a really simple drone sim in Puffer
like a really simple drone sim in Puffer
and then they trained it really fast and
and then they trained it really fast and
they're looking to PR it as well. It's
they're looking to PR it as well. It's
right
right
here and they actually ran it on a real
here and they actually ran it on a real
drone and it did like kind of okay
drone and it did like kind of okay
apparently.
apparently.
This thing doesn't run. But
yeah, there is stuff to do in this
space. Not RL right now. Well, then this
space. Not RL right now. Well, then this
is a good spot to start because it's
is a good spot to start because it's
like relatively simple
like relatively simple
sim. Would be good to get this thing in
sim. Would be good to get this thing in
puffer. Would be good to get this thing
puffer. Would be good to get this thing
running on more real drones. And I have
running on more real drones. And I have
lots of space here if I want to. Like I
lots of space here if I want to. Like I
can order some to here as well. We can
can order some to here as well. We can
see uh how they do on real drones. I've
see uh how they do on real drones. I've
got lots of space where it doesn't
got lots of space where it doesn't
really matter what they run
into. I'm afraid to report RL works. RL
into. I'm afraid to report RL works. RL
is
good. I've been trying to spend less
good. I've been trying to spend less
time on X.
time on X.
Honestly, would never work on
Honestly, would never work on
RL.
No, RL is
No, RL is
good. It's just
good. It's just
hard. But it is good.
What do I even have for P30 right
now? Oh, I don't even have this in here
now? Oh, I don't even have this in here
at the moment, do
at the moment, do
I? Cuz this was C. This wasn't CUDA,
I? Cuz this was C. This wasn't CUDA,
right? Or did I write a CUDA kernel for
right? Or did I write a CUDA kernel for
this? Oh, wait. I thought I did. Yeah, I
this? Oh, wait. I thought I did. Yeah, I
have P30 right
here.
here.
Yeah. Well,
I'm trying to think how much I want to
I'm trying to think how much I want to
like put into this right
now. I should probably do everything
now. I should probably do everything
except this
except this
first. Yeah, that would be smarter. Like
first. Yeah, that would be smarter. Like
it's my tendency to want to dive into
it's my tendency to want to dive into
the rabbit holes here, but it would be
the rabbit holes here, but it would be
way smarter to just like go through do
way smarter to just like go through do
the line by line optimizations, line by
the line by line optimizations, line by
line like cleanups, and then we'll see
line like cleanups, and then we'll see
how much code we end up left
how much code we end up left
with. Starting literally from top
with. Starting literally from top
here. Need this anymore.
Yo, stuff works on the latest dev
Yo, stuff works on the latest dev
branch.
Thanks. It
Thanks. It
should generally things should work by
should generally things should work by
default unless I break them.
Ideally, I'd be knowing puffer enough to
Ideally, I'd be knowing puffer enough to
confidently fix stuff. No
worries. I try not to break too much
worries. I try not to break too much
stuff.
Is there a reason this has so many of
Is there a reason this has so many of
these these
lines? Can I not
lines? Can I not
like Does it like have to be a certain
like Does it like have to be a certain
number of
boxes? For some reason, it's an eight
boxes? For some reason, it's an eight
line box. Like exactly an eight line
line box. Like exactly an eight line
box. I don't know why
The corners actually break on my rounded
The corners actually break on my rounded
box anyways, don't they?
Does every policy is supposed to output
Does every policy is supposed to output
actions? Default model outputs
logits. Every policy I think is supposed
logits. Every policy I think is supposed
to output logits not actions.
I think it's labeled actions, but it is
I think it's labeled actions, but it is
logits or something like that. I need to
logits or something like that. I need to
clean some things
up. Yeah.
This is the same thing, isn't
it? Did they add this
it? Did they add this
recently? I don't think IPRed it,
right? Well, that seems like it just
right? Well, that seems like it just
works, right?
I forget if it like looked worse
I forget if it like looked worse
on ASI or
something. I think we'll just keep that.
That's a little better.
optimizer is not optional. So, I don't
optimizer is not optional. So, I don't
know why there's a default
This is actually a config now, isn't
it? So, we don't
it? So, we don't
need we don't need this.
It's config back end
policy. These are all
reasonable and takes either wand or
reasonable and takes either wand or
Neptune which you pass in
I believe you passed this in because of
sweeps. Hang on, let me see. Why do you
sweeps. Hang on, let me see. Why do you
Why do you pass this
in? Okay. So, you knit stuff in
in? Okay. So, you knit stuff in
here, right?
and you do a bunch of
and you do a bunch of
nonsense and then when you call
sweep, you don't
init. So,
um, yeah, the way I have this set up,
um, yeah, the way I have this set up,
there's no reason to pass these in,
there's no reason to pass these in,
right?
I guess cuz like the final eval or
something. But like all this stuff
something. But like all this stuff
should be probably just wound up into
should be probably just wound up into
the
the
uh into the
training. So hang on. You have your back
training. So hang on. You have your back
ends.
this. There was a reason to pass
And then there's also this DDP
stuff. Yeah, I think Clean Puffer should
stuff. Yeah, I think Clean Puffer should
just eat this.
The only thing is that there's this args
The only thing is that there's this args
of XD and args of tag.
So, how's our run doing?
about what we
expect.
expect.
Ah okay. So they
Ah okay. So they
uh they have Neptune scale. Now,
Is there any reason this can't just go
Is there any reason this can't just go
into config?
I just need the uh the defaults I guess
right in
It this takes
ID. Oh, wait. Maybe this is my own
stuff. Yeah, this
stuff. Yeah, this
is Neptune and it run.
This doesn't even get
This doesn't even get
used. This ID
doesn't. Resume doesn't get freaking
doesn't. Resume doesn't get freaking
used either.
I see. So that because I didn't
I see. So that because I didn't
implement it yet. So there should be
implement it yet. So there should be
this is for
resuming. We should be able to do
resuming. We should be able to do
this. I just haven't done it yet. Fine.
Yeah, these can just be none by default.
Yeah, these can just be none by default.
Vault.
do not have config
Yeah. So, it's args of run
Yeah. So, it's args of run
ID. Okay. But stuff in base doesn't get
ID. Okay. But stuff in base doesn't get
passed. Oops. Covering
passed. Oops. Covering
chat. The stuff that's in base doesn't
chat. The stuff that's in base doesn't
get passed in. Only stuff that's in
get passed in. Only stuff that's in
train gets passed
in. Move it to train for now and then
in. Move it to train for now and then
figure it out.
or move it to workspace
maybe. Or maybe move everything under
maybe. Or maybe move everything under
workspace to
train be easiest for now.
We do
this. Envis
name. Okay. So, we'll just we'll leave
name. Okay. So, we'll just we'll leave
that one for now, but we'll do this.
We'll configure our
We'll configure our
loggers
loggers
ideally late as
possible here.
Not
bad.
bad.
Okay, then we can actually take these
Okay, then we can actually take these
args out.
The config gets
simpler
now. Args of Neptune. So this is now
now. Args of Neptune. So this is now
going to get screwy again.
going to get screwy again.
It is.
Do I want to thread all this into a
Do I want to thread all this into a
um Where is
it? Here's your
it? Here's your
train. So, we want to thread all this
train. So, we want to thread all this
together.
I kind of want to like just get rid of
I kind of want to like just get rid of
this whole function at some point, don't
I? Kind of.
So then where would this logic
go? Like reasonably this logic could go
I mean, some of it could go into
um
um
into just the bottom like main
script. That'll work for everything but
script. That'll work for everything but
like sweep and DDP.
Yeah. So, there's like two there two
Yeah. So, there's like two there two
different things going on here,
right? Hey, bet. How's it
going?
Could this logic be in sweep
Could this logic be in sweep
somehow?
somehow?
Could be in
sweeps. I don't know what you
sweeps. I don't know what you
expected. I I don't know what you
expected. I I don't know what you
expected doing
that. I have four PRs
that. I have four PRs
open. What? What do you have
open? Oh, very nice.
open? Oh, very nice.
And these work.
doesn't train well
locally. I can fix the slice error, but
locally. I can fix the slice error, but
doesn't train well
doesn't train well
locally. Does it train
locally. Does it train
like that means it doesn't work,
like that means it doesn't work,
right? because this definitely trained
right? because this definitely trained
well
before. I
see that. What should I merge
here? This. This
Tell me what is merged and I will
merge not blaster connect for a new
bind. Okay. Well, this is fine if this
bind. Okay. Well, this is fine if this
actually works. Let's see.
actually works. Let's see.
We have
binding you. It says doesn't train well
binding you. It says doesn't train well
locally on triple triad. Like does that
locally on triple triad. Like does that
mean something broke because it trained
mean something broke because it trained
well before or does this mean that it
well before or does this mean that it
doesn't train with like Adam and
doesn't train with like Adam and
whatever defaults are there for muon?
Yeah. So things don't work locally,
Yeah. So things don't work locally,
right? But did
you Okay, so we actually do need to
test. Yeah, cuz the puffer box you were
test. Yeah, cuz the puffer box you were
on got sent to main
on got sent to main
gear. I need to get more puffer
boxes.
boxes.
Okay. Well, I'm gonna have to figure out
Okay. Well, I'm gonna have to figure out
who's on what box and give you
one. Okay, you know what? Let's just do
one. Okay, you know what? Let's just do
Let's do something.
they're just yolo
they're just yolo
merging your
merging your
stuff.
Merge, we do this one.
And we'll do this
one. Why is
one. Why is
um why is there so much new stuff in
um why is there so much new stuff in
ending
here? What is this?
[Music]
[Music]
No, that is
sauce. Okay. But like I think you're
sauce. Okay. But like I think you're
misunderstanding the
misunderstanding the
way this is supposed to
way this is supposed to
work. I hope I didn't just merge that in
work. I hope I didn't just merge that in
the other
thing. No, you didn't. So, this one is
clean. I don't care if it doesn't break
clean. I don't care if it doesn't break
anything. It's going to cause me
anything. It's going to cause me
headaches if I don't now look at it and
headaches if I don't now look at it and
figure out. Um, hang on.
Let me do this first.
Hang on. Doesn't snake
already. And I did not make a binding
already. And I did not make a binding
for
snake. Uh, was Connect 4 this fast
snake. Uh, was Connect 4 this fast
before? What did you do on speed with
before? What did you do on speed with
Connect 4?
And I got to now look I got to look at
And I got to now look I got to look at
both these closely
So I have connect 4 baseline
here. Which is the run that I should
here. Which is the run that I should
compare to?
None of these seem to
None of these seem to
uh to do
anything. Pink
one. Well, you didn't run any You don't
one. Well, you didn't run any You don't
have any full runs
have any full runs
here, right?
Yeah. So, something is
weird. This is
weird. This is
like way faster than before.
Well, you don't have any numbers, right?
Well, you don't have any numbers, right?
Like I guess I have to do my own run
Like I guess I have to do my own run
There.
Width and height shouldn't make a
Width and height shouldn't make a
difference.
Okay. So, it's hardcoded. You still have
Okay. So, it's hardcoded. You still have
hardcoded depth
three. Oh, wait. That's on your locals,
three. Oh, wait. That's on your locals,
probably.
Yeah, these are close.
Yeah, these are close.
Okay, these are quite
Okay, these are quite
close. I don't know why the M is a
close. I don't know why the M is a
different speed. It could just be
different speed. It could just be
machine
machine
[Music]
[Music]
differences. I don't actually even know
differences. I don't actually even know
if there are speed differences. This one
if there are speed differences. This one
looks fine. Let me uh let me do your
looks fine. Let me uh let me do your
other N
other N
here cuz this one is the one that's
here cuz this one is the one that's
sketch. I thought I I thought I told you
sketch. I thought I I thought I told you
about this. Let me see
about this. Let me see
here. Is you should not have to be doing
here. Is you should not have to be doing
stuff like this.
a hard-coded agent depth. I thought that
a hard-coded agent depth. I thought that
maybe you'd reduce the opponent like
maybe you'd reduce the opponent like
search depth or something which would
search depth or something which would
make it way faster, but you
didn't. Okay. So, the issue with this,
didn't. Okay. So, the issue with this,
I'm going to guess,
I'm going to guess,
is you probably
did you probably use the wrong
did you probably use the wrong
API. Let's
see. Yeah. So, didn't I show you
see. Yeah. So, didn't I show you
this?
this?
like you're passing a param to each end
like you're passing a param to each end
of
of
here and because you've done this right
here and because you've done this right
you're like dramatically
you're like dramatically
complicating you're dramatically
complicating you're dramatically
complicating the C
complicating the C
code because you have you're passing
code because you have you're passing
these listen where I literally I made a
these listen where I literally I made a
separate API for this that's like really
separate API for this that's like really
easy and doesn't have you don't have to
easy and doesn't have you don't have to
do any of this but
Look, I thought I showed you this as
Look, I thought I showed you this as
well. If I didn't show you this, it's on
well. If I didn't show you this, it's on
me for wasting time, but I I thought I
had So, like Neural MMO has the exact
had So, like Neural MMO has the exact
same thing, right? These are all
lists. Look what we do.
lists. Look what we do.
We do
We do
envit. We put all these in a
envit. We put all these in a
list. And then we call
vectorz. And it
works. That is in the Python file. Yes.
works. That is in the Python file. Yes.
But this
But this
vector, you give it these lists, right?
vector, you give it these lists, right?
Or you give it this
Or you give it this
list and now it gives you your CMS as a
list and now it gives you your CMS as a
single
reference. Well, if I didn't tell you,
reference. Well, if I didn't tell you,
that's on me for not showing you this. I
that's on me for not showing you this. I
know I told a few other people. I could
know I told a few other people. I could
have sworn that you were on one of the
have sworn that you were on one of the
streams, but this is supposed to be like
streams, but this is supposed to be like
if you want to do variable param
if you want to do variable param
stuff, this would be the easy way to do
stuff, this would be the easy way to do
it. Now, let's see. I mean, to be fair,
it. Now, let's see. I mean, to be fair,
maybe your way is better. Let me
maybe your way is better. Let me
see. I don't know.
see. I don't know.
Um, it kind of just depends on the
Um, it kind of just depends on the
complexity.
Yeah. So I just added a second path so I
Yeah. So I just added a second path so I
could keep the C file really
simple. Okay. So this is 80 something
simple. Okay. So this is 80 something
lines to this. You have unpack with
lines to this. You have unpack with
index.
Yeah, cuz you you also added all this
Yeah, cuz you you also added all this
stuff into the
stuff into the
snake file.
Well, the thing is you shouldn't have to
Well, the thing is you shouldn't have to
do this mess anywhere,
right? Yeah. This is also in the triple
right? Yeah. This is also in the triple
triad PR as well.
Yeah, you have all the snake stuff in
Yeah, you have all the snake stuff in
here, too.
Well, I mean, look, if there is a way
Well, I mean, look, if there is a way
that we can add
that we can add
like we can add a few lines into the end
like we can add a few lines into the end
binding and simplify the Python for
binding and simplify the Python for
people so you don't have to write a
people so you don't have to write a
loop. I guess then that's worth
loop. I guess then that's worth
considering. But there's definitely too
considering. But there's definitely too
much stuff going into
much stuff going into
the binding C's. Now, this one's
the binding C's. Now, this one's
fine. Uh, this one you actually don't
fine. Uh, this one you actually don't
even have
even have
unpacked. Wait, you don't
unpacked. Wait, you don't
have you don't have any of that stuff in
here. Okay. So, if you make a clean
here. Okay. So, if you make a clean
triple triad PR, I can definitely add
triple triad PR, I can definitely add
that, right?
The thing is most ms don't need the loop
The thing is most ms don't need the loop
logic. It's only if you have
custom it's only if you have like custom
custom it's only if you have like custom
stuff. And then
like now snake isn't done because this
like now snake isn't done because this
is a mass bat.
Like this likely this likely creates for
Like this likely this likely creates for
me at least two hours of looking through
me at least two hours of looking through
this if not three and like trying to
this if not three and like trying to
figure all this stuff
out because you can't have like this
out because you can't have like this
cannot be what the binding has to look
cannot be what the binding has to look
like,
right? Because this is way worse to have
right? Because this is way worse to have
people try to write this stuff in C.
Yeah. So, I'm still open to like doing
Yeah. So, I'm still open to like doing
something like this, but and I actually
something like this, but and I actually
do want to look at the piece of code
do want to look at the piece of code
that you have here for the list loop.
that you have here for the list loop.
Um, I would say what you should do is
Um, I would say what you should do is
you should save
you should save
this because I want to look at this with
this because I want to look at this with
you uh maybe in Discord at some point or
you uh maybe in Discord at some point or
whatever and
whatever and
uh because it's potentially, you know,
uh because it's potentially, you know,
we can unify the API with it.
we can unify the API with it.
But I think for now you can very very
But I think for now you can very very
easily do the snake thing as just like
easily do the snake thing as just like
the uh the neural MMO style loop one and
the uh the neural MMO style loop one and
that'll just work immediately and then
that'll just work immediately and then
we can have both of these
we can have both of these
PR. Yeah. So clean up the PRs. Do that
PR. Yeah. So clean up the PRs. Do that
and then we will uh we'll get that stuff
and then we will uh we'll get that stuff
merged. And then something like this is
merged. And then something like this is
obviously going to be like I can't just
obviously going to be like I can't just
yolo merge this like right like come on.
yolo merge this like right like come on.
Like I can't give this oh yeah here it's
Like I can't give this oh yeah here it's
so easy to write a multi- aent M. Just
so easy to write a multi- aent M. Just
write all this, right? Like nobody knows
write all this, right? Like nobody knows
what this is.
Thank you for the connect 4 PR. That's
Thank you for the connect 4 PR. That's
very nice. We're getting uh more of
very nice. We're getting uh more of
these M into
these M into
bindings, new bindings.
full. No
meeting. I get to just keep deving.
Not a waste of time when they're with
Not a waste of time when they're with
new
clients. Got to pay for server somehow.
The cool thing is a lot of it is
The cool thing is a lot of it is
actually inbound now. Like we get
actually inbound now. Like we get
inbound people just like asking about
inbound people just like asking about
puffer stuff, which is what we want
puffer stuff, which is what we want
because I want to be able to spend my
because I want to be able to spend my
time building stuff.
time building stuff.
I mean, even things like what I'm doing
I mean, even things like what I'm doing
now, this is just incredibly basic and
now, this is just incredibly basic and
just slow work. But like, cleaning stuff
just slow work. But like, cleaning stuff
up like this is very, very important for
up like this is very, very important for
usability. It's honestly like if I don't
usability. It's honestly like if I don't
do this, nothing else really
matters.
Cool. That
Cool. That
works. I
am Let me take a few minutes. I'm going
am Let me take a few minutes. I'm going
to go use the
to go use the
restroom. I don't know. Do a couple
restroom. I don't know. Do a couple
things here. I'll be back in a couple
things here. I'll be back in a couple
minutes. And uh we'll keep going. Just
minutes. And uh we'll keep going. Just
need to kind of refresh a bit. And I
need to kind of refresh a bit. And I
have gym equipment in the
have gym equipment in the
background. That's always nice.
Okay, that's me woken back up.
One of the things I really wanted to
One of the things I really wanted to
have was just the ability to uh, you
have was just the ability to uh, you
know, go do a light set of
know, go do a light set of
whatever in between working on stuff.
Right. I was on um config replacements
Right. I was on um config replacements
for Neptune and uh WB. All
right. Do you notice his audio quality
right. Do you notice his audio quality
better than before, by the way, or worse
better than before, by the way, or worse
or about the same?
versus um previous
versus um previous
location about the same is not good
location about the same is not good
because this is a substantially better
because this is a substantially better
microphone. So I will have to fine-tune
that little on the quiet
that little on the quiet
side.
side.
Okay, let's
do do this. I can only get it so
close. We'll try
close. We'll try
that. We'll try that for a little
bit. It should be like very noticeably
bit. It should be like very noticeably
better.
Like this is a pretty ridiculous setup.
Like this is a pretty ridiculous setup.
I've got a tripod with the camera upside
I've got a tripod with the camera upside
down mounted on it over here. I've got a
down mounted on it over here. I've got a
pop filter in my face with a fullsize
pop filter in my face with a fullsize
boom arm and a mic here. And then
boom arm and a mic here. And then
there's actually there's a plan to put a
there's actually there's a plan to put a
TV over there so I can just turn the
TV over there so I can just turn the
setup and do like, you know, paper
setup and do like, you know, paper
review or like whatever presentation
review or like whatever presentation
style stuff I want as well.
So I guess we do
um shouldn't go into close
It should go
into Wait, doesn't mean and log do this
into Wait, doesn't mean and log do this
for you already? Hang on.
Mean and log should do this for you
Mean and log should do this for you
already.
already.
Yeah, but I don't actually think you
Yeah, but I don't actually think you
need to do this.
I think it's
redundant. We can just do
redundant. We can just do
this. And now we no longer have any
this. And now we no longer have any
dependence on Neptune after this
dependence on Neptune after this
point. So we should be
good. And this should still
run. And we are down uh 80 lines from
run. And we are down uh 80 lines from
earlier today
almost. We fight for
those. Now we get to
extensions. All my PRs are negative.
extensions. All my PRs are negative.
many
many
lines. You can't take too much credit
lines. You can't take too much credit
when I put a lot of work into that
when I put a lot of work into that
endbinding file to make it possible to
endbinding file to make it possible to
do that. But I do appreciate the
do that. But I do appreciate the
contributions. It's a pain in the ass to
contributions. It's a pain in the ass to
refactor all those
refactor all those
ends. I spent like a good two days on
ends. I spent like a good two days on
that end binding to make that
that end binding to make that
work. It's okay. I do the heavy lifting
work. It's okay. I do the heavy lifting
around here.
Okay, so now we can think about how to
Okay, so now we can think about how to
load this extension
better. How does PyTorch do their CPU
better. How does PyTorch do their CPU
fallbacks?
part of dispatch.
Okay. So, they have something fancy, I
Okay. So, they have something fancy, I
guess.
Dispatcher checks the
table. Oh, hang on. Wait. Is there
table. Oh, hang on. Wait. Is there
something for
something for
this porch library imple?
Okay.
Okay. So, here's the kernel.
Huh? I think this is just feeding me
Huh? I think this is just feeding me
garbage.
It's telling me how to write a CPU
It's telling me how to write a CPU
kernel and add a fallback for
kernel and add a fallback for
CPU. Okay, this is it right.
Portable kernel library.
Gh. Well, that's a mess.
So this is just all stuff that Torch has
So this is just all stuff that Torch has
done on top
of on top of CUDA.
This is so bloated.
CPP
extension.load. Okay, I think this is
extension.load. Okay, I think this is
better.
better.
You may wish to okay here. So you have a
You may wish to okay here. So you have a
Python
function. You have some Python bindings
function. You have some Python bindings
to C++ and CUDA.
to C++ and CUDA.
You are using
Python. Okay.
Here's some
Python. Past bets rationale has been
elucidated. Local snake newbind dev
elucidated. Local snake newbind dev
local what?
How did you even do that to like combine
How did you even do that to like combine
two?
Oh, okay. Wrap the function in a PyTorch
Oh, okay. Wrap the function in a PyTorch
custom operator.
Okay. So this is registering
autograd is
autograd is
this okay custom C++ and CUDA. This is
this okay custom C++ and CUDA. This is
what we want.
So here you get your extension.
We're building a single wheel that can
We're building a single wheel that can
run across multiple CPython versions.
run across multiple CPython versions.
Okay.
defining custom op and adding backend
defining custom op and adding backend
implementations. Okay, so you
write something like this.
If you also have a CUDA
If you also have a CUDA
implementation, you can register it as
implementation, you can register it as
in a separate torched library
implementation. Okay.
My add cuda.
To add torch compile support, we must
To add torch compile support, we must
add a fake tensor
add a fake tensor
kernel. Fake tensor are tensors that
kernel. Fake tensor are tensors that
have metadata but no
data. You can just do this with Python.
data. You can just do this with Python.
Cool.
To use the custom operator, we must
To use the custom operator, we must
first load the C++
library. We will replace the unstable
library. We will replace the unstable
PIBind 11 with stable API calls.
Avoid Python.h entirely
You don't need
autograd. Hang on. What?
or the exclamation
points.
points.
Oh, okay.
So, a little
So, a little
tricky, but um at least there is a
tricky, but um at least there is a
tutorial on this.
Let's see. Uh, first of all, how how we
Let's see. Uh, first of all, how how we
on this
So, we go to
setup.py and I don't think we have the
setup.py and I don't think we have the
extension in here at all, do
we? No, we do not have the extension in
we? No, we do not have the extension in
here at all. We have it just in in the
here at all. We have it just in in the
Python. So we have to
do plus
equals tension.
Uh, this is a little sketchy actually
Uh, this is a little sketchy actually
now that I'm thinking about it because
now that I'm thinking about it because
it makes a hard dependency on torch,
it makes a hard dependency on torch,
doesn't it?
Yeah, this is a hard dependency on on
torch. Hang on. Can we do it just from
torch. Hang on. Can we do it just from
uh the Python? I think we
can. So, we got C++ extension.
Load
Load
name
name
sources. This is probably it right here.
sources. This is probably it right here.
Right.
Okay, so this is actually mostly build
Okay, so this is actually mostly build
time
stuff, but I might still be able to do
stuff, but I might still be able to do
something with this.
So this is torch
So this is torch
tensor for some reason. And this
tensor for some reason. And this
is at
tensor and then they give you some
asserts. Fortune terminal. Okay.
In order to use this from Python PyTorch
In order to use this from Python PyTorch
front PyTorch's Python front end, we
front PyTorch's Python front end, we
need to register it using a torch
need to register it using a torch
library
library
API. This will automatically bind the
API. This will automatically bind the
operator to Python.
Name of your top level project.
So something like
this. And then this needs the signature.
VS float
VS float
gamma and then this returns nothing.
F. And then this is it, right?
This makes the
This makes the
operator available
operator available
via porch ops
via porch ops
extension my ad.
Okay. Expected arrow but found end of
Okay. Expected arrow but found end of
file.
Let's try
this. Okay, so this runs
Uh, I still don't know if this is going
Uh, I still don't know if this is going
to be available
from torch. We will
from torch. We will
see from torch.
Yeah. So, what's the extension
name?
name?
Extension. Probably just puffer lib.
No
No
module. Yeah. So maybe you do need to
module. Yeah. So maybe you do need to
actually have the module be
actually have the module be
built like
built like
this. We could do this for now, right?
We can do this for now.
command
command
class
equals H. You actually have to pass this
equals H. You actually have to pass this
command class thing in as well
command class thing in as well
apparently. Interesting.
We'll do
this.
This offer li.cpp
CPP. So what is this? Upper lib and then
CPP. So what is this? Upper lib and then
upper lib.cpp. Something like
this. Unknown compilation option. Remove
this. Unknown compilation option. Remove
command class.
command class.
Uh when you call setup
here, you do
here, you do
have man class,
right? So that's weird that that doesn't
right? So that's weird that that doesn't
do
anything. Maybe this does something.
Do we
see bufferlib cython? Okay, built
see bufferlib cython? Okay, built
something.
Okay. So no module torch offs puffer
But I don't see it in here, right?
end to end working example from the
end to end working example from the
tutorial
tutorial
here. Okay, this looks decent, right?
Lots of extra
args. They do have command class in
here. So, something's weird that I can't
here. So, something's weird that I can't
do that.
Like this should work, right? Build ex.
Like this should work, right? Build ex.
Oh, hang on. Maybe I didn't have build
extension. So, import C++ and build
extension. So, import C++ and build
extension. Gotcha.
It's CPP.build extension. Okay.
Got unknown compilation
Got unknown compilation
option. Please remove command
option. Please remove command
class. Okay, so something's weird
here. Oh, you know what? This is cuz
here. Oh, you know what? This is cuz
it's in Syoniz.
it's in Syoniz.
Shoot. Well, how the heck are we
Shoot. Well, how the heck are we
supposed to do
that?
Also, most of these don't even need Syon
Also, most of these don't even need Syon
anymore, so we're doing something
anymore, so we're doing something
screwy.
Let's just do um
the
heck?
heck?
Oh, you just messed this up. Hang
on. So, this
on. So, this
is Yeah, this is just indented poorly,
is Yeah, this is just indented poorly,
isn't it?
What's this
What's this
close? Yeah, this
close? Yeah, this
closes.
closes.
Okay, so I
apparently got this indented totally
apparently got this indented totally
screwy.
by this
by this
error compiling objects for an
extension. Well, you don't need all
extension. Well, you don't need all
these, right?
What did I break?
Oh man, this is like so wacky.
Okay. So, this Syoniz is like this
massive so confusing.
Okay, this is
Okay, this is
good. Now we do this. This goes to next
line goes to here.
on
on
sequence on
sequence on
end
end
plus should be less right.
Each element must be an instance
Each element must be an instance
extension.
This should give me multiple extensions.
This should give me multiple extensions.
No.
Maybe this needs to be a list. I don't
Maybe this needs to be a list. I don't
freaking
know. It's just like
know. It's just like
undocumented dumb build systems.
undocumented dumb build systems.
must be an
must be an
instance extension or a
twouple should
be I do
this.
Nope.
Nope.
Okay, take Syon out for a second.
Portra extension must be a extension
Portra extension must be a extension
instance or a
twouple. Okay.
So each
element of ext modules option must be an
element of ext modules option must be an
extension
extension
instance or twole. It is isn't it?
Oh, cuz it's a
list. Okay, so this actually
works. And then this probably works as
works. And then this probably works as
well, right?
Maybe the Sython one's a little
Maybe the Sython one's a little
ambitious. Let's get rid of that for
ambitious. Let's get rid of that for
now.
invalid. You need extra args, I guess,
invalid. You need extra args, I guess,
for
for
these. It's fine. Can we get the torch
these. It's fine. Can we get the torch
extension? We can get the torch
extension? We can get the torch
extension. Now I see
pufferlib.cython. So it said that this
pufferlib.cython. So it said that this
would be available at like torch ops or
would be available at like torch ops or
whatever.
Yes, you cannot get compute pop
advantage and there's no torch ops
advantage and there's no torch ops
puffer
li. Um, that's bizarre.
Maybe there's a name conflict. Hang on.
import puffer
X. Now this actually
has Okay, so this actually has compute
has Okay, so this actually has compute
pup advantage in it.
This does have compute puff advantage in
This does have compute puff advantage in
it. Now it doesn't show up where we
it. Now it doesn't show up where we
expect it to though.
Where was that
tutorial? So they have their
extension. And then how do they import
extension. And then how do they import
this?
extension
extension
CPO
ops import extension
CPP. So I have
So there somehow got put under
ops. Mine did
not. Ah, because they registered it
not. Ah, because they registered it
here.
Hey YouTube folks. I'm currently trying
Hey YouTube folks. I'm currently trying
to figure out um how to properly
to figure out um how to properly
register a custom op with PyTorch so
register a custom op with PyTorch so
that I can have a clean CUDA kernel with
that I can have a clean CUDA kernel with
C uh with
C uh with
C++ CPU
C++ CPU
fallback and it's just demonic like
fallback and it's just demonic like
they're doing all sorts of ridiculous
things. It's just like so many layers of
things. It's just like so many layers of
registering and rappering and stuff. I
registering and rappering and stuff. I
don't know.
Okay. So you actually hear
Okay. So you actually hear
torch.ops.extension C++. So this does
torch.ops.extension C++. So this does
actually go
into into this here.
Yeah, there's no
Yeah, there's no
torch.pufferlib,
right? And there's no porch torch puffer
right? And there's no porch torch puffer
x
either. It's not getting registered.
I mean, this is like a ridiculous amount
I mean, this is like a ridiculous amount
of code for this is literally their
of code for this is literally their
tutorial on how to add how to have a
tutorial on how to add how to have a
multiply ad kernel and it's like several
multiply ad kernel and it's like several
hundred lines of code.
And I have the death as
well. Is this supposed to be like this?
I doubt that
matters. Wasn't in the docks
originally. Maybe this needs to be
originally. Maybe this needs to be
puffer Xed.
Let me see there.
Let me see there.
C++ torch
library to find the
library to find the
C++
C++
version dummy C
version dummy C
module. But this is what I was doing
module. But this is what I was doing
with pi bind anyways.
I guess this.
Oh, so that is actually loaded.
It doesn't seem to be defining
It doesn't seem to be defining
uh the
function. No module torch ops. Puffer
X.
X.
Okay. And this is Oh, you can just
Okay. And this is Oh, you can just
import anything from here. Okay. So,
import anything from here. Okay. So,
it's not actually defined. It's just the
it's not actually defined. It's just the
shitty library. Like, you can just
shitty library. Like, you can just
import anything from here.
Okay. Been not liking Torch
Okay. Been not liking Torch
lately. Not going to lie. I have not
lately. Not going to lie. I have not
been enjoying torch.
I mean, it's here, but it's not
registered. I mean, I guess I could try
registered. I mean, I guess I could try
this.
Okay. Well, I mean, I'm not going to
Okay. Well, I mean, I'm not going to
complain if I don't need
PiBBind. Where's the name space
PiBBind. Where's the name space
end bottom?
Yeah. See, so it's still not there.
Oh, I'm dumb. This
Oh, I'm dumb. This
library, how the heck does it not give
library, how the heck does it not give
me like an
me like an
undefined? Wait, do I
not buffer lib
CPP? How the hell does this not give me
CPP? How the hell does this not give me
a torch undefined? I don't
a torch undefined? I don't
even It can't be loading this then,
even It can't be loading this then,
right?
I don't freaking
Oh, that's
So, we should have the It should be in
So, we should have the It should be in
here
somewhere. Buffer lip.
still nothing. But I don't even know how
still nothing. But I don't even know how
this is like does this even give me a
this is like does this even give me a
warning if I just
warning if I just
like or an
error. No, it's like completely freaking
error. No, it's like completely freaking
Oh no, we do get an error.
Oh no, we do get an error.
Okay, so it is actually loading the
Okay, so it is actually loading the
correct file.
Why does it not
Why does it not
then? It doesn't bind.
You have to import the underscore C I
You have to import the underscore C I
guess or something.
I mean, this whole thing is just janky.
I mean, this whole thing is just janky.
The way that they're
The way that they're
like, this whole thing is just janky.
Like this code is fine, but then I have
Like this code is fine, but then I have
no idea how this hooks into their like
no idea how this hooks into their like
their crazy registries with these
their crazy registries with these
macros. This
That's not in there either.
Is it some way that like I'm Doing
this
sources is
fine, right? This is all fine.
Hang on. So this test of the
extension they're not actually
extension they're not actually
testing they're not actually testing
testing they're not actually testing
this import
this import
right here. They're importing it
right here. They're importing it
directly.
Okay, hang
Okay, hang
on. This is
one torch ops
one torch ops
extension. So, it is supposed to be
extension. So, it is supposed to be
registered.
Yeah, this is like crazy. So, this is
Yeah, this is like crazy. So, this is
now they're calling it
now they're calling it
here through the registered
version. Yeah. So, like the extension
version. Yeah. So, like the extension
just isn't getting bound.
drives me nuts.
How does this thing get built?
underscorec.
That's so
That's so
weird. And that's like so weird what
weird. And that's like so weird what
they're thing.
It's got to be something with this
It's got to be something with this
like underscore
C. But how the heck is this
C. But how the heck is this
input? library
named_c. I mean this thing has to get
named_c. I mean this thing has to get
built,
right? Make sure I didn't miss anything
here. Like how are they importing a file
here. Like how are they importing a file
that hasn't been built yet?
Is it this?
Okay. So, this is probably
Okay, now we
have we now have the underscore C
But we still don't have
this. Nothing.
Do you have to import the underscore C
Do you have to import the underscore C
for this to be
for this to be
available? Okay, I didn't think of that.
Really? Import torch. Okay.
Still
nothing. That's
bizarre. Let me see how they imported
bizarre. Let me see how they imported
it. I think they said the import order
it. I think they said the import order
matters or something.
So in their
So in their
test they import
torch and then they import this
Ah, okay. So, it's not in the dur, but
Ah, okay. So, it's not in the dur, but
it's
it's
there.
there.
Okay. So, we actually get
Okay. So, we actually get
it.
it.
Cool. Crazy
Cool. Crazy
packaging. But we get it. Oh,
packaging. But we get it. Oh,
man. Okay.
Now we can hopefully add the CUDA one as
well. We can hopefully add the Cuda
one now. How do you
do? Hang
do? Hang
on. Hang on a second here. Now I get to
on. Hang on a second here. Now I get to
see how they do their fallback at the
see how they do their fallback at the
least properly. Right. So this has no
least properly. Right. So this has no
CUDA in it. So this will always
CUDA in it. So this will always
work. And then they have
work. And then they have
test dimple.
M will add
CPU registers. CUDA
implementations wait my add
implementations wait my add
CPP will add
CPP will add
CU ah and
CU ah and
this this registers
uh the CUDA in here.
uh the CUDA in here.
Okay. So, we can do
Okay. So, we can do
this. And then they both load
this. And then they both load
shared, but other than that, it's
shared, but other than that, it's
fine. And then this doesn't need a
fine. And then this doesn't need a
module, I
guess. This includes shared CPP.
name space puffer
name space puffer
lib. We get rid of the pi
bind which is kind of
bind which is kind of
nice. And we take
nice. And we take
this this imple
And this is like this doesn't need the
And this is like this doesn't need the
name definitions it
seems. So this
seems. So this
is cute.
And probably this needs different names,
And probably this needs different names,
but we'll
but we'll
uh we'll do it this way for
uh we'll do it this way for
now and we will
now and we will
see. Now in their
setup, they also import.cu, don't
setup, they also import.cu, don't
they? Library
they? Library
named_c sources
Hey, welcome. How's it going,
man? Okay. So, in their sources
here they have this CUDA
sources. Okay. So they
conditionally they conditionally add the
conditionally they conditionally add the
CUDA. We're going to do it for both for
now. So in
sources we do puffer lib
sources we do puffer lib
cu. Okay.
cu. Okay.
And let's then just
do let's just like put
do let's just like put
this into a
file. Can you ask a question? Yeah,
file. Can you ask a question? Yeah,
sure.
sure.
[Music]
Uh, can't initialize NVML. Okay, that
Uh, can't initialize NVML. Okay, that
seems
like my drivers die. Yeah, my drivers
like my drivers die. Yeah, my drivers
just died. So, that's fine. We can fix
just died. So, that's fine. We can fix
that. That's
just container needing a reboot.
That's easy
enough. Which is why you want the coup
enough. Which is why you want the coup
to fall back as well.
from Aaron.
Do we not get an error
message. Where's our
trace?
trace?
Uh huh.
We just don't get an error message.
There are
no version bounds.
Yeah, it just doesn't give us a
Yeah, it just doesn't give us a
freaking That's ridiculous. Where's our
freaking That's ridiculous. Where's our
error message?
They do this.
So extension includes the runtime.
What does it use from uh the
runtime
runtime
weird? Is this a dot? This is a CU.
Yeah. Explicitly
Yeah. Explicitly
include the runtime like that in a CU.
include the runtime like that in a CU.
What's the point of having it that? H
What's the point of having it that? H
Bizarre.
And that is matching Now,
Okay. So that's like immediately
failing this
like not these
like not these
includes currently first year of
includes currently first year of
college.
college.
Did I you learn data structures and
Did I you learn data structures and
algorithms webdev or something? I've
algorithms webdev or something? I've
only learned some C and
only learned some C and
Python. So the thing is that normally
Python. So the thing is that normally
data structures and algorithms are
data structures and algorithms are
taught as part of your first or second
taught as part of your first or second
CS course in general because you really
CS course in general because you really
don't know anything unless you know
don't know anything unless you know
basic data structures and algorithms. uh
basic data structures and algorithms. uh
you're very very rarely going to like go
you're very very rarely going to like go
reach for a try or very very rarely
reach for a try or very very rarely
going to have to I mean ex except in
going to have to I mean ex except in
specific applications reach for dynamic
specific applications reach for dynamic
programming but like you should know
programming but like you should know
what a you should know what a map or
what a you should know what a map or
addict is and how it's implemented you
addict is and how it's implemented you
should know what binary search is and
should know what binary search is and
what is like what how it is implemented
what is like what how it is implemented
you should know basic sorting like
you should know basic sorting like
there's a lot of things that you should
there's a lot of things that you should
know that do come up quite often uh
know that do come up quite often uh
computational complexity all of that so
computational complexity all of that so
if you haven't taken one of those, I'm
if you haven't taken one of those, I'm
surprised because it's like it should be
surprised because it's like it should be
among your first
among your first
courses. Um, it's also, and I hate that
courses. Um, it's also, and I hate that
this is the case, but it is pretty much
this is the case, but it is pretty much
all of interview questions ever for
all of interview questions ever for
actual jobs are just like based on your
actual jobs are just like based on your
data structures and algorithms course,
data structures and algorithms course,
which is ridiculous because it's like
which is ridiculous because it's like
it's one small piece and like you use a
it's one small piece and like you use a
small portion of it dayto-day, but
small portion of it dayto-day, but
that's how it is at the moment.
that's how it is at the moment.
Um, you should probably do that.
Um, you should probably do that.
Uh, yeah, if you just like if you take
Uh, yeah, if you just like if you take
like this is what a language is and this
like this is what a language is and this
is how to do webdev, you do not know how
is how to do webdev, you do not know how
to program. Um, so you should definitely
to program. Um, so you should definitely
learn basic data structures and
learn basic data structures and
algorithms. You should definitely build
algorithms. You should definitely build
some stuff and then if you want to do
some stuff and then if you want to do
web dev from there, go for
it. Because the thing with webdev is
it. Because the thing with webdev is
it's like it's just a giant mess where
it's like it's just a giant mess where
like people have just like piled crap
like people have just like piled crap
onto the web development ecosystem for
onto the web development ecosystem for
the last couple of decades and it's just
the last couple of decades and it's just
like it's a gigantic
like it's a gigantic
disaster. So
disaster. So
like honestly not much is going to make
like honestly not much is going to make
sense unless you've just been
sense unless you've just been
programming for a long time in that
programming for a long time in that
space. Uh and then you can see like okay
space. Uh and then you can see like okay
this is the way they did this. That's
this is the way they did this. That's
annoying but I get it right.
like junior webdev is not going to be a
like junior webdev is not going to be a
fun job.
fun job.
I can tell you
I can tell you
that. Especially with all the AI crap
that. Especially with all the AI crap
now. It's just like people already
now. It's just like people already
didn't understand what they're doing and
didn't understand what they're doing and
now they absolutely have no idea what
now they absolutely have no idea what
they're
thing. Yeah, we don't we don't cover
thing. Yeah, we don't we don't cover
autogen stuff.
But let's let's talk about how pathetic
But let's let's talk about how pathetic
that is, right? So like we took this
that is, right? So like we took this
very very simple thing, build a basic
very very simple thing, build a basic
web page. We piled like React and Next
web page. We piled like React and Next
and Tailwind and like all these like
and Tailwind and like all these like
crap modern things on top of it that
crap modern things on top of it that
make no bloody sense um just to do basic
make no bloody sense um just to do basic
things. And now nobody knows how the
things. And now nobody knows how the
hell anything works anymore. So we built
hell anything works anymore. So we built
an AI to figure out all of our
an AI to figure out all of our
[ __ ] Like, isn't that just
[ __ ] Like, isn't that just
incredibly stupid?
I I also think that the thing people
I I also think that the thing people
should realize is that there isn't there
should realize is that there isn't there
isn't n't going to be like, uh, oh, I
isn't n't going to be like, uh, oh, I
don't know how to program, but I'm good
don't know how to program, but I'm good
at using AI. Like, that just means you
at using AI. Like, that just means you
have no idea what's going on. And you're
have no idea what's going on. And you're
like, you might be able to hack out a
like, you might be able to hack out a
couple things over the next few
couple things over the next few
years, but like that's just zero useful
years, but like that's just zero useful
skills. Like, there are no useful skills
skills. Like, there are no useful skills
there at all.
I wish this would give me a freaking
I wish this would give me a freaking
build error.
Okay. Like if you want to do if you want
Okay. Like if you want to do if you want
to use AI for
something, this is what I will do. We'll
something, this is what I will do. We'll
see if this gives me anything.
Is there a dash V?
Okay, it's probably they're outputting
Okay, it's probably they're outputting
the same stuff.
the same stuff.
Then try something.
Oh, and there we go. We actually get
Oh, and there we go. We actually get
a This looks like a proper error
a This looks like a proper error
message. It was a name duplication
message. It was a name duplication
issue. There we go.
float is not a supported argument type.
float is not a supported argument type.
Use type double
instead. That would seem weird.
You tried to register a
You tried to register a
kernel. Please use double
instead. That's disgusting.
Is that how it was in their
example? What are you doing? I can't
example? What are you doing? I can't
understand anything. Well, I mean, the
understand anything. Well, I mean, the
stuff I'm doing, you're not going to
stuff I'm doing, you're not going to
know if you're just like a firstear
know if you're just like a firstear
programmer. I work on high performance
programmer. I work on high performance
reinforcement learning dev. Um, you can
reinforcement learning dev. Um, you can
see some cool demos at puffer.ai AI and
see some cool demos at puffer.ai AI and
I am currently attempting to register a
I am currently attempting to register a
CUDA extension to PyTorch with a CPU
CUDA extension to PyTorch with a CPU
fallback. So essentially I have a custom
fallback. So essentially I have a custom
piece of code that I want to hook into
piece of code that I want to hook into
uh the major the main learning library
uh the major the main learning library
that everyone uses and I want that piece
that everyone uses and I want that piece
of code to run on the GPU or on the CPU
of code to run on the GPU or on the CPU
depending on the context in which you're
depending on the context in which you're
running it automatically without you
running it automatically without you
having to do anything. And that involves
having to do anything. And that involves
digging through a bunch of sludge, which
digging through a bunch of sludge, which
is what I'm doing
now. So, what am I doing now? Digging
now. So, what am I doing now? Digging
through
sludge. That's pretty much it.
Okay. So, they have
Okay. So, they have
double in this signature. I guess it's
probably I appreciate the
probably I appreciate the
explanations. I mean, this stuff is like
explanations. I mean, this stuff is like
kind of out there. This is not stuff
kind of out there. This is not stuff
that most people will see for quite a
that most people will see for quite a
while, if ever.
while, if ever.
So, and the thing is, it's like it's a
So, and the thing is, it's like it's a
lot harder than it needs to be, right?
lot harder than it needs to be, right?
like when I was just writing my basic
like when I was just writing my basic
CUDA extensions, if you just use CUDA,
CUDA extensions, if you just use CUDA,
it's kind of fine. Um, now when you get
it's kind of fine. Um, now when you get
the torch binding system involved and
the torch binding system involved and
stuff, then yeah, stuff is painful. Like
stuff, then yeah, stuff is painful. Like
if I were just writing CUDA, could kind
if I were just writing CUDA, could kind
of jam that. Let's kind of just see
It's got to just be that these
are, right?
Like how Python by default just uses
Like how Python by default just uses
doubles cuz like screw it, we're slow
anyways. All
right. Is
that okay? That's actually built.
dynamic
dynamic
module does not define module
export. Okay, so I I know how we do this
export. Okay, so I I know how we do this
though.
Wait. Uh, before I spend more time, can
Wait. Uh, before I spend more time, can
you try running triple
you try running triple
triad? Just local
triad? Just local
compile. It doesn't seem to work
properly. Sure.
I mean, this is like could be close
enough. I haven't touched this in a
enough. I haven't touched this in a
while.
Huh? It just didn't release all the
Huh? It just didn't release all the
memory. That's bizaro.
I'm the screw.
Hang
on.
on.
Huh? Well, that's probably left over.
Broken pipe is
Broken pipe is
weird. There is something screw with
weird. There is something screw with
it. There is definitely something screw
it. There is definitely something screw
with
it. Does it not have seating or
it. Does it not have seating or
something?
Well, this is this version is totally
off. Yeah. So, this I mean this is
off. Yeah. So, this I mean this is
missing like this has a no op or
missing like this has a no op or
whatever. We got rid of no
op. I got to finish this while I'm still
op. I got to finish this while I'm still
in the mindset to debug obtuse cuda
in the mindset to debug obtuse cuda
though. There. It does look like
though. There. It does look like
something is
screwy. Mhm.
Okay, this comment is wrong.
Okay. So now we get this conflict
thing where we don't get any errors.
Noah puppet advantage.
CUDA advantage
row. I'm about to pain just seeing your
row. I'm about to pain just seeing your
work.
work.
You get used to
it. Eventually like the feeling of like
it. Eventually like the feeling of like
feeling very dumb goes away and it's
feeling very dumb goes away and it's
like oh actually the code I'm reading is
like oh actually the code I'm reading is
in fact the thing that is very dumb.
It's like why is it like this? Why why
It's like why is it like this? Why why
couldn't we have just built
couldn't we have just built
simple simple CUDA extension interface?
simple simple CUDA extension interface?
Why did we have to do
this? Why do we have magic magic static
this? Why do we have magic magic static
load macros?
still
still
nothing. See how they do their imports.
So they do add the CUDA sources
So they do add the CUDA sources
star.cu. Okay. So they have multiple
sources that go into this one
sources that go into this one
extension. All
right. Don't need this.
right. Don't need this.
Do I need CUDA
Do I need CUDA
extension? I need CUDA extension, don't
I? This should now be CUDA
extension. It's already 12:17. Going to
extension. It's already 12:17. Going to
sleep. Can you tell me what time you
sleep. Can you tell me what time you
start your live stream? Uh, it is
start your live stream? Uh, it is
currently 2:49 EST. I generally try to
currently 2:49 EST. I generally try to
do a short stream in the morning
do a short stream in the morning
somewhere between 8:30 and 9:30 a.m.
somewhere between 8:30 and 9:30 a.m.
EST. And then uh after breakfast like
EST. And then uh after breakfast like
say 10:30ish then I'm on for the rest of
say 10:30ish then I'm on for the rest of
the day. Modulo meetings and other stuff
the day. Modulo meetings and other stuff
I have to
do and I will be back streaming quite a
do and I will be back streaming quite a
bit for the next several weeks.
Some of it
Some of it
is in the trenches like random packaging
is in the trenches like random packaging
and extension stuff like this. Some of
and extension stuff like this. Some of
it is cool research. Some of it's like
it is cool research. Some of it's like
building new environments. Some of it is
building new environments. Some of it is
working with
working with
collaborators. Whole bunch of different
collaborators. Whole bunch of different
stuff. We do a lot of different things
stuff. We do a lot of different things
around here.
Multiple rules
Multiple rules
generate this build for lib.0
Oh
Oh
extensions
extensions
multiple there is multiple rules
multiple there is multiple rules
generate this
file torch extensions
night. Thanks for dropping
by
by
sources. See, this is one extension
sources. See, this is one extension
though, isn't
it? This is one extension.
We got the
CPP. Oh, did they put them in uh
CPP. Oh, did they put them in uh
separate directories just for this
reason? That would be kind of evil,
reason? That would be kind of evil,
wouldn't
wouldn't
it? I just thought of something.
and then shared is not going to be
and then shared is not going to be
there. Yep.
Uhhuh. Now we get an
error. You tried to register.
So now we actually we get
somewhere. Now we get somewhere.
So many poor decisions in
here. Puff advantage
here. Puff advantage
[Music]
[Music]
colonel. Puff
colonel. Puff
advantage. Did you mean puff advantage
advantage. Did you mean puff advantage
row?
I include the share, don't
I? Uh, you forgot this one, my guy.
Max
Horizon. Where does this get
defined? It's a global, isn't it?
Puff advantage colonel. I probably did
Puff advantage colonel. I probably did
the same
thing. Freaking flies everywhere.
expected a declaration.
Oh, is this not a valid comment in
CUDA? Could it just not have block
CUDA? Could it just not have block
comments?
It
should. Oh, it's because it's
nested.
Getting somewhere.
Okay. So, what do we have here? Multiple
Okay. So, what do we have here? Multiple
definitions of vrace
check. I know. I like I can fix all
check. I know. I like I can fix all
these is the thing.
Uh, this is only defined once as far as
Uh, this is only defined once as far as
I can
see. Is it because both of these are
see. Is it because both of these are
including
including
shared? That could be
it. It's probably including both of
it. It's probably including both of
these.
I just do
this max horizon undefined. Yeah. So
this max horizon undefined. Yeah. So
this needs shared
And this also needs a shared because up
And this also needs a shared because up
advantage row is in shared C++.
multiple
declarations. Yeah. So, it's getting
declarations. Yeah. So, it's getting
included multiple times.
I could just paste it. Hang
on. Kind of dumb to do that.
these are the two functions we need,
these are the two functions we need,
right? Max Horizon
I need the same code here.
I probably need the same code right in
I probably need the same code right in
uh the shared or in purple
libp do here.
not declared in scope. Puff advantage
not declared in scope. Puff advantage
row.
up
advantage. The heck
Okay, there we
Okay, there we
go.
go.
Now, now we have something
here. Now, this should actually work.
use float instead of
use float instead of
double in an operator schema
string. Okay, so this one needs to be
string. Okay, so this one needs to be
float.
We're getting
there. Lovely.
there. Lovely.
So now we actually have
So now we actually have
uh our CPU, GPU, fallback,
uh our CPU, GPU, fallback,
whatever. We have it all
running. Now the only question is going
running. Now the only question is going
to be how we how we integrate
to be how we how we integrate
everything how we do everything uh
everything how we do everything uh
cleanly here.
I don't really know if I feel like
I don't really know if I feel like
messing with that at the moment to be
messing with that at the moment to be
honest. Kind of want to just get the the
honest. Kind of want to just get the the
full thing running cuz like at least
full thing running cuz like at least
this is the way like this will make it
this is the way like this will make it
clean in the place it's imported.
chunks. So, this like needs extra args,
chunks. So, this like needs extra args,
I think.
F permissive. Yeah. So this this needs
F permissive. Yeah. So this this needs
extra
arcs. I don't have F permissive here.
or maybe I do actually want to mess with
or maybe I do actually want to mess with
this here.
And actually you don't because
And actually you don't because
this Yeah, you just want to set the
this Yeah, you just want to set the
pointer. Okay.
Oh, it's pedantic, I
guess. But I don't have pedantic on
guess. But I don't have pedantic on
either.
We can siphonize
We can siphonize
it like we were doing
it like we were doing
before and just say that I've done
before and just say that I've done
enough bloody
um packaging for one
um packaging for one
day. That's an option.
You can do that.
Error handling is a
Error handling is a
pain. Yeah, I'm definitely sick of doing
pain. Yeah, I'm definitely sick of doing
um I'm definitely sick of uh packaging
um I'm definitely sick of uh packaging
for one
day. Okay, that doesn't break.
Do
Do
this. We do this. No
this. We do this. No
errors. Do this.
No
No
errors.
Yes. Okay, there we
go. Uh, okay.
go. Uh, okay.
So it looks
like Yeah. So the torch builder
whatever different command class.
Do we have to do a custom
one? Let's just do it
quick. It's so stupid.
Python packaging just sucks honestly.
How do you do this stupid thing?
Why is this like why is this a parram of
Why is this like why is this a parram of
setup and not of the extension as
well? Like this is just annoying me.
Did they not have this? I guess they
Did they not have this? I guess they
don't have this cuz they don't have
don't have this cuz they don't have
multiple
extensions. Custom build.
deal with this [ __ ] man.
Does it still work if I do it without
Does it still work if I do it without
this? Hey Quinn,
this? Hey Quinn,
welcome. The camera is not a webcam and
welcome. The camera is not a webcam and
it's going to look better than this as
it's going to look better than this as
soon as I get another cable for it.
soon as I get another cable for it.
I've
I've
got well what should be a professional
got well what should be a professional
quality AB setup now but um got to fix a
quality AB setup now but um got to fix a
few small
things. I think that this still works
things. I think that this still works
hopefully.
I'm seeing this getting
I'm seeing this getting
built. So, we'll
built. So, we'll
see. I mean, it's
see. I mean, it's
like whatever at this point
right now. I should be able to
do all that just so I can do
Pump
two.
Boom. Okay.
No module torch ops popper
lib. You have to import torch and then
lib. You have to import torch and then
you have to import
Do
Do
this. Do it this
way. Still no.
You need this thing,
huh? I mean,
huh? I mean,
I How do we do this?
Can I just do like dash dash?
No. It's like adding stupid args, isn't
No. It's like adding stupid args, isn't
it?
I do not know how to get rid of these.
Sting.
I don't know how you Bad.
I guess I do have to do this custom.
Yeah, this is like
Yeah, this is like
ridiculous. There just so many bad
ridiculous. There just so many bad
decisions in here.
I'm actually going to rock this for
once cuz I just like I can't even I
once cuz I just like I can't even I
don't know where the [ __ ] API would
don't know where the [ __ ] API would
be for this thing is ridiculous.
These are just like horribly
These are just like horribly
documented this utils nonsense.
You literally have to write a custom
You literally have to write a custom
one, don't you?
What?
Uh
huh. Oh, no. I can't.
Yeah. So, you do have to do a custom
buildex. Let's see if this runs out of
buildex. Let's see if this runs out of
the
the
box and we will go back because this
box and we will go back because this
solution sucks.
sub
sub
[Music]
[Music]
tools. Okay.
and like the number of just ridiculous
and like the number of just ridiculous
build things
today. Okay, so that now
does it seems happy.
Okay. So, it does build the CUDA
Okay. So, it does build the CUDA
extension right there.
Okay, this one
runs. This one doesn't
I think you just have to be very careful
I think you just have to be very careful
with this import, right?
Uh, okay. I don't know why it prints all
Uh, okay. I don't know why it prints all
this
Okay. So, it's telling me it doesn't
exist.
omitted only available through these
omitted only available through these
back
ends. What in the heck?
Autograd CPU.
is there a place where we tell it what
is there a place where we tell it what
backend is registered to
what? Let's see.
Takuda extension.
not what I
want. Okay. So,
porch
library puffer lib
m and then this is registered right here
m and then this is registered right here
to CPU.
So, I see it right here. Will we be
So, I see it right here. Will we be
streaming tomorrow? Should be streaming
streaming tomorrow? Should be streaming
all
day. Hopefully, I get past this by then
day. Hopefully, I get past this by then
so I'm not just stuck doing this
so I'm not just stuck doing this
nonsense because it's explicitly
nonsense because it's explicitly
registered here, right?
not getting registered somehow.
Still. Okay. So, here it like it
Still. Okay. So, here it like it
correctly finds the op. It's not just
correctly finds the op. It's not just
inventing one, right?
Thanks. Yeah, I'm going to try to finish
Thanks. Yeah, I'm going to try to finish
this.
Um, and what did I register with? Uh,
Can't pop the bandage.
Okay. Huh.
We definitely need to do
We definitely need to do
this, but uh that's not the issue just
this, but uh that's not the issue just
yet.
Do we have puffer lib in here? Python
Do we have puffer lib in here? Python
dispatcher
dispatcher
[Music]
registered cannot
registered cannot
run because the operator doesn't exist
run because the operator doesn't exist
for this back end or is omitted.
So, it is getting the right back end,
So, it is getting the right back end,
but then it's not finding. It's
but then it's not finding. It's
dispatching to the correct back end, but
dispatching to the correct back end, but
it's not finding
it. And I don't see I should see puffer
it. And I don't see I should see puffer
li in here, shouldn't Okay.
Hang
on. This has
on. This has
it with the underscore C, right?
Build extension.
Can I run this on a non-puffer
end? But no, it's definitely getting
end? But no, it's definitely getting
it's definitely getting cold and built
it's definitely getting cold and built
like we're see we're seeing it here.
Let me see how they imported
this. They import it in the
this. They import it in the
test. So they import
test. So they import
torch. They import their thing which
torch. They import their thing which
imports the C.
Yeah, you don't have to import it. As
Yeah, you don't have to import it. As
soon as you import the underscore the C,
soon as you import the underscore the C,
it should be working.
I don't know how it thinks it's
I don't know how it thinks it's
available from all of these backends
available from all of these backends
that I didn't
define. You can't click this,
define. You can't click this,
right? Open source library that links
right? Open source library that links
you to the Facebook page.
Yeah. So this is what I have as
well. Yeah. So, it's available for these
well. Yeah. So, it's available for these
backends and it lists a whole bunch of
crap. Does it list CPU when I do
this? Doesn't list CPU.
Vantage.
I'm trying to think what I could
I'm trying to think what I could
possibly be screwing
up. Maybe it is just something with the
up. Maybe it is just something with the
setup. Hang
on. So, we
on. So, we
do double check their CUDA extension.
They have a
They have a
setup at their
extension CUDA
extension. Compile args.
by limited API.
Alex
This is not actually changing the
This is not actually changing the
extension.
So now it'll actually force
rebuild. See if that does anything.
Still Help.
Yeah,
as if I missed anything else important.
I have
I have
this. I wonder if it's actually the
mutation arcs. Hang on.
It's not smart enough to catch that, is
It's not smart enough to catch that, is
it?
There's no way it's smart enough to
know. I don't like that it immediately
know. I don't like that it immediately
copies these either.
copies these either.
Hang on. That's not good,
Hang on. That's not good,
right? It immediately copies
right? It immediately copies
stuff. I don't see puffer lilib. Um
stuff. I don't see puffer lilib. Um
um puffer's not getting built at all in
um puffer's not getting built at all in
this
this
one. It's not there.
extensions.c
extensions.c
Python. That's not it.
This goes to extension C Python,
right? It says building
Okay. So, that's weird,
Okay. So, that's weird,
right? It says it's building
it. Um, but it doesn't actually build
it. Um, but it doesn't actually build
it. So, it is an issue with this
it. So, it is an issue with this
shenanigans.
shenanigans.
This whole
thing is just not running it.
Can I put a break point in here?
Can I put a break point in here?
Probably not,
Probably not,
right? Oh, I
can. Okay.
What's this thing take?
man. Yeah, I think that this is wrong.
not run.
The issue is I don't understand what
The issue is I don't understand what
this gets called
on I guess technically I could
do can I not just
do. Let's do this.
I just want to see if I can get it to
I just want to see if I can get it to
load with this.
failed. Argument
two. Okay. So, we can definitely see for
two. Okay. So, we can definitely see for
sure it's not getting built.
or
or
dumped. Inspecting
indent
indent
flies. I get some fly paper.
flies. I get some fly paper.
I was just had the doors open too much
I was just had the doors open too much
with all the uh setup around here.
Ident. Did I mess something obvious up
Ident. Did I mess something obvious up
in
in
here? Values. Let me see if I got the
here? Values. Let me see if I got the
syntax right.
Let me do one thing real quick.
minus two obnoxious flying insects.
apparently there are a few more still.
Okay.
Okay.
So, here is the mutated operators thing.
Wait, we must
Wait, we must
specify that mutates the out
tensor. Huh?
Oh, it's literally like just give it
Oh, it's literally like just give it
some
random Okay, so I misunderstood how this
random Okay, so I misunderstood how this
works. That's
bizarre.
Actually, let's see if this
even was probably not smart enough to
even was probably not smart enough to
know. We'll
see. We're going to try this.
see. We're going to try this.
There's a mutate
thing is it was the other order,
thing is it was the other order,
right? Tensor of
a very weird syntax.
Okay, so it still doesn't recognize this
Okay, so it still doesn't recognize this
thing even though it's definitely
thing even though it's definitely
building it now. Building it with the
building it now. Building it with the
correct back end as well.
Thought that would fix
it
flies. Hang
on. Not one.
I just like clone this repo real
I just like clone this repo real
quick and
quick and
see. Wait, why does it have vector in
see. Wait, why does it have vector in
here? There's no way this matters,
here? There's no way this matters,
right? They actually use this
This is in the C uh CPP
What else I miss?
extension go to h runtime. I have all
this and I
this and I
have
colonel. Got
this. And you got your
this. And you got your
imple
advantage. So I've kind of gotten
advantage. So I've kind of gotten
everything I think out of
here. Gotten pretty much out of
here. Gotten pretty much out of
everything out of here.
extension CP.
Yeah. Oh my gosh.
Why did it even like define it? I guess
Why did it even like define it? I guess
cuz I defined the extension. But yeah.
cuz I defined the extension. But yeah.
Okay. Well, that's actually on me.
Okay. Well, that's actually on me.
That's actually my screw
up. Let's see if it works now.
Boom.
Boom.
Okay, there is the
Okay, there is the
running
running
thing. Still a ton of work to do with
thing. Still a ton of work to do with
the
packaging. I'm committing this though.
So there is one very nice upside to
So there is one very nice upside to
doing all this. Um we also kill the pi
doing all this. Um we also kill the pi
bind
bind
dependency. So we have no pi bind now in
dependency. So we have no pi bind now in
puffer lib since it's just a
puffer lib since it's just a
capi. Uh so once I clean the cuda code
capi. Uh so once I clean the cuda code
up it'll actually be probably a lot
up it'll actually be probably a lot
nicer
nicer
now. But that was a pain. That was a
now. But that was a pain. That was a
total pain. Okay.
total pain. Okay.
Um, I got another hour and a halfish,
Um, I got another hour and a halfish,
hour
hour
45. I'm going to take a couple minutes,
45. I'm going to take a couple minutes,
use the restroom, wake up a little, and
use the restroom, wake up a little, and
then I think we're just going to like,
then I think we're just going to like,
we've done enough packaging today. I'm
we've done enough packaging today. I'm
going to keep going on clean puffer.
going to keep going on clean puffer.
We're going to keep finding more things
We're going to keep finding more things
to clean up.
to clean up.
Um, yeah, we're going to find more
Um, yeah, we're going to find more
things to clean up. That gets rid of the
things to clean up. That gets rid of the
weird CUDA loading in here though at the
weird CUDA loading in here though at the
least. Most of the things that we have
least. Most of the things that we have
to fix should not be that hard. Not
to fix should not be that hard. Not
anywhere near that. So, I'll be back in
anywhere near that. So, I'll be back in
a few
All
right.
Well,
Well,
um, we're like 60
um, we're like 60
lines into this file for optimization.
[Music]
[Music]
Uh, that last one took a whole bunch of
Uh, that last one took a whole bunch of
hours.
There's probably a lot of stuff we could
There's probably a lot of stuff we could
do in here.
What?
What?
Wait, is this a
thing? There's no way this is a thing,
thing? There's no way this is a thing,
right?
2.4
stable. Same. Okay. Well, there's some
stable. Same. Okay. Well, there's some
stuff to mess with in the uh
stuff to mess with in the uh
flags, would
think. We'll see if there are any other
think. We'll see if there are any other
magic
flags. Where's KudnN.benchmark?
flags. Where's KudnN.benchmark?
Benchmark.
So this is like way faster potentially.
Okay. So, we get like 400
something
450. And then with this enabled
Not really seeing any
Not really seeing any
improvement. Interestingly enough,
We'll look for more optins at some
We'll look for more optins at some
point. For now, let's go back to this.
point. For now, let's go back to this.
So, next thing on this list here is
um let's reset seed
um let's reset seed
here. Let's do this.
I think this was the line,
right? That probably already has it
enabled. Oops.
sensor float
sensor float
32 medium.
Okay, so there might actually be
Okay, so there might actually be
something here.
So, we'll do a couple quick things on
So, we'll do a couple quick things on
this and then we'll look at the
losses. That's why we weren't seeing a
losses. That's why we weren't seeing a
performance difference with that other
performance difference with that other
flag.
Cool.
Got an
Got an
[Music]
invite. Okay. So, this is slower here,
invite. Okay. So, this is slower here,
right? Whatever this default is is
right? Whatever this default is is
slower.
a little
bit. I do medium.
40. So there is a difference, but it's
40. So there is a difference, but it's
really not a huge difference.
Interesting. Oh, this could be why am
Interesting. Oh, this could be why am
working though, cuz I had this
working though, cuz I had this
set. It's worth checking.
Okay, let's go to the losses thing
Okay, let's go to the losses thing
next. So, I wanted to see if there's a
next. So, I wanted to see if there's a
better way of doing
this. So, I have it like this so that I
this. So, I have it like this so that I
can iterate over them, I
can iterate over them, I
guess. Here and here.
They don't need to
They don't need to
be uh accumulated really do
I don't think they need to be here.
Well, it's not really any worse that
Well, it's not really any worse that
they are they are here though, is it?
It's cuz the print Well, actually, no,
It's cuz the print Well, actually, no,
they do need to be here. So, they show
they do need to be here. So, they show
up on the dashboard initially. I
guess there anything better I could
could be default dicted.
I don't know how well Python handles
I don't know how well Python handles
string keys internally and
dicks. I don't actually know if it's
dicks. I don't actually know if it's
slow or
slow or
not. You would hope it would do
not. You would hope it would do
something for static string keys,
something for static string keys,
but I mean, you never know.
That's
something and We get utilization as
well. Then we get Ven.
OB shape.
Okay. So,
Okay. So,
uh we can
uh we can
potentially inline some more stuff here.
this config this config that is
this config this config that is
like million times config here.
We could call this segment
length. I think for now we can just
length. I think for now we can just
alias a few things.
Also, this can go
here above this
stuff. Really, this stuff shouldn't
stuff. Really, this stuff shouldn't
matter too much, but uh we'll leave it
matter too much, but uh we'll leave it
like that.
OB's device
uh does not get
used in memory is pinned.
experience
experience
rows on policy rows and off policy
rows. We will punt for now because we
rows. We will punt for now because we
have not
have not
seen any case where off policy rows have
seen any case where off policy rows have
helped but we do want to go there next
helped but we do want to go there next
potentially.
And these should be segments.
Roll out episode segment
trace replay
buffers snippet sample.
I think tra length is
I think tra length is
good or segment length
So this should now be
So this should now be
segments and then this is
Culine. Horizon's good.
Okay, that's a little nicer.
These things need to get
Okay.
So, Horizon
device. I think this is going to go
device. I think this is going to go
print. This is going to go like
print. This is going to go like
somewhere here.
The stuff I'm doing at the moment is
The stuff I'm doing at the moment is
like very very basic, but I honestly I
like very very basic, but I honestly I
think that this makes a huge difference.
think that this makes a huge difference.
And like often times the difference
And like often times the difference
between a good library and a bad library
between a good library and a bad library
is just like how often have you actually
is just like how often have you actually
gone through it and like does this make
gone through it and like does this make
sense? Is this as good as it could be?
sense? Is this as good as it could be?
Is this simple? Can I make it easier?
Is this simple? Can I make it easier?
Can I make it shorter?
just
just
chill. Okay, it gives you your segment
chill. Okay, it gives you your segment
parameters.
Batch size.
I still use
this. Yeah, I still need this, right?
Is there an easier way of saying this?
And then this shouldn't be an assert.
Something like Yes.
I'm pretty much just like trying to make
I'm pretty much just like trying to make
stuff shorter where possible, make names
stuff shorter where possible, make names
better where possible, and like better
better where possible, and like better
semantically group stuff where
semantically group stuff where
possible. That's all I'm doing.
But like imagine I do this to the whole
But like imagine I do this to the whole
file. I cut a couple hundred lines out.
file. I cut a couple hundred lines out.
I make a lot of lines shorter. I make a
I make a lot of lines shorter. I make a
lot of stuff make more sense. That's
lot of stuff make more sense. That's
like a substantially better library
like a substantially better library
right there. Right. Just by doing this.
An idea I really like is um white box
An idea I really like is um white box
software. The idea that instead of me
software. The idea that instead of me
trying to
trying to
focus really heavily on like giving you
focus really heavily on like giving you
an API boundary where it's like you know
an API boundary where it's like you know
you just read the docs, you just read
you just read the docs, you just read
the API whatever I focus on giving you
the API whatever I focus on giving you
like a really really concise simple easy
like a really really concise simple easy
to read easy to modify code. So that
to read easy to modify code. So that
instead of having like a 20,000line
instead of having like a 20,000line
library that does most of what you want
library that does most of what you want
most of the time, but you're screwed
most of the time, but you're screwed
whenever you need to do something that's
whenever you need to do something that's
like outside of the design spec. I give
like outside of the design spec. I give
you one or 2,000 lines uh that does all
you one or 2,000 lines uh that does all
of that, but is also like way way easier
of that, but is also like way way easier
to modify.
to modify.
The trade-off is you're not going to
The trade-off is you're not going to
have all the options, you know, upfront
have all the options, you know, upfront
of the 20,000 line API, but when you go
of the 20,000 line API, but when you go
outside of one of those options as it's
outside of one of those options as it's
intended, it's a lot easier to hack on
intended, it's a lot easier to hack on
this and a lot easier to understand
this and a lot easier to understand
exact
exact
exactly what is going on.
line's too long, right? Where am I
line's too long, right? Where am I
cutting
cutting
these? Is like around
hereish. And I should probably cut at
hereish. And I should probably cut at
least around like try to keep most of it
least around like try to keep most of it
around here.
What I should probably do is just
like Hang on a
second. That looks very different.
If I do like
that. Yeah. I doubt people have like you
that. Yeah. I doubt people have like you
have this much screen space, right? I'll
have this much screen space, right? I'll
check it on my laptop as well.
Why Abuntu over any other
Why Abuntu over any other
OS? Well, I've used Arch for like 5
OS? Well, I've used Arch for like 5
years. It's great until it explodes. Uh
years. It's great until it explodes. Uh
I ran Debian on a bunch of servers,
I ran Debian on a bunch of servers,
which is fine until you realize that
which is fine until you realize that
Debian doesn't have any of the drivers
Debian doesn't have any of the drivers
that you need. So, your stable OS needs
that you need. So, your stable OS needs
to use all the experimental packages
to use all the experimental packages
anyways. Um I've used both Mac and
anyways. Um I've used both Mac and
Windows, which are just trolling for
Windows, which are just trolling for
development straight up.
development straight up.
Uh, what else have I
Uh, what else have I
used? I think that's most of it. So, you
used? I think that's most of it. So, you
know, I probably missed a few in there,
know, I probably missed a few in there,
but I've kind of covered most of the
but I've kind of covered most of the
bases with that.
Does this need to be
defined? Probably doesn't.
Okay, so this is already looking much
Okay, so this is already looking much
cleaner. And then assuming that this
cleaner. And then assuming that this
either gets kept or removed, one of the
either gets kept or removed, one of the
two.
That's pretty clean.
And I I like one of these things need to
And I I like one of these things need to
be assigned. I always don't know like do
be assigned. I always don't know like do
you do
this do this or is this
this do this or is this
disgusting, right? Like I can never make
disgusting, right? Like I can never make
up my
mind. I think that's kind of gross,
mind. I think that's kind of gross,
right?
This is where it should go
logically. I've also never been able to
logically. I've also never been able to
make up my mind on stuff like
make up my mind on stuff like
this. Like that looks too cramped to me.
this. Like that looks too cramped to me.
But then like you almost want to have a
But then like you almost want to have a
double space between sections which is
double space between sections which is
too
much. These are smaller things though.
I think we just get to
I think we just get to
do to do this now, right? We just get to
do to do this now, right? We just get to
keep this
keep this
one like a bunch of
slices and then it's like a
slices and then it's like a
multibuffered
thing. And slices are not hashable
thing. And slices are not hashable
though.
So as of Python 312 slices are hashable.
Cool. Anything else I can do with this?
I think what we do is for now we
just do this.
Can you not do this on a
Can you not do this on a
device? You
can. Welcome, Dragon Bone.
We've gotten quite the upgrade in our
We've gotten quite the upgrade in our
setup here, and I should be back for the
setup here, and I should be back for the
next several weeks with nothing to do
next several weeks with nothing to do
but
build, train agents, and train myself,
So they do make torch zeros work like
So they do make torch zeros work like
this now. I swear that used to not work,
this now. I swear that used to not work,
right?
assert total agents greater than
assert total agents greater than
zero. Probably do that anyways.
Yeah. So, the cool thing here,
um, I have capacity now for 40
um, I have capacity now for 40
servers. You can just see it over the
servers. You can just see it over the
box
box
thereish. Is that still on the camera?
thereish. Is that still on the camera?
Yeah, you can. It's just poking up over
Yeah, you can. It's just poking up over
the box. I have one
the box. I have one
server. I need to buy 39 more as soon as
server. I need to buy 39 more as soon as
the tariffs go
the tariffs go
down, but the tariffs are like plus 40%
down, but the tariffs are like plus 40%
right now. So, I'm waiting for that. And
right now. So, I'm waiting for that. And
then uh other than
then uh other than
that, bunch of gym equipment going in
that, bunch of gym equipment going in
there. Gym equipment. It turns out
there. Gym equipment. It turns out
commercial gym equipment is much cheaper
commercial gym equipment is much cheaper
than servers. So, uh may as well treat
than servers. So, uh may as well treat
myself a little
there. especially if you get like
there. especially if you get like
secondhand commercial stuff.
secondhand commercial stuff.
So yeah, buffer training facility.
So yeah, buffer training facility.
Training for agents. Training for Okay.
I think this is going to get shorter
I think this is going to get shorter
when I fix the slicing stuff. So, I will
when I fix the slicing stuff. So, I will
uh I'll just leave it like long for
uh I'll just leave it like long for
now. Mini batch size.
max mini batch
Guys, I guess you have to do
Guys, I guess you have to do
this. So, this is going to be for
this. So, this is going to be for
gradient accumulation, right?
Wait, what?
awkward little lines like segment here.
Yeah, you need this to Save.
I guess if you do
I guess if you do
this, not as bad, but like then you want
this, not as bad, but like then you want
like this. So much space.
Put this down to here.
and then
and then
dashboard. I like losses
here. It's down
here. It's down
[Music]
here. All right. So, we are
here. All right. So, we are
now That's a lot
now That's a lot
cleaner. It's a lot a lot cleaner. Still
cleaner. It's a lot a lot cleaner. Still
not finished yet. Even just the init
not finished yet. Even just the init
still not finished yet.
I've got uh roughly 40 minutes here
I've got uh roughly 40 minutes here
until dinner.
I guess they're like it annoys me that
I guess they're like it annoys me that
there's still like all these little
there's still like all these little
sections that don't cleanly go with one
sections that don't cleanly go with one
thing or another.
So all these self variables can go
So all these self variables can go
wherever
technically. What if we just did at the
end? We could also do something like
end? We could also do something like
this.
I think they're only needed by this
I think they're only needed by this
dashboard
here. And so now you get to
here. And so now you get to
see this gets set. This gets set.
back end.
I mean this should go in Vean honestly,
I mean this should go in Vean honestly,
right?
I could put it in puffer m
Yeah, there's no reason to have this
Yeah, there's no reason to have this
here.
Okay. So now we have batch size
horizon total
agents
device. I mean this whole thing is a
device. I mean this whole thing is a
block right? This whole thing is the
block right? This whole thing is the
experience setup.
I mean the other option is like we do
I mean the other option is like we do
this All
right. Not bad.
Okay, not bad.
So, the experience section is long, but
So, the experience section is long, but
it's going to get way shorter.
optimizer as well.
We might even just make this thing not
We might even just make this thing not
configurable because Muan's just better.
logging profiling initialization
logging profiling initialization
dashboard. Okay, this is like this is
dashboard. Okay, this is like this is
reasonable. This is like a good start,
reasonable. This is like a good start,
I'd
I'd
say. Let's see if we can get this to
say. Let's see if we can get this to
actually run.
that for now.
Good. That runs.
a lot of
a lot of
code, but I think if a good chunk of
code, but I think if a good chunk of
this goes away from features we don't
this goes away from features we don't
really care to
really care to
support, it'll be reasonable when people
support, it'll be reasonable when people
open Huh?
I would like a better way to check this
I would like a better way to check this
than doing an is
than doing an is
instance every time. I'm just trying to
instance every time. I'm just trying to
like do some things for now.
So we are always doing slicing now.
Do you use end by anywhere in
Do you use end by anywhere in
here? Actually, I think you
do.
Petros, you don't use it anywhere.
We should put this in vectorzation if
We should put this in vectorzation if
we're going to do it this way.
You have this done mask
needs to be
handled as
handled as
tensor. Your non-blocking transfers
Okay.
Okay.
Shorter. Still
Shorter. Still
runs. Still runs
nicely. This unroll nested dict.
Oh, we're not quite there yet. Right.
device.
Okay, so now we get to the logging
Okay, so now we get to the logging
stuff.
Get rid of this for
Get rid of this for
now. We'll add it back better when we
now. We'll add it back better when we
need
it. Instance
I'm a somewhat confused here
I'm a somewhat confused here
because we've appended every single
because we've appended every single
item in a dictionary.
There's two list here.
I mean, this is just poip trying really
I mean, this is just poip trying really
hard to log whatever your crazy data
hard to log whatever your crazy data
This
So,
um, you shouldn't be able to have any
um, you shouldn't be able to have any
dictionaries left in here
dictionaries left in here
essentially, unless you did some
essentially, unless you did some
weird weird weird stuff.
I like that this handles next to
I like that this handles next to
dictionary infos. That's a common use
dictionary infos. That's a common use
case even though I no longer use it for
case even though I no longer use it for
native ms.
Is there any reason I can't just
Is there any reason I can't just
um do the aggregation right
um do the aggregation right
here? I can,
right? Because this is now I can just do
right? Because this is now I can just do
this, right?
Then we no longer need
inpos. Don't need any of this.
If we do this for now.
You don't use infos
here. Yeah, you don't use it at
here. Yeah, you don't use it at
all. Perfect.
Now, what about this little block here?
Okay. So this cannot be
This cannot be a dictionary.
something like that.
It's fine for neural MMO.
And these f lengths
fuses need to be reviewed as part of
sample. Total mini batches.
Okay, that's radian
accumulation and samples.
Mini batch size over horizon.
decent.
I kind of like the idea of
Bomb. Oh, because you reset these
Bomb. Oh, because you reset these
every Okay, we'll leave that as is for
every Okay, we'll leave that as is for
now.
basically every little thing in here
basically every little thing in here
that possibly be weird or confusing I
that possibly be weird or confusing I
want out.
Oops.
Oops.
Yeah. Okay. Be right
Yeah. Okay. Be right
there. Thank
there. Thank
you. Uh, okay. That's it for today. Lost
you. Uh, okay. That's it for today. Lost
track of time, guys. I am uh I will be
track of time, guys. I am uh I will be
back either right after dinner for a
back either right after dinner for a
shorter stream or if not, then tomorrow.
shorter stream or if not, then tomorrow.
So, thanks for tuning in.
So, thanks for tuning in.
Um, if you are interested in getting
Um, if you are interested in getting
involved with the
involved with the
project, join the Discord here,
project, join the Discord here,
discord.gg/puffer. If you want to help
discord.gg/puffer. If you want to help
us out for free, start the repo. And
us out for free, start the repo. And
other than that, you can follow me on X
other than that, you can follow me on X
for more RL content. Thanks and I will
for more RL content. Thanks and I will
be back
